(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Rf5Z:function(t,n,e){"use strict";e.r(n);var r=e("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,e,r){return r.fromPipe||r.restParams},man:{handler:function(t,n,e,i){var u=i.restParams;if(!n)return!1;if(!u)return Object(r.c)(n.man.doc);if(u&&n[u.trim()]){var c=n[u.trim()];return"object"===o(c)&&Object(r.c)(c.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var e;return"Available commands: \n"+Object.keys(n).sort().map((e="- ",function(t){return e+t})).join("\n")}},u="\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n",c=(Symbol(),Symbol(),function(t,n){n||(n={});var e={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(e.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?e.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach((function(t){e.bools[t]=!0}));var r={};Object.keys(n.alias||{}).forEach((function(t){r[t]=[].concat(n.alias[t]),r[t].forEach((function(n){r[n]=[t].concat(r[t].filter((function(t){return n!==t})))}))})),[].concat(n.string).filter(Boolean).forEach((function(t){e.strings[t]=!0,r[t]&&(e.strings[r[t]]=!0)}));var o=n.default||{},i={_:[]};Object.keys(e.bools).forEach((function(t){c(t,void 0!==o[t]&&o[t])}));var u=[];function c(t,n,o){if(!o||!e.unknownFn||function(t,n){return e.allBools&&/^--[^=]+$/.test(n)||e.strings[t]||e.bools[t]||r[t]}(t,o)||!1!==e.unknownFn(o)){var u=!e.strings[t]&&s(n)?Number(n):n;a(i,t.split("."),u),(r[t]||[]).forEach((function(t){a(i,t.split("."),u)}))}}function a(t,n,r){var o=t;n.slice(0,-1).forEach((function(t){void 0===o[t]&&(o[t]={}),o=o[t]}));var i=n[n.length-1];void 0===o[i]||e.bools[i]||"boolean"==typeof o[i]?o[i]=r:Array.isArray(o[i])?o[i].push(r):o[i]=[o[i],r]}function f(t){return r[t].some((function(t){return e.bools[t]}))}-1!==t.indexOf("--")&&(u=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var l=0;l<t.length;l++){var p=t[l];if(/^--.+=/.test(p)){var d=p.match(/^--([^=]+)=([\s\S]*)$/),h=d[1],b=d[2];e.bools[h]&&(b="false"!==b),c(h,b,p)}else if(/^--no-.+/.test(p)){c(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var v=p.match(/^--(.+)/)[1],y=t[l+1];void 0===y||/^-/.test(y)||e.bools[v]||e.allBools||r[v]&&f(v)?/^(true|false)$/.test(y)?(c(v,"true"===y,p),l++):c(v,!e.strings[v]||"",p):(c(v,y,p),l++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),g=!1,w=0;w<m.length;w++){var O=p.slice(w+2);if("-"!==O){if(/[A-Za-z]/.test(m[w])&&/=/.test(O)){c(m[w],O.split("=")[1],p),g=!0;break}if(/[A-Za-z]/.test(m[w])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(O)){c(m[w],O,p),g=!0;break}if(m[w+1]&&m[w+1].match(/\W/)){c(m[w],p.slice(w+2),p),g=!0;break}c(m[w],!e.strings[m[w]]||"",p)}else c(m[w],O,p)}var j=p.slice(-1)[0];g||"-"===j||(!t[l+1]||/^(-|--)[^-]/.test(t[l+1])||e.bools[j]||r[j]&&f(j)?t[l+1]&&/true|false/.test(t[l+1])?(c(j,"true"===t[l+1],p),l++):c(j,!e.strings[j]||"",p):(c(j,t[l+1],p),l++))}else if(e.unknownFn&&!1===e.unknownFn(p)||i._.push(e.strings._||!s(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(l+1));break}}return Object.keys(o).forEach((function(t){var n,e,u;n=i,e=t.split("."),u=n,e.slice(0,-1).forEach((function(t){u=u[t]||{}})),e[e.length-1]in u||(a(i,t.split("."),o[t]),(r[t]||[]).forEach((function(n){a(i,n.split("."),o[t])})))})),n["--"]?(i["--"]=new Array,u.forEach((function(t){i["--"].push(t)}))):u.forEach((function(t){i._.push(t)})),i});function s(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var a=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var e=n.trim().split(/\s+/),r=e[0];if(!r)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(r,"").trim();if(!o.includes(r))return{restParams:i,userInput:n,errorInfo:"".concat(r," 不是合法命令")};var u=t[r],s=e.slice(1),a={};try{a=c(s)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:a}};return function(t){if(t.includes("|")){var e=t.split("|");return e.length<2?n(e[0]):{isMultiResult:!0,userInput:t,parsedResults:e.map((function(t){return n(t.trim())}))}}return n(t)}},f=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],l={a:"a",enter:"Enter"},p='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',d="12px",h=function(t){var n=t.cursorColor,e=void 0===n?"#000":n,r=t.blinkSpeed,o=void 0===r?"1s":r;return"\n        @keyframes blink {\n          from {\n             background: ".concat(e,";\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: ").concat(o,";\n          animation-name: blink;\n          animation-iteration-count: infinite\n        }\n    ")},b=e("K9Ia");function v(t){return t&&"function"==typeof t.schedule}var y=e("6blF"),m=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}},g=e("pugT");function w(t,n){return new y.a((function(e){var r=new g.a,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}function O(t,n){return n?w(t,n):new y.a(m(t))}var j=e("mrSG"),x=e("FFOo"),S=function(t){function n(n,e,r){var o=t.call(this)||this;return o.parent=n,o.outerValue=e,o.outerIndex=r,o.index=0,o}return j.__extends(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(x.a),k=e("DKTb");function _(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var I=_(),P=e("xTla"),E=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function A(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var R=e("McSo"),N=function(t){if(t&&"function"==typeof t[P.a])return r=t,function(t){var n=r[P.a]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(E(t))return m(t);if(A(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,k.a),t};if(t&&"function"==typeof t[I])return n=t,function(t){for(var e=n[I]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,r,o=Object(R.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function T(t,n,e,r,o){if(void 0===o&&(o=new S(t,e,r)),!o.closed)return n instanceof y.a?n.subscribe(o):N(n)(o)}var $=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return j.__extends(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(x.a),C=e("67Y/");function F(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[P.a]}(t))return function(t,n){return new y.a((function(e){var r=new g.a;return r.add(n.schedule((function(){var o=t[P.a]();r.add(o.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(A(t))return function(t,n){return new y.a((function(e){var r=new g.a;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(E(t))return w(t,n);if(function(t){return t&&"function"==typeof t[I]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new y.a((function(e){var r,o=new g.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[I](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var o=r.next();t=o.value,n=o.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function D(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(D((function(e,r){return(o=t(e,r),i?F(o,i):o instanceof y.a?o:new y.a(N(o))).pipe(Object(C.a)((function(t,o){return n(e,t,r,o)})));var o,i}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new M(t,e))})}var M=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new Y(t,this.project,this.concurrent))},t}(),Y=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return j.__extends(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new S(this,void 0,void 0);this.destination.add(r),T(this,t,n,e,r)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,o){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}($);function L(t){return t}function V(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return v(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof o&&(e=t.pop()),null===r&&1===t.length&&t[0]instanceof y.a?t[0]:function(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),D(L,t)}(e)(O(t,r))}function z(t,n,e,r,o,i,u){try{var c=t[i](u),s=c.value}catch(t){return void e(t)}c.done?n(s):Promise.resolve(s).then(r,o)}var B=new b.a,H=function(t){return function(n){B.next({input:t,output:n})}},q=function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal,i=n.userInput;B.next({input:i,loading:!0,output:""}),Object(r.u)(n.parsedResults.map((function(t){return function(){var n,r=(n=regeneratorRuntime.mark((function n(r){var i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=r,n.abrupt("return",i(t.paramsObj,e,o,t));case 5:case"end":return n.stop()}}),n)})),function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function u(t){z(i,r,o,u,c,"next",t)}function c(t){z(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return r.apply(this,arguments)}}()}))).then((function(t){B.next({output:t,input:i})})).catch(H(i))},J={in:function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal;if(n)if(n.isMultiResult)q({parsedResult:n,cmdSet:e,$terminal:o});else{var i=n.userInput;if(n.errorInfo)B.next({input:i,output:n.errorInfo});else{var u=n.command.handler||n.command,c="";try{c=u(n.paramsObj,e,o,n,function(t){return function(n,e){B.next({loading:!0,print:!0,input:t,output:e?Object(r.t)()+" "+n:n})}}(i))}catch(t){return void H(i)(t)}"string"!=typeof c?(B.next({input:i,loading:!0,output:""}),Promise.resolve(c).then((function(t){B.next({output:t,input:i})})).catch(H(i))):B.next({input:i,output:c})}}else B.next(null)},out$:B};function Z(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new K(t,n,e))}}var K=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new G(t,this.accumulator,this.seed,this.hasSeed))},t}(),G=function(t){function n(n,e,r,o){var i=t.call(this,n)||this;return i.accumulator=e,i._seed=r,i.hasSeed=o,i.index=0,i}return j.__extends(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(x.a);function U(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new W(r,e))}}var W=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new Q(t,this.observables,this.project))},t}(),Q=function(t){function n(n,e,r){var o=t.call(this,n)||this;o.observables=e,o.project=r,o.toRespond=[];var i=e.length;o.values=new Array(i);for(var u=0;u<i;u++)o.toRespond.push(u);for(u=0;u<i;u++){var c=e[u];o.add(T(o,c,c,u))}return o}return j.__extends(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.values[e]=n;var i=this.toRespond;if(i.length>0){var u=i.indexOf(e);-1!==u&&i.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}($);function X(t,n){return function(e){return e.lift(new tt(t,n))}}var tt=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.predicate,this.thisArg))},t}(),nt=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.count=0,o}return j.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(x.a),et=e("bne5"),rt=e("8g8A"),ot=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return j.__extends(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new rt.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(b.a),it=e("isby"),ut={};function ct(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return v(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(it.a)(t[0])&&(t=t[0]),O(t,r).lift(new st(e))}var st=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new at(t,this.resultSelector))},t}(),at=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return j.__extends(n,t),n.prototype._next=function(t){this.values.push(ut),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(T(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,o){var i=this.values,u=i[e],c=this.toRespond?u===ut?--this.toRespond:this.toRespond:0;i[e]=n,0===c&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}($);function ft(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(C.a)(function(t,n){return function(e){for(var r=e,o=0;o<n;o++){var i=r[t[o]];if(void 0===i)return;r=i}return r}}(t,e))(n)}}var lt=e("ad02"),pt=function(){var t=document.createElement("input");return t.style.height="20px",t.style.position="fixed",t.style.zIndex="-1",t.style.outline="none",t.style.border="none",t.style.top="0",t.style.left="0",t.style.opacity="0",screen.width<500&&(t.style.transform="scale(0)"),t.style.color="transparent",t.setAttribute("autocomplete","off"),t.onblur=function(){setTimeout((function(){t.focus()}))},t},dt=function(t,n){var e=t.getBoundingClientRect(),r=e.left,o=e.top;n.style.left="".concat(r,"px"),n.style.top="".concat(o,"px")},ht=function(t,n){return dt(t,n),function(e){dt(t,n);var r=e.start!==e.end,o=""===e.inputStr,i=e.inputStr.split("").map((function(t){return" "===t?"&nbsp;":t}));r&&!o||i.push("&nbsp;"),t.innerHTML=i.map((function(t,n){return function(t){for(var n=arguments.length,e=new Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return'<span class="'.concat(e.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":r&&i>=e.start&&i<=e.end?"highlight":i===e.start?"blink":""));var i})).join("")}},bt=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(r.n)(h(e)),t.style.fontFamily=p,t.style.fontSize=d,t.style.wordBreak="break-all",ht(t,n)({inputStr:"",start:0,end:0})};function vt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function yt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?vt(e,!0).forEach((function(n){mt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):vt(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function mt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function gt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var wt=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"Input wrapper element missing.";var e=pt();document.body.appendChild(e),e.focus(),bt(t,e,n);var o=Object(et.a)(e,"input"),i=Object(et.a)(e,"select"),u=Object(et.a)(e,"keyup"),c=new ot("");o.pipe(ft("target","value")).subscribe((function(t){return c.next(t)}));var s=u.pipe(X((function(t){return f.includes(t.key)}))),a=u.pipe(X((function(t){return t.key===l.enter})),X((function(t){return!t.target.disabled})),U(c),Object(C.a)((function(t){var n=gt(t,2);n[0];return n[1]})),X((function(t){return!!t}))),p=V(o,s,i),d=p.pipe(Object(C.a)((function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}}))),h=ct(c,d).pipe(Object(C.a)((function(t){var n=gt(t,2);return yt({inputStr:n[0]},n[1])})),Object(lt.a)((function(t,n){return JSON.stringify(t)===JSON.stringify(n)}))),b=ht(t,e);return h.subscribe(b),{enter$:a,input$:o,get target(){return e},set value(n){e.value=n,c.next(n),""===n&&dt(t,e),Object(r.C)(e,f[0])},set disabled(n){var r=t.querySelector(".blink");n?(e.setAttribute("disabled",!0),r.classList.add("disabled")):(r.classList.remove("disabled"),e.removeAttribute("disabled"),e.focus())}}};function Ot(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function jt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function xt(t){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var St=Object(r.r)(),kt=function(t){var n=document.querySelector("#hist-sess"),e=document.querySelector("#curr-sess"),o=(document.querySelector("#curr-sess .input .prompt"),Object(r.k)(t)),i=o&&o.loading,u=function(n,e){var r=t[n-1];return r&&r.print&&r.input===e.input},c=i?'<span class="blink">&nbsp;</span>':"";t.length<1?n.innerHTML="":(n.innerHTML=t.map((function(t,n){return function(t){var n,e,r=t.input,o=t.output,i=t.shouldHideInput,u=t.print;if("string"==typeof o)n=o;else if("object"===xt(o))try{n=o.html||JSON.stringify(o),o.html&&(e=!0)}catch(t){e=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var c=o.message,s=o.stack;n="".concat(c,"\n\n").concat(s)}var a=e?n:'<pre style="'.concat(u?"margin: 0":"",'">').concat(n||"","</pre>"),f='\n      <div class="input">\n          <span class="prompt">$</span>\n          <span class="cmd">\n            '.concat(r||"","\n          </span>\n      </div>\n    ");return'<div class="session">\n            '.concat(i?"":f,'\n            <div class="output">\n                ').concat(a,"\n            </div>\n        </div>")}(function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?Ot(e,!0).forEach((function(n){jt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):Ot(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({},t,{shouldHideInput:u(n,t)}))})).join("")+c,i?e.style.display="none":(St(!1),e.style.display="block"))},_t=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(r.n)(u),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var e=t.firstElementChild,o=document.querySelector("#input"),i=wt(o,n),c=14;return e.style.height="calc(100% - 10px)",e.style.overflow="auto",e.style.fontFamily=p,e.style.background=n.background||"unset",e.style.color=n.color||"#000",e.style.fontSize=d,e.addEventListener("click",(function(t){var n=i.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<c)&&i.target.focus()}),{capture:!1}),{$terminal:e,input:i}};function It(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Pt=[],Et=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return Pt=[].concat(It(Pt),It(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(It(Pt),It(t)),i=o.map((function(t,n){return Object(r.e)(" ")(n+1,o.length+1)+". "+t.input})).join("\n");return t.push({input:e,output:i}),t;default:return t}};function At(t,n,e,r,o,i,u){try{var c=t[i](u),s=c.value}catch(t){return void e(t)}c.done?n(s):Promise.resolve(s).then(r,o)}function Rt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Nt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Tt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?Nt(e,!0).forEach((function(n){$t(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):Nt(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function $t(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function Ct(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"wrapper element not found";var e=_t(t,n),o=e.$terminal,u=e.input,c=new b.a,s=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return v(e)?(t.pop(),w(t,e)):O(t)}(i),f=V(c,s).pipe(Z((function(t,n){return Tt({},n,{},t)}),{}),Object(C.a)((function(t){return Tt({},t,{},i)}))),p=u.enter$.pipe(U(f),Object(C.a)((function(t){var n=Rt(t,2),e=n[0],r=n[1];return{parsedResult:a(r)(e),cmdSet:r,$terminal:o}})),Object(C.a)(J.in)).subscribe((function(){u.target.blur()})),d=J.out$.pipe(X((function(t){return t})),Z((function(t,n){var e=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var e=i[t].handler||i[t];try{return n=""===e()}catch(t){return!1}}(e))return Et(t&&t.slice(),e,n.input);var r=t.slice().pop();return r&&r.loading&&!r.print&&t.pop(),t.push(n),t}),[])).subscribe((function(t){var n=Object(r.k)(t);kt(t),Object(r.x)(o),u.disabled=n&&n.loading,u.value=""}));u.input$.subscribe((function(){Object(r.x)(o)}));var h=function(){var t,n=(t=regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(r.x)(o),t.next=3,Object(r.m)(n,(function(t){return u.value=t}),50);case 3:return t.abrupt("return",new Promise((function(t,e){J.out$.pipe(X((function(t){return t})),X((function(t){return!0!==t.loading}))).subscribe((function(e){e.input===n&&t()})),Object(r.C)(u.target,l.enter)})));case 4:case"end":return t.stop()}}),t)})),function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function u(t){At(i,r,o,u,c,"next",t)}function c(t){At(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){u.disabled=t},set commands(t){c.next(t)},set currentInput(t){u.value=t},destroy:function(){d.unsubscribe(),p.unsubscribe(),o.remove(),u.target.remove()},addCommands:function(t){c.next(t)},input:function(t,n){if(n)return Object(r.m)(t,(function(t){u.value=t}));u.value=t},humanizerExec:h,humanizerExecCmdArr:function(t){var n=t.map((function(t){return function(){return h(t)}}));return Object(r.u)(n)},exec:function(t){u.value=t,Object(r.C)(u.target,l.enter)}}}e.d(n,"default",(function(){return Ct}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,