(this.webpackJsonp=this.webpackJsonp||[]).push([[3],{"+9/e":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){var n=Array.prototype.slice.call(arguments,1);if(0===n.length)return function(){return t.apply(this,[e].concat(Array.prototype.slice.call(arguments,0)))};return!e.apply(this,n)}},"+eFp":function(t,e,n){"use strict";e.__esModule=!0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=c(n("q1tI")),o=c(n("17x9")),s=c(n("UnXY")),u=c(n("zB99")),a=n("xfxO");function c(t){return t&&t.__esModule?t:{default:t}}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}a.nameShape.isRequired,o.default.bool,o.default.bool,o.default.bool,(0,a.transitionTimeout)("Appear"),(0,a.transitionTimeout)("Enter"),(0,a.transitionTimeout)("Leave");var f=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var o=arguments.length,s=Array(o),a=0;a<o;a++)s[a]=arguments[a];return n=r=l(this,t.call.apply(t,[this].concat(s))),r._wrapChild=function(t){return i.default.createElement(u.default,{name:r.props.transitionName,appear:r.props.transitionAppear,enter:r.props.transitionEnter,leave:r.props.transitionLeave,appearTimeout:r.props.transitionAppearTimeout,enterTimeout:r.props.transitionEnterTimeout,leaveTimeout:r.props.transitionLeaveTimeout},t)},l(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.render=function(){return i.default.createElement(s.default,r({},this.props,{childFactory:this._wrapChild}))},e}(i.default.Component);f.displayName="CSSTransitionGroup",f.propTypes={},f.defaultProps={transitionAppear:!1,transitionEnter:!0,transitionLeave:!0},e.default=f,t.exports=e.default},"+swb":function(t,e,n){"use strict";function r(t,e,n){for(var r=0,i=n.length;r<i;r++)if(t(e,n[r]))return!0;return!1}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n,i){if(void 0===n)return function(n,r){return void 0===r?function(r){return t(e,n,r)}:t(e,n,r)};if(void 0===i)return function(r){return t(e,n,r)};for(var o=[],s=0,u=n.length;s<u;s++)r(e,n[s],i)||r(e,n[s],o)||o.push(n[s]);return o}},"+u0c":function(t,e,n){},"//0v":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.Observable=r.Observable},"/21U":function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n("isby");function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},"/OkI":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("OAeU"),i=n("ahDk"),o=n("Ex95"),s=n("ISfp"),u=n("3Gn5"),a=l(n("NZUt")),c=l(n("XP/m"));function l(t){return t&&t.__esModule?t:{default:t}}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var h=function(){function t({adapter:t,modelClasses:e,actionsEnabled:n}){this._actionQueue=new c.default,this._resetCount=0,this.adapter=t,this.schema=t.schema,this.collections=new a.default(this,e),this._actionsEnabled=n}var e=t.prototype;return e.batch=function(...t){return new Promise(function(e,n){var r,i,o;return r=this,this._ensureInAction("Database.batch() can only be called from inside of an Action. See docs for more details."),i=[],o={},t.forEach((function(t){if(t){(0,s.invariant)(!t._isCommitted||t._hasPendingUpdate||t._hasPendingDelete,"Cannot batch a record that doesn't have a prepared create or prepared update");var e,n=t._raw,{id:r}=n,{table:a}=t.constructor;t._hasPendingDelete?("destroy"===t._hasPendingDelete?i.push(["destroyPermanently",a,r]):i.push(["markAsDeleted",a,r]),e=u.CollectionChangeTypes.destroyed):t._hasPendingUpdate?(t._hasPendingUpdate=!1,i.push(["update",a,n]),e=u.CollectionChangeTypes.updated):(i.push(["create",a,n]),e=u.CollectionChangeTypes.created),o[a]||(o[a]=[]),o[a].push({record:t,type:e})}})),Promise.resolve(this.adapter.batch(i)).then((function(){try{return Object.entries(o).forEach((function(t){var[e,n]=t;r.collections.get(e).changeSet(n)})),e()}catch(t){return n(t)}}),n)}.bind(this))},e.action=function(t,e){return this._actionQueue.enqueue(t,e)},e.withChangesForTables=function(t){var e=this,n=t.map((function(t){return e.collections.get(t).changes}));return r.merge.apply(void 0,f(n)).pipe((0,i.startWith)(null))},e.unsafeResetDatabase=function(){return new Promise(function(t,e){return this._ensureInAction("Database.unsafeResetDatabase() can only be called from inside of an Action. See docs for more details."),this._actionQueue._abortPendingActions(),this._unsafeClearCaches(),Promise.resolve(this.adapter.unsafeResetDatabase()).then(function(){try{return this._resetCount+=1,t()}catch(t){return e(t)}}.bind(this),e)}.bind(this))},e._unsafeClearCaches=function(){(0,o.values)(this.collections.map).forEach((function(t){t.unsafeClearCache()}))},e._ensureInAction=function(t){this._actionsEnabled&&(0,s.invariant)(this._actionQueue.isRunning,t)},t}();e.default=h},"/ux2":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.setGenerator=void 0;var r="0123456789abcdefghijklmnopqrstuvwxyz",i=r.length,o=function(){return function(){for(var t="",e=0;e<8;e+=1){var n=Math.floor(Math.random()*i*i);t+=r[Math.floor(n/i)],t+=r[n%i]}return t}()};e.setGenerator=function(t){if("string"!=typeof t())throw new Error("RandomId generator function needs to return a string type.");o=t};e.default=function(){return o()}},"0gbD":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.eq=l,e.notEq=f,e.gt=function(t){return{operator:"gt",right:c(t)}},e.gte=function(t){return{operator:"gte",right:c(t)}},e.weakGt=function(t){return{operator:"weakGt",right:c(t)}},e.lt=function(t){return{operator:"lt",right:c(t)}},e.lte=function(t){return{operator:"lte",right:c(t)}},e.oneOf=function(t){0;return{operator:"oneOf",right:{values:t}}},e.notIn=function(t){0;return{operator:"notIn",right:{values:t}}},e.between=function(t,e){return{operator:"between",right:{values:[t,e]}}},e.like=function(t){return{operator:"like",right:{value:t}}},e.notLike=function(t){return{operator:"notLike",right:{value:t}}},e.sanitizeLikeString=function(t){return t.replace(h,"_")},e.column=function(t){return{column:t}},e.where=p,e.and=function(...t){return{type:"and",conditions:t}},e.or=function(...t){return{type:"or",conditions:t}},e.buildQueryDescription=function(t){var[e,n]=v(t);0;return{join:e,where:n}},e.queryWithoutDeleted=function(t){var{join:e,where:n}=t;0;return{join:[].concat(a(e),a(m(e))),where:[].concat(a(n),[g])}},e.hasColumnComparisons=function(t){return _(t)},e.on=void 0;var r=n("Ex95"),i=u(n("qsUr")),o=u(n("OFZ/")),s=n("eLCP");function u(t){return t&&t.__esModule?t:{default:t}}function a(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(t){return null!==t&&"object"==typeof t?t:{value:t}}function l(t){return{operator:"eq",right:c(t)}}function f(t){return{operator:"notEq",right:c(t)}}var h=/[^a-zA-Z0-9]/g;function d(t){return null!==t&&"object"==typeof t?t:l(t)}function p(t,e){return{type:"where",left:t,comparison:d(e)}}var y=function(t,e,n){if("string"==typeof e)return(0,o.default)(void 0!==n,"illegal `undefined` passed to Q.on"),{type:"on",table:t,left:e,comparison:d(n)};var r=e;return{type:"on",table:t,left:r.left,comparison:r.comparison}};e.on=y;var b=(0,s.columnName)("_status"),v=(0,i.default)((0,r.propEq)("type","on")),g=p(b,f("deleted")),m=(0,r.pipe)((0,r.map)((0,r.prop)("table")),r.uniq,(0,r.map)((function(t){return y(t,b,f("deleted"))})));var _=function(t){if(Array.isArray(t)){for(var e=0;e<t.length;e+=1)if(_(t[e]))return!0;return!1}if(t&&"object"==typeof t){if(t.column)return!0;for(var n in t)if(_(t[n]))return!0;return!1}return!1}},"0zYE":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(void 0===n)return function(n){return t(e,n)};return e in n}},"1KF6":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(void 0===n)return function(n){return t(e,n)};for(var r=[],i=Math.min(e.length,n.length),o=0;o<i;o++)r[o]=[e[o],n[o]];return r}},"1gTA":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.synchronize=function({database:t,pullChanges:e,pushChanges:n,sendCreatedAsUpdated:s=!1,log:u,_unsafeBatchPerCollection:a}){return new Promise((function(c,l){var f,h,d,p,y;return(0,o.ensureActionsEnabled)(t),f=t._resetCount,u&&(u.startedAt=new Date),Promise.resolve((0,i.getLastPulledAt)(t)).then(function(b){try{return h=b,u&&(u.lastPulledAt=h),Promise.resolve(e({lastPulledAt:h})).then(function(e){try{return({changes:d,timestamp:p}=e),u&&(u.newLastPulledAt=p),Promise.resolve(t.action((function(e){return new Promise((function(n,c){return(0,o.ensureSameDatabase)(t,f),Promise.resolve((0,i.getLastPulledAt)(t)).then((function(o){try{return(0,r.invariant)(h===o,"[Sync] Concurrent synchronization is not allowed. More than one synchronize() call was running at the same time, and the later one was aborted before committing results to local database."),Promise.resolve(e.subAction((function(){return(0,i.applyRemoteChanges)(t,d,s,u,a)}))).then((function(){try{return Promise.resolve((0,i.setLastPulledAt)(t,p)).then((function(){try{return n()}catch(t){return c(t)}}),c)}catch(t){return c(t)}}),c)}catch(t){return c(t)}}),c)}))}),"sync-synchronize-apply")).then(function(){try{return Promise.resolve((0,i.fetchLocalChanges)(t)).then(function(e){try{return y=e,(0,o.ensureSameDatabase)(t,f),(0,o.isChangeSetEmpty)(y.changes)?function(){return u&&(u.finishedAt=new Date),c()}.call(this):Promise.resolve(n({changes:y.changes,lastPulledAt:p})).then(function(){try{return(0,o.ensureSameDatabase)(t,f),Promise.resolve((0,i.markLocalChangesAsSynced)(t,y)).then(function(){try{return function(){return u&&(u.finishedAt=new Date),c()}.call(this)}catch(t){return l(t)}}.bind(this),l)}catch(t){return l(t)}}.bind(this),l)}catch(t){return l(t)}}.bind(this),l)}catch(t){return l(t)}}.bind(this),l)}catch(t){return l(t)}}.bind(this),l)}catch(t){return l(t)}}.bind(this),l)}))},e.hasUnsyncedChanges=function({database:t}){return new Promise((function(e){return e((0,i.hasUnsyncedChanges)(t))}))};var r=n("ISfp"),i=n("z/u3"),o=n("w5US")},"1zZr":function(t,e,n){},"2lpH":function(t,e){t.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function r(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function i(t){return!0===(t&&t.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},s={};function u(t,e){var n,r,i;return e?(i=0<=(t>>>=0)&&t<256)&&(r=s[t])?r:(n=c(t,(0|t)<0?-1:0,!0),i&&(s[t]=n),n):(i=-128<=(t|=0)&&t<128)&&(r=o[t])?r:(n=c(t,t<0?-1:0,!1),i&&(o[t]=n),n)}function a(t,e){if(isNaN(t))return e?g:v;if(e){if(t<0)return g;if(t>=p)return E}else{if(t<=-y)return S;if(t+1>=y)return O}return t<0?a(-t,e).neg():c(t%d|0,t/d|0,e)}function c(t,e,n){return new r(t,e,n)}r.fromInt=u,r.fromNumber=a,r.fromBits=c;var l=Math.pow;function f(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return v;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return f(t.substring(1),e,n).neg();for(var i=a(l(n,8)),o=v,s=0;s<t.length;s+=8){var u=Math.min(8,t.length-s),c=parseInt(t.substring(s,s+u),n);if(u<8){var h=a(l(n,u));o=o.mul(h).add(a(c))}else o=(o=o.mul(i)).add(a(c))}return o.unsigned=e,o}function h(t,e){return"number"==typeof t?a(t,e):"string"==typeof t?f(t,e):c(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}r.fromString=f,r.fromValue=h;var d=4294967296,p=d*d,y=p/2,b=u(1<<24),v=u(0);r.ZERO=v;var g=u(0,!0);r.UZERO=g;var m=u(1);r.ONE=m;var _=u(1,!0);r.UONE=_;var w=u(-1);r.NEG_ONE=w;var O=c(-1,2147483647,!1);r.MAX_VALUE=O;var E=c(-1,-1,!0);r.MAX_UNSIGNED_VALUE=E;var S=c(0,-2147483648,!1);r.MIN_VALUE=S;var A=r.prototype;A.toInt=function(){return this.unsigned?this.low>>>0:this.low},A.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},A.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(S)){var e=a(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=a(l(t,6),this.unsigned),o=this,s="";;){var u=o.div(i),c=(o.sub(u.mul(i)).toInt()>>>0).toString(t);if((o=u).isZero())return c+s;for(;c.length<6;)c="0"+c;s=""+c+s}},A.getHighBits=function(){return this.high},A.getHighBitsUnsigned=function(){return this.high>>>0},A.getLowBits=function(){return this.low},A.getLowBitsUnsigned=function(){return this.low>>>0},A.getNumBitsAbs=function(){if(this.isNegative())return this.eq(S)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},A.isZero=function(){return 0===this.high&&0===this.low},A.eqz=A.isZero,A.isNegative=function(){return!this.unsigned&&this.high<0},A.isPositive=function(){return this.unsigned||this.high>=0},A.isOdd=function(){return 1==(1&this.low)},A.isEven=function(){return 0==(1&this.low)},A.equals=function(t){return i(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},A.eq=A.equals,A.notEquals=function(t){return!this.eq(t)},A.neq=A.notEquals,A.ne=A.notEquals,A.lessThan=function(t){return this.comp(t)<0},A.lt=A.lessThan,A.lessThanOrEqual=function(t){return this.comp(t)<=0},A.lte=A.lessThanOrEqual,A.le=A.lessThanOrEqual,A.greaterThan=function(t){return this.comp(t)>0},A.gt=A.greaterThan,A.greaterThanOrEqual=function(t){return this.comp(t)>=0},A.gte=A.greaterThanOrEqual,A.ge=A.greaterThanOrEqual,A.compare=function(t){if(i(t)||(t=h(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},A.comp=A.compare,A.negate=function(){return!this.unsigned&&this.eq(S)?S:this.not().add(m)},A.neg=A.negate,A.add=function(t){i(t)||(t=h(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,s=t.high>>>16,u=65535&t.high,a=t.low>>>16,l=0,f=0,d=0,p=0;return d+=(p+=o+(65535&t.low))>>>16,f+=(d+=r+a)>>>16,l+=(f+=n+u)>>>16,l+=e+s,c((d&=65535)<<16|(p&=65535),(l&=65535)<<16|(f&=65535),this.unsigned)},A.subtract=function(t){return i(t)||(t=h(t)),this.add(t.neg())},A.sub=A.subtract,A.multiply=function(t){if(this.isZero())return v;if(i(t)||(t=h(t)),n)return c(n.mul(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned);if(t.isZero())return v;if(this.eq(S))return t.isOdd()?S:v;if(t.eq(S))return this.isOdd()?S:v;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(b)&&t.lt(b))return a(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,r=65535&this.high,o=this.low>>>16,s=65535&this.low,u=t.high>>>16,l=65535&t.high,f=t.low>>>16,d=65535&t.low,p=0,y=0,g=0,m=0;return g+=(m+=s*d)>>>16,y+=(g+=o*d)>>>16,g&=65535,y+=(g+=s*f)>>>16,p+=(y+=r*d)>>>16,y&=65535,p+=(y+=o*f)>>>16,y&=65535,p+=(y+=s*l)>>>16,p+=e*d+r*f+o*l+s*u,c((g&=65535)<<16|(m&=65535),(p&=65535)<<16|(y&=65535),this.unsigned)},A.mul=A.multiply,A.divide=function(t){if(i(t)||(t=h(t)),t.isZero())throw Error("division by zero");var e,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?c((this.unsigned?n.div_u:n.div_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?g:v;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return g;if(t.gt(this.shru(1)))return _;o=g}else{if(this.eq(S))return t.eq(m)||t.eq(w)?S:t.eq(S)?m:(e=this.shr(1).div(t).shl(1)).eq(v)?t.isNegative()?m:w:(r=this.sub(t.mul(e)),o=e.add(r.div(t)));if(t.eq(S))return this.unsigned?g:v;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();o=v}for(r=this;r.gte(t);){e=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(e)/Math.LN2),u=s<=48?1:l(2,s-48),f=a(e),d=f.mul(t);d.isNegative()||d.gt(r);)d=(f=a(e-=u,this.unsigned)).mul(t);f.isZero()&&(f=m),o=o.add(f),r=r.sub(d)}return o},A.div=A.divide,A.modulo=function(t){return i(t)||(t=h(t)),n?c((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},A.mod=A.modulo,A.rem=A.modulo,A.not=function(){return c(~this.low,~this.high,this.unsigned)},A.and=function(t){return i(t)||(t=h(t)),c(this.low&t.low,this.high&t.high,this.unsigned)},A.or=function(t){return i(t)||(t=h(t)),c(this.low|t.low,this.high|t.high,this.unsigned)},A.xor=function(t){return i(t)||(t=h(t)),c(this.low^t.low,this.high^t.high,this.unsigned)},A.shiftLeft=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?c(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):c(0,this.low<<t-32,this.unsigned)},A.shl=A.shiftLeft,A.shiftRight=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?c(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):c(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},A.shr=A.shiftRight,A.shiftRightUnsigned=function(t){if(i(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?c(this.low>>>t|e<<32-t,e>>>t,this.unsigned):c(32===t?e:e>>>t-32,0,this.unsigned)},A.shru=A.shiftRightUnsigned,A.shr_u=A.shiftRightUnsigned,A.toSigned=function(){return this.unsigned?c(this.low,this.high,!1):this},A.toUnsigned=function(){return this.unsigned?this:c(this.low,this.high,!0)},A.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},A.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},A.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},r.fromBytes=function(t,e,n){return n?r.fromBytesLE(t,e):r.fromBytesBE(t,e)},r.fromBytesLE=function(t,e){return new r(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},r.fromBytesBE=function(t,e){return new r(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},"3Gn5":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CollectionChangeTypes=void 0;e.CollectionChangeTypes={created:"created",updated:"updated",destroyed:"destroyed"}},"3U0i":function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},"3fWJ":function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},"49sm":function(t,e){t.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},"4c1C":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("//0v"))},"4e+6":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,s.ensureActionsEnabled)(t),t.action((function(){return new Promise((function(n,i){return Promise.resolve(Promise.all([t.batch.apply(t,u((0,r.map)(s.prepareMarkAsSynced,a(e)))),c(t,e)])).then((function(){try{return n()}catch(t){return i(t)}}),i)}))}),"sync-markLocalChangesAsSynced")};var r=n("Ex95"),i=n("6Cb3"),o=n("ISfp"),s=n("w5US");function u(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=function({changes:t,affectedRecords:e}){return(0,r.pipe)(r.values,(0,r.map)((function({created:t,updated:n}){return i=[].concat(u(t),u(n)),s=e,(0,r.reduce)((function(t,e){var n=s.find((function(t){return t.id===e.id}));return n?(0,r.equals)(n._raw,e)?t.concat(n):t:((0,o.logError)("[Sync] Looking for record ".concat(e.id," to mark it as synced, but I can't find it. Will ignore it (it should get synced next time). This is probably a Watermelon bug — please file an issue!")),t)}),[],i);var i,s})),i.unnest)(t)},c=function(t,{changes:e}){return(0,r.promiseAllObject)((0,r.map)((function({deleted:e},n){return t.adapter.destroyDeletedRecords(n,e)}),e))}},"4hzj":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=new(function(){function t(){this.silent=!1}var e=t.prototype;return e.log=function(...t){var e;this.silent||(e=console).log.apply(e,t)},e.warn=function(...t){var e;this.silent||(e=console).warn.apply(e,t)},e.error=function(...t){var e;this.silent||(e=console).error.apply(e,t)},e.silence=function(){this.silent=!0},t}());e.default=r},"4qq8":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=[];if(t)for(var n=Object.keys(t),r=0,i=n.length;r<i;r++){var o=n[r],s=t[o];o in t&&(e[r]=[o,s])}return e}},"5THS":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n,r){if(void 0===n)return function(n,r){return void 0===r?function(r){return t(e,n,r)}:t(e,n,r)};if(void 0===r)return function(r){return t(e,n,r)};try{return e.apply(this,[r])}catch(t){return n.apply(this,[t,r])}}},"5xEe":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.Subject=r.Subject},"60iU":function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return u}));var r,i=n("G5J1"),o=n("F/XL"),s=n("XlPw");r||(r={});var u=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(s.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},"6Cb3":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"allPromises",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"identicalArrays",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"isObject",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"noop",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"withoutIdentical",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"partition",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(e,"differenceWith",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(e,"arrayDifference",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(e,"cond",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(e,"tryCatch",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(e,"hasIn",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(e,"is",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(e,"zip",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(e,"identical",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(e,"objOf",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(e,"gt",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(e,"gte",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(e,"lt",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(e,"lte",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(e,"fromPairs",{enumerable:!0,get:function(){return O.default}}),Object.defineProperty(e,"toPairs",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(e,"complement",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(e,"unnest",{enumerable:!0,get:function(){return A.default}});var r=P(n("KPdl")),i=P(n("8Gr5")),o=P(n("Do9n")),s=P(n("tUd9")),u=P(n("6HCZ")),a=P(n("qsUr")),c=P(n("+swb")),l=P(n("QnJh")),f=P(n("Q3Zk")),h=P(n("5THS")),d=P(n("0zYE")),p=P(n("Tuwf")),y=P(n("1KF6")),b=P(n("giDl")),v=P(n("FZ/z")),g=P(n("ieMx")),m=P(n("ZEXy")),_=P(n("PaCZ")),w=P(n("Byy2")),O=P(n("xcVR")),E=P(n("4qq8")),S=P(n("+9/e")),A=P(n("JtzR"));function P(t){return t&&t.__esModule?t:{default:t}}},"6DQo":function(t,e,n){"use strict";t.exports=function(){}},"6HCZ":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,i.default)(r.default,e,t)};var r=o(n("giDl")),i=o(n("+swb"));function o(t){return t&&t.__esModule?t:{default:t}}},"7tKj":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validateAdapter=function(t){0},e.sanitizeFindResult=function(t,e){return t&&"object"==typeof t?(0,i.sanitizedRaw)(t,e):t},e.sanitizeQueryResult=function(t,e){return t.map((function(t){return"string"==typeof t?t:(0,i.sanitizedRaw)(t,e)}))},e.devLogSetUp=function(t){return new Promise((function(e,n){var i,o=function(){try{return e()}catch(t){return n(t)}},s=function(t){try{return r.logger.error("[DB] Uh-oh. Database failed to load, we're in big trouble",t),o()}catch(t){return n(t)}};try{return Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[,i]=t,r.logger.log("[DB] All set up in ".concat(i,"ms")),o()}catch(t){return s(t)}}),s)}catch(t){s(t)}}))},e.devLogFind=function(t,e,n){return new Promise((function(i,s){var u,a;return Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[u,a]=t,o&&r.logger.log("[DB] Found ".concat(n,"#").concat(e," in ").concat(a,"ms")),i(u)}catch(t){return s(t)}}),s)}))},e.devLogQuery=function(t,e){return new Promise((function(n,i){var s,u;return Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[s,u]=t,o&&r.logger.log("[DB] Loaded ".concat(s.length," ").concat(e.table," in ").concat(u,"ms")),n(s)}catch(t){return i(t)}}),i)}))},e.devLogSQLQuery=function(t,e){return new Promise((function(n,i){var s,u;return Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[s,u]=t,o&&r.logger.log("[DB] Loaded ".concat(s.length," ").concat(e," in ").concat(u,"ms")),n(s)}catch(t){return i(t)}}),i)}))},e.devLogCount=function(t,e){return new Promise((function(n,i){var s,u;return Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[s,u]=t,o&&r.logger.log("[DB] Counted ".concat(s," ").concat(e.table," in ").concat(u,"ms")),n(s)}catch(t){return i(t)}}),i)}))},e.devLogBatch=function(t,e){return new Promise((function(n,i){var s,u,a;return e.length?Promise.resolve((0,r.devMeasureTimeAsync)(t)).then((function(t){try{return[,s]=t,[u,a]=e[0],o&&r.logger.log("[DB] Executed batch of ".concat(e.length," operations (first: ").concat(u," on ").concat(a,") in ").concat(s,"ms")),n()}catch(t){return i(t)}}),i):n()}))};var r=n("ISfp"),i=n("oPt8"),o=!1},"8Gr5":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n+=1)if(t[n]!==e[n])return!1;return!0}},"8PcY":function(t,e,n){"use strict";e.__esModule=!0,e.getChildMapping=function(t){if(!t)return t;var e={};return r.Children.map(t,(function(t){return t})).forEach((function(t){e[t.key]=t})),e},e.mergeChildMappings=function(t,e){function n(n){return e.hasOwnProperty(n)?e[n]:t[n]}t=t||{},e=e||{};var r={},i=[];for(var o in t)e.hasOwnProperty(o)?i.length&&(r[o]=i,i=[]):i.push(o);var s=void 0,u={};for(var a in e){if(r.hasOwnProperty(a))for(s=0;s<r[a].length;s++){var c=r[a][s];u[r[a][s]]=n(c)}u[a]=n(a)}for(s=0;s<i.length;s++)u[i[s]]=n(i[s]);return u};var r=n("q1tI")},"8yf6":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("5xEe"))},"8zDj":function(t,e,n){},"9+xA":function(t,e,n){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){return function(){"use strict";function t(t){this.mode="incremental",this.options=t||{},this.chunkSize=100,this.idb=null}return t.prototype._getChunk=function(t,e){for(var n,r=e*this.chunkSize,i=r+this.chunkSize-1,o=t.idIndex,s=null,u=o.length-1,a=0;o[a]<o[u];)o[n=a+u>>1]<r?a=n+1:u=n;if(u===a&&o[a]>=r&&(s=a),null===s)return[];for(var c=null,l=s+this.chunkSize-1;l>=s;l--)if(o[l]<=i){c=l;break}var f=t.data[s];if(!(f&&f.$loki>=r&&f.$loki<=i))throw new Error("broken invariant firstelement");var h=t.data[c];if(!(h&&h.$loki>=r&&h.$loki<=i))throw new Error("broken invariant lastElement");var d=t.data.slice(s,c+1);if(d.length>this.chunkSize)throw new Error("broken invariant - chunk size");return d},t.prototype.saveDatabase=function(t,e,n){var r=this;console.log("exportDatabase - begin"),console.time("exportDatabase");var i=[];e.collections.forEach((function(t,n){var o=new Set;t.dirtyIds.forEach((function(t){var e=t/r.chunkSize|0;o.add(e)})),t.dirtyIds=[],o.forEach((function(e){var n=r._getChunk(t,e);i.push({key:t.name+".chunk."+e,value:JSON.stringify(n)})})),t.data=[],t.isIndex=[],i.push({key:t.name+".metadata",value:JSON.stringify(t)}),e.collections[n]={name:t.name}}));var o=JSON.stringify(e);e=null,i.push({key:"loki",value:o}),r._saveChunks(t,i,n)},t.prototype.loadDatabase=function(t,e){var n=this;console.log("loadDatabase - begin"),console.time("loadDatabase"),this._getAllChunks(t,(function(t){if(Array.isArray(t)||(console.timeEnd("loadDatabase"),e(t)),!t.length)return console.timeEnd("loadDatabase"),void e(null);var r;console.log("Found chunks:",t.length),n._sortChunksInPlace(t);var i={};t.forEach((function(t){var n=t.key,o=t.value;if("loki"!==n){if(n.includes(".")){var s=n.split(".");if(3===s.length&&"chunk"===s[1]){var u=s[0];return void(i[u]?i[u].dataChunks.push(o):i[u]={metadata:null,dataChunks:[o]})}if(2===s.length&&"metadata"===s[1]){var a=s[0];return void(i[a]?i[a].metadata=o:i[a]={metadata:o,dataChunks:[]})}}console.error("Unknown chunk "+n),e(new Error("Invalid database - unknown chunk found"))}else r=o})),t=null,r||e(new Error("Invalid database - missing database metadata")),r=JSON.parse(r),n._populate(r,i),i=null,console.timeEnd("loadDatabase"),e(r)}))},t.prototype._sortChunksInPlace=function(t){var e=function(t){var e=t.key;if(e.includes(".")){var n=e.split(".");if(3===n.length&&"chunk"===n[1])return parseInt(n[2],10)}return-1};t.sort((function(t,n){var r=e(t),i=e(n);return r<i?-1:r>i?1:0}))},t.prototype._populate=function(t,e){t.collections.forEach((function(n,r){var i=e[n.name];if(i){var o=JSON.parse(i.metadata);i.metadata=null,t.collections[r]=o;var s=i.dataChunks;s.forEach((function(t,e){var n=JSON.parse(t);t=null,s[e]=null,n.forEach((function(t){o.data.push(t)}))}))}}))},t.prototype._initializeIDB=function(t,e,n){var r=this;if(console.log("initializing idb"),this.idbInitInProgress)throw new Error("Cannot open IndexedDB because open is already in progress");this.idbInitInProgress=!0;var i=indexedDB.open(t,1);i.onupgradeneeded=function(t){var e=t.target.result;if(console.log("onupgradeneeded, old version: "+t.oldVersion),!(t.oldVersion<1))throw new Error("Invalid old version "+t.oldVersion+" for IndexedDB upgrade");e.createObjectStore("LokiIncrementalData",{keyPath:"key"})},i.onsuccess=function(i){if(r.idbInitInProgress=!1,r.idb=i.target.result,!r.idb.objectStoreNames.contains("LokiIncrementalData"))return e(new Error("Missing LokiIncrementalData")),void r.deleteDatabase(t);console.log("init success"),r.idb.onversionchange=function(t){console.log("IDB version change",t),r.idb.close(),r.options.onversionchange&&r.options.onversionchange(t)},n()},i.onblocked=function(t){console.error("IndexedDB open is blocked",t),e(new Error("IndexedDB open is blocked by open connection"))},i.onerror=function(t){r.idbInitInProgress=!1,console.error("IndexeddB open error",t),e(t)}},t.prototype._saveChunks=function(t,e,n){var r=this;if(this.idb){if(this.operationInProgress)throw new Error("Error while saving to database - another operation is already in progress. Please use throttledSaves=true option on Loki object");this.operationInProgress=!0;var i=this.idb.transaction(["LokiIncrementalData"],"readwrite");i.oncomplete=function(){r.operationInProgress=!1,console.timeEnd("exportDatabase"),n()},i.onerror=function(t){r.operationInProgress=!1,n(t)},i.onabort=function(t){r.operationInProgress=!1,n(t)};var o=i.objectStore("LokiIncrementalData");e.forEach((function(t){o.put(t)}))}else this._initializeIDB(t,n,(function(){r._saveChunks(t,e,n)}))},t.prototype._getAllChunks=function(t,e){var n=this;if(this.idb){if(this.operationInProgress)throw new Error("Error while loading database - another operation is already in progress. Please use throttledSaves=true option on Loki object");this.operationInProgress=!0;var r=this.idb.transaction(["LokiIncrementalData"],"readonly").objectStore("LokiIncrementalData").getAll();r.onsuccess=function(t){n.operationInProgress=!1;var r=t.target.result;e(r)},r.onerror=function(t){n.operationInProgress=!1,e(t)}}else this._initializeIDB(t,e,(function(){n._getAllChunks(t,e)}))},t.prototype.deleteDatabase=function(t,e){if(this.operationInProgress)throw new Error("Error while deleting database - another operation is already in progress. Please use throttledSaves=true option on Loki object");this.operationInProgress=!0;var n=this;console.log("deleteDatabase - begin"),console.time("deleteDatabase"),this.idb&&(this.idb.close(),this.idb=null);var r=indexedDB.deleteDatabase(t);r.onsuccess=function(){n.operationInProgress=!1,console.timeEnd("deleteDatabase"),e({success:!0})},r.onerror=function(t){n.operationInProgress=!1,console.error("Error while deleting database",t),e({success:!1})},r.onblocked=function(t){console.error("Deleting database failed because it's blocked by another connection",t)}},t}()})?r.apply(e,i):r)||(t.exports=o)},"909l":function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return f}));var r=n("mrSG"),i=n("IUTb"),o=n("isby"),s=n("FFOo"),u=n("MGBS"),a=n("zotm"),c=n("En8+");function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),Object(i.a)(t,void 0).lift(new f(n))}var f=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return r.__extends(e,t),e.prototype._next=function(t){var e=this.iterators;Object(o.a)(t)?e.push(new p(t)):"function"==typeof t[c.a]?e.push(new d(t[c.a]())):e.push(new y(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.a),d=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),p=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[c.a]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),y=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.__extends(e,t),e.prototype[c.a]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Object(a.a)(this,this.observable,this,e)},e}(u.a)},"9l66":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return r+=1};var r=0},A21b:function(t,e,n){},AAEI:function(t,e,n){},AE4m:function(t,e,n){},AdgS:function(t,e,n){},Awnv:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i,o,s=l(n("YgyC")),u=l(n("OFZ/")),a=l(n("eCbD")),c=n("lHM+");function l(t){return t&&t.__esModule?t:{default:t}}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var h,d,p,y,b,v,g=(o=function(){function t(t,e,n,r){var o,s,u,a;o=this,s="_cachedObservable",a=this,(u=i)&&Object.defineProperty(o,s,{enumerable:u.enumerable,configurable:u.configurable,writable:u.writable,value:u.initializer?u.initializer.call(a):void 0}),this._model=t,this._relationTableName=e,this._columnName=n,this._isImmutable=r.isImmutable}var e,n,r,o=t.prototype;return o.fetch=function(){var{id:t}=this;return t?this._model.collections.get(this._relationTableName).find(t):Promise.resolve(null)},o.set=function(t){this.id=null==t?void 0:t.id},o.observe=function(){return this._cachedObservable},e=t,(n=[{key:"id",get:function(){return this._model._getRaw(this._columnName)},set:function(t){this._isImmutable&&(0,u.default)(!this._model._isCommitted,"Cannot change property marked as @immutableRelation ".concat(Object.getPrototypeOf(this._model).constructor.name," - ").concat(this._columnName)),this._model._setRaw(this._columnName,t||null)}}])&&f(e.prototype,n),r&&f(e,r),t}(),h=(r=o).prototype,d="_cachedObservable",p=[s.default],y={configurable:!0,enumerable:!0,writable:!0,initializer:function(){return(0,c.createObservable)(this).pipe(a.default).refCount()}},v={},Object.keys(y).forEach((function(t){v[t]=y[t]})),v.enumerable=!!v.enumerable,v.configurable=!!v.configurable,("value"in v||v.initializer)&&(v.writable=!0),v=p.slice().reverse().reduce((function(t,e){return e(h,d,t)||t}),v),b&&void 0!==v.initializer&&(v.value=v.initializer?v.initializer.call(b):void 0,v.initializer=void 0),void 0===v.initializer&&(Object.defineProperty(h,d,v),v=null),i=v,r);e.default=g},Bp9Y:function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);e.default=r,t.exports=e.default},Byy2:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};return e<=n}},CS9Q:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n("mrSG"),i=n("siIJ"),o=function(t){function e(n,r){void 0===r&&(r=i.a.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.__extends(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.a)},ChnD:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.notLike=e.like=e.rawFieldEquals=void 0;var r,i=n("6Cb3"),o=(r=n("oEso"))&&r.__esModule?r:{default:r};var s=function(t,e){return t==e};e.rawFieldEquals=s;var u=function(t){return function(e,n){return null!=e&&null!=n&&t(e,n)}},a=function(t,e){return"string"==typeof t?t:e},c=function(t,e){var n=a(t,"");return(0,o.default)(e).test(n)};e.like=c;var l=function(t,e){if(null===t)return!1;var n=a(t,"");return!(0,o.default)(e).test(n)};e.notLike=l;var f={eq:s,notEq:function(t,e){return!(t==e)},gt:u(i.gt),gte:u(i.gte),weakGt:function(t,e){return t>e||null!=t&&null==e},lt:u(i.lt),lte:u(i.lte),oneOf:function(t,e){return e.includes(t)},notIn:u((function(t,e){return!e.includes(t)})),between:function(t,[e,n]){return t>=e&&t<=n},like:c,notLike:l};e.default=f},Cu4n:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=(0,r.default)(t);e.framesToPop+=1,i.default.error(e)};var r=o(n("jblg")),i=o(n("4hzj"));function o(t){return t&&t.__esModule?t:{default:t}}},DXLO:function(t,e,n){},Dk2R:function(t,e,n){},Do9n:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=function(t){return null!==t&&"object"==typeof t&&!Array.isArray(t)};e.default=r},DtyJ:function(t,e,n){"use strict";n.r(e);var r=n("6blF"),i=n("KhEm"),o=n("IxPp"),s=n("xTla"),u=n("K9Ia"),a=n("26FU"),c=n("S5bw"),l=n("svcd"),f=n("KQya"),h=n("T1DM"),d=n("zo3G"),p=n("mrSG"),y=n("h9Dq"),b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return p.__extends(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(y.a),v=n("CS9Q"),g=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p.__extends(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(v.a))(b),m=function(t){function e(e,n){void 0===e&&(e=_),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return p.__extends(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(v.a),_=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return p.__extends(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(y.a),w=n("siIJ"),O=n("pugT"),E=n("FFOo"),S=n("60iU"),A=n("y3By"),P=n("+umK"),I=n("mChF");function N(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var T=n("b7mW"),j=n("3fWJ"),x=n("8g8A"),D=n("awvh"),C=n("3U0i"),R=n("67Y/"),k=n("1fDf"),B=n("isby"),M=n("nkY7");function U(t,e,n){if(e){if(!Object(M.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return U(t,n).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(B.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:n};return new r.a((function(r){if(n){var i={args:e,subscriber:r,params:u};return n.schedule(L,0,i)}if(!o){o=new l.a;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(k.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function L(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,a=i.subject;if(!a){a=i.subject=new l.a;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(F,0,{value:r,subject:a}))}]))}catch(t){a.error(t)}}this.add(a.subscribe(r))}function F(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function $(t,e,n){if(e){if(!Object(M.a)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return $(t,n).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(B.a)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.a((function(r){var i=o.context,s=o.subject;if(n)return n.schedule(z,0,{params:o,subscriber:r,context:i});if(!s){s=o.subject=new l.a;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){Object(k.a)(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function z(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,a=n.subject;if(!a){a=n.subject=new l.a;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(V,0,{err:r,subject:a}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(q,0,{value:i,subject:a}))}}]))}catch(t){this.add(u.schedule(V,0,{err:t,subject:a}))}}this.add(a.subscribe(r))}function q(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function V(t){var e=t.err;t.subject.error(e)}var W=n("dzgT"),Y=n("dEwP"),K=n("lYZG"),J=n("G5J1"),G=n("McSo"),H=n("0/uQ");function X(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(Object(B.a)(n))return Q(n,null);if(Object(G.a)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return Q(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(B.a)(t[0])?t[0]:t,null).pipe(Object(R.a)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,e){return new r.a((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var a=Object(H.a)(t[u]),c=!1;n.add(a.subscribe({next:function(t){c||(c=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&c||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},a=0;a<r;a++)u(a);else n.complete()}))}var Z=n("bne5"),tt=n("2Bdj");function et(t,e,n){return n?et(t,e).pipe(Object(R.a)((function(t){return Object(B.a)(t)?n.apply(void 0,t):n(t)}))):new r.a((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(Object(tt.a)(e))return function(){return e(i,r)}}))}function nt(t,e,n,i,o){var s,u;if(1==arguments.length){var a=t;u=a.initialState,e=a.condition,n=a.iterate,s=a.resultSelector||I.a,o=a.scheduler}else void 0===i||Object(M.a)(i)?(u=t,s=I.a,o=i):(u=t,s=i);return new r.a((function(t){var r=u;if(o)return o.schedule(rt,0,{subscriber:t,iterate:n,condition:e,resultSelector:s,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var a=void 0;try{a=s(r)}catch(e){return void t.error(e)}if(t.next(a),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function rt(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function it(t,e,n){return void 0===e&&(e=J.a),void 0===n&&(n=J.a),Object(K.a)((function(){return t()?e:n}))}var ot=n("/21U");function st(t,e){return void 0===t&&(t=0),void 0===e&&(e=h.a),(!Object(ot.a)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=h.a),new r.a((function(n){return n.add(e.schedule(ut,t,{subscriber:n,counter:0,period:t})),n}))}function ut(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var at=n("p0ib"),ct=new r.a(P.a);function lt(){return ct}var ft=n("F/XL");function ht(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return J.a;var n=t[0],i=t.slice(1);return 1===t.length&&Object(B.a)(n)?ht.apply(void 0,n):new r.a((function(t){var e=function(){return t.add(ht.apply(void 0,i).subscribe(t))};return Object(H.a)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function dt(t,e){return e?new r.a((function(n){var r=Object.keys(t),i=new O.a;return i.add(e.schedule(pt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i})):new r.a((function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()}))}function pt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var yt=n("jFaF"),bt=n("Fxb1"),vt=n("VnD/");function gt(t,e,n){return[Object(vt.a)(e,n)(new r.a(Object(bt.a)(t))),Object(vt.a)(Object(yt.a)(e,n))(new r.a(Object(bt.a)(t)))]}var mt=n("W0Ae");function _t(t,e,n){return void 0===t&&(t=0),new r.a((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(wt,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function wt(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var Ot=n("XlPw"),Et=n("gI3B");function St(t,e){return new r.a((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Object(H.a)(i):J.a).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var At=n("909l"),Pt=n("i4X3"),It=n("iLxQ");n.d(e,"Observable",(function(){return r.a})),n.d(e,"ConnectableObservable",(function(){return i.a})),n.d(e,"GroupedObservable",(function(){return o.a})),n.d(e,"observable",(function(){return s.a})),n.d(e,"Subject",(function(){return u.a})),n.d(e,"BehaviorSubject",(function(){return a.a})),n.d(e,"ReplaySubject",(function(){return c.a})),n.d(e,"AsyncSubject",(function(){return l.a})),n.d(e,"asapScheduler",(function(){return f.a})),n.d(e,"asyncScheduler",(function(){return h.a})),n.d(e,"queueScheduler",(function(){return d.a})),n.d(e,"animationFrameScheduler",(function(){return g})),n.d(e,"VirtualTimeScheduler",(function(){return m})),n.d(e,"VirtualAction",(function(){return _})),n.d(e,"Scheduler",(function(){return w.a})),n.d(e,"Subscription",(function(){return O.a})),n.d(e,"Subscriber",(function(){return E.a})),n.d(e,"Notification",(function(){return S.a})),n.d(e,"NotificationKind",(function(){return S.b})),n.d(e,"pipe",(function(){return A.a})),n.d(e,"noop",(function(){return P.a})),n.d(e,"identity",(function(){return I.a})),n.d(e,"isObservable",(function(){return N})),n.d(e,"ArgumentOutOfRangeError",(function(){return T.a})),n.d(e,"EmptyError",(function(){return j.a})),n.d(e,"ObjectUnsubscribedError",(function(){return x.a})),n.d(e,"UnsubscriptionError",(function(){return D.a})),n.d(e,"TimeoutError",(function(){return C.a})),n.d(e,"bindCallback",(function(){return U})),n.d(e,"bindNodeCallback",(function(){return $})),n.d(e,"combineLatest",(function(){return W.b})),n.d(e,"concat",(function(){return Y.a})),n.d(e,"defer",(function(){return K.a})),n.d(e,"empty",(function(){return J.b})),n.d(e,"forkJoin",(function(){return X})),n.d(e,"from",(function(){return H.a})),n.d(e,"fromEvent",(function(){return Z.a})),n.d(e,"fromEventPattern",(function(){return et})),n.d(e,"generate",(function(){return nt})),n.d(e,"iif",(function(){return it})),n.d(e,"interval",(function(){return st})),n.d(e,"merge",(function(){return at.a})),n.d(e,"never",(function(){return lt})),n.d(e,"of",(function(){return ft.a})),n.d(e,"onErrorResumeNext",(function(){return ht})),n.d(e,"pairs",(function(){return dt})),n.d(e,"partition",(function(){return gt})),n.d(e,"race",(function(){return mt.a})),n.d(e,"range",(function(){return _t})),n.d(e,"throwError",(function(){return Ot.a})),n.d(e,"timer",(function(){return Et.a})),n.d(e,"using",(function(){return St})),n.d(e,"zip",(function(){return At.b})),n.d(e,"scheduled",(function(){return Pt.a})),n.d(e,"EMPTY",(function(){return J.a})),n.d(e,"NEVER",(function(){return ct})),n.d(e,"config",(function(){return It.a}))},ETDC:function(t,e,n){},Ex95:function(t,e,n){"use strict";n.r(e),function(t){function r(t){const e=typeof t;if(null===t)return"Null";if(void 0===t)return"Undefined";if("boolean"===e)return"Boolean";if("number"===e)return Number.isNaN(t)?"NaN":"Number";if("string"===e)return"String";if(Array.isArray(t))return"Array";if(t instanceof RegExp)return"RegExp";const n=t.toString();return n.startsWith("async")?"Async":"[object Promise]"===n?"Promise":"function"===e?"Function":"Object"}function i(t,e){if(1===arguments.length)return e=>i(t,e);if(t===e)return!0;const n=r(t);if(n!==r(e))return!1;if("Array"===n){const n=Array.from(t),r=Array.from(e);if(n.toString()!==r.toString())return!1;let o=!0;return n.forEach((t,e)=>{o&&(t===r[e]||i(t,r[e])||(o=!1))}),o}if("Object"===n){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!1;let r=!0;return n.forEach(n=>{if(r){const o=t[n],s=e[n];o===s||i(o,s)||(r=!1)}}),r}return!1}function o(t,e){if(1===arguments.length)return e=>o(t,e);let n=-1;for(;++n<e.length;)if(i(e[n],t))return!0;return!1}function s(...t){let e=0;for(;e<t.length;){if("Function"===r(t[e])){if(t[e]())return!1}else if(t[e])return!1;e++}return!0}function u(...t){let e=0;for(;e<t.length;){if("Function"===r(t[e])){if(!t[e]())return!1}else if(!t[e])return!1;e++}return!0}function a(t){return(...e)=>{let n=0;for(;n<e.length;){if(r(e[n])!==t)return!1;n++}return!0}}function c(...t){let e=0;for(;e<t.length;){if(!t[e])return!0;e++}return!1}function l(...t){let e=0;for(;e<t.length;){if(t[e])return!0;e++}return!1}function f(t){return(...e)=>{let n=0;for(;n<e.length;){if(r(e[n])===t)return!0;n++}return!1}}n.d(e,"DELAY",(function(){return Qr})),n.d(e,"F",(function(){return $n})),n.d(e,"T",(function(){return Mr})),n.d(e,"add",(function(){return On})),n.d(e,"adjust",(function(){return En})),n.d(e,"all",(function(){return re})),n.d(e,"allFalse",(function(){return s})),n.d(e,"allPass",(function(){return Sn})),n.d(e,"allTrue",(function(){return u})),n.d(e,"allType",(function(){return a})),n.d(e,"always",(function(){return An})),n.d(e,"any",(function(){return zt})),n.d(e,"anyFalse",(function(){return c})),n.d(e,"anyPass",(function(){return Pn})),n.d(e,"anyTrue",(function(){return l})),n.d(e,"anyType",(function(){return f})),n.d(e,"append",(function(){return In})),n.d(e,"assoc",(function(){return Nn})),n.d(e,"both",(function(){return Tn})),n.d(e,"change",(function(){return lt})),n.d(e,"clone",(function(){return Jn})),n.d(e,"compact",(function(){return pt})),n.d(e,"complement",(function(){return jn})),n.d(e,"compose",(function(){return bt})),n.d(e,"composeAsync",(function(){return yt})),n.d(e,"composed",(function(){return _t})),n.d(e,"concat",(function(){return xn})),n.d(e,"contains",(function(){return o})),n.d(e,"count",(function(){return wt})),n.d(e,"curry",(function(){return Re})),n.d(e,"debounce",(function(){return Ot})),n.d(e,"dec",(function(){return Dn})),n.d(e,"defaultTo",(function(){return Rn})),n.d(e,"defaultToStrict",(function(){return St})),n.d(e,"defaultToWhen",(function(){return At})),n.d(e,"delay",(function(){return Pt})),n.d(e,"dissoc",(function(){return kn})),n.d(e,"divide",(function(){return Bn})),n.d(e,"drop",(function(){return Mn})),n.d(e,"dropLast",(function(){return Un})),n.d(e,"either",(function(){return Ln})),n.d(e,"endsWith",(function(){return Fn})),n.d(e,"equals",(function(){return i})),n.d(e,"filter",(function(){return _n})),n.d(e,"find",(function(){return zn})),n.d(e,"findInObject",(function(){return It})),n.d(e,"findIndex",(function(){return qn})),n.d(e,"findModify",(function(){return Nt})),n.d(e,"flatMap",(function(){return Tt})),n.d(e,"flatten",(function(){return Vn})),n.d(e,"flip",(function(){return Wn})),n.d(e,"forEach",(function(){return Gn})),n.d(e,"fromPairs",(function(){return Kn})),n.d(e,"getter",(function(){return Ct})),n.d(e,"glue",(function(){return Bt})),n.d(e,"groupBy",(function(){return Hn})),n.d(e,"groupWith",(function(){return Xn})),n.d(e,"has",(function(){return Qn})),n.d(e,"hasPath",(function(){return Ut})),n.d(e,"head",(function(){return Kt})),n.d(e,"headObject",(function(){return Lt})),n.d(e,"identity",(function(){return Zn})),n.d(e,"ifElse",(function(){return tr})),n.d(e,"ifElseAsync",(function(){return $t})),n.d(e,"inc",(function(){return er})),n.d(e,"includes",(function(){return ee})),n.d(e,"includesType",(function(){return qt})),n.d(e,"indexBy",(function(){return nr})),n.d(e,"indexOf",(function(){return rr})),n.d(e,"init",(function(){return mt})),n.d(e,"inject",(function(){return Wt})),n.d(e,"interval",(function(){return Zt})),n.d(e,"is",(function(){return ir})),n.d(e,"isAttach",(function(){return ce})),n.d(e,"isFalsy",(function(){return fe})),n.d(e,"isFunction",(function(){return le})),n.d(e,"isNil",(function(){return or})),n.d(e,"isPromise",(function(){return he})),n.d(e,"isPrototype",(function(){return ie})),n.d(e,"isType",(function(){return de})),n.d(e,"isValid",(function(){return ae})),n.d(e,"join",(function(){return sr})),n.d(e,"keys",(function(){return ur})),n.d(e,"last",(function(){return vt})),n.d(e,"lastIndexOf",(function(){return ar})),n.d(e,"length",(function(){return cr})),n.d(e,"map",(function(){return ge})),n.d(e,"mapAsync",(function(){return ye})),n.d(e,"mapFastAsync",(function(){return ve})),n.d(e,"mapToObject",(function(){return Oe})),n.d(e,"match",(function(){return lr})),n.d(e,"max",(function(){return fr})),n.d(e,"maxBy",(function(){return hr})),n.d(e,"maybe",(function(){return Ee})),n.d(e,"memoize",(function(){return Te})),n.d(e,"merge",(function(){return xt})),n.d(e,"mergeAll",(function(){return me})),n.d(e,"mergeDeep",(function(){return xe})),n.d(e,"mergeRight",(function(){return je})),n.d(e,"min",(function(){return dr})),n.d(e,"minBy",(function(){return pr})),n.d(e,"modulo",(function(){return yr})),n.d(e,"multiply",(function(){return br})),n.d(e,"nextIndex",(function(){return De})),n.d(e,"none",(function(){return vr})),n.d(e,"not",(function(){return gr})),n.d(e,"nth",(function(){return mr})),n.d(e,"ok",(function(){return we})),n.d(e,"omit",(function(){return Ge})),n.d(e,"once",(function(){return Be})),n.d(e,"opposite",(function(){return jn})),n.d(e,"otherwise",(function(){return Me})),n.d(e,"partial",(function(){return _r})),n.d(e,"partialCurry",(function(){return wr})),n.d(e,"partition",(function(){return at})),n.d(e,"pass",(function(){return Ce})),n.d(e,"path",(function(){return Mt})),n.d(e,"pathEq",(function(){return Ue})),n.d(e,"pathOr",(function(){return Or})),n.d(e,"pick",(function(){return jt})),n.d(e,"pickAll",(function(){return Er})),n.d(e,"pipe",(function(){return Le})),n.d(e,"piped",(function(){return Fe})),n.d(e,"pipedAsync",(function(){return $e})),n.d(e,"pluck",(function(){return Sr})),n.d(e,"prepend",(function(){return Ar})),n.d(e,"prevIndex",(function(){return ze})),n.d(e,"produce",(function(){return Ve})),n.d(e,"promiseAllObject",(function(){return We})),n.d(e,"prop",(function(){return Pr})),n.d(e,"propEq",(function(){return Ir})),n.d(e,"prototypeToString",(function(){return oe})),n.d(e,"pushUniq",(function(){return Ye})),n.d(e,"random",(function(){return Ke})),n.d(e,"range",(function(){return Yt})),n.d(e,"reduce",(function(){return Nr})),n.d(e,"reject",(function(){return Tr})),n.d(e,"remove",(function(){return Je})),n.d(e,"renameProps",(function(){return He})),n.d(e,"repeat",(function(){return jr})),n.d(e,"replace",(function(){return Vt})),n.d(e,"reset",(function(){return kt})),n.d(e,"resolve",(function(){return Xe})),n.d(e,"reverse",(function(){return xr})),n.d(e,"s",(function(){return Qe})),n.d(e,"setter",(function(){return Rt})),n.d(e,"shuffle",(function(){return Jt})),n.d(e,"sort",(function(){return Se})),n.d(e,"sortBy",(function(){return Dr})),n.d(e,"split",(function(){return Cr})),n.d(e,"splitEvery",(function(){return Rr})),n.d(e,"startsWith",(function(){return kr})),n.d(e,"subtract",(function(){return Br})),n.d(e,"switcher",(function(){return rn})),n.d(e,"tail",(function(){return Ur})),n.d(e,"take",(function(){return Ae})),n.d(e,"takeLast",(function(){return Lr})),n.d(e,"tap",(function(){return Fr})),n.d(e,"tapAsync",(function(){return on})),n.d(e,"template",(function(){return cn})),n.d(e,"test",(function(){return ne})),n.d(e,"throttle",(function(){return ln})),n.d(e,"times",(function(){return $r})),n.d(e,"toDecimal",(function(){return fn})),n.d(e,"toLower",(function(){return te})),n.d(e,"toPairs",(function(){return Yn})),n.d(e,"toString",(function(){return zr})),n.d(e,"toUpper",(function(){return qr})),n.d(e,"toggle",(function(){return hn})),n.d(e,"trim",(function(){return Vr})),n.d(e,"tryCatch",(function(){return dn})),n.d(e,"type",(function(){return r})),n.d(e,"uniq",(function(){return Wr})),n.d(e,"uniqWith",(function(){return Yr})),n.d(e,"unless",(function(){return pn})),n.d(e,"update",(function(){return Kr})),n.d(e,"uuid",(function(){return Xt})),n.d(e,"values",(function(){return Jr})),n.d(e,"wait",(function(){return yn})),n.d(e,"waitFor",(function(){return bn})),n.d(e,"when",(function(){return vn})),n.d(e,"whenAsync",(function(){return gn})),n.d(e,"where",(function(){return mn})),n.d(e,"whereEq",(function(){return wn})),n.d(e,"without",(function(){return Gr})),n.d(e,"zip",(function(){return Hr})),n.d(e,"zipObj",(function(){return Xr}));const h="Expected a function",d="__lodash_hash_undefined__",p=1/0,y=9007199254740991,b="[object Function]",v="[object GeneratorFunction]",g="[object Symbol]",m=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,_=/^\w*$/,w=/^\./,O=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,E=/\\(\\)?/g,S=/^\[object .+?Constructor\]$/,A=/^(?:0|[1-9]\d*)$/,P="object"==typeof t&&t&&t.Object===Object&&t,I="object"==typeof self&&self&&self.Object===Object&&self,N=P||I||Function("return this")();const T=Array.prototype,j=Function.prototype,x=Object.prototype,D=N["__core-js_shared__"],C=function(){const t=/[^.]+$/.exec(D&&D.keys&&D.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),R=j.toString,{hasOwnProperty:k}=x,B=x.toString,M=RegExp("^"+R.call(k).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),{Symbol:U}=N,{splice:L}=T,F=Q(N,"Map"),$=Q(Object,"create"),z=U?U.prototype:void 0,q=z?z.toString:void 0;function V(t){let e=-1,n=t?t.length:0;for(this.clear();++e<n;){const n=t[e];this.set(n[0],n[1])}}function W(t){let e=-1;const n=t?t.length:0;for(this.clear();++e<n;){const n=t[e];this.set(n[0],n[1])}}function Y(t){let e=-1;const n=t?t.length:0;for(this.clear();++e<n;){const n=t[e];this.set(n[0],n[1])}}function K(t,e,n){const r=t[e];k.call(t,e)&&rt(r,n)&&(void 0!==n||e in t)||(t[e]=n)}function J(t,e){let{length:n}=t;for(;n--;)if(rt(t[n][0],e))return n;return-1}function G(t){if(!ot(t)||(e=t,Boolean(C)&&C in e))return!1;var e;return(function(t){const e=ot(t)?B.call(t):"";return e==b||e==v}(t)||function(t){let e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=Boolean(String(t))}catch(t){}return e}(t)?M:S).test(function(t){if(null!=t){try{return R.call(t)}catch(t){}try{return String(t)}catch(t){}}return""}(t))}function H(t,e,n,r){if(!ot(t))return t;e=function(t,e){if(it(t))return!1;const n=typeof t;if("number"==n||"symbol"==n||"boolean"==n||null==t||st(t))return!0;return _.test(t)||!m.test(t)||null!=e&&t in Object(e)}(e,t)?[e]:function(t){return it(t)?t:tt(t)}(e);let i=-1,o=t;const{length:s}=e,u=s-1;for(;null!=o&&++i<s;){let t=et(e[i]),s=n;if(i!=u){const n=o[t];s=r?r(n,t,o):void 0,void 0===s&&(s=ot(n)?n:Z(e[i+1])?[]:{})}K(o,t,s),o=o[t]}return t}function X(t,e){const n=t.__data__;return function(t){const e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function Q(t,e){const n=function(t,e){return null==t?void 0:t[e]}(t,e);return G(n)?n:void 0}function Z(t,e){return e=null==e?y:e,Boolean(e)&&("number"==typeof t||A.test(t))&&t>-1&&t%1==0&&t<e}V.prototype.clear=function(){this.__data__=$?$(null):{}},V.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},V.prototype.get=function(t){const e=this.__data__;if($){const n=e[t];return n===d?void 0:n}return k.call(e,t)?e[t]:void 0},V.prototype.has=function(t){const e=this.__data__;return $?void 0!==e[t]:k.call(e,t)},V.prototype.set=function(t,e){return this.__data__[t]=$&&void 0===e?d:e,this},W.prototype.clear=function(){this.__data__=[]},W.prototype.delete=function(t){const e=this.__data__,n=J(e,t);return!(n<0)&&(n==e.length-1?e.pop():L.call(e,n,1),!0)},W.prototype.get=function(t){const e=this.__data__,n=J(e,t);return n<0?void 0:e[n][1]},W.prototype.has=function(t){return J(this.__data__,t)>-1},W.prototype.set=function(t,e){const n=this.__data__,r=J(n,t);return r<0?n.push([t,e]):n[r][1]=e,this},Y.prototype.clear=function(){this.__data__={hash:new V,map:new(F||W),string:new V}},Y.prototype.delete=function(t){return X(this,t).delete(t)},Y.prototype.get=function(t){return X(this,t).get(t)},Y.prototype.has=function(t){return X(this,t).has(t)},Y.prototype.set=function(t,e){return X(this,t).set(t,e),this};var tt=nt(t=>{t=function(t){return null==t?"":function(t){if("string"==typeof t)return t;if(st(t))return q?q.call(t):"";const e=String(t);return"0"==e&&1/t==-p?"-0":e}(t)}(t);const e=[];return w.test(t)&&e.push(""),t.replace(O,(t,n,r,i)=>{e.push(r?i.replace(E,"$1"):n||t)}),e});function et(t){if("string"==typeof t||st(t))return t;const e=String(t);return"0"==e&&1/t==-p?"-0":e}function nt(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError(h);var n=function(){const r=arguments,i=e?e.apply(this,r):r[0],{cache:o}=n;if(o.has(i))return o.get(i);const s=t.apply(this,r);return n.cache=o.set(i,s),s};return n.cache=new(nt.Cache||Y),n}function rt(t,e){return t===e||t!=t&&e!=e}nt.Cache=Y;var{isArray:it}=Array;function ot(t){const e=typeof t;return Boolean(t)&&("object"==e||"function"==e)}function st(t){return"symbol"==typeof t||function(t){return Boolean(t)&&"object"==typeof t}(t)&&B.call(t)==g}function ut(t,e,n){return null==t?t:H(t,e,n)}function at(t,e){if(1===arguments.length)return e=>at(t,e);if(!Array.isArray(e))return function(t,e){const n={},r={};return Object.entries(e).forEach(([e,i])=>{t(i,e)?n[e]=i:r[e]=i}),[n,r]}(t,e);const n=[],r=[];let i=-1;for(;i++<e.length-1;)t(e[i],i)?n.push(e[i]):r.push(e[i]);return[n,r]}const ct=t=>{return!(null===t||Array.isArray(t)||"object"!=typeof t)&&Object.keys(t).length>0};function lt(t,e,n){const r=JSON.parse(JSON.stringify(t));if(!ct(n))return ut(r,e,n),r;const i=""===e?"":`${e}.`;for(const t of Object.keys(n)){const e=n[t];if(!ct(e)){ut(r,`${i}${t}`,e);continue}const[o,s]=at(t=>ct(e[t]),Object.keys(e));s.forEach(n=>{const o=e[n];ut(r,`${i}${t}.${n}`,o)}),o.forEach(n=>{const o=e[n];Object.keys(o).forEach(o=>{const s=e[n][o];if(!ct(s))return ut(r,`${i}${t}.${n}.${o}`,s);Object.keys(s).forEach(s=>{const u=e[n][o][s];ut(r,`${i}${t}.${n}.${o}.${s}`,u)})})})}return r}const ft=["Null","Undefined","RegExp"],ht=["Number","Boolean"],dt=["Array","String"];function pt(t){const e=[];return t.forEach(t=>{const n=r(t);if(!ft.includes(n))return ht.includes(n)?e.push(t):void("Object"!==n?dt.includes(n)&&0!==t.length&&e.push(t):i(t,{})||e.push(t))}),e}function yt(...t){return async function(e){let n=e;for(;0!==t.length;){const e=t.pop();n="Async"===r(e)?await e(n):e(n)}return n}}function bt(...t){return(...e)=>{const n=t.slice();if(n.length>0){let t=n.pop()(...e);for(;n.length>0;)t=n.pop()(t);return t}}}function vt(t){return"string"==typeof t?t[t.length-1]||"":t[t.length-1]}function gt(t,e,n){let r=-1,{length:i}=t;(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;const o=Array(i);for(;++r<i;)o[r]=t[r+e];return o}function mt(t){return"string"==typeof t?t.slice(0,-1):t.length?gt(t,0,-1):[]}function _t(...t){return bt(...mt(t))(vt(t))}function wt(t,e){return 1===arguments.length?e=>wt(t,e):Array.isArray(e)?e.filter(e=>i(e,t)).length:0}function Ot(t,e,n=!1){let r;return function(...i){const o=n&&!r;clearTimeout(r),r=setTimeout((function(){r=null,n||t.apply(null,i)}),e),o&&t.apply(null,i)}}function Et(t,e){return!!e&&(r(e)===t&&("Array"===t?!i([],e):"Object"!==t||!i({},e)))}function St(t,...e){if(1===arguments.length)return e=>St(t,e);if(2===arguments.length)return Et(r(t),e[0])?e[0]:t;const n=r(t),i=e.length-1;let o,s=i+1,u=!1;for(;!u;){const t=e[i-s+1];0===s?u=!0:Et(n,t)?(o=t,u=!0):s-=1}return void 0===o?t:o}function At(t,e,...n){if(2===arguments.length)return(...n)=>At(t,e,...n);const r=n.length-1;let i,o=r+1,s=!1;for(;!s;){const t=n[r-o+1];0===o?s=!0:!0===e(t)?(i=t,s=!0):o-=1}return void 0===i?t:i}function Pt(t){return new Promise(e=>{setTimeout(()=>{e("RAMBDAX_DELAY")},t)})}function It(t,e){if(1===arguments.length)return e=>It(t,e);let n={fallback:!0};return Object.entries(e).forEach(([e,r])=>{n.fallback&&t(r,e)&&(n={prop:e,value:r})}),n}function Nt(t,e){if(1===arguments.length)return e=>Nt(t,e);const n=e.length;if(0===n)return!1;let r=-1;for(;++r<n;){const n=t(e[r],r);if(!1!==n)return n}return!1}function Tt(t,e){return 1===arguments.length?e=>Tt(t,e):[].concat(...e.map(t))}function jt(t,e){if(1===arguments.length)return e=>jt(t,e);if(null==e)return;const n="string"==typeof t?t.split(","):t,r={};let i=0;for(;i<n.length;)n[i]in e&&(r[n[i]]=e[n[i]]),i++;return r}function xt(t,e){return 1===arguments.length?e=>xt(t,e):Object.assign({},t||{},e||{})}let Dt={};function Ct(t){const e=r(t);return"String"===e?Dt[t]:"Array"===e?jt(t,Dt):Dt}function Rt(t,e){const n=r(t),i=r(e);if("String"===n)return Dt[t]="Function"===i?e(Dt[t]):e;"Object"===n&&(Dt=xt(Dt,t))}function kt(){Dt={}}function Bt(t,e){return t.split("\n").filter(t=>t.trim().length>0).map(t=>t.trim()).join(void 0===e?" ":e)}function Mt(t,e){if(1===arguments.length)return e=>Mt(t,e);if(null==e)return;let n=e,r=0;const i="string"==typeof t?t.split("."):t;for(;r<i.length;){if(null==n)return;n=n[i[r]],r++}return n}function Ut(t,e){return 1===arguments.length?e=>Ut(t,e):void 0!==Mt(t,e)}function Lt(t){const[e,n]=Object.entries(t);if(!e)return{prop:void 0,value:void 0};if(n)throw new Error("R.headObject expects object with only one key");return{prop:e[0],value:e[1]}}function Ft(t){return async function(e){return t(e)}}function $t(t,e,n){return r=>new Promise((i,o)=>{const s=Ft(t),u=Ft(e),a=Ft(n);s(r).then(t=>{(!0===t?u:a)(r).then(i).catch(o)}).catch(o)})}function zt(t,e){if(1===arguments.length)return e=>zt(t,e);let n=0;for(;n<e.length;){if(t(e[n],n))return!0;n++}return!1}function qt(t,e){return 1===arguments.length?e=>qt(t,e):zt(e=>r(e)===t,e)}function Vt(t,e,n){return void 0===e?(e,n)=>Vt(t,e,n):void 0===n?n=>Vt(t,e,n):n.replace(t,e)}function Wt(t,e,n,r=!1){return Vt(e,r?`${t}${e}`:`${e}${t}`,n)}function Yt(t,e){if(1===arguments.length)return e=>Yt(t,e);const n=e-t,r=Array(n);for(let e=0;e<n;e++)r[e]=t+e;return r}function Kt(t){return"string"==typeof t?t[0]||"":t[0]}function Jt(t){const e=t.concat();let n=e.length;for(;n>0;){const t=Math.floor(Math.random()*n);n--;const r=e[n];e[n]=e[t],e[t]=r}return e}const Gt=[...Yt(49,57),...Yt(65,90),...Yt(97,122)],Ht=Yt(0,8);function Xt(){return Ht.map(t=>String.fromCharCode(Kt(Jt(Gt)))).join("")}const Qt={};function Zt({fn:t,ms:e,stopWhen:n}){const r=Xt();return new Promise(i=>{Qt[r]=setInterval(()=>{!0===n()?(clearInterval(Qt[r]),i()):t()},e)})}function te(t){return t.toLowerCase()}function ee(t,e){if(1===arguments.length)return e=>ee(t,e);if("string"==typeof e)return e.includes(t);if(!Array.isArray(e))return!1;let n=-1;for(;++n<e.length;)if(i(e[n],t))return!0;return!1}function ne(t,e){return 1===arguments.length?e=>ne(t,e):-1!==e.search(t)}function re(t,e){if(1===arguments.length)return e=>re(t,e);for(let n=0;n<e.length;n++)if(!t(e[n],n))return!1;return!0}function ie(t){const e=t.prototype,n=[Number,String,Boolean,Promise];let r=!1,i=-1;for(;++i<n.length&&!r;)e===n[i].prototype&&(r=!0);return r}function oe(t){const e=t.prototype,n=[Number,String,Boolean,Promise];let r,i=-1;for(;++i<n.length;)e===n[i].prototype&&(r=i);return["Number","String","Boolean","Promise"][r]}const se=["any","promise","async","function"];function ue(t,e){const n=t[e],i=r(n),{rule:o,parsed:s}=function(t){return Array.isArray(t)||null==t||void 0===t.prototype||se.includes(t)?{rule:t,parsed:!1}:String.prototype===t.prototype?{rule:"string",parsed:!0}:Boolean.prototype===t.prototype?{rule:"boolean",parsed:!0}:Number.prototype===t.prototype?{rule:"number",parsed:!0}:{rule:r(t.prototype).toLowerCase(),parsed:!0}}(n);return{rule:o,ruleType:s?"String":i}}function ae({input:t,schema:e}){if(void 0===t||void 0===e)return!1;let n=!0;const i=t=>{t||(n=!1)};for(const o in e)if(n){const s=o.endsWith("?"),u=s?mt(o):o,{rule:a,ruleType:c}=ue(e,o),l=t[u],f=r(t[u]);if(!(s&&void 0!==l||!s)||"any"===a&&null!=l||a===l)continue;if("Object"===c){i(ae({input:l,schema:a}))}else if("String"===c)i(te(f)===a);else if("function"==typeof a)i(a(l));else if("Array"===c&&"String"===f)i(ee(l,a));else if("Array"===c&&1===a.length&&"Array"===f){const[t]=a,e=r(t);if(i("String"===e||"Object"===e||ie(t)),"Object"===e&&n){i(re(e=>ae({input:e,schema:t}),l))}else if(n){const n="String"===e?t:oe(t);i(!zt(t=>r(t).toLowerCase()!==n.toLowerCase(),l))}}else i("RegExp"===c&&"String"===f&&ne(a,l))}return n}function ce(){return void 0===Object.prototype.is&&(Object.defineProperty(Object.prototype,"is",{value:function(t){return ae({input:{isProp:this},schema:{isProp:t}})},writable:!0,configurable:!0}),!0)}function le(t){return["Async","Promise","Function"].includes(r(t))}function fe(t){const e=r(t);return["Array","String"].includes(e)?0===t.length:"Object"===e?0===Object.keys(t).length:!!["Null","Undefined"].includes(e)}function he(t){return["Async","Promise"].includes(r(t))}function de(t,e){return 1===arguments.length?e=>de(t,e):r(e)===t}async function pe(t,e){if(Array.isArray(e)){const n=[];for(const r of e)n.push(await t(r));return n}const n={};for(const r in e)n[r]=await t(e[r],r);return n}function ye(t,e){return 1===arguments.length?async e=>pe(t,e):new Promise((n,r)=>{pe(t,e).then(n).catch(r)})}async function be(t,e){const n=e.map(e=>t(e));return Promise.all(n)}function ve(t,e){return 1===arguments.length?async e=>be(t,e):new Promise((n,r)=>{be(t,e).then(n).catch(r)})}function ge(t,e){if(1===arguments.length)return e=>ge(t,e);if(void 0===e)return[];if(!Array.isArray(e))return function(t,e){const n={};for(const r in e)n[r]=t(e[r],r,e);return n}(t,e);let n=-1;const r=e.length,i=Array(r);for(;++n<r;)i[n]=t(e[n],n);return i}function me(t){let e={};return ge(t=>{e=xt(e,t)},t),e}function _e(t,e){return ae({input:{singleInput:t},schema:{singleInput:e}})}function we(...t){return(...e)=>{let n;if(!(!1===zt((t,r)=>{const i=void 0===e[r]?e[0]:e[r],o=_e(t,i);return o||(n=JSON.stringify({input:t,schema:i})),!o},t)))throw new Error(`Failed R.ok with schema ${n}`);return!0}}function Oe(t,e){return 1===arguments.length?e=>Oe(t,e):(we(r(t),r(e))("Function","Array"),me(ge(t,e)))}function Ee(t,e,n){const i=t&&"Function"===r(e)?e():e,o=t||"Function"!==r(n)?n:n();return t?i:o}function Se(t,e){if(1===arguments.length)return e=>Se(t,e);return e.concat().sort(t)}function Ae(t,e){return 1===arguments.length?e=>Ae(t,e):"string"==typeof e?e.slice(0,t):gt(e,0,t)}const Pe={},Ie=t=>{if("String"===r(t))return t;if(["Function","Async"].includes(r(t))){const e=Vt(/\s{1,}/g," ",t.toString());return Vt(/\s/g,"_",Ae(15,e))}return"Object"===r(t)?JSON.stringify((t=>{const e={};return bt(ge(n=>e[n]=t[n]),Se((t,e)=>t>e?1:-1))(Object.keys(t)),e})(t)):JSON.stringify(t)},Ne=(t,...e)=>{let n="";return e.forEach(t=>{n+=`${Ie(t)}_`}),`${n}${Ie(t)}`};function Te(t,...e){if(1===arguments.length)return(...e)=>Te(t,...e);const n=Ne(t,...e);if(n in Pe)return Pe[n];if("Async"===r(t))return new Promise(r=>{t(...e).then(t=>{Pe[n]=t,r(t)})});const i=t(...e);return Pe[n]=i,i}function je(t,e){return xt(e,t)}function xe(t,e){if(1===arguments.length)return e=>xe(t,e);const n=JSON.parse(JSON.stringify(t));return Object.keys(e).forEach(i=>{"Object"===r(e[i])&&"Object"===r(t[i])?n[i]=xe(t[i],e[i]):n[i]=e[i]}),n}function De(t,e){return t>=("number"==typeof e?e:e.length)-1?0:t+1}function Ce(...t){return(...e)=>!1===zt((t,n)=>{return!_e(t,void 0===e[n]?e[0]:e[n])},t)}function Re(t,e=[]){return(...n)=>(e=>e.length>=t.length?t(...e):Re(t,e))([...e,...n])}function ke(t,e){let n;return function(){return t&&(n=t.apply(e||this,arguments),t=null),n}}function Be(t,e){if(1===arguments.length){return Re(ke(t,e))}return ke(t,e)}function Me(t,e){return 1===arguments.length?e=>Me(t,e):new Promise(n=>{e.then(n).catch(e=>n(t(e)))})}function Ue(t,e,n){return 2===arguments.length?n=>Ue(t,e,n):Mt(t,n)===e}function Le(...t){return bt(...t.reverse())}function Fe(...t){const[e,...n]=t;return Le(...n)(e)}async function $e(...t){const[e,...n]=t;let i=e;for(;0!==n.length;){const t=n.shift();i="Async"===r(t)?await t(i):t(i)}return i}function ze(t,e){const n="number"==typeof e?e:e.length;return 0===t?n-1:t-1}function qe({condition:t,inputArgument:e,prop:n}){return new Promise((i,o)=>{if("Async"!==r(t))return i({type:n,payload:t(e)});t(e).then(t=>{i({type:n,payload:t})}).catch(t=>o(t))})}function Ve(t,e){if(1===arguments.length)return e=>Ve(t,e);let n=!1;for(const e in t)!1===n&&"Async"===r(t[e])&&(n=!0);if(!1===n){const n={};for(const r in t)n[r]=t[r](e);return n}const i=[];for(const n in t){const r=t[n];i.push(qe({inputArgument:e,condition:r,prop:n}))}return new Promise((t,e)=>{Promise.all(i).then(e=>{const n={};ge(t=>n[t.type]=t.payload,e),t(n)}).catch(t=>e(t))})}function We(t){return new Promise((e,n)=>{let r=0;const i={},o=[];for(const e in t)i[r]=e,o.push(t[e]),r++;Promise.all(o).then(t=>{const n={};t.map((t,e)=>{const r=i[e];n[r]=t}),e(n)}).catch(n)})}function Ye(t,e){e.includes(t)||e.push(t)}function Ke(t,e){return Math.floor(Math.random()*(e-t+1))+t}function Je(t,e){if(1===arguments.length)return e=>Je(t,e);if("String"!==r(e))throw new Error(`R.remove requires string not ${r(e)}`);if("Array"!==r(t))return Vt(t,"",e).trim();let n=e;return t.forEach(t=>{n=Vt(t,"",n).trim()}),n}function Ge(t,e){if(1===arguments.length)return e=>Ge(t,e);if(null==e)return;const n="string"==typeof t?t.split(","):t,r={};for(const t in e)n.includes(t)||(r[t]=e[t]);return r}function He(t,e){if(void 0===e)return e=>He(t,e);const n={};return Object.keys(t).forEach(r=>{Object.keys(e).includes(r)&&(n[t[r]]=e[r])}),xt(n,Ge(Object.keys(t),e))}function Xe(t,e){return 1===arguments.length?e=>Xe(t,e):new Promise(n=>{e.then(e=>n(t(e)))})}function Qe(){return void 0===Object.prototype.s&&(Object.defineProperty(Object.prototype,"s",{value:function(t){return t(this.valueOf())},writable:!0,configurable:!0}),!0)}const Ze=Symbol?Symbol("NO_MATCH_FOUND"):void 0,tn=(t,e,n)=>{let r;for(let n=0;n<t.length;n++)if(r=t[n].test(e),r!==Ze)return r;return n},en=(t,e=!0)=>({key:t,test:n=>((t,e)=>{return"function"==typeof t?t(e):i(t,e)})(t,n)?e:Ze});class nn{constructor(t,e,n){return void 0!==t&&void 0===e&&void 0===n?(this.cases=[],this.defaultValue=void 0,this.willMatch=t):(this.cases=e,this.defaultValue=t,this.willMatch=n),this}default(t){return new nn(t,this.cases,this.willMatch).match(this.willMatch)}is(t,e){return new nn(this.defaultValue,[...this.cases,en(t,e)],this.willMatch)}match(t){return tn(this.cases,t,this.defaultValue)}}function rn(t){return new nn(t)}function on(t,e){return 1===arguments.length?e=>on(t,e):!0===he(t)?new Promise((n,r)=>{t(e).then(()=>{n(e)}).catch(r)}):(t(e),e)}const sn=t=>t.match(/{{[_a-zA-Z0-9]+}}/g),un=t=>t.replace(/{{|}}/g,""),an=({inputHolder:t,prop:e,replacer:n})=>t.replace(`{{${e}}}`,n);function cn(t,e){if(1===arguments.length)return e=>cn(t,e);const n=sn(t);if(null===n)return t;let r=t;for(const t of n){const n=un(t),i=e[n];void 0!==i&&(r=an({inputHolder:r,prop:n,replacer:i}))}return r}function ln(t,e){let n=!1;return function(...r){n||(t.apply(null,r),n=!0,setTimeout(()=>{n=!1},e))}}function fn(t,e=2){return Number(parseFloat(String(t)).toFixed(e))}function hn(t,e){return t===e[0]?e[1]:e[0]}function dn(t,e){if(!le(t))throw new Error(`R.tryCatch | fn '${t}'`);const n=le(e);return he(t)?(...r)=>new Promise(i=>{t(...r).then(i).catch(()=>n?he(e)?void e(...r).then(i):i(e(...r)):i(e))}):(...r)=>{try{return t(...r)}catch(t){return n?e(...r):e}}}function pn(t,e){return 1===arguments.length?e=>pn(t,e):n=>{return("boolean"==typeof t?t:t(n))?n:le(e)?e(n):e}}function yn(t){return new Promise(e=>{t.then(t=>e([t,void 0])).catch(t=>e([void 0,t]))})}function bn(t,e,n=10){const i=r(t),o="Async"===i,s="Function"===i,u=Math.floor(e/n);if(!o&&!s)throw new Error("R.waitFor");return async(...e)=>{for(const r of Yt(0,n)){const n=await t(...e);if(!1!==n)return n;await Pt(u)}return!1}}function vn(t,e){return 1===arguments.length?e=>vn(t,e):n=>{return("boolean"==typeof t?t:t(n))?le(e)?e(n):e:n}}function gn(t,e){return 1===arguments.length?e=>gn(t,e):n=>new Promise((r,i)=>{if("boolean"==typeof t){if(!1===t)return r(n);e(n).then(r).catch(i)}else{(function(t){return async function(e){return t(e)}})(t)(n).then(t=>{if(!1===t)return r(n);e(n).then(r).catch(i)}).catch(i)}})}function mn(t,e){if(void 0===e)return e=>mn(t,e);let n=!0;for(const r in t){const i=t[r](e[r]);n&&!1===i&&(n=!1)}return n}function _n(t,e){if(1===arguments.length)return e=>_n(t,e);if(void 0===e)return[];if(!Array.isArray(e))return function(t,e){const n={};for(const r in e)t(e[r],r,e)&&(n[r]=e[r]);return n}(t,e);let n=-1,r=0;const i=e.length,o=[];for(;++n<i;){const i=e[n];t(i,n)&&(o[r++]=i)}return o}function wn(t,e){if(1===arguments.length)return e=>wn(t,e);if("Object"!==r(e))return!1;const n=_n((t,n)=>i(t,e[n]),t);return Object.keys(n).length===Object.keys(t).length}function On(t,e){return 1===arguments.length?e=>On(t,e):t+e}const En=Re((function(t,e,n){const r=n.slice(),i=e<0?r.length+e:e;return r[i]=t(r[i]),r}));function Sn(t,e){return 1===arguments.length?e=>Sn(t,e):!zt(t=>!t(e),t)}function An(t){return()=>t}function Pn(t,e){return 1===arguments.length?e=>Pn(t,e):zt(t=>t(e))(t)}function In(t,e){if(1===arguments.length)return e=>In(t,e);if("string"==typeof e)return`${e}${t}`;const n=e.concat();return n.push(t),n}const Nn=Re((function(t,e,n){return Object.assign({},n,{[t]:e})}));function Tn(t,e){return 1===arguments.length?e=>Tn(t,e):n=>t(n)&&e(n)}function jn(t){return e=>!t(e)}function xn(t,e){return 1===arguments.length?e=>xn(t,e):"string"==typeof t?`${t}${e}`:[...t,...e]}const Dn=t=>t-1;function Cn(t){return null==t||!0===Number.isNaN(t)}function Rn(t,...e){if(1===arguments.length)return e=>Rn(t,e);if(2===arguments.length)return Cn(e[0])?t:e[0];const n=e.length-1;let r,i=n+1,o=!1;for(;!o;){const t=e[n-i+1];0===i?o=!0:Cn(t)?i-=1:(r=t,o=!0)}return void 0===r?t:r}function kn(t,e){if(1===arguments.length)return e=>kn(t,e);if(null==e)return{};const n={};for(const t in e)n[t]=e[t];return delete n[t],n}function Bn(t,e){return 1===arguments.length?e=>Bn(t,e):t/e}function Mn(t,e){return 1===arguments.length?e=>Mn(t,e):e.slice(t)}function Un(t,e){return 1===arguments.length?e=>Un(t,e):e.slice(0,-t)}function Ln(t,e){return 1===arguments.length?e=>Ln(t,e):n=>t(n)||e(n)}function Fn(t,e){return 1===arguments.length?e=>Fn(t,e):e.endsWith(t)}function $n(){return!1}function zn(t,e){return 1===arguments.length?e=>zn(t,e):e.find(t)}function qn(t,e){if(1===arguments.length)return e=>qn(t,e);const n=e.length;let r=-1;for(;++r<n;)if(t(e[r],r))return r;return-1}function Vn(t,e){const n=void 0===e?[]:e;for(let e=0;e<t.length;e++)Array.isArray(t[e])?Vn(t[e],n):n.push(t[e]);return n}function Wn(t){return function(t){return(...e)=>1===e.length?n=>t(n,e[0]):2===e.length?t(e[1],e[0]):void 0}(t)}function Yn(t){return Object.entries(t)}function Kn(t){const e={};return t.forEach(([t,n])=>e[t]=n),e}function Jn(t){const e=Array.isArray(t)?Array(t.length):{};for(const n in t){const r=t[n];e[n]="object"==typeof r&&null!==r?r.getTime?new Date(r.getTime()):Jn(r):r}return e}function Gn(t,e){return 1===arguments.length?e=>Gn(t,e):(ge(t,e),e)}function Hn(t,e){if(1===arguments.length)return e=>Hn(t,e);const n={};for(let r=0;r<e.length;r++){const i=e[r],o=t(i);n[o]||(n[o]=[]),n[o].push(i)}return n}function Xn(t,e){const n=[];let r=[];return e.reduce((i,o,s)=>(s>0&&t(i,o)?0===r.length?(r.push(i),r.push(o)):r.push(o):s>0&&(0===r.length?(n.push([i]),s===e.length-1&&r.push(o)):(n.push(r),r=[])),o),void 0),0===r.length?n:[...n,r]}function Qn(t,e){return 1===arguments.length?e=>Qn(t,e):void 0!==e[t]}function Zn(t){return t}function tr(t,e,n){return void 0===e?(e,n)=>tr(t,e,n):void 0===n?n=>tr(t,e,n):r=>{return!0===("boolean"==typeof t?t:t(r))?e(r):n(r)}}const er=t=>t+1;function nr(t,e){if(1===arguments.length)return e=>nr(t,e);const n={};for(let r=0;r<e.length;r++){const i=e[r];n[t(i)]=i}return n}function rr(t,e){if(1===arguments.length)return e=>rr(t,e);let n=-1;const{length:r}=e;for(;++n<r;)if(e[n]===t)return n;return-1}function ir(t,e){return 1===arguments.length?e=>ir(t,e):null!=e&&e.constructor===t||e instanceof t}function or(t){return null==t}function sr(t,e){return 1===arguments.length?e=>sr(t,e):e.join(t)}function ur(t){return Object.keys(t)}function ar(t,e){if(1===arguments.length)return e=>ar(t,e);let n=e.length;for(;--n>0;)if(i(e[n],t))return n;return-1}function cr(t){return t.length}function lr(t,e){if(1===arguments.length)return e=>lr(t,e);const n=e.match(t);return null===n?[]:n}function fr(t,e){return 1===arguments.length?e=>fr(t,e):e>t?e:t}function hr(t,e,n){return 2===arguments.length?n=>hr(t,e,n):1===arguments.length?(e,n)=>hr(t,e,n):t(n)>t(e)?n:e}function dr(t,e){return 1===arguments.length?e=>dr(t,e):e<t?e:t}function pr(t,e,n){return 2===arguments.length?n=>pr(t,e,n):1===arguments.length?(e,n)=>pr(t,e,n):t(n)<t(e)?n:e}function yr(t,e){return 1===arguments.length?e=>yr(t,e):t%e}function br(t,e){return 1===arguments.length?e=>br(t,e):t*e}function vr(t,e){return 1===arguments.length?e=>vr(t,e):0===e.filter(t).length}function gr(t){return!t}function mr(t,e){if(1===arguments.length)return e=>mr(t,e);const n=t<0?e.length+t:t;return"[object String]"===Object.prototype.toString.call(e)?e.charAt(n):e[n]}function _r(t,...e){const n=t.length;return(...r)=>e.length+r.length>=n?t(...e,...r):_r(t,...e,...r)}function wr(t,e={}){return n=>"Async"===r(t)||"Promise"===r(t)?new Promise((r,i)=>{t(xt(n,e)).then(r).catch(i)}):t(xt(n,e))}const Or=Re((function(t,e,n){return Rn(t,Mt(e,n))}));function Er(t,e){if(1===arguments.length)return e=>Er(t,e);if(null==e)return;const n="string"==typeof t?t.split(","):t,r={};let i=0;for(;i<n.length;)n[i]in e?r[n[i]]=e[n[i]]:r[n[i]]=void 0,i++;return r}function Sr(t,e){if(1===arguments.length)return e=>Sr(t,e);const n=[];return ge(e=>{void 0!==e[t]&&n.push(e[t])},e),n}function Ar(t,e){if(1===arguments.length)return e=>Ar(t,e);if("string"==typeof e)return`${t}${e}`;return[t].concat(e)}function Pr(t,e){return 1===arguments.length?e=>Pr(t,e):e?e[t]:void 0}function Ir(t,e,n){return void 0===e?(e,n)=>Ir(t,e,n):void 0===n?n=>Ir(t,e,n):n[t]===e}const Nr=Re((function(t,e,n){return n.reduce(t,e)}));function Tr(t,e){return 1===arguments.length?e=>Tr(t,e):_n((e,n)=>!t(e,n),e)}function jr(t,e){if(1===arguments.length)return e=>jr(t,e);return Array(e).fill(t)}function xr(t){return t.concat().reverse()}function Dr(t,e){if(1===arguments.length)return e=>Dr(t,e);return e.concat().sort((e,n)=>{const r=t(e),i=t(n);return r===i?0:r<i?-1:1})}function Cr(t,e){return 1===arguments.length?e=>Cr(t,e):e.split(t)}function Rr(t,e){if(1===arguments.length)return e=>Rr(t,e);const n=t>1?t:1,r=[];let i=0;for(;i<e.length;)r.push(e.slice(i,i+=n));return r}function kr(t,e){return 1===arguments.length?e=>kr(t,e):e.startsWith(t)}function Br(t,e){return 1===arguments.length?e=>Br(t,e):t-e}function Mr(){return!0}function Ur(t){return Mn(1,t)}function Lr(t,e){if(1===arguments.length)return e=>Lr(t,e);const n=e.length;let r=t>n?n:t;return"string"==typeof e?e.slice(n-r):(r=n-r,gt(e,r,n))}function Fr(t,e){return 1===arguments.length?e=>Fr(t,e):(t(e),e)}function $r(t,e){return 1===arguments.length?e=>$r(t,e):ge(t,Yt(0,e))}function zr(t){return t.toString()}function qr(t){return t.toUpperCase()}function Vr(t){return t.trim()}function Wr(t){let e=-1;const n=[];for(;++e<t.length;){const r=t[e];ee(r,n)||n.push(r)}return n}function Yr(t,e){if(1===arguments.length)return e=>Yr(t,e);let n=-1;const r=e.length,i=[];for(;++n<r;){const r=e[n];zt(e=>t(r,e),i)||i.push(r)}return i}function Kr(t,e,n){if(void 0===e)return(e,n)=>Kr(t,e,n);if(void 0===n)return n=>Kr(t,e,n);return n.concat().fill(e,t,t+1)}function Jr(t){return Object.values(t)}function Gr(t,e){return void 0===e?e=>Gr(t,e):Nr((e,n)=>ee(n,t)?e:e.concat(n),[],e)}function Hr(t,e){if(1===arguments.length)return e=>Hr(t,e);const n=[],r=Math.min(t.length,e.length);for(let i=0;i<r;i++)n[i]=[t[i],e[i]];return n}function Xr(t,e){return 1===arguments.length?e=>Xr(t,e):t.reduce((t,n,r)=>(t[n]=e[r],t),{})}const Qr="RAMBDAX_DELAY"}.call(this,n("yLpj"))},F8Mn:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i,o,s,u=n("Ex95"),a=b(n("b9Gj")),c=b(n("KPdl")),l=b(n("YgyC")),f=b(n("g5+O")),h=b(n("dhN9")),d=b(n("ihlm")),p=n("0gbD"),y=n("ICxb");function b(t){return t&&t.__esModule?t:{default:t}}function v(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function g(t,e,n,r){n&&Object.defineProperty(t,e,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e,n,r,i){var o={};return Object.keys(r).forEach((function(t){o[t]=r[t]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce((function(n,r){return r(t,e,n)||n}),o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(t,e,o),o=null),o}var w=(i=_((r=function(){function t(t,e){g(this,"_cachedObservable",i,this),g(this,"_cachedCountObservable",o,this),g(this,"_cachedCountThrottledObservable",s,this),this.collection=t,this._rawDescription=(0,p.buildQueryDescription)(e),this.description=(0,p.queryWithoutDeleted)(this._rawDescription)}var e,n,r,a=t.prototype;return a.extend=function(...e){var{collection:n}=this,{join:r,where:i}=this._rawDescription;return new t(n,[].concat(v(r),v(i),e))},a.pipe=function(t){return t(this)},a.fetch=function(){return this.collection.fetchQuery(this)},a.observe=function(){return this._cachedObservable},a.observeWithColumns=function(t){return(0,d.default)(this,t)},a.fetchCount=function(){return this.collection.fetchCount(this)},a.observeCount=function(t=!0){return t?this._cachedCountThrottledObservable:this._cachedCountObservable},a.markAllAsDeleted=function(){return new Promise(function(t,e){var n;return Promise.resolve(this.fetch()).then((function(r){try{return n=r,Promise.resolve((0,c.default)((function(t){return t.markAsDeleted()}),n)).then((function(){try{return t()}catch(t){return e(t)}}),e)}catch(t){return e(t)}}),e)}.bind(this))},a.destroyAllPermanently=function(){return new Promise(function(t,e){var n;return Promise.resolve(this.fetch()).then((function(r){try{return n=r,Promise.resolve((0,c.default)((function(t){return t.destroyPermanently()}),n)).then((function(){try{return t()}catch(t){return e(t)}}),e)}catch(t){return e(t)}}),e)}.bind(this))},a.serialize=function(){var{table:t,description:e,associations:n}=this;return{table:t,description:e,associations:n}},e=t,(n=[{key:"modelClass",get:function(){return this.collection.modelClass}},{key:"table",get:function(){return this.modelClass.table}},{key:"secondaryTables",get:function(){return(0,y.getSecondaryTables)(this.description)}},{key:"allTables",get:function(){return(0,u.prepend)(this.table,this.secondaryTables)}},{key:"associations",get:function(){return(0,y.getAssociations)(this.secondaryTables,this.modelClass.associations)}},{key:"hasJoins",get:function(){return!!this.description.join.length}}])&&m(e.prototype,n),r&&m(e,r),t}()).prototype,"_cachedObservable",[l.default],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return(0,h.default)(this).pipe(a.default)}}),o=_(r.prototype,"_cachedCountObservable",[l.default],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return(0,f.default)(this,!1).pipe(a.default)}}),s=_(r.prototype,"_cachedCountThrottledObservable",[l.default],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return(0,f.default)(this,!0).pipe(a.default)}}),r);e.default=w},F98g:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=c(n("Cu4n")),o=c(n("OFZ/")),s=c(n("OuaU")),u=c(n("u9xY")),a=n("MgNV");function c(t){return t&&t.__esModule?t:{default:t}}function l(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var f=s.default.prototype,h=((r={})[a.actions.SETUP]=f.setUp,r[a.actions.FIND]=f.find,r[a.actions.QUERY]=f.query,r[a.actions.COUNT]=f.count,r[a.actions.BATCH]=f.batch,r[a.actions.UNSAFE_RESET_DATABASE]=f.unsafeResetDatabase,r[a.actions.GET_LOCAL]=f.getLocal,r[a.actions.SET_LOCAL]=f.setLocal,r[a.actions.REMOVE_LOCAL]=f.removeLocal,r[a.actions.GET_DELETED_RECORDS]=f.getDeletedRecords,r[a.actions.DESTROY_DELETED_RECORDS]=f.destroyDeletedRecords,r),{RESPONSE_SUCCESS:d,RESPONSE_ERROR:p}=a.responseActions,y=function(){function t(t){var e=this;this.workerContext=t,this._setUpQueue(),this.workerContext.onmessage=function(t){e.asyncQueue.push(t.data,(function(t){var{type:n,payload:r}=t;e.workerContext.postMessage({type:n,payload:r})}))}}return t.prototype._setUpQueue=function(){var t=this;this.asyncQueue=(0,u.default)((function(e,n){return new Promise((function(r,u){var c,f,y,b,v,g=function(){try{return r()}catch(t){return u(t)}},m=function(t){try{return(0,i.default)(t),n({type:p,payload:t}),g()}catch(t){return u(t)}};try{return({type:c,payload:f}=e),(0,o.default)(c in a.actions,"Unknown worker action ".concat(c)),c===a.actions.SETUP?((0,o.default)(!t.executor,"Loki executor already set up - cannot set up again"),[y]=f,b=new s.default(y),Promise.resolve(b.setUp()).then(function(){try{return t.executor=b,n({type:d,payload:null}),_.call(this)}catch(t){return m(t)}}.bind(this),m)):((0,o.default)(t.executor,"Cannot run actions because executor is not set up"),v=h[c].bind(t.executor),Promise.resolve(v.apply(void 0,l(f))).then(function(t){try{return n({type:d,payload:t}),_.call(this)}catch(t){return m(t)}}.bind(this),m));function _(){return g()}}catch(t){m(t)}}))}))},t}();e.default=y},"FZ/z":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};var r={};return r[e]=n,r}},G4OQ:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("Lvzb"))},G5J1:function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o}));var r=n("6blF"),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},GtDr:function(t,e,n){},GxSh:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var n=e.getCollection(t.table).chain(),r=(0,o.default)(t);return l(n.find(function(t,e){var{query:n,joins:r}=t,i=r.map((function(t){return function(t,e){var n,{table:r,query:i,originalConditions:o,mapKey:s,joinKey:u}=t,a=l(e.getCollection(r).chain().find(i),o).data().map((function(t){return t[s]}));return(n={})[u]={$in:a},n}(t,e)}));return i.length?{$and:[].concat((o=i,c(o)||a(o)||u()),[n])}:n;var o}(r,e)),t.description.where)};s(n("XS3J"));var r=s(n("cDIe")),i=n("0gbD"),o=s(n("c/G6"));function s(t){return t&&t.__esModule?t:{default:t}}function u(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function a(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function c(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}function l(t,e){if((0,i.hasColumnComparisons)(e)){var n=(0,r.default)({where:e,join:[]});return t.where(n)}return t}},H7XF:function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),s=r[0],u=r[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,s,u)),l=0,f=u>0?s-4:s;for(n=0;n<f;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],a[l++]=e>>16&255,a[l++]=e>>8&255,a[l++]=255&e;2===u&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,a[l++]=255&e);1===u&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,a[l++]=e>>8&255,a[l++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,u=n-i;s<u;s+=16383)o.push(l(t,s,s+16383>u?u:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,a=s.length;u<a;++u)r[u]=s[u],i[s.charCodeAt(u)]=u;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var i,o,s=[],u=e;u<n;u+=3)i=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},HAps:function(t,e,n){},HDK4:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("xp1A"))},HDXh:function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n("H7XF"),i=n("kVK+"),o=n("49sm");function s(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,n){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!a.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=u(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(a.isBuffer(e)){var n=0|d(e.length);return 0===(t=u(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?u(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=u(t,e<0?0:0|d(e)),!a.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|d(e.length);t=u(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return $(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return $(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return j(this,e,n);case"utf8":case"utf-8":return P(this,e,n);case"ascii":return N(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function b(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=a.from(e,r)),a.isBuffer(e))return 0===e.length?-1:g(t,e,n,r,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):g(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function g(t,e,n,r,i){var o,s=1,u=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,u/=2,a/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var l=-1;for(o=n;o<u;o++)if(c(t,o)===c(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===a)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+a>u&&(n=u-a),o=n;o>=0;o--){for(var f=!0,h=0;h<a;h++)if(c(t,o+h)!==c(e,h)){f=!1;break}if(f)return o}return-1}function m(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var u=parseInt(e.substr(2*s,2),16);if(isNaN(u))return s;t[n+s]=u}return s}function _(t,e,n,r){return q($(e,t.length-n),t,n,r)}function w(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function O(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return q(z(e),t,n,r)}function S(t,e,n,r){return q(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function P(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,u,a,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(o=t[i+1]))&&(a=(31&c)<<6|63&o)>127&&(l=a);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(a=(15&c)<<12|(63&o)<<6|63&s)>2047&&(a<55296||a>57343)&&(l=a);break;case 4:o=t[i+1],s=t[i+2],u=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&u)&&(a=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&u)>65535&&a<1114112&&(l=a)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),i+=f}return function(t){var e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=I));return n}(r)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,n){return c(null,t,e,n)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?u(t,e):void 0!==n?"string"==typeof r?u(t,e).fill(n,r):u(t,e).fill(n):u(t,e)}(null,t,e,n)},a.allocUnsafe=function(t){return f(null,t)},a.allocUnsafeSlow=function(t){return f(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=a.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!a.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},a.byteLength=p,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)b(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)b(this,e,e+3),b(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)b(this,e,e+7),b(this,e+1,e+6),b(this,e+2,e+5),b(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?P(this,0,t):y.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,n,r,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),u=Math.min(o,s),c=this.slice(r,i),l=t.slice(e,n),f=0;f<u;++f)if(c[f]!==l[f]){o=c[f],s=l[f];break}return o<s?-1:s<o?1:0},a.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},a.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},a.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},a.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return _(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return O(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var I=4096;function N(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function j(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=F(t[o]);return i}function x(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function D(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function C(t,e,n,r,i,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function R(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function k(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function B(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(t,e,n,r,o){return o||B(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function U(t,e,n,r,o){return o||B(t,0,n,8),i.write(t,e,n,r,52,8),n+8}a.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;n=new a(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},a.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},a.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},a.prototype.readUInt8=function(t,e){return e||D(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||D(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||D(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||D(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||D(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},a.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||D(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||D(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||D(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt16BE=function(t,e){e||D(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},a.prototype.readInt32LE=function(t,e){return e||D(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||D(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||D(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||D(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},a.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},a.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):k(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):k(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);C(this,t,e,n,i-1,-i)}var o=0,s=1,u=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},a.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);C(this,t,e,n,i-1,-i)}var o=n-1,s=1,u=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+n},a.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):k(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):k(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,n){return M(this,t,e,!0,n)},a.prototype.writeFloatBE=function(t,e,n){return M(this,t,e,!1,n)},a.prototype.writeDoubleLE=function(t,e,n){return U(this,t,e,!0,n)},a.prototype.writeDoubleBE=function(t,e,n){return U(this,t,e,!1,n)},a.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},a.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=a.isBuffer(t)?t:$(new a(t,r).toString()),u=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%u]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function $(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n("yLpj"))},Hm89:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.BehaviorSubject=r.BehaviorSubject},ICxb:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getAssociations=e.getSecondaryTables=void 0;var r,i=n("Ex95"),o=(r=n("1KF6"))&&r.__esModule?r:{default:r};e.getSecondaryTables=function(t){return(0,i.uniq)(t.join.map((function(t){return t.table})))};e.getAssociations=function(t,e){return(0,o.default)(t,t.map((function(t){return e[t]})))}},ISfp:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"getPreciseTime",{enumerable:!0,get:function(){return r.getPreciseTime}}),Object.defineProperty(e,"devMeasureTime",{enumerable:!0,get:function(){return r.devMeasureTime}}),Object.defineProperty(e,"devMeasureTimeAsync",{enumerable:!0,get:function(){return r.devMeasureTimeAsync}}),Object.defineProperty(e,"randomId",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"makeDecorator",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"ensureSync",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"invariant",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"logError",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(e,"logger",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(e,"connectionTag",{enumerable:!0,get:function(){return l.default}});var r=n("fi+a"),i=f(n("/ux2")),o=f(n("ilZr")),s=f(n("hw3F")),u=f(n("OFZ/")),a=f(n("Cu4n")),c=f(n("4hzj")),l=f(n("9l66"));function f(t){return t&&t.__esModule?t:{default:t}}},IrFB:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("NHnE"))},ItuZ:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t}},IxPp:function(t,e,n){"use strict";n.d(e,"b",(function(){return a})),n.d(e,"a",(function(){return h}));var r=n("mrSG"),i=n("FFOo"),o=n("pugT"),s=n("6blF"),u=n("K9Ia");function a(t,e,n,r){return function(i){return i.lift(new c(t,e,n,r))}}var c=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),l=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.keySelector=n,s.elementSelector=r,s.durationSelector=i,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return r.__extends(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new u.a,n.set(e,i);var o=new h(e,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new h(e,i))}catch(t){return void this.error(t)}this.add(s.subscribe(new f(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,n){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.a),f=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.__extends(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.a),h=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.__extends(e,t),e.prototype._subscribe=function(t){var e=new o.a,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new d(n)),e.add(r.subscribe(t)),e},e}(s.a),d=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.__extends(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.a)},JXZH:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Collection",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"Database",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"CollectionMap",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(e,"Relation",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(e,"Model",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(e,"associations",{enumerable:!0,get:function(){return a.associations}}),Object.defineProperty(e,"Query",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(e,"tableName",{enumerable:!0,get:function(){return l.tableName}}),Object.defineProperty(e,"columnName",{enumerable:!0,get:function(){return l.columnName}}),Object.defineProperty(e,"appSchema",{enumerable:!0,get:function(){return l.appSchema}}),Object.defineProperty(e,"tableSchema",{enumerable:!0,get:function(){return l.tableSchema}}),e.Q=void 0;var r=d(n("0gbD"));e.Q=r;var i=f(n("uAl9")),o=f(n("/OkI")),s=f(n("NZUt")),u=f(n("Awnv")),a=d(n("j3qq")),c=f(n("F8Mn")),l=n("eLCP");function f(t){return t&&t.__esModule?t:{default:t}}function h(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return h=function(){return t},t}function d(t){if(t&&t.__esModule)return t;var e=h();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var o=r?Object.getOwnPropertyDescriptor(t,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=t[i]}}return n.default=t,e&&e.set(t,n),n}},JtzR:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=[],n=0,r=t.length;n<r;n++){var o=t[n];(0,i.default)(Array,o)?e=e.concat(o):e.push(o)}return e};var r,i=(r=n("Tuwf"))&&r.__esModule?r:{default:r}},KD6q:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n("mrSG"),i=n("FFOo");function o(t,e){return void 0===e&&(e=null),function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?a:u}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.__extends(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(i.a),a=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.__extends(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%n==0&&r.push([]);for(var o=r.length;o--;){var s=r[o];s.push(t),s.length===e&&(r.splice(o,1),this.destination.next(s))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(i.a)},KPdl:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=function(t,e){return Promise.all(e.map(t))};e.default=r},KQya:function(t,e,n){"use strict";var r=n("mrSG"),i=1,o={};var s=function(t){var e=i++;return o[e]=t,Promise.resolve().then((function(){return function(t){var e=o[t];e&&e()}(e)})),e},u=function(t){delete o[t]},a=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.__extends(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=s(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(u(n),e.scheduled=void 0)},e}(n("h9Dq").a),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n("CS9Q").a);n.d(e,"a",(function(){return l}));var l=new c(a)},KUuw:function(t){t.exports={_from:"@zhoujiahao/blog@^1.7.1",_id:"@zhoujiahao/blog@1.7.4",_inBundle:!1,_integrity:"sha512-R+voLBIsGB6Ivt6cp/xAFNr4AKJdCcA9R2KgXU/4xKHTkvE7jvQolZTIrc4RqUR9bCgJ51PrtdgELLaVa06EFw==",_location:"/@zhoujiahao/blog",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"@zhoujiahao/blog@^1.7.1",name:"@zhoujiahao/blog",escapedName:"@zhoujiahao%2fblog",scope:"@zhoujiahao",rawSpec:"^1.7.1",saveSpec:null,fetchSpec:"^1.7.1"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/blog/-/blog-1.7.4.tgz",_shasum:"7a337153e64bcfaaadb46584795096ab8eff1921",_spec:"@zhoujiahao/blog@^1.7.1",_where:"/home/travis/build/zjhou/zjh.im/src",author:{name:"zjhou",email:"z@zjh.im"},bundleDependencies:!1,dependencies:{"@zhoujiahao/comp-factory":"^1.0.4","@zhoujiahao/utils":"^1.0.34","react-transition-group":"^1.2.1"},deprecated:!1,description:"my react blog",devDependencies:{"@babel/core":"^7.2.0","@babel/plugin-proposal-class-properties":"^7.3.0","@babel/plugin-syntax-dynamic-import":"^7.2.0","@babel/preset-env":"^7.2.0","@babel/preset-react":"^7.0.0","babel-loader":"^8.0.4","css-loader":"^1.0.1","node-sass":"^4.11.0","sass-loader":"^7.1.0","style-loader":"^0.23.1",webpack:"^4.19.0","webpack-bundle-analyzer":"^3.0.4","webpack-cli":"^3.2.1"},directories:{lib:"lib",test:"__tests__"},gitHead:"81e1c86699f017bf3ef85f5d34ad988c7c9cb722",homepage:"",keywords:["blog"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/blog",peerDependencies:{"@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},version:"1.7.4"}},KhEm:function(t,e,n){"use strict";n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return l}));var r=n("mrSG"),i=n("K9Ia"),o=n("6blF"),s=n("FFOo"),u=n("pugT"),a=n("yGWI"),c=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.__extends(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.a).add(this.source.subscribe(new f(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.a.EMPTY)),t},e.prototype.refCount=function(){return Object(a.a)()(this)},e}(o.a),l=function(){var t=c.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),f=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.__extends(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.b);s.a},Lvzb:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.of=r.of},McLp:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.shallowCloneDeepObjects=s,e.default=void 0;var r=o(n("zT9C")),i=o(n("F98g"));function o(t){return t&&t.__esModule?t:{default:t}}function s(t){if(Array.isArray(t)){for(var e=new Array(t.length),n=0,r=t.length;n<r;n+=1)e[n]=s(t[n]);return e}return t&&"object"==typeof t?Object.assign({},t):t}var u=function(){function t(){var t=this;this.onmessage=function(){},this._workerContext={postMessage:function(e){var n=(0,r.default)(e);Promise.resolve().then((function(){t.onmessage({data:n})}))},onmessage:function(){}},this._worker=new i.default(this._workerContext)}return t.prototype.postMessage=function(t){var e,n=this;"shallowCloneDeepObjects"===t.cloneMethod?(e=t).payload=s(e.payload):e="immutable"===t.cloneMethod?t:(0,r.default)(t),Promise.resolve().then((function(){n._workerContext.onmessage({data:e})}))},t}();e.default=u},MgNV:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.responseActions=e.actions=void 0;e.actions={SETUP:"SETUP",FIND:"FIND",QUERY:"QUERY",COUNT:"COUNT",BATCH:"BATCH",GET_DELETED_RECORDS:"GET_DELETED_RECORDS",DESTROY_DELETED_RECORDS:"DESTROY_DELETED_RECORDS",UNSAFE_RESET_DATABASE:"UNSAFE_RESET_DATABASE",GET_LOCAL:"GET_LOCAL",SET_LOCAL:"SET_LOCAL",REMOVE_LOCAL:"REMOVE_LOCAL"};e.responseActions={RESPONSE_SUCCESS:"RESPONSE_SUCCESS",RESPONSE_ERROR:"RESPONSE_ERROR"}},NHnE:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.from=r.from},NUGj:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.newLoki=function(t,e,i,s){return new Promise((function(u,a){var c;return Promise.resolve(function(t,e,i,s){return new Promise((function(u,a){var c,l;return e?u(e):Promise.resolve(o()).then(function(e){try{return e?i?(c=n("9+xA"),u(new c({onversionchange:s}))):(l=n("pnzC"),u(new l(t))):function(){return u(new r.LokiMemoryAdapter)}.call(this)}catch(t){return a(t)}}.bind(this),a)}))}(t,e,i,s)).then((function(e){try{return c=new r.default(t,{adapter:e,autosave:!0,autosaveInterval:250,verbose:!0}),Promise.resolve(new Promise((function(t,e){c.loadDatabase({},(function(n){n?e(n):t()}))}))).then((function(){try{return u(c)}catch(t){return a(t)}}),a)}catch(t){return a(t)}}),a)}))},e.deleteDatabase=function(t){return new Promise((function(e,n){return Promise.resolve(new Promise((function(e,n){t.close((function(){t.deleteDatabase({},(function(t){t&&t.success||void 0===t?e():n(t)}))}))}))).then((function(){try{return e()}catch(t){return n(t)}}),n)}))};var r=function(t){if(t&&t.__esModule)return t;var e=i();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){var s=r?Object.getOwnPropertyDescriptor(t,o):null;s&&(s.get||s.set)?Object.defineProperty(n,o,s):n[o]=t[o]}}n.default=t,e&&e.set(t,n);return n}(n("XS3J"));function i(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return i=function(){return t},t}var o=function(){return new Promise((function(t){"undefined"==typeof indexedDB&&t(!1);var e=indexedDB.open("WatermelonIDBChecker");e.onsuccess=function(e){e.target.result.close(),t(!0)},e.onerror=function(){t(!1)},e.onblocked=function(){console.error("WatermelonIDBChecker call is blocked")}}))}},NZUt:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n("uAl9"))&&r.__esModule?r:{default:r};function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var u=function(){function t(t,e){this.map=e.reduce((function(e,n){var r;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(n,!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},e,((r={})[n.table]=new i.default(t,n),r))}),{})}return t.prototype.get=function(t){return this.map[t]},t}();e.default=u},O5PD:function(t,e,n){},OAeU:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("zPYJ"))},"OFZ/":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){if(!t){var n=(0,i.default)(e||"Broken invariant");throw n.framesToPop+=1,n}};var r,i=(r=n("jblg"))&&r.__esModule?r:{default:r}},OgkG:function(t,e,n){},OuaU:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;!function(t){if(t&&t.__esModule)return t;var e=l();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var o=r?Object.getOwnPropertyDescriptor(t,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=t[i]}}n.default=t,e&&e.set(t,n)}(n("XS3J"));var r,i=n("Ex95"),o=n("ISfp"),s=n("Ztl0"),u=n("oPt8"),a=n("NUGj"),c=(r=n("GxSh"))&&r.__esModule?r:{default:r};function l(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return l=function(){return t},t}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var d=function(){function t(t){this.cachedRecords=new Map;var{dbName:e,schema:n,migrations:r,_testLokiAdapter:i}=t;this.dbName=e,this.schema=n,this.migrations=r,this.experimentalUseIncrementalIndexedDB=t.experimentalUseIncrementalIndexedDB||!1,this.onIndexedDBVersionChange=t.onIndexedDBVersionChange,this._testLokiAdapter=i}var e,n,r,l=t.prototype;return l.setUp=function(){return new Promise(function(t,e){return Promise.resolve(this._openDatabase()).then(function(){try{return Promise.resolve(this._migrateIfNeeded()).then((function(){try{return t()}catch(t){return e(t)}}),e)}catch(t){return e(t)}}.bind(this),e)}.bind(this))},l.isCached=function(t,e){var n=this.cachedRecords.get(t);return!!n&&n.has(e)},l.markAsCached=function(t,e){var n=this.cachedRecords.get(t);n?n.add(e):this.cachedRecords.set(t,new Set([e]))},l.removeFromCache=function(t,e){var n=this.cachedRecords.get(t);n&&n.delete(e)},l.find=function(t,e){if(this.isCached(t,e))return e;var n=this.loki.getCollection(t).by("id",e);return n?(this.markAsCached(t,e),(0,u.sanitizedRaw)(n,this.schema.tables[t])):null},l.query=function(t){var e=(0,c.default)(t,this.loki).data();return this._compactQueryResults(e,t.table)},l.count=function(t){return(0,c.default)(t,this.loki).count()},l.update=function(t,e){var n=this.loki.getCollection(t),r=n.by("id",e.id).$loki,i=e;i.$loki=r,n.update(i)},l.destroyPermanently=function(t,e){var n=this.loki.getCollection(t),r=n.by("id",e);n.remove(r),this.removeFromCache(t,e)},l.markAsDeleted=function(t,e){var n=this.loki.getCollection(t),r=n.by("id",e);r&&(r._status="deleted",n.update(r),this.removeFromCache(t,e))},l.batch=function(t){var e=this,n={};t.forEach((function(t){var[e,r,i]=t;switch(e){case"create":n[r]||(n[r]=[]),n[r].push(i)}})),Object.entries(n).forEach((function(t){var[n,r]=t,i=1e3<=r.length;e.loki.getCollection(n).insert(r,i),r.forEach((function(t){e.markAsCached(n,t.id)}))})),t.forEach((function(t){var[n,r,i]=t;switch(n){case"update":e.update(r,i);break;case"markAsDeleted":e.markAsDeleted(r,i);break;case"destroyPermanently":e.destroyPermanently(r,i)}}))},l.getDeletedRecords=function(t){return this.loki.getCollection(t).find({_status:{$eq:"deleted"}}).map((0,i.prop)("id"))},l.destroyDeletedRecords=function(t,e){var n=this.loki.getCollection(t);(0,i.forEach)((function(t){var e=n.by("id",t);e&&n.remove(e)}),e)},l.unsafeResetDatabase=function(){return new Promise(function(t,e){return Promise.resolve((0,a.deleteDatabase)(this.loki)).then(function(){try{return this.cachedRecords.clear(),o.logger.log("[DB][Worker] Database is now reset"),Promise.resolve(this._openDatabase()).then(function(){try{return this._setUpSchema(),t()}catch(t){return e(t)}}.bind(this),e)}catch(t){return e(t)}}.bind(this),e)}.bind(this))},l.getLocal=function(t){var e=this._findLocal(t);return e?e.value:null},l.setLocal=function(t,e){var n=this._findLocal(t);n?(n.value=e,this._localStorage.update(n)):this._localStorage.insert({key:t,value:e})},l.removeLocal=function(t){var e=this._findLocal(t);e&&this._localStorage.remove(e)},l._openDatabase=function(){return new Promise(function(t,e){return o.logger.log("[DB][Worker] Initializing IndexedDB"),Promise.resolve((0,a.newLoki)(this.dbName,this._testLokiAdapter,this.experimentalUseIncrementalIndexedDB,this.onIndexedDBVersionChange)).then(function(n){try{return this.loki=n,o.logger.log("[DB][Worker] Database loaded"),t()}catch(t){return e(t)}}.bind(this),e)}.bind(this))},l._setUpSchema=function(){var t=this;o.logger.log("[DB][Worker] Setting up schema"),(0,i.values)(this.schema.tables).forEach((function(e){t._addCollection(e)})),this.loki.addCollection("local_storage",{unique:["key"],indices:[],disableMeta:!0}),this._databaseVersion=this.schema.version,o.logger.log("[DB][Worker] Database collections set up")},l._addCollection=function(t){var{name:e,columns:n}=t,r=(0,i.values)(n).reduce((function(t,e){return e.isIndexed?t.concat([e.name]):t}),[]);this.loki.addCollection(e,{unique:["id"],indices:["_status"].concat(f(r)),disableMeta:!0})},l._migrateIfNeeded=function(){return new Promise(function(t,e){var n,r,i;if((n=this._databaseVersion)===(r=this.schema.version))return f.call(this);{if(0===n)return o.logger.log("[DB][Worker] Empty database, setting up"),Promise.resolve(this.unsafeResetDatabase()).then(function(){try{return l.call(this)}catch(t){return e(t)}}.bind(this),e);{if(!(0<n&&n<r))return o.logger.warn("[DB][Worker] Database has newer version than app schema. Resetting database."),Promise.resolve(this.unsafeResetDatabase()).then(function(){try{return c.call(this)}catch(t){return e(t)}}.bind(this),e);{if(o.logger.log("[DB][Worker] Database has old schema version. Migration is required."),!(i=this._getMigrationSteps(n)))return o.logger.warn("[DB][Worker] Migrations not available for this version range, resetting database instead"),Promise.resolve(this.unsafeResetDatabase()).then(function(){try{return a.call(this)}catch(t){return e(t)}}.bind(this),e);o.logger.log("[DB][Worker] Migrating from version ".concat(n," to ").concat(this.schema.version,"..."));var s=function(){try{return a.call(this)}catch(t){return e(t)}}.bind(this),u=function(t){try{throw o.logger.error("[DB][Worker] Migration failed",t),t}catch(t){return e(t)}};try{return Promise.resolve(this._migrate(i)).then((function(){try{return s()}catch(t){return u(t)}}),u)}catch(t){u(t)}function a(){return c.call(this)}}function c(){return l.call(this)}}function l(){return f.call(this)}}function f(){return t()}}.bind(this))},l._getMigrationSteps=function(t){var{migrations:e}=this;return e?(0,s.stepsForMigration)({migrations:e,fromVersion:t,toVersion:this.schema.version}):null},l._migrate=function(t){return new Promise(function(e){var n=this;return t.forEach((function(t){if("create_table"===t.type)n._executeCreateTableMigration(t);else{if("add_columns"!==t.type)throw new Error("Unsupported migration step ".concat(t.type));n._executeAddColumnsMigration(t)}})),this._databaseVersion=this.schema.version,o.logger.log("[DB][Worker] Migration successful"),e()}.bind(this))},l._executeCreateTableMigration=function({schema:t}){this._addCollection(t)},l._executeAddColumnsMigration=function({table:t,columns:e}){var n=this.loki.getCollection(t);n.findAndUpdate({},(function(t){e.forEach((function(e){(0,u.setRawSanitized)(t,e.name,null,e)}))})),e.forEach((function(t){t.isIndexed&&n.ensureIndex(t.name)}))},l._compactQueryResults=function(t,e){var n=this;return t.map((function(t){var{id:r}=t;return n.isCached(e,r)?r:(n.markAsCached(e,r),(0,u.sanitizedRaw)(t,n.schema.tables[e]))}))},l._findLocal=function(t){var e=this._localStorage;return e&&e.by("key",t)},e=t,(n=[{key:"_databaseVersion",get:function(){var t=this.getLocal("_loki_schema_version")||"";return parseInt(t,10)||0},set:function(t){this.setLocal("_loki_schema_version","".concat(t))}},{key:"_localStorage",get:function(){return this.loki.getCollection("local_storage")}}])&&h(e.prototype,n),r&&h(e,r),t}();e.default=d},PaCZ:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};return e<n}},Po9p:function(t,e){},Q2IC:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("MgNV"),{RESPONSE_SUCCESS:i,RESPONSE_ERROR:o}=r.responseActions;var s=function(){function t(t){var e=this;this._pendingRequests=[],this._worker=function(t){return t?new(n("W0zz")):new(0,n("McLp").default)}(t),this._worker.onmessage=function({data:t}){var{type:n,payload:r}=t,{resolve:s,reject:u}=e._pendingRequests.shift();n===o?u(r):n===i&&s(r)}}return t.prototype.send=function(t,e=[],n="deep"){var r=this;return new Promise((function(i,o){r._pendingRequests.push({resolve:i,reject:o}),r._worker.postMessage({type:t,payload:e,cloneMethod:n})}))},t}();e.default=s},Q3Zk:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e){var n=Array.prototype.slice.call(arguments,1);if(0===n.length)return function(){return t.apply(this,[e].concat(Array.prototype.slice.call(arguments,0)))};for(var r=0,i=e.length;r<i;r++)if(e[r][0].apply(this,n))return e[r][1].apply(this,n);return}},QnJh:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n("6HCZ"))&&r.__esModule?r:{default:r};var o=function(t,e){return{added:(0,i.default)(t,e),removed:(0,i.default)(e,t)}};e.default=o},Qrca:function(t,e){t.exports=function(){for(var t=arguments.length,e=[],n=0;n<t;n++)e[n]=arguments[n];if(0!==(e=e.filter((function(t){return null!=t}))).length)return 1===e.length?e[0]:e.reduce((function(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}))}},R529:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.processChangeSet=u,e.default=function(t,e=!1){return i.Observable.create((function(n){var r=(0,s.default)(t.description),i=!1,o=null;return t.collection.fetchQuery(t).then((function(s){if(!i){var a=s,c=function(){return n.next(a.slice(0))};c(),o=t.collection.changes.subscribe((function(t){(u(t,r,a)||e)&&c()}))}})),function(){i=!0,o&&o.unsubscribe()}}))};var r,i=n("4c1C"),o=n("3Gn5"),s=(r=n("cDIe"))&&r.__esModule?r:{default:r};function u(t,e,n){var r=!1;return t.forEach((function(t){var{record:i,type:s}=t,u=n.indexOf(i),a=-1<u;if(s!==o.CollectionChangeTypes.destroyed){var c=e(i._raw);a&&!c?(n.splice(u,1),r=!0):c&&!a&&(n.push(i),r=!0)}else a&&(n.splice(u,1),r=!0)})),r}},RFli:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e=!1){var n=t.collection.database.withChangesForTables(t.allTables).pipe((0,i.switchMap)((function(){var n=t.collection.fetchQuery(t);return e?(0,o.from)(n).pipe((0,i.startWith)(!1)):n})));return e?n:n.pipe((0,i.distinctUntilChanged)(s.default))};var r,i=n("ahDk"),o=n("IrFB"),s=(r=n("8Gr5"))&&r.__esModule?r:{default:r}},S5bw:function(t,e,n){"use strict";n.d(e,"a",(function(){return l}));var r=n("mrSG"),i=n("K9Ia"),o=n("zo3G"),s=n("pugT"),u=n("mZXl"),a=n("8g8A"),c=n("uMaO"),l=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.__extends(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new f(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new a.a;if(this.isStopped||this.hasError?e=s.a.EMPTY:(this.observers.push(t),e=new c.a(this,t)),i&&t.add(t=new u.a(t,i)),n)for(var l=0;l<o&&!t.closed;l++)t.next(r[l]);else for(l=0;l<o&&!t.closed;l++)t.next(r[l].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.a).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.a),f=function(){return function(t,e){this.time=t,this.value=e}}()},SjWX:function(t,e,n){(function(e){function n(t){var e=o([["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]]).filter((function(e){return e.rule&&e.rule.test(t)}))[0];return e?e.name:null}function r(){return void 0!==e&&e.version&&{name:"node",version:e.version.slice(1),os:e.platform}}function i(t){var e=o([["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/]]);if(!t)return null;var r=e.map((function(e){var n=e.rule.exec(t),r=n&&n[1].split(/[._]/).slice(0,3);return r&&r.length<3&&(r=r.concat(1==r.length?[0,0]:[0])),n&&{name:e.name,version:r.join(".")}})).filter(Boolean)[0]||null;return r&&(r.os=n(t)),/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/i.test(t)&&((r=r||{}).bot=!0),r}function o(t){return t.map((function(t){return{name:t[0],rule:t[1]}}))}t.exports={detect:function(){return"undefined"!=typeof navigator?i(navigator.userAgent):r()},detectOS:n,getNodeVersion:r,parseUserAgent:i}}).call(this,n("8oxB"))},T1DM:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n("h9Dq"),i=new(n("CS9Q").a)(r.a)},TqRt:function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},Tuwf:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};return null!=n&&n.constructor===e||n instanceof e}},Txjg:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n("Zn8D");function i(){return Object(r.a)(1)}},UnXY:function(t,e,n){"use strict";e.__esModule=!0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=a(n("Qrca")),o=a(n("q1tI")),s=a(n("17x9")),u=(a(n("6DQo")),n("8PcY"));function a(t){return t&&t.__esModule?t:{default:t}}s.default.any,s.default.func,s.default.node;var c=function(t){function e(n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,n,i));return o.performAppear=function(t,e){o.currentlyTransitioningKeys[t]=!0,e.componentWillAppear?e.componentWillAppear(o._handleDoneAppearing.bind(o,t,e)):o._handleDoneAppearing(t,e)},o._handleDoneAppearing=function(t,e){e.componentDidAppear&&e.componentDidAppear(),delete o.currentlyTransitioningKeys[t];var n=(0,u.getChildMapping)(o.props.children);n&&n.hasOwnProperty(t)||o.performLeave(t,e)},o.performEnter=function(t,e){o.currentlyTransitioningKeys[t]=!0,e.componentWillEnter?e.componentWillEnter(o._handleDoneEntering.bind(o,t,e)):o._handleDoneEntering(t,e)},o._handleDoneEntering=function(t,e){e.componentDidEnter&&e.componentDidEnter(),delete o.currentlyTransitioningKeys[t];var n=(0,u.getChildMapping)(o.props.children);n&&n.hasOwnProperty(t)||o.performLeave(t,e)},o.performLeave=function(t,e){o.currentlyTransitioningKeys[t]=!0,e.componentWillLeave?e.componentWillLeave(o._handleDoneLeaving.bind(o,t,e)):o._handleDoneLeaving(t,e)},o._handleDoneLeaving=function(t,e){e.componentDidLeave&&e.componentDidLeave(),delete o.currentlyTransitioningKeys[t];var n=(0,u.getChildMapping)(o.props.children);n&&n.hasOwnProperty(t)?o.keysToEnter.push(t):o.setState((function(e){var n=r({},e.children);return delete n[t],{children:n}}))},o.childRefs=Object.create(null),o.state={children:(0,u.getChildMapping)(n.children)},o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},e.prototype.componentDidMount=function(){var t=this.state.children;for(var e in t)t[e]&&this.performAppear(e,this.childRefs[e])},e.prototype.componentWillReceiveProps=function(t){var e=(0,u.getChildMapping)(t.children),n=this.state.children;for(var r in this.setState({children:(0,u.mergeChildMappings)(n,e)}),e){var i=n&&n.hasOwnProperty(r);!e[r]||i||this.currentlyTransitioningKeys[r]||this.keysToEnter.push(r)}for(var o in n){var s=e&&e.hasOwnProperty(o);!n[o]||s||this.currentlyTransitioningKeys[o]||this.keysToLeave.push(o)}},e.prototype.componentDidUpdate=function(){var t=this,e=this.keysToEnter;this.keysToEnter=[],e.forEach((function(e){return t.performEnter(e,t.childRefs[e])}));var n=this.keysToLeave;this.keysToLeave=[],n.forEach((function(e){return t.performLeave(e,t.childRefs[e])}))},e.prototype.render=function(){var t=this,e=[],n=function(n){var r=t.state.children[n];if(r){var s="string"!=typeof r.ref,u=t.props.childFactory(r),a=function(e){t.childRefs[n]=e};u===r&&s&&(a=(0,i.default)(r.ref,a)),e.push(o.default.cloneElement(u,{key:n,ref:a}))}};for(var s in this.state.children)n(s);var u=r({},this.props);return delete u.transitionLeave,delete u.transitionName,delete u.transitionAppear,delete u.transitionEnter,delete u.childFactory,delete u.transitionLeaveTimeout,delete u.transitionEnterTimeout,delete u.transitionAppearTimeout,delete u.component,o.default.createElement(this.props.component,u,e)},e}(o.default.Component);c.displayName="TransitionGroup",c.propTypes={},c.defaultProps={component:"span",childFactory:function(t){return t}},e.default=c,t.exports=e.default},VOcB:function(t,e,n){"use strict";function r(t,e){return t.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}t.exports=function(t,e){t.classList?t.classList.remove(e):"string"==typeof t.className?t.className=r(t.className,e):t.setAttribute("class",r(t.className&&t.className.baseVal||"",e))}},W0Ae:function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n("mrSG"),i=n("isby"),o=n("IUTb"),s=n("MGBS"),u=n("zotm");function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new c)}var c=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new l(t))},t}(),l=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.__extends(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Object(u.a)(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(s.a)},W0zz:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=(r=n("F98g"))&&r.__esModule?r:{default:r};var o=(self.workerClass=new i.default(self),self);e.default=o},"XP/m":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("ISfp");function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(){this._queue=[],this._subActionIncoming=!1}var e,n,o,s=t.prototype;return s.enqueue=function(t,e){var n=this;return this._subActionIncoming?(this._subActionIncoming=!1,t(this)):new Promise((function(r,i){n._queue.push({work:t,resolve:r,reject:i,description:e}),1===n._queue.length&&n._executeNext()}))},s.subAction=function(t){try{return this._subActionIncoming=!0,t()}catch(t){return this._subActionIncoming=!1,Promise.reject(t)}},s._executeNext=function(){return new Promise(function(t,e){var n,r,i,o,s;n=this,({work:r,resolve:i,reject:o}=this._queue[0]);var u=function(){try{return this._queue.shift(),this._queue.length&&setTimeout((function(){return n._executeNext()}),0),t()}catch(t){return e(t)}}.bind(this),a=function(t){try{return o(t),u()}catch(t){return e(t)}};try{return s=r(this),Promise.resolve(s).then((function(t){try{return i(t),u()}catch(t){return a(t)}}),a)}catch(t){a(t)}}.bind(this))},s._abortPendingActions=function(){(0,r.invariant)(1<=this._queue.length,"abortPendingActions can only be called from an Action"),this._queue.splice(1).forEach((function({reject:t}){t(new Error("Action has been aborted because the database was reset"))}))},e=t,(n=[{key:"isRunning",get:function(){return 0<this._queue.length}}])&&i(e.prototype,n),o&&i(e,o),t}();e.default=o},XS3J:function(t,e,n){(function(r,i){var o,s,u;s=[],void 0===(u="function"==typeof(o=function(){return function(){"use strict";var t=Object.prototype.hasOwnProperty,e={copyProperties:function(t,e){var n;for(n in t)e[n]=t[n]},resolveTransformObject:function(t,n,r){var i,o;if("number"!=typeof r&&(r=0),++r>=10)return t;for(i in t)"string"==typeof t[i]&&0===t[i].indexOf("[%lktxp]")?(o=t[i].substring(8),n.hasOwnProperty(o)&&(t[i]=n[o])):"object"==typeof t[i]&&(t[i]=e.resolveTransformObject(t[i],n,r));return t},resolveTransformParams:function(t,n){var r,i,o=[];if(void 0===n)return t;for(r=0;r<t.length;r++)i=y(t[r],"shallow-recurse-objects"),o.push(e.resolveTransformObject(i,n));return o},getIn:function(t,e,n){if(null!=t){if(!n)return t[e];if("string"==typeof e&&(e=e.split(".")),!Array.isArray(e))throw new Error("path must be a string or array. Found "+typeof e);for(var r=0,i=e.length;null!=t&&r<i;)t=t[e[r++]];return r&&r==i?t:void 0}}},o={aeq:s,lt:u,gt:a};function s(t,e){var n,r,i,o;if(t===e)return!0;if(!t||!e||!0===t||!0===e||t!=t||e!=e){switch(t){case void 0:case null:i=1;break;case!1:i=3;break;case!0:i=4;break;case"":i=5;break;default:i=t==t?9:0}switch(e){case void 0:case null:o=1;break;case!1:o=3;break;case!0:o=4;break;case"":o=5;break;default:o=e==e?9:0}if(9!==i||9!==o)return i===o}return n=Number(t),r=Number(e),n==n||r==r?n===r:(n=t.toString())==(r=e.toString())}function u(t,e,n){var r,i,o,s;if(!t||!e||!0===t||!0===e||t!=t||e!=e){switch(t){case void 0:case null:o=1;break;case!1:o=3;break;case!0:o=4;break;case"":o=5;break;default:o=t==t?9:0}switch(e){case void 0:case null:s=1;break;case!1:s=3;break;case!0:s=4;break;case"":s=5;break;default:s=e==e?9:0}if(9!==o||9!==s)return o===s?n:o<s}return r=Number(t),i=Number(e),r==r&&i==i?r<i||!(r>i)&&n:r==r&&i!=i||(i!=i||r==r)&&(t<e||!(t>e)&&(t==e?n:(r=t.toString())<(i=e.toString())||r==i&&n))}function a(t,e,n){var r,i,o,s;if(!t||!e||!0===t||!0===e||t!=t||e!=e){switch(t){case void 0:case null:o=1;break;case!1:o=3;break;case!0:o=4;break;case"":o=5;break;default:o=t==t?9:0}switch(e){case void 0:case null:s=1;break;case!1:s=3;break;case!0:s=4;break;case"":s=5;break;default:s=e==e?9:0}if(9!==o||9!==s)return o===s?n:o>s}return r=Number(t),i=Number(e),r==r&&i==i?r>i||!(r<i)&&n:(r!=r||i==i)&&(i==i&&r!=r||t>e||!(t<e)&&(t==e?n:(r=t.toString())>(i=e.toString())||r==i&&n))}function c(t,e,n){return o.aeq(t,e)?0:o.lt(t,e,!1)?n?1:-1:o.gt(t,e,!1)?n?-1:1:0}function l(t,e,n,r,i){var o,s=i||0,u=e[s],a=!1;if("object"==typeof t&&u in t&&(o=t[u]),s+1>=e.length)a=n(o,r);else if(Array.isArray(o))for(var c=0,f=o.length;c<f&&!0!==(a=l(o[c],e,n,r,s+1));c+=1);else a=l(o,e,n,r,s+1);return a}function f(e){return"string"==typeof e||Array.isArray(e)?function(t){return-1!==e.indexOf(t)}:"object"==typeof e&&null!==e?function(n){return t.call(e,n)}:null}function h(e,n){for(var r in n)if(t.call(n,r))return d[r](e,n[r]);return!1}var d={$eq:function(t,e){return t===e},$aeq:function(t,e){return t==e},$ne:function(t,e){return e!=e?t==t:t!==e},$dteq:function(t,e){return o.aeq(t,e)},$gt:function(t,e){return o.gt(t,e,!1)},$gte:function(t,e){return o.gt(t,e,!0)},$lt:function(t,e){return o.lt(t,e,!1)},$lte:function(t,e){return o.lt(t,e,!0)},$jgt:function(t,e){return t>e},$jgte:function(t,e){return t>=e},$jlt:function(t,e){return t<e},$jlte:function(t,e){return t<=e},$between:function(t,e){return null!=t&&o.gt(t,e[0],!0)&&o.lt(t,e[1],!0)},$jbetween:function(t,e){return null!=t&&t>=e[0]&&t<=e[1]},$in:function(t,e){return-1!==e.indexOf(t)},$nin:function(t,e){return-1===e.indexOf(t)},$keyin:function(t,e){return t in e},$nkeyin:function(t,e){return!(t in e)},$definedin:function(t,e){return void 0!==e[t]},$undefinedin:function(t,e){return void 0===e[t]},$regex:function(t,e){return e.test(t)},$containsString:function(t,e){return"string"==typeof t&&-1!==t.indexOf(e)},$containsNone:function(t,e){return!d.$containsAny(t,e)},$containsAny:function(t,e){var n=f(t);return null!==n&&(Array.isArray(e)?e.some(n):n(e))},$contains:function(t,e){var n=f(t);return null!==n&&(Array.isArray(e)?e.every(n):n(e))},$elemMatch:function(t,e){return!!Array.isArray(t)&&t.some((function(t){return Object.keys(e).every((function(n){var r=e[n];return"object"==typeof r&&r||(r={$eq:r}),-1!==n.indexOf(".")?l(t,n.split("."),h,e[n]):h(t[n],r)}))}))},$type:function(t,e){var n=typeof t;return"object"===n&&(Array.isArray(t)?n="array":t instanceof Date&&(n="date")),"object"!=typeof e?n===e:h(n,e)},$finite:function(t,e){return e===isFinite(t)},$size:function(t,e){return!!Array.isArray(t)&&("object"!=typeof e?t.length===e:h(t.length,e))},$len:function(t,e){return"string"==typeof t&&("object"!=typeof e?t.length===e:h(t.length,e))},$where:function(t,e){return!0===e(t)},$not:function(t,e){return!h(t,e)},$and:function(t,e){for(var n=0,r=e.length;n<r;n+=1)if(!h(t,e[n]))return!1;return!0},$or:function(t,e){for(var n=0,r=e.length;n<r;n+=1)if(h(t,e[n]))return!0;return!1},$exists:function(t,e){return e?void 0!==t:void 0===t}},p={$eq:d.$eq,$aeq:!0,$dteq:!0,$gt:!0,$gte:!0,$lt:!0,$lte:!0,$in:!0,$between:!0};function y(t,e){if(null==t)return null;var n;switch(e||"parse-stringify"){case"parse-stringify":n=JSON.parse(JSON.stringify(t));break;case"jquery-extend-deep":n=jQuery.extend(!0,{},t);break;case"shallow":n=Object.create(t.constructor.prototype),Object.keys(t).map((function(e){n[e]=t[e]}));break;case"shallow-assign":n=Object.create(t.constructor.prototype),Object.assign(n,t);break;case"shallow-recurse-objects":n=y(t,"shallow"),Object.keys(t).forEach((function(e){"object"==typeof t[e]&&"Object"===t[e].constructor.name?n[e]=y(t[e],"shallow-recurse-objects"):Array.isArray(t[e])&&(n[e]=function(t,e){if("parse-stringify"==e)return y(t,e);for(var n=[],r=0,i=t.length;r<i;r++)n[r]=y(t[r],e);return n}(t[e],"shallow-recurse-objects"))}))}return n}function b(){try{return window&&void 0!==window.localStorage&&null!==window.localStorage}catch(t){return!1}}function v(){}function g(t,e){this.filename=t||"loki.db",this.collections=[],this.databaseVersion=1.5,this.engineVersion=1.5,this.autosave=!1,this.autosaveInterval=5e3,this.autosaveHandle=null,this.throttledSaves=!0,this.options={},this.persistenceMethod=null,this.persistenceAdapter=null,this.throttledSavePending=!1,this.throttledCallbacks=[],this.verbose=!(!e||!e.hasOwnProperty("verbose"))&&e.verbose,this.events={init:[],loaded:[],flushChanges:[],close:[],changes:[],warning:[]},e&&e.hasOwnProperty("env")?this.ENV=e.env:this.ENV=void 0!==r&&(r.android||r.NSObject)?"NATIVESCRIPT":"undefined"==typeof window?"NODEJS":void 0!==r&&r.window&&void 0!==i?"NODEJS":"undefined"!=typeof document?-1===document.URL.indexOf("http://")&&-1===document.URL.indexOf("https://")?"CORDOVA":"BROWSER":"CORDOVA","undefined"===this.ENV&&(this.ENV="NODEJS"),this.configureOptions(e,!0),this.on("init",this.clearChanges)}function m(t){this.hashStore={},this.options=t||{},this.options.hasOwnProperty("asyncResponses")||(this.options.asyncResponses=!1),this.options.hasOwnProperty("asyncTimeout")||(this.options.asyncTimeout=50)}function _(t,e){if(this.mode="reference",this.adapter=null,this.options=e||{},this.dbref=null,this.dbname="",this.pageIterator={},!t)throw new Error("LokiPartitioningAdapter requires a (non-reference mode) adapter on construction");if("reference"===t.mode)throw new Error("LokiPartitioningAdapter cannot be instantiated with a reference mode adapter");this.adapter=t,this.options.hasOwnProperty("paging")||(this.options.paging=!1),this.options.hasOwnProperty("pageSize")||(this.options.pageSize=26214400),this.options.hasOwnProperty("delimiter")||(this.options.delimiter="$<\n")}function w(){try{this.fs=n("Po9p")}catch(t){this.fs=null}}function O(){}function E(t,e){return e=e||{},this.collection=t,this.filteredrows=[],this.filterInitialized=!1,this}function S(t,e,n){this.collection=t,this.name=e,this.rebuildPending=!1,this.options=n||{},this.options.hasOwnProperty("persistent")||(this.options.persistent=!1),this.options.hasOwnProperty("sortPriority")||(this.options.sortPriority="passive"),this.options.hasOwnProperty("minRebuildInterval")||(this.options.minRebuildInterval=1),this.resultset=new E(t),this.resultdata=[],this.resultsdirty=!1,this.cachedresultset=null,this.filterPipeline=[],this.sortFunction=null,this.sortCriteria=null,this.sortCriteriaSimple=null,this.sortDirty=!1,this.events={rebuild:[]}}function A(e,n){this.name=e,this.data=[],this.idIndex=[],this.binaryIndices={},this.constraints={unique:{},exact:{}},this.uniqueNames=[],this.transforms={},this.objType=e,this.dirty=!0,this.cachedIndex=null,this.cachedBinaryIndex=null,this.cachedData=null;var r=this;(n=n||{}).hasOwnProperty("unique")&&(Array.isArray(n.unique)||(n.unique=[n.unique]),n.unique.forEach((function(t){r.uniqueNames.push(t),r.constraints.unique[t]=new k(t)}))),n.hasOwnProperty("exact")&&n.exact.forEach((function(t){r.constraints.exact[t]=new B(t)})),this.adaptiveBinaryIndices=!n.hasOwnProperty("adaptiveBinaryIndices")||n.adaptiveBinaryIndices,this.transactional=!!n.hasOwnProperty("transactional")&&n.transactional,this.cloneObjects=!!n.hasOwnProperty("clone")&&n.clone,this.cloneMethod=n.hasOwnProperty("cloneMethod")?n.cloneMethod:"parse-stringify",this.asyncListeners=!!n.hasOwnProperty("asyncListeners")&&n.asyncListeners,this.disableMeta=!!n.hasOwnProperty("disableMeta")&&n.disableMeta,this.disableChangesApi=!n.hasOwnProperty("disableChangesApi")||n.disableChangesApi,this.disableDeltaChangesApi=!n.hasOwnProperty("disableDeltaChangesApi")||n.disableDeltaChangesApi,this.disableChangesApi&&(this.disableDeltaChangesApi=!0),this.autoupdate=!!n.hasOwnProperty("autoupdate")&&n.autoupdate,this.serializableIndices=!n.hasOwnProperty("serializableIndices")||n.serializableIndices,this.ttl={age:null,ttlInterval:null,daemon:null},this.setTTL(n.ttl||-1,n.ttlInterval),this.maxId=0,this.DynamicViews=[],this.events={insert:[],update:[],"pre-insert":[],"pre-update":[],close:[],flushbuffer:[],error:[],delete:[],warning:[]},this.changes=[],this.dirtyIds=[],this.ensureId();var i=[];if(n&&n.indices)if("[object Array]"===Object.prototype.toString.call(n.indices))i=n.indices;else{if("string"!=typeof n.indices)throw new TypeError("Indices needs to be a string or an array of strings");i=[n.indices]}for(var o=0;o<i.length;o++)this.ensureIndex(i[o]);function s(t,e){var n=null!==e&&"object"==typeof e?Object.keys(e):null;if(n&&n.length&&["string","boolean","number"].indexOf(typeof e)<0){for(var i={},o=0;o<n.length;o++){var u=n[o];if(e.hasOwnProperty(u))if(!t.hasOwnProperty(u)||r.uniqueNames.indexOf(u)>=0||"$loki"==u||"meta"==u)i[u]=e[u];else{var a=s(t[u],e[u]);void 0!==a&&a!={}&&(i[u]=a)}}return 0===Object.keys(i).length?void 0:i}return t===e?void 0:e}function u(){r.changes=[]}this.observerCallback=function(e){var n="function"==typeof Set?new Set:[];n.add||(n.add=function(t){return-1===this.indexOf(t)&&this.push(t),this}),e.forEach((function(t){n.add(t.object)})),n.forEach((function(e){if(!t.call(e,"$loki"))return r.removeAutoUpdateObserver(e);try{r.update(e)}catch(t){}}))},this.getChangeDelta=function(t,e){return e?s(e,t):JSON.parse(JSON.stringify(t))},this.getObjectDelta=s,this.getChanges=function(){return r.changes},this.flushChanges=u,this.setChangesApi=function(t){r.disableChangesApi=!t,t||(r.disableDeltaChangesApi=!1)},this.on("delete",(function(t){r.disableChangesApi||r.createChange(r.name,"R",t)})),this.on("warning",(function(t){r.lokiConsoleWrapper.warn(t)})),u()}function P(t){return-1!==t.indexOf(".")}function I(t){return parseFloat(t,10)}function N(t,e){return t+e}function T(t,e){return t-e}function j(t){return t.reduce(N,0)/t.length}function x(t,e,n){if(!1===n)return t[e];for(var r=e.split("."),i=t;r.length>0;)i=i[r.shift()];return i}function D(t,e,n){for(var r,i,o=0,s=t.length;o<s;){if(i=o+s>>1,0===(r=n.apply(null,[e,t[i]])))return{found:!0,index:i};r<0?s=i:o=i+1}return{found:!1,index:s}}function C(t){return function(e,n){return D(e,n,t)}}function R(){}function k(t){this.field=t,this.keyMap={},this.lokiMap={}}function B(t){this.index={},this.field=t}return v.prototype.events={},v.prototype.asyncListeners=!1,v.prototype.on=function(t,e){var n,r=this;return Array.isArray(t)?(t.forEach((function(t){r.on(t,e)})),e):((n=this.events[t])||(n=this.events[t]=[]),n.push(e),e)},v.prototype.emit=function(t){var e,n=this;if(!t||!this.events[t])throw new Error("No event "+t+" defined");this.events[t].length&&(e=Array.prototype.slice.call(arguments,1),this.events[t].forEach((function(t){n.asyncListeners?setTimeout((function(){t.apply(n,e)}),1):t.apply(n,e)})))},v.prototype.addListener=v.prototype.on,v.prototype.removeListener=function(t,e){var n=this;if(Array.isArray(t))t.forEach((function(t){n.removeListener(t,e)}));else if(this.events[t]){var r=this.events[t];r.splice(r.indexOf(e),1)}},g.prototype=new v,g.prototype.constructor=g,g.prototype.getIndexedAdapter=function(){return n("pnzC")},g.prototype.configureOptions=function(t,e){var n={fs:w,localStorage:O,memory:m};if(this.options={},this.persistenceMethod=null,this.persistenceAdapter=null,void 0!==t){if(this.options=t,this.options.hasOwnProperty("persistenceMethod")&&"function"==typeof n[t.persistenceMethod]&&(this.persistenceMethod=t.persistenceMethod,this.persistenceAdapter=new n[t.persistenceMethod]),this.options.hasOwnProperty("adapter")&&(this.persistenceMethod="adapter",this.persistenceAdapter=t.adapter,this.options.adapter=null,this.isIncremental="incremental"===this.persistenceAdapter.mode),t.autoload&&e){var r=this;setTimeout((function(){r.loadDatabase(t,t.autoloadCallback)}),1)}this.options.hasOwnProperty("autosaveInterval")&&(this.autosaveDisable(),this.autosaveInterval=parseInt(this.options.autosaveInterval,10)),this.options.hasOwnProperty("autosave")&&this.options.autosave&&(this.autosaveDisable(),this.autosave=!0,this.options.hasOwnProperty("autosaveCallback")?this.autosaveEnable(t,t.autosaveCallback):this.autosaveEnable()),this.options.hasOwnProperty("throttledSaves")&&(this.throttledSaves=this.options.throttledSaves)}this.options.hasOwnProperty("serializationMethod")||(this.options.serializationMethod="normal"),this.options.hasOwnProperty("destructureDelimiter")||(this.options.destructureDelimiter="$<\n"),null===this.persistenceAdapter&&(this.persistenceMethod={NODEJS:"fs",BROWSER:"localStorage",CORDOVA:"localStorage",MEMORY:"memory"}[this.ENV],this.persistenceMethod&&(this.persistenceAdapter=new n[this.persistenceMethod]))},g.prototype.copy=function(t){var e,n,r=new g(this.filename,{env:"NA"});if(t=t||{},r.loadJSONObject(this,{retainDirtyFlags:!0}),t.hasOwnProperty("removeNonSerializable")&&!0===t.removeNonSerializable)for(r.autosaveHandle=null,r.persistenceAdapter=null,e=r.collections.length,n=0;n<e;n++)r.collections[n].constraints=null,r.collections[n].ttl=null;return r},g.prototype.addCollection=function(t,e){var n,r=this.collections.length;if(e&&!0===e.disableMeta){if(!1===e.disableChangesApi)throw new Error("disableMeta option cannot be passed as true when disableChangesApi is passed as false");if(!1===e.disableDeltaChangesApi)throw new Error("disableMeta option cannot be passed as true when disableDeltaChangesApi is passed as false");if("number"==typeof e.ttl&&e.ttl>0)throw new Error("disableMeta option cannot be passed as true when ttl is enabled")}for(n=0;n<r;n+=1)if(this.collections[n].name===t)return this.collections[n];var i=new A(t,e);return i.isIncremental=this.isIncremental,this.collections.push(i),this.verbose&&(i.lokiConsoleWrapper=console),i},g.prototype.loadCollection=function(t){if(!t.name)throw new Error("Collection must have a name property to be loaded");this.collections.push(t)},g.prototype.getCollection=function(t){var e,n=this.collections.length;for(e=0;e<n;e+=1)if(this.collections[e].name===t)return this.collections[e];return this.emit("warning","collection "+t+" not found"),null},g.prototype.renameCollection=function(t,e){var n=this.getCollection(t);return n&&(n.name=e),n},g.prototype.listCollections=function(){for(var t=this.collections.length,e=[];t--;)e.push({name:this.collections[t].name,type:this.collections[t].objType,count:this.collections[t].data.length});return e},g.prototype.removeCollection=function(t){var e,n=this.collections.length;for(e=0;e<n;e+=1)if(this.collections[e].name===t){var r=new A(t,{}),i=this.collections[e];for(var o in i)i.hasOwnProperty(o)&&r.hasOwnProperty(o)&&(i[o]=r[o]);return void this.collections.splice(e,1)}},g.prototype.getName=function(){return this.name},g.prototype.serializeReplacer=function(t,e){switch(t){case"autosaveHandle":case"persistenceAdapter":case"constraints":case"ttl":return null;case"throttledSavePending":case"throttledCallbacks":return;case"lokiConsoleWrapper":return null;default:return e}},g.prototype.serialize=function(t){switch((t=t||{}).hasOwnProperty("serializationMethod")||(t.serializationMethod=this.options.serializationMethod),t.serializationMethod){case"normal":return JSON.stringify(this,this.serializeReplacer);case"pretty":return JSON.stringify(this,this.serializeReplacer,2);case"destructured":return this.serializeDestructured();default:return JSON.stringify(this,this.serializeReplacer)}},g.prototype.toJson=g.prototype.serialize,g.prototype.serializeDestructured=function(t){var e,n,r,i,o,s=[];if((t=t||{}).hasOwnProperty("partitioned")||(t.partitioned=!1),t.hasOwnProperty("delimited")||(t.delimited=!0),t.hasOwnProperty("delimiter")||(t.delimiter=this.options.destructureDelimiter),!0===t.partitioned&&t.hasOwnProperty("partition")&&t.partition>=0)return this.serializeCollection({delimited:t.delimited,delimiter:t.delimiter,collectionIndex:t.partition});for((o=new g(this.filename)).loadJSONObject(this),e=0;e<o.collections.length;e++)o.collections[e].data=[];if(!0===t.partitioned&&-1===t.partition)return o.serialize({serializationMethod:"normal"});for(s.push(o.serialize({serializationMethod:"normal"})),o=null,e=0;e<this.collections.length;e++)if(r=this.serializeCollection({delimited:t.delimited,delimiter:t.delimiter,collectionIndex:e}),!1===t.partitioned&&!1===t.delimited){if(!Array.isArray(r))throw new Error("a nondelimited, non partitioned collection serialization did not return an expected array");for(i=r.length,n=0;n<i;n++)s.push(r[n]),r[n]=null;s.push("")}else s.push(r);return t.partitioned?(t.delimited,s):t.delimited?(s.push(""),s.join(t.delimiter)):(s.push(""),s)},g.prototype.serializeCollection=function(t){var e,n,r=[];if((t=t||{}).hasOwnProperty("delimited")||(t.delimited=!0),!t.hasOwnProperty("collectionIndex"))throw new Error("serializeCollection called without 'collectionIndex' option");for(e=this.collections[t.collectionIndex].data.length,r=[],n=0;n<e;n++)r.push(JSON.stringify(this.collections[t.collectionIndex].data[n]));return t.delimited?(r.push(""),r.join(t.delimiter)):r},g.prototype.deserializeDestructured=function(t,e){var n,r,i,o=[],s=0,u=1,a=!1;if((e=e||{}).hasOwnProperty("partitioned")||(e.partitioned=!1),e.hasOwnProperty("delimited")||(e.delimited=!0),e.hasOwnProperty("delimiter")||(e.delimiter=this.options.destructureDelimiter),e.partitioned){if(e.hasOwnProperty("partition"))return-1===e.partition?n=JSON.parse(t[0]):this.deserializeCollection(t[e.partition+1],e);for(r=(n=JSON.parse(t[0])).collections.length,s=0;s<r;s++)n.collections[s].data=this.deserializeCollection(t[s+1],e);return n}if(e.delimited){if(o=t.split(e.delimiter),t=null,0===o.length)return null}else o=t;for(r=(n=JSON.parse(o[0])).collections.length,o[0]=null;!a;)o[u],""===o[u]?++s>r&&(a=!0):(i=JSON.parse(o[u]),n.collections[s].data.push(i)),o[u++]=null;return n},g.prototype.deserializeCollection=function(t,e){var n,r,i=[];for((e=e||{}).hasOwnProperty("partitioned")||(e.partitioned=!1),e.hasOwnProperty("delimited")||(e.delimited=!0),e.hasOwnProperty("delimiter")||(e.delimiter=this.options.destructureDelimiter),e.delimited?(i=t.split(e.delimiter)).pop():i=t,r=i.length,n=0;n<r;n++)i[n]=JSON.parse(i[n]);return i},g.prototype.loadJSON=function(t,e){var n;if(0===t.length)n={};else switch(this.options.serializationMethod){case"normal":case"pretty":n=JSON.parse(t);break;case"destructured":n=this.deserializeDestructured(t);break;default:n=JSON.parse(t)}this.loadJSONObject(n,e)},g.prototype.loadJSONObject=function(t,n){var r,i,o,s,u,a,c=0,l=t.collections?t.collections.length:0;function f(t){var r,i=n[t.name];return i.proto?(r=i.inflate||e.copyProperties,function(t){var e=new i.proto;return r(t,e),e}):i.inflate}for(this.name=t.name,t.hasOwnProperty("throttledSaves")&&n&&!n.hasOwnProperty("throttledSaves")&&(this.throttledSaves=t.throttledSaves),this.collections=[];c<l;c+=1){if(r=t.collections[c],(i=this.addCollection(r.name,{disableChangesApi:r.disableChangesApi,disableDeltaChangesApi:r.disableDeltaChangesApi,disableMeta:r.disableMeta})).adaptiveBinaryIndices=!!r.hasOwnProperty("adaptiveBinaryIndices")&&!0===r.adaptiveBinaryIndices,i.transactional=r.transactional,i.asyncListeners=r.asyncListeners,i.cloneObjects=r.cloneObjects,i.cloneMethod=r.cloneMethod||"parse-stringify",i.autoupdate=r.autoupdate,i.changes=r.changes,i.dirtyIds=r.dirtyIds||[],n&&!0===n.retainDirtyFlags?i.dirty=r.dirty:i.dirty=!1,o=r.data.length,s=0,n&&n.hasOwnProperty(r.name))for(u=f(r);s<o;s++)a=u(r.data[s]),i.data[s]=a,i.addAutoUpdateObserver(a);else for(;s<o;s++)i.data[s]=r.data[s],i.addAutoUpdateObserver(i.data[s]);if(i.maxId=void 0===r.maxId?0:r.maxId,i.idIndex=r.idIndex,void 0!==r.binaryIndices&&(i.binaryIndices=r.binaryIndices),void 0!==r.transforms&&(i.transforms=r.transforms),i.ensureId(),i.uniqueNames=[],r.hasOwnProperty("uniqueNames"))for(i.uniqueNames=r.uniqueNames,s=0;s<i.uniqueNames.length;s++)i.ensureUniqueIndex(i.uniqueNames[s]);if(void 0!==r.DynamicViews){for(var h=0;h<r.DynamicViews.length;h++){var d=r.DynamicViews[h],p=i.addDynamicView(d.name,d.options);p.resultdata=d.resultdata,p.resultsdirty=d.resultsdirty,p.filterPipeline=d.filterPipeline,p.sortCriteria=d.sortCriteria,p.sortFunction=null,p.sortDirty=d.sortDirty,p.resultset.filteredrows=d.resultset.filteredrows,p.resultset.filterInitialized=d.resultset.filterInitialized,p.rematerialize({removeWhereFilters:!0})}t.databaseVersion<1.5&&(i.ensureAllIndexes(!0),i.dirty=!0)}}},g.prototype.close=function(t){this.autosave&&(this.autosaveDisable(),this.autosaveDirty()&&(this.saveDatabase(t),t=void 0)),t&&this.on("close",t),this.emit("close")},g.prototype.generateChangesNotification=function(t){function e(t){return t.name}var n=[],r=t||this.collections.map(e);return this.collections.forEach((function(t){-1!==r.indexOf(e(t))&&(n=n.concat(t.getChanges()))})),n},g.prototype.serializeChanges=function(t){return JSON.stringify(this.generateChangesNotification(t))},g.prototype.clearChanges=function(){this.collections.forEach((function(t){t.flushChanges&&t.flushChanges()}))},m.prototype.loadDatabase=function(t,e){var n=this;this.options.asyncResponses?setTimeout((function(){n.hashStore.hasOwnProperty(t)?e(n.hashStore[t].value):e(null)}),this.options.asyncTimeout):this.hashStore.hasOwnProperty(t)?e(this.hashStore[t].value):e(null)},m.prototype.saveDatabase=function(t,e,n){var r,i=this;this.options.asyncResponses?setTimeout((function(){r=i.hashStore.hasOwnProperty(t)?i.hashStore[t].savecount:0,i.hashStore[t]={savecount:r+1,lastsave:new Date,value:e},n()}),this.options.asyncTimeout):(r=this.hashStore.hasOwnProperty(t)?this.hashStore[t].savecount:0,this.hashStore[t]={savecount:r+1,lastsave:new Date,value:e},n())},m.prototype.deleteDatabase=function(t,e){this.hashStore.hasOwnProperty(t)&&delete this.hashStore[t],"function"==typeof e&&e()},_.prototype.loadDatabase=function(t,e){var n=this;this.dbname=t,this.dbref=new g(t),this.adapter.loadDatabase(t,(function(t){if(t){"string"!=typeof t&&e(new Error("LokiPartitioningAdapter received an unexpected response from inner adapter loadDatabase()"));var r=JSON.parse(t);n.dbref.loadJSONObject(r),r=null,n.dbref.collections.length,0!==n.dbref.collections.length?(n.pageIterator={collection:0,pageIndex:0},n.loadNextPartition(0,(function(){e(n.dbref)}))):e(n.dbref)}else e(t)}))},_.prototype.loadNextPartition=function(t,e){var n=this.dbname+"."+t,r=this;if(!0===this.options.paging)return this.pageIterator.pageIndex=0,void this.loadNextPage(e);this.adapter.loadDatabase(n,(function(n){var i=r.dbref.deserializeCollection(n,{delimited:!0,collectionIndex:t});r.dbref.collections[t].data=i,++t<r.dbref.collections.length?r.loadNextPartition(t,e):e()}))},_.prototype.loadNextPage=function(t){var e=this.dbname+"."+this.pageIterator.collection+"."+this.pageIterator.pageIndex,n=this;this.adapter.loadDatabase(e,(function(e){var r=e.split(n.options.delimiter);e="";var i,o=r.length,s=""===r[o-1];for(s&&(r.pop(),""===r[(o=r.length)-1]&&1===o&&(r.pop(),o=r.length)),i=0;i<o;i++)n.dbref.collections[n.pageIterator.collection].data.push(JSON.parse(r[i])),r[i]=null;r=[],s?++n.pageIterator.collection<n.dbref.collections.length?n.loadNextPartition(n.pageIterator.collection,t):t():(n.pageIterator.pageIndex++,n.loadNextPage(t))}))},_.prototype.exportDatabase=function(t,e,n){var r,i=e.collections.length;for(this.dbref=e,this.dbname=t,this.dirtyPartitions=[-1],r=0;r<i;r++)e.collections[r].dirty&&this.dirtyPartitions.push(r);this.saveNextPartition((function(t){n(t)}))},_.prototype.saveNextPartition=function(t){var e=this,n=this.dirtyPartitions.shift(),r=this.dbname+(-1===n?"":"."+n);if(this.options.paging&&-1!==n)return this.pageIterator={collection:n,docIndex:0,pageIndex:0},void this.saveNextPage((function(n){0===e.dirtyPartitions.length?t(n):e.saveNextPartition(t)}));var i=this.dbref.serializeDestructured({partitioned:!0,delimited:!0,partition:n});this.adapter.saveDatabase(r,i,(function(n){n?t(n):0===e.dirtyPartitions.length?t(null):e.saveNextPartition(t)}))},_.prototype.saveNextPage=function(t){var e=this,n=this.dbref.collections[this.pageIterator.collection],r=this.dbname+"."+this.pageIterator.collection+"."+this.pageIterator.pageIndex,i=0,o=n.data.length,s=this.options.delimiter.length,u="",a="",c=!1,l=!1,f=function(n){a="",n&&t(n),c?t(null):(e.pageIterator.pageIndex++,e.saveNextPage(t))};for(0===n.data.length&&(c=!0);;)if(c||(u=JSON.stringify(n.data[this.pageIterator.docIndex]),a+=u,i+=u.length,++this.pageIterator.docIndex>=o&&(c=!0)),i>=this.options.pageSize&&(l=!0),l&&!c||(a+=this.options.delimiter,i+=s),c||l)return void this.adapter.saveDatabase(r,a,f)},w.prototype.loadDatabase=function(t,e){var n=this;this.fs.stat(t,(function(r,i){!r&&i.isFile()?n.fs.readFile(t,{encoding:"utf8"},(function(t,n){e(t?new Error(t):n)})):e(null)}))},w.prototype.saveDatabase=function(t,e,n){var r=this,i=t+"~";this.fs.writeFile(i,e,(function(e){e?n(new Error(e)):r.fs.rename(i,t,n)}))},w.prototype.deleteDatabase=function(t,e){this.fs.unlink(t,(function(t){t?e(new Error(t)):e()}))},O.prototype.loadDatabase=function(t,e){b()?e(localStorage.getItem(t)):e(new Error("localStorage is not available"))},O.prototype.saveDatabase=function(t,e,n){b()?(localStorage.setItem(t,e),n(null)):n(new Error("localStorage is not available"))},O.prototype.deleteDatabase=function(t,e){b()?(localStorage.removeItem(t),e(null)):e(new Error("localStorage is not available"))},g.prototype.throttledSaveDrain=function(t,e){var n=this,r=(new Date).getTime();if(this.throttledSaves||t(!0),(e=e||{}).hasOwnProperty("recursiveWait")||(e.recursiveWait=!0),e.hasOwnProperty("recursiveWaitLimit")||(e.recursiveWaitLimit=!1),e.hasOwnProperty("recursiveWaitLimitDuration")||(e.recursiveWaitLimitDuration=2e3),e.hasOwnProperty("started")||(e.started=(new Date).getTime()),this.throttledSaves&&this.throttledSavePending){if(!e.recursiveWait)return void this.throttledCallbacks.push(t);this.throttledCallbacks.push((function(){return n.throttledSavePending?e.recursiveWaitLimit&&r-e.started>e.recursiveWaitLimitDuration?void t(!1):void n.throttledSaveDrain(t,e):void t(!0)}))}else t(!0)},g.prototype.loadDatabaseInternal=function(t,e){var n=e||function(t,e){if(t)throw t},r=this;null!==this.persistenceAdapter?this.persistenceAdapter.loadDatabase(this.filename,(function(e){if("string"==typeof e){var i=!1;try{r.loadJSON(e,t||{}),i=!0}catch(t){n(t)}i&&(n(null),r.emit("loaded","database "+r.filename+" loaded"))}else{if(!e)return n(null),void r.emit("loaded","empty database "+r.filename+" loaded");if(e instanceof Error)return void n(e);if("object"==typeof e)return r.loadJSONObject(e,t||{}),n(null),void r.emit("loaded","database "+r.filename+" loaded");n("unexpected adapter response : "+e)}})):n(new Error("persistenceAdapter not configured"))},g.prototype.loadDatabase=function(t,e){var n=this;this.throttledSaves?this.throttledSaveDrain((function(r){if(r)return n.throttledSavePending=!0,void n.loadDatabaseInternal(t,(function(t){0===n.throttledCallbacks.length?n.throttledSavePending=!1:n.saveDatabase(),"function"==typeof e&&e(t)}));"function"==typeof e&&e(new Error("Unable to pause save throttling long enough to read database"))}),t):this.loadDatabaseInternal(t,e)},g.prototype.saveDatabaseInternal=function(t){var e=t||function(t){if(t)throw t},n=this;if(this.persistenceAdapter)if("reference"!==this.persistenceAdapter.mode&&this.autosaveClearFlags(),"incremental"===this.persistenceAdapter.mode){var r=this.copy({removeNonSerializable:!0}),i=this.collections.map((function(t){return t.dirtyIds}));this.collections.forEach((function(t){t.dirtyIds=[]})),this.persistenceAdapter.saveDatabase(this.filename,r,(function(t){t&&n.collections.forEach((function(t,e){t.dirtyIds=t.dirtyIds.concat(i[e])})),e(t)}))}else"reference"===this.persistenceAdapter.mode&&"function"==typeof this.persistenceAdapter.exportDatabase?this.persistenceAdapter.exportDatabase(this.filename,this.copy({removeNonSerializable:!0}),(function(t){n.autosaveClearFlags(),e(t)})):this.persistenceAdapter.saveDatabase(this.filename,this.serialize(),(function(t){e(t)}));else e(new Error("persistenceAdapter not configured"))},g.prototype.saveDatabase=function(t){if(this.throttledSaves)if(this.throttledSavePending)this.throttledCallbacks.push(t);else{var e=this.throttledCallbacks;this.throttledCallbacks=[],e.unshift(t),this.throttledSavePending=!0;var n=this;this.saveDatabaseInternal((function(t){n.throttledSavePending=!1,e.forEach((function(e){"function"==typeof e&&setTimeout((function(){e(t)}),1)})),n.throttledCallbacks.length>0&&n.saveDatabase()}))}else this.saveDatabaseInternal(t)},g.prototype.save=g.prototype.saveDatabase,g.prototype.deleteDatabase=function(t,e){var n=e||function(t,e){if(t)throw t};"function"!=typeof t||e||(n=t),null!==this.persistenceAdapter?this.persistenceAdapter.deleteDatabase(this.filename,(function(t){n(t)})):n(new Error("persistenceAdapter not configured"))},g.prototype.autosaveDirty=function(){for(var t=0;t<this.collections.length;t++)if(this.collections[t].dirty)return!0;return!1},g.prototype.autosaveClearFlags=function(){for(var t=0;t<this.collections.length;t++)this.collections[t].dirty=!1},g.prototype.autosaveEnable=function(t,e){this.autosave=!0;var n=5e3,r=this;void 0!==this.autosaveInterval&&null!==this.autosaveInterval&&(n=this.autosaveInterval),this.autosaveHandle=setInterval((function(){r.autosaveDirty()&&r.saveDatabase(e)}),n)},g.prototype.autosaveDisable=function(){void 0!==this.autosaveHandle&&null!==this.autosaveHandle&&(clearInterval(this.autosaveHandle),this.autosaveHandle=null)},E.prototype.reset=function(){return this.filteredrows.length>0&&(this.filteredrows=[]),this.filterInitialized=!1,this},E.prototype.toJSON=function(){var t=this.copy();return t.collection=null,t},E.prototype.limit=function(t){this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex());var e=new E(this.collection);return e.filteredrows=this.filteredrows.slice(0,t),e.filterInitialized=!0,e},E.prototype.offset=function(t){this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex());var e=new E(this.collection);return e.filteredrows=this.filteredrows.slice(t),e.filterInitialized=!0,e},E.prototype.copy=function(){var t=new E(this.collection);return this.filteredrows.length>0&&(t.filteredrows=this.filteredrows.slice()),t.filterInitialized=this.filterInitialized,t},E.prototype.branch=E.prototype.copy,E.prototype.transform=function(t,n){var r,i,o=this;if("string"==typeof t&&this.collection.transforms.hasOwnProperty(t)&&(t=this.collection.transforms[t]),"object"!=typeof t||!Array.isArray(t))throw new Error("Invalid transform");for(void 0!==n&&(t=e.resolveTransformParams(t,n)),r=0;r<t.length;r++)switch((i=t[r]).type){case"find":o.find(i.value);break;case"where":o.where(i.value);break;case"simplesort":o.simplesort(i.property,i.desc||i.options);break;case"compoundsort":o.compoundsort(i.value);break;case"sort":o.sort(i.value);break;case"limit":o=o.limit(i.value);break;case"offset":o=o.offset(i.value);break;case"map":o=o.map(i.value,i.dataOptions);break;case"eqJoin":o=o.eqJoin(i.joinData,i.leftJoinKey,i.rightJoinKey,i.mapFun,i.dataOptions);break;case"mapReduce":o=o.mapReduce(i.mapFunction,i.reduceFunction);break;case"update":o.update(i.value);break;case"remove":o.remove()}return o},E.prototype.sort=function(t){this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex());var e,n,r=(e=t,n=this.collection.data,function(t,r){return e(n[t],n[r])});return this.filteredrows.sort(r),this},E.prototype.simplesort=function(t,n){var r,i=10,o=this.collection.data.length,s=this.filteredrows.length,u=this.collection.binaryIndices.hasOwnProperty(t);if(void 0!==n&&!1!==n||(n={desc:!1}),!0===n&&(n={desc:!0}),0===s){if(this.filterInitialized)return this;if(this.collection.binaryIndices.hasOwnProperty(t))return this.collection.ensureIndex(t),this.filteredrows=this.collection.binaryIndices[t].values.slice(0),n.desc&&this.filteredrows.reverse(),this;this.filteredrows=this.collection.prepareFullDocIndex()}else if(!n.disableIndexIntersect&&u&&(r=o/s,n.useJavascriptSorting&&(i=6),r<=i||n.forceIndexIntersect)){var a,l=this.filteredrows,f={};for(a=0;a<s;a++)f[l[a]]=!0;var h=this.collection.binaryIndices[t].values;return this.filteredrows=h.filter((function(t){return f[t]})),n.desc&&this.filteredrows.reverse(),this}if(n.useJavascriptSorting)return this.sort((function(e,n){return e[t]===n[t]?0:e[t]>n[t]?1:e[t]<n[t]?-1:void 0}));var d,p,y,b,v,g,m=(d=t,p=n.desc,y=this.collection.data,function(t,n){return~d.indexOf(".")?(g=d.split("."),b=e.getIn(y[t],g,!0),v=e.getIn(y[n],g,!0)):(b=y[t][d],v=y[n][d]),c(b,v,p)});return this.filteredrows.sort(m),this},E.prototype.compoundsort=function(t){if(0===t.length)throw new Error("Invalid call to compoundsort, need at least one property");var n;if(1===t.length)return n=t[0],Array.isArray(n)?this.simplesort(n[0],n[1]):this.simplesort(n,!1);for(var r=0,i=t.length;r<i;r+=1)n=t[r],Array.isArray(n)||(t[r]=[n,!1]);this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex());var o,s,u=(o=t,s=this.collection.data,function(t,n){return function(t,n,r){for(var i,o,s,u,a,l=0,f=0,h=t.length;f<h;f++)if(~(o=(i=t[f])[0]).indexOf(".")?(a=o.split("."),s=e.getIn(n,a,!0),u=e.getIn(r,a,!0)):(s=n[o],u=r[o]),0!==(l=c(s,u,i[1])))return l;return 0}(o,s[t],s[n])});return this.filteredrows.sort(u),this},E.prototype.findOr=function(t){for(var e=null,n=0,r=0,i=[],o=[],s=0,u=(this.count(),0),a=t.length;u<a;u++)for(r=(e=this.branch().find(t[u]).filteredrows).length,n=0;n<r;n++)void 0===o[s=e[n]]&&(o[s]=!0,i.push(s));return this.filteredrows=i,this.filterInitialized=!0,this},E.prototype.$or=E.prototype.findOr,E.prototype.findAnd=function(t){for(var e=0,n=t.length;e<n;e++){if(0===this.count())return this;this.find(t[e])}return this},E.prototype.$and=E.prototype.findAnd,E.prototype.find=function(n,r){if(0===this.collection.data.length)return this.filteredrows=[],this.filterInitialized=!0,this;var i,o,s,u,a,c,f,h=n||"getAll",y=!1,b=[],v=[],g=null;if(r=r||!1,"object"==typeof h){for(i in h)(u={})[i]=h[i],v.push(u),t.call(h,i)&&(o=i,s=h[i]);if(v.length>1)return this.find({$and:v},r)}if(!o||"getAll"===h)return r&&(this.filterInitialized?this.filteredrows=this.filteredrows.slice(0,1):(this.filteredrows=this.collection.data.length>0?[0]:[],this.filterInitialized=!0)),this;if("$and"===o||"$or"===o)return this[o](s),r&&this.filteredrows.length>1&&(this.filteredrows=this.filteredrows.slice(0,1)),this;if(null===s||"object"!=typeof s||s instanceof Date)a="$eq",c=s;else{if("object"!=typeof s)throw new Error("Do not know what you want to do.");for(f in s)if(t.call(s,f)){a=f,c=s[f];break}}"$regex"!==a&&"object"!=typeof c||(c=function t(e,n){if("$regex"===e)Array.isArray(n)?n=new RegExp(n[0],n[1]):n instanceof RegExp||(n=new RegExp(n));else if("object"==typeof n)for(var r in n)"$regex"!==r&&"object"!=typeof n[r]||(n[r]=t(r,n[r]));return n}(a,c));var m=-1!==o.indexOf(".");!this.filterInitialized&&this.collection.binaryIndices[o]&&p[a]&&(!0!==this.collection.adaptiveBinaryIndices&&this.collection.ensureIndex(o),y=!0,g=this.collection.binaryIndices[o]);var _,w=d[a],O=this.collection.data,E=0,S=0,A=0;if(this.filterInitialized){if(S=(_=this.filteredrows).length,m){for(o=o.split("."),E=0;E<S;E++)if(l(O[A=_[E]],o,w,c)&&(b.push(A),r))return this.filteredrows=b,this}else for(E=0;E<S;E++)if(w(O[A=_[E]][o],c)&&(b.push(A),r))return this.filteredrows=b,this}else if(y){var P=this.collection.calculateRange(a,o,c);if("$in"!==a){for(E=P[0];E<=P[1];E++)if(!0!==p[a]){if(p[a](e.getIn(O[g.values[E]],o,m),c)&&(b.push(g.values[E]),r))return this.filteredrows=b,this.filterInitialized=!0,this}else if(b.push(g.values[E]),r)return this.filteredrows=b,this.filterInitialized=!0,this}else for(E=0,S=P.length;E<S;E++)if(b.push(g.values[P[E]]),r)return this.filteredrows=b,this.filterInitialized=!0,this}else if(S=O.length,m){for(o=o.split("."),E=0;E<S;E++)if(l(O[E],o,w,c)&&(b.push(E),r))return this.filteredrows=b,this.filterInitialized=!0,this}else for(E=0;E<S;E++)if(w(O[E][o],c)&&(b.push(E),r))return this.filteredrows=b,this.filterInitialized=!0,this;return this.filteredrows=b,this.filterInitialized=!0,this},E.prototype.where=function(t){var e,n=[];if("function"!=typeof t)throw new TypeError("Argument is not a stored view or a function");e=t;try{if(this.filterInitialized){for(var r=this.filteredrows.length;r--;)!0===e(this.collection.data[this.filteredrows[r]])&&n.push(this.filteredrows[r]);return this.filteredrows=n,this}for(var i=this.collection.data.length;i--;)!0===e(this.collection.data[i])&&n.push(i);return this.filteredrows=n,this.filterInitialized=!0,this}catch(t){throw t}},E.prototype.count=function(){return this.filterInitialized?this.filteredrows.length:this.collection.count()},E.prototype.data=function(t){var e,n,r,i,o=[],s=this.collection.data;if((t=t||{}).removeMeta&&!t.forceClones&&(t.forceClones=!0,t.forceCloneMethod=t.forceCloneMethod||"shallow"),this.collection.disableDeltaChangesApi||(t.forceClones=!0,t.forceCloneMethod="parse-stringify"),!this.filterInitialized){if(0===this.filteredrows.length){if(this.collection.cloneObjects||t.forceClones){for(n=s.length,i=t.forceCloneMethod||this.collection.cloneMethod,r=0;r<n;r++)e=y(s[r],i),t.removeMeta&&(delete e.$loki,delete e.meta),o.push(e);return o}return s.slice()}this.filterInitialized=!0}var u=this.filteredrows;if(n=u.length,this.collection.cloneObjects||t.forceClones)for(i=t.forceCloneMethod||this.collection.cloneMethod,r=0;r<n;r++)e=y(s[u[r]],i),t.removeMeta&&(delete e.$loki,delete e.meta),o.push(e);else for(r=0;r<n;r++)o.push(s[u[r]]);return o},E.prototype.update=function(t){if("function"!=typeof t)throw new TypeError("Argument is not a function");this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex());for(var e,n=this.filteredrows.length,r=this.collection.data,i=0;i<n;i++)this.collection.cloneObjects||!this.collection.disableDeltaChangesApi?(t(e=y(r[this.filteredrows[i]],this.collection.cloneMethod)),this.collection.update(e)):(t(r[this.filteredrows[i]]),this.collection.update(r[this.filteredrows[i]]));return this},E.prototype.remove=function(){return this.filterInitialized||0!==this.filteredrows.length||(this.filteredrows=this.collection.prepareFullDocIndex()),this.collection.removeBatchByPositions(this.filteredrows),this.filteredrows=[],this},E.prototype.mapReduce=function(t,e){try{return e(this.data().map(t))}catch(t){throw t}},E.prototype.eqJoin=function(t,e,n,r,i){var o,s,u,a,c=[],l=[],f="function"==typeof e,h="function"==typeof n,d={};if(s=(o=this.data(i)).length,t instanceof A)c=t.chain().data(i);else if(t instanceof E)c=t.data(i);else{if(!Array.isArray(t))throw new TypeError("joinData needs to be an array or result set");c=t}u=c.length;for(var p=0;p<u;p++)d[a=h?n(c[p]):c[p][n]]=c[p];r||(r=function(t,e){return{left:t,right:e}});for(var y=0;y<s;y++)a=f?e(o[y]):o[y][e],l.push(r(o[y],d[a]||{}));return this.collection=new A("joinData"),this.collection.insert(l),this.filteredrows=[],this.filterInitialized=!1,this},E.prototype.map=function(t,e){var n=this.data(e).map(t);return this.collection=new A("mappedData"),this.collection.insert(n),this.filteredrows=[],this.filterInitialized=!1,this},S.prototype=new v,S.prototype.rematerialize=function(t){var e,n,r;if(t=t||{},this.resultdata=[],this.resultsdirty=!0,this.resultset=new E(this.collection),(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple)&&(this.sortDirty=!0),t.hasOwnProperty("removeWhereFilters"))for(n=e=this.filterPipeline.length;n--;)"where"===this.filterPipeline[n].type&&(n!==this.filterPipeline.length-1&&(this.filterPipeline[n]=this.filterPipeline[this.filterPipeline.length-1]),this.filterPipeline.length--);var i=this.filterPipeline;for(this.filterPipeline=[],e=i.length,r=0;r<e;r++)this.applyFind(i[r].val);return this.data(),this.emit("rebuild",this),this},S.prototype.branchResultset=function(t,e){var n=this.resultset.branch();return void 0===t?n:n.transform(t,e)},S.prototype.toJSON=function(){var t=new S(this.collection,this.name,this.options);return t.resultset=this.resultset,t.resultdata=[],t.resultsdirty=!0,t.filterPipeline=this.filterPipeline,t.sortFunction=this.sortFunction,t.sortCriteria=this.sortCriteria,t.sortCriteriaSimple=this.sortCriteriaSimple||null,t.sortDirty=this.sortDirty,t.collection=null,t},S.prototype.removeFilters=function(t){t=t||{},this.rebuildPending=!1,this.resultset.reset(),this.resultdata=[],this.resultsdirty=!0,this.cachedresultset=null,this.filterPipeline=[],this.sortFunction=null,this.sortCriteria=null,this.sortCriteriaSimple=null,this.sortDirty=!1,!0===t.queueSortPhase&&this.queueSortPhase()},S.prototype.applySort=function(t){return this.sortFunction=t,this.sortCriteria=null,this.sortCriteriaSimple=null,this.queueSortPhase(),this},S.prototype.applySimpleSort=function(t,e){return this.sortCriteriaSimple={propname:t,options:e||!1},this.sortCriteria=null,this.sortFunction=null,this.queueSortPhase(),this},S.prototype.applySortCriteria=function(t){return this.sortCriteria=t,this.sortCriteriaSimple=null,this.sortFunction=null,this.queueSortPhase(),this},S.prototype.startTransaction=function(){return this.cachedresultset=this.resultset.copy(),this},S.prototype.commit=function(){return this.cachedresultset=null,this},S.prototype.rollback=function(){return this.resultset=this.cachedresultset,this.options.persistent&&(this.resultdata=this.resultset.data(),this.emit("rebuild",this)),this},S.prototype._indexOfFilterWithId=function(t){if("string"==typeof t||"number"==typeof t)for(var e=0,n=this.filterPipeline.length;e<n;e+=1)if(t===this.filterPipeline[e].uid)return e;return-1},S.prototype._addFilter=function(t){this.filterPipeline.push(t),this.resultset[t.type](t.val)},S.prototype.reapplyFilters=function(){this.resultset.reset(),this.cachedresultset=null,this.options.persistent&&(this.resultdata=[],this.resultsdirty=!0);var t=this.filterPipeline;this.filterPipeline=[];for(var e=0,n=t.length;e<n;e+=1)this._addFilter(t[e]);return this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent(),this},S.prototype.applyFilter=function(t){var e=this._indexOfFilterWithId(t.uid);return e>=0?(this.filterPipeline[e]=t,this.reapplyFilters()):(this.cachedresultset=null,this.options.persistent&&(this.resultdata=[],this.resultsdirty=!0),this._addFilter(t),this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent(),this)},S.prototype.applyFind=function(t,e){return this.applyFilter({type:"find",val:t,uid:e}),this},S.prototype.applyWhere=function(t,e){return this.applyFilter({type:"where",val:t,uid:e}),this},S.prototype.removeFilter=function(t){var e=this._indexOfFilterWithId(t);if(e<0)throw new Error("Dynamic view does not contain a filter with ID: "+t);return this.filterPipeline.splice(e,1),this.reapplyFilters(),this},S.prototype.count=function(){return this.resultsdirty&&(this.resultdata=this.resultset.data()),this.resultset.count()},S.prototype.data=function(t){return(this.sortDirty||this.resultsdirty)&&this.performSortPhase({suppressRebuildEvent:!0}),this.options.persistent?this.resultdata:this.resultset.data(t)},S.prototype.queueRebuildEvent=function(){if(!this.rebuildPending){this.rebuildPending=!0;var t=this;setTimeout((function(){t.rebuildPending&&(t.rebuildPending=!1,t.emit("rebuild",t))}),this.options.minRebuildInterval)}},S.prototype.queueSortPhase=function(){if(!this.sortDirty){this.sortDirty=!0;var t=this;"active"===this.options.sortPriority?setTimeout((function(){t.performSortPhase()}),this.options.minRebuildInterval):this.queueRebuildEvent()}},S.prototype.performSortPhase=function(t){(this.sortDirty||this.resultsdirty)&&(t=t||{},this.sortDirty&&(this.sortFunction?this.resultset.sort(this.sortFunction):this.sortCriteria?this.resultset.compoundsort(this.sortCriteria):this.sortCriteriaSimple&&this.resultset.simplesort(this.sortCriteriaSimple.propname,this.sortCriteriaSimple.options),this.sortDirty=!1),this.options.persistent&&(this.resultdata=this.resultset.data(),this.resultsdirty=!1),t.suppressRebuildEvent||this.emit("rebuild",this))},S.prototype.evaluateDocument=function(t,e){if(!this.resultset.filterInitialized)return this.options.persistent&&(this.resultdata=this.resultset.data()),void(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent());var n,r=this.resultset.filteredrows,i=e?-1:r.indexOf(+t),o=r.length,s=new E(this.collection);s.filteredrows=[t],s.filterInitialized=!0;for(var u=0,a=this.filterPipeline.length;u<a;u++)s[(n=this.filterPipeline[u]).type](n.val);var c=0===s.filteredrows.length?-1:0;return-1!==i||-1!==c?-1===i&&-1!==c?(r.push(t),this.options.persistent&&this.resultdata.push(this.collection.data[t]),void(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent())):-1!==i&&-1===c?(i<o-1?(r.splice(i,1),this.options.persistent&&this.resultdata.splice(i,1)):(r.length=o-1,this.options.persistent&&(this.resultdata.length=o-1)),void(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent())):-1!==i&&-1!==c?(this.options.persistent&&(this.resultdata[i]=this.collection.data[t]),void(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent())):void 0:void 0},S.prototype.removeDocument=function(t){var e,n,r,i={},o={},s=[],u=this.resultset,a=this.resultset.filteredrows,c=a.length;if(!this.resultset.filterInitialized)return this.options.persistent&&(this.resultdata=this.resultset.data()),void(this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent());for(Array.isArray(t)||(t=[t]),r=t.length,n=0;n<r;n++)i[t[n]]=!0;for(e=0;e<c;e++)i[a[e]]&&(o[e]=!0);Object.keys(o).length>0&&(this.resultset.filteredrows=this.resultset.filteredrows.filter((function(t,e){return!o[e]})),this.options.persistent&&(this.resultdata=this.resultdata.filter((function(t,e){return!o[e]}))),this.sortFunction||this.sortCriteria||this.sortCriteriaSimple?this.queueSortPhase():this.queueRebuildEvent());var l=function(t){return function(e){return e<u.filteredrows[t]}};for(c=u.filteredrows.length,e=0;e<c;e++)s=t.filter(l(e)),u.filteredrows[e]-=s.length},S.prototype.mapReduce=function(t,e){try{return e(this.data().map(t))}catch(t){throw t}},A.prototype=new v,A.prototype.createChange=function(t,e,n,r){this.changes.push({name:t,operation:e,obj:"U"!=e||this.disableDeltaChangesApi?JSON.parse(JSON.stringify(n)):this.getChangeDelta(n,r)})},A.prototype.insertMeta=function(t){var e,n;if(!this.disableMeta&&t)if(Array.isArray(t))for(e=t.length,n=0;n<e;n++)t[n].hasOwnProperty("meta")||(t[n].meta={}),t[n].meta.created=(new Date).getTime(),t[n].meta.revision=0;else t.meta||(t.meta={}),t.meta.created=(new Date).getTime(),t.meta.revision=0},A.prototype.updateMeta=function(t){!this.disableMeta&&t&&(t.meta.updated=(new Date).getTime(),t.meta.revision+=1)},A.prototype.createInsertChange=function(t){this.createChange(this.name,"I",t)},A.prototype.createUpdateChange=function(t,e){this.createChange(this.name,"U",t,e)},A.prototype.insertMetaWithChange=function(t){this.insertMeta(t),this.createInsertChange(t)},A.prototype.updateMetaWithChange=function(t,e){this.updateMeta(t),this.createUpdateChange(t,e)},A.prototype.lokiConsoleWrapper={log:function(){},warn:function(){},error:function(){}},A.prototype.addAutoUpdateObserver=function(t){this.autoupdate&&"function"==typeof Object.observe&&Object.observe(t,this.observerCallback,["add","update","delete","reconfigure","setPrototype"])},A.prototype.removeAutoUpdateObserver=function(t){this.autoupdate&&"function"==typeof Object.observe&&Object.unobserve(t,this.observerCallback)},A.prototype.addTransform=function(t,e){if(this.transforms.hasOwnProperty(t))throw new Error("a transform by that name already exists");this.transforms[t]=e},A.prototype.getTransform=function(t){return this.transforms[t]},A.prototype.setTransform=function(t,e){this.transforms[t]=e},A.prototype.removeTransform=function(t){delete this.transforms[t]},A.prototype.byExample=function(t){var e,n,r;for(e in r=[],t)t.hasOwnProperty(e)&&r.push(((n={})[e]=t[e],n));return{$and:r}},A.prototype.findObject=function(t){return this.findOne(this.byExample(t))},A.prototype.findObjects=function(t){return this.find(this.byExample(t))},A.prototype.ttlDaemonFuncGen=function(){var t=this,e=this.ttl.age;return function(){var n=Date.now();t.chain().where((function(t){var r=t.meta.updated||t.meta.created;return e<n-r})).remove()}},A.prototype.setTTL=function(t,e){t<0?clearInterval(this.ttl.daemon):(this.ttl.age=t,this.ttl.ttlInterval=e,this.ttl.daemon=setInterval(this.ttlDaemonFuncGen(),e))},A.prototype.prepareFullDocIndex=function(){for(var t=this.data.length,e=new Array(t),n=0;n<t;n+=1)e[n]=n;return e},A.prototype.configureOptions=function(t){(t=t||{}).hasOwnProperty("adaptiveBinaryIndices")&&(this.adaptiveBinaryIndices=t.adaptiveBinaryIndices,this.adaptiveBinaryIndices&&this.ensureAllIndexes())},A.prototype.ensureIndex=function(t,n){if(void 0===n&&(n=!1),null==t)throw new Error("Attempting to set index without an associated property");if((!this.binaryIndices[t]||n||this.binaryIndices[t].dirty)&&(!0!==this.adaptiveBinaryIndices||!this.binaryIndices.hasOwnProperty(t)||n)){var r={name:t,dirty:!0,values:this.prepareFullDocIndex()};this.binaryIndices[t]=r;var i,s,u,a,c,l=(i=t,s=this.data,c=!!~i.indexOf(".")&&i.split("."),function(t,n){if(c?(u=e.getIn(s[t],c,!0),a=e.getIn(s[n],c,!0)):(u=s[t][i],a=s[n][i]),u!==a){if(o.lt(u,a,!1))return-1;if(o.gt(u,a,!1))return 1}return 0});r.values.sort(l),r.dirty=!1,this.dirty=!0}},A.prototype.checkAllIndexes=function(e){var n,r=this.binaryIndices,i=[];for(n in r)t.call(r,n)&&(this.checkIndex(n,e)||i.push(n));return i},A.prototype.checkIndex=function(t,n){(n=n||{}).randomSamplingFactor&&!1!==n.randomSampling&&(n.randomSampling=!0),n.randomSamplingFactor=n.randomSamplingFactor||.1,(n.randomSamplingFactor<0||n.randomSamplingFactor>1)&&(n.randomSamplingFactor=.1);var r,i,o,s,u,a=!0;if(!this.binaryIndices.hasOwnProperty(t))throw new Error("called checkIndex on property without an index: "+t);if(this.adaptiveBinaryIndices||this.ensureIndex(t),(s=(u=this.binaryIndices[t].values).length)!==this.data.length)return n.repair&&this.ensureIndex(t,!0),!1;if(0===s)return!0;var c=-1!==t.indexOf(".");if(1===s)a=0===u[0];else if(n.randomSampling){if(d.$lte(e.getIn(this.data[u[0]],t,c),e.getIn(this.data[u[1]],t,c))||(a=!1),d.$lte(e.getIn(this.data[u[s-2]],t,c),e.getIn(this.data[u[s-1]],t,c))||(a=!1),a)for(i=Math.floor((s-1)*n.randomSamplingFactor),r=0;r<i-1;r++)if(o=Math.floor(Math.random()*(s-1)),!d.$lte(e.getIn(this.data[u[o]],t,c),e.getIn(this.data[u[o+1]],t,c))){a=!1;break}}else for(r=0;r<s-1;r++)if(!d.$lte(e.getIn(this.data[u[r]],t,c),e.getIn(this.data[u[r+1]],t,c))){a=!1;break}return!a&&n.repair&&this.ensureIndex(t,!0),a},A.prototype.getBinaryIndexValues=function(t){var n,r=this.binaryIndices[t].values,i=[];for(n=0;n<r.length;n++)i.push(e.getIn(this.data[r[n]],t,!0));return i},A.prototype.ensureUniqueIndex=function(t){var e=this.constraints.unique[t];return e||-1==this.uniqueNames.indexOf(t)&&this.uniqueNames.push(t),this.constraints.unique[t]=e=new k(t),this.data.forEach((function(t){e.set(t)})),e},A.prototype.ensureAllIndexes=function(e){var n,r=this.binaryIndices;for(n in r)t.call(r,n)&&this.ensureIndex(n,e)},A.prototype.flagBinaryIndexesDirty=function(){var e,n=this.binaryIndices;for(e in n)t.call(n,e)&&(n[e].dirty=!0)},A.prototype.flagBinaryIndexDirty=function(t){this.binaryIndices[t]&&(this.binaryIndices[t].dirty=!0)},A.prototype.count=function(t){return t?this.chain().find(t).filteredrows.length:this.data.length},A.prototype.ensureId=function(){var t=this.data.length,e=0;for(this.idIndex=[];e<t;e+=1)this.idIndex.push(this.data[e].$loki)},A.prototype.ensureIdAsync=function(t){this.async((function(){this.ensureId()}),t)},A.prototype.addDynamicView=function(t,e){var n=new S(this,t,e);return this.DynamicViews.push(n),n},A.prototype.removeDynamicView=function(t){this.DynamicViews=this.DynamicViews.filter((function(e){return e.name!==t}))},A.prototype.getDynamicView=function(t){for(var e=0;e<this.DynamicViews.length;e++)if(this.DynamicViews[e].name===t)return this.DynamicViews[e];return null},A.prototype.findAndUpdate=function(t,e){"function"==typeof t?this.updateWhere(t,e):this.chain().find(t).update(e)},A.prototype.findAndRemove=function(t){this.chain().find(t).remove()},A.prototype.insert=function(t,e){if(!Array.isArray(t))return this.insertOne(t);var n,r=[],i=e&&!this.cloneObjects&&this.adaptiveBinaryIndices&&Object.keys(this.binaryIndices).length>0;i&&(this.adaptiveBinaryIndices=!1);try{this.emit("pre-insert",t);for(var o=0,s=t.length;o<s;o++){if(!(n=this.insertOne(t[o],!0)))return;r.push(n)}}finally{i&&(this.ensureAllIndexes(),this.adaptiveBinaryIndices=!0)}return this.emit("insert",r),1===(r=this.cloneObjects?y(r,this.cloneMethod):r).length?r[0]:r},A.prototype.insertOne=function(t,e){var n,r=null;if("object"!=typeof t?r=new TypeError("Document needs to be an object"):null===t&&(r=new TypeError("Object cannot be null")),null!==r)throw this.emit("error",r),r;var i=this.cloneObjects?y(t,this.cloneMethod):t;if(this.disableMeta||void 0!==i.meta||(i.meta={revision:0,created:0}),e||this.emit("pre-insert",i),this.add(i))return this.disableChangesApi?this.insertMeta(i):this.insertMetaWithChange(i),n=this.cloneObjects?y(i,this.cloneMethod):i,e||this.emit("insert",n),this.addAutoUpdateObserver(n),n},A.prototype.clear=function(t){var e=this;t=t||{},this.data=[],this.idIndex=[],this.cachedIndex=null,this.cachedBinaryIndex=null,this.cachedData=null,this.maxId=0,this.DynamicViews=[],this.dirty=!0,!0===t.removeIndices?(this.binaryIndices={},this.constraints={unique:{},exact:{}},this.uniqueNames=[]):(Object.keys(this.binaryIndices).forEach((function(t){e.binaryIndices[t].dirty=!1,e.binaryIndices[t].values=[]})),this.constraints={unique:{},exact:{}},this.uniqueNames.forEach((function(t){e.ensureUniqueIndex(t)})))},A.prototype.update=function(e){var n,r,i;if(Array.isArray(e)){i=e.length,(n=!this.cloneObjects&&this.adaptiveBinaryIndices&&Object.keys(this.binaryIndices).length>0)&&(this.adaptiveBinaryIndices=!1);try{for(r=0;r<i;r+=1)this.update(e[r])}finally{n&&(this.ensureAllIndexes(),this.adaptiveBinaryIndices=!0)}}else{if(!t.call(e,"$loki"))throw new Error("Trying to update unsynced document. Please save the document first by using insert() or addMany()");try{this.startTransaction();var o,s,u,a,c,l=this.get(e.$loki,!0),f=this;if(!l)throw new Error("Trying to update a document not in collection.");o=l[0],u=l[1],s=this.cloneObjects||!this.disableDeltaChangesApi?y(e,this.cloneMethod):e,this.emit("pre-update",e),Object.keys(this.constraints.unique).forEach((function(t){f.constraints.unique[t].update(o,s)})),this.data[u]=s,s!==e&&this.addAutoUpdateObserver(e);for(var h=0;h<this.DynamicViews.length;h++)this.DynamicViews[h].evaluateDocument(u,!1);if(this.adaptiveBinaryIndices){var d=this.binaryIndices;for(a in d)this.adaptiveBinaryIndexUpdate(u,a)}else this.flagBinaryIndexesDirty();return this.idIndex[u]=s.$loki,this.isIncremental&&this.dirtyIds.push(s.$loki),this.commit(),this.dirty=!0,this.disableChangesApi?this.updateMeta(s,null):this.updateMetaWithChange(s,o),c=this.cloneObjects?y(s,this.cloneMethod):s,this.emit("update",c,o),c}catch(t){throw this.rollback(),this.lokiConsoleWrapper.error(t.message),this.emit("error",t),t}}},A.prototype.add=function(e){if("object"!=typeof e)throw new TypeError("Object being added needs to be an object");if(void 0!==e.$loki)throw new Error("Document is already in collection, please use update()");try{this.startTransaction(),this.maxId++,isNaN(this.maxId)&&(this.maxId=this.data[this.data.length-1].$loki+1),e.$loki=this.maxId,this.disableMeta||(e.meta.version=0);var n,r=this.constraints.unique;for(n in r)t.call(r,n)&&r[n].set(e);this.idIndex.push(e.$loki),this.isIncremental&&this.dirtyIds.push(e.$loki),this.data.push(e);for(var i=this.data.length-1,o=this.DynamicViews.length,s=0;s<o;s++)this.DynamicViews[s].evaluateDocument(i,!0);if(this.adaptiveBinaryIndices){var u=this.binaryIndices;for(n in u)this.adaptiveBinaryIndexInsert(i,n)}else this.flagBinaryIndexesDirty();return this.commit(),this.dirty=!0,this.cloneObjects?y(e,this.cloneMethod):e}catch(t){throw this.rollback(),this.lokiConsoleWrapper.error(t.message),this.emit("error",t),t}},A.prototype.updateWhere=function(t,e){var n,r=this.where(t),i=0;try{for(;i<r.length;i++)n=e(r[i]),this.update(n)}catch(t){this.rollback(),this.lokiConsoleWrapper.error(t.message)}},A.prototype.removeWhere=function(t){var e;"function"==typeof t?(e=this.data.filter(t),this.remove(e)):this.chain().find(t).remove()},A.prototype.removeDataOnly=function(){this.remove(this.data.slice())},A.prototype.removeBatchByPositions=function(t){var e,n,r,i,o=t.length,s={},u=Object.keys(this.binaryIndices).length,a=Object.keys(this.constraints.unique).length,c=this.adaptiveBinaryIndices&&Object.keys(this.binaryIndices).length>0,l=this;try{for(this.startTransaction(),r=0;r<o;r++)s[this.idIndex[t[r]]]=!0;if((e=this.DynamicViews.length)>0||u>0||a>0){if(e>0)for(n=0;n<e;n++)this.DynamicViews[n].removeDocument(t);if(this.adaptiveBinaryIndices&&!c){var f,h=this.binaryIndices;for(f in h)this.adaptiveBinaryIndexRemove(t,f)}else this.flagBinaryIndexesDirty();a&&Object.keys(this.constraints.unique).forEach((function(e){for(r=0;r<o;r++)null!==(i=l.data[t[r]])[e]&&void 0!==i[e]&&l.constraints.unique[e].remove(i[e])}))}if(!this.disableChangesApi||this.events.delete.length>1)for(r=0;r<o;r++)this.emit("delete",this.data[t[r]]);this.data=this.data.filter((function(t){return!s[t.$loki]})),this.idIndex=this.idIndex.filter((function(t){return!s[t]})),this.adaptiveBinaryIndices&&c&&(this.adaptiveBinaryIndices=!1,this.ensureAllIndexes(!0),this.adaptiveBinaryIndices=!0),this.commit(),this.dirty=!0}catch(t){return this.rollback(),c&&(this.adaptiveBinaryIndices=!0),this.lokiConsoleWrapper.error(t.message),this.emit("error",t),null}},A.prototype.removeBatch=function(t){var e,n=t.length,r=this.data.length,i={},o=[];for(e=0;e<r;e++)i[this.data[e].$loki]=e;for(e=0;e<n;e++)"object"==typeof t[e]?o.push(i[t[e].$loki]):o.push(i[t[e]]);this.removeBatchByPositions(o)},A.prototype.remove=function(e){if("number"==typeof e&&(e=this.get(e)),"object"!=typeof e)throw new Error("Parameter is not an object");if(Array.isArray(e))this.removeBatch(e);else{if(!t.call(e,"$loki"))throw new Error("Object is not a document stored in the collection");try{this.startTransaction();var n=this.get(e.$loki,!0),r=n[1],i=this;Object.keys(this.constraints.unique).forEach((function(t){null!==e[t]&&void 0!==e[t]&&i.constraints.unique[t].remove(e[t])}));for(var o=0;o<this.DynamicViews.length;o++)this.DynamicViews[o].removeDocument(r);if(this.adaptiveBinaryIndices){var s,u=this.binaryIndices;for(s in u)this.adaptiveBinaryIndexRemove(r,s)}else this.flagBinaryIndexesDirty();return this.data.splice(r,1),this.removeAutoUpdateObserver(e),this.idIndex.splice(r,1),this.isIncremental&&this.dirtyIds.push(e.$loki),this.commit(),this.dirty=!0,this.emit("delete",n[0]),delete e.$loki,delete e.meta,e}catch(t){return this.rollback(),this.lokiConsoleWrapper.error(t.message),this.emit("error",t),null}}},A.prototype.get=function(t,e){var n=e||!1,r=this.idIndex,i=r.length-1,o=0,s=o+i>>1;if(t="number"==typeof t?t:parseInt(t,10),isNaN(t))throw new TypeError("Passed id is not an integer");for(;r[o]<r[i];)r[s=o+i>>1]<t?o=s+1:i=s;return i===o&&r[o]===t?n?[this.data[o],o]:this.data[o]:null},A.prototype.getBinaryIndexPosition=function(t,n){var r=e.getIn(this.data[t],n,!0),i=this.binaryIndices[n].values,o=this.calculateRange("$eq",n,r);if(0===o[0]&&-1===o[1])return null;for(var s=o[0],u=o[1],a=s;a<=u;a++)if(i[a]===t)return a;return null},A.prototype.adaptiveBinaryIndexInsert=function(t,n){var r=-1!==n.indexOf("."),i=this.binaryIndices[n].values,o=e.getIn(this.data[t],n,r);!0===this.serializableIndices&&o instanceof Date&&(this.data[t][n]=o.getTime(),o=e.getIn(this.data[t],n));var s=0===i.length?0:this.calculateRangeStart(n,o,!0,r);this.binaryIndices[n].values.splice(s,0,t)},A.prototype.adaptiveBinaryIndexUpdate=function(t,e){var n,r=this.binaryIndices[e].values,i=r.length;for(n=0;n<i&&r[n]!==t;n++);this.binaryIndices[e].values.splice(n,1),this.adaptiveBinaryIndexInsert(t,e)},A.prototype.adaptiveBinaryIndexRemove=function(t,e,n){var r,i,o,s,u,a,c,l=this.binaryIndices[e],f={};if(Array.isArray(t)){if(1!==(s=t.length)){for(o=0;o<s;o++)f[t[o]]=!0;if(l.values=l.values.filter((function(t){return!f[t]})),!0===n)return;var h=t.slice();for(h.sort((function(t,e){return t-e})),r=l.values.length,i=0;i<r;i++){for(u=l.values[i],a=0,o=0;o<s&&u>h[o];o++)a++;l.values[i]-=a}return}t=t[0]}if(null===(c=this.getBinaryIndexPosition(t,e)))return null;if(l.values.splice(c,1),!0!==n)for(r=l.values.length,i=0;i<r;i++)l.values[i]>t&&l.values[i]--},A.prototype.calculateRangeStart=function(t,n,r,i){var s=this.data,u=this.binaryIndices[t].values,a=0,c=u.length-1,l=0;if(0===u.length)return-1;for(e.getIn(s[u[a]],t,i),e.getIn(s[u[c]],t,i);a<c;)l=a+c>>1,o.lt(e.getIn(s[u[l]],t,i),n,!1)?a=l+1:c=l;var f=a;return o.aeq(n,e.getIn(s[u[f]],t,i))?f:o.lt(n,e.getIn(s[u[f]],t,i),!1)?r?f:f-1:r?f+1:f},A.prototype.calculateRangeEnd=function(t,n,r){var i=this.data,s=this.binaryIndices[t].values,u=0,a=s.length-1,c=0;if(0===s.length)return-1;for(e.getIn(i[s[u]],t,r),e.getIn(i[s[a]],t,r);u<a;)c=u+a>>1,o.lt(n,e.getIn(i[s[c]],t,r),!1)?a=c:u=c+1;var l=a;return o.aeq(n,e.getIn(i[s[l]],t,r))?l:o.gt(n,e.getIn(i[s[l]],t,r),!1)?l+1:o.aeq(n,e.getIn(i[s[l-1]],t,r))?l-1:l},A.prototype.calculateRange=function(t,n,r){var i,s,u,a=this.data,c=this.binaryIndices[n].values,l=c.length-1;if(0===a.length)return[0,-1];var f=-1!==n.indexOf("."),h=e.getIn(a[c[0]],n,f),d=e.getIn(a[c[l]],n,f);switch(t){case"$eq":case"$aeq":case"$dteq":if(o.lt(r,h,!1)||o.gt(r,d,!1))return[0,-1];break;case"$gt":if(o.gt(r,d,!0))return[0,-1];if(o.gt(h,r,!1))return[0,l];break;case"$gte":if(o.gt(r,d,!1))return[0,-1];if(o.gt(h,r,!0))return[0,l];break;case"$lt":if(o.lt(r,h,!0))return[0,-1];if(o.lt(d,r,!1))return[0,l];break;case"$lte":if(o.lt(r,h,!1))return[0,-1];if(o.lt(d,r,!0))return[0,l];break;case"$between":return o.gt(r[0],d,!1)?[0,-1]:o.lt(r[1],h,!1)?[0,-1]:((i=this.calculateRangeStart(n,r[0],!1,f))<0&&i++,(u=this.calculateRangeEnd(n,r[1],f))>l&&u--,o.gt(e.getIn(a[c[i]],n,f),r[0],!0)||i++,o.lt(e.getIn(a[c[u]],n,f),r[1],!0)||u--,u<i?[0,-1]:[i,u]);case"$in":for(var p=[],y=[],b=0,v=r.length;b<v;b++)for(var g=this.calculateRange("$eq",n,r[b]),m=g[0];m<=g[1];m++)void 0===p[m]&&(p[m]=!0,y.push(m));return y}switch(t){case"$eq":case"$aeq":case"$dteq":case"$gte":case"$lt":i=this.calculateRangeStart(n,r,!1,f),s=e.getIn(a[c[i]],n,f)}switch(t){case"$eq":case"$aeq":case"$dteq":case"$lte":case"$gt":u=this.calculateRangeEnd(n,r,f),e.getIn(a[c[u]],n,f)}switch(t){case"$eq":case"$aeq":case"$dteq":return o.aeq(s,r)?[i,u]:[0,-1];case"$gt":return o.aeq(e.getIn(a[c[u]],n,f),r)?[u+1,l]:[u,l];case"$gte":return o.aeq(e.getIn(a[c[i]],n,f),r)?[i,l]:[i+1,l];case"$lt":return o.aeq(e.getIn(a[c[i]],n,f),r)?[0,i-1]:[0,i];case"$lte":return o.aeq(e.getIn(a[c[u]],n,f),r)?[0,u]:[0,u-1];default:return[0,a.length-1]}},A.prototype.by=function(t,e){var n;if(void 0===e)return n=this,function(e){return n.by(t,e)};var r=this.constraints.unique[t].get(e);return this.cloneObjects?y(r,this.cloneMethod):r},A.prototype.findOne=function(t){t=t||{};var e=this.chain().find(t,!0).data();return Array.isArray(e)&&0===e.length?null:this.cloneObjects?y(e[0],this.cloneMethod):e[0]},A.prototype.chain=function(t,e){var n=new E(this);return void 0===t?n:n.transform(t,e)},A.prototype.find=function(t){return this.chain().find(t).data()},A.prototype.findOneUnindexed=function(t,n){for(var r=this.data.length;r--;)if(e.getIn(this.data[r],t,!0)===n)return this.data[r];return null},A.prototype.startTransaction=function(){if(this.transactional){this.cachedData=y(this.data,this.cloneMethod),this.cachedIndex=this.idIndex,this.cachedBinaryIndex=this.binaryIndices,this.cachedDirtyIds=this.dirtyIds;for(var t=0;t<this.DynamicViews.length;t++)this.DynamicViews[t].startTransaction()}},A.prototype.commit=function(){if(this.transactional){this.cachedData=null,this.cachedIndex=null,this.cachedBinaryIndex=null,this.cachedDirtyIds=null;for(var t=0;t<this.DynamicViews.length;t++)this.DynamicViews[t].commit()}},A.prototype.rollback=function(){if(this.transactional){null!==this.cachedData&&null!==this.cachedIndex&&(this.data=this.cachedData,this.idIndex=this.cachedIndex,this.binaryIndices=this.cachedBinaryIndex,this.dirtyIds=this.cachedDirtyIds);for(var t=0;t<this.DynamicViews.length;t++)this.DynamicViews[t].rollback()}},A.prototype.async=function(t,e){setTimeout((function(){if("function"!=typeof t)throw new TypeError("Argument passed for async execution is not a function");t(),e()}),0)},A.prototype.where=function(t){return this.chain().where(t).data()},A.prototype.mapReduce=function(t,e){try{return e(this.data.map(t))}catch(t){throw t}},A.prototype.eqJoin=function(t,e,n,r,i){return new E(this).eqJoin(t,e,n,r,i)},A.prototype.stages={},A.prototype.getStage=function(t){return this.stages[t]||(this.stages[t]={}),this.stages[t]},A.prototype.commitLog=[],A.prototype.stage=function(t,e){var n=JSON.parse(JSON.stringify(e));return this.getStage(t)[e.$loki]=n,n},A.prototype.commitStage=function(t,e){var n,r=this.getStage(t),i=(new Date).getTime();for(n in r)this.update(r[n]),this.commitLog.push({timestamp:i,message:e,data:JSON.parse(JSON.stringify(r[n]))});this.stages[t]={}},A.prototype.no_op=function(){},A.prototype.extract=function(t){for(var e=0,n=this.data.length,r=P(t),i=[];e<n;e+=1)i.push(x(this.data[e],t,r));return i},A.prototype.max=function(t){return Math.max.apply(null,this.extract(t))},A.prototype.min=function(t){return Math.min.apply(null,this.extract(t))},A.prototype.maxRecord=function(t){for(var e,n=0,r=this.data.length,i=P(t),o={index:0,value:void 0};n<r;n+=1)void 0!==e?e<x(this.data[n],t,i)&&(e=x(this.data[n],t,i),o.index=this.data[n].$loki):(e=x(this.data[n],t,i),o.index=this.data[n].$loki);return o.value=e,o},A.prototype.minRecord=function(t){for(var e,n=0,r=this.data.length,i=P(t),o={index:0,value:void 0};n<r;n+=1)void 0!==e?e>x(this.data[n],t,i)&&(e=x(this.data[n],t,i),o.index=this.data[n].$loki):(e=x(this.data[n],t,i),o.index=this.data[n].$loki);return o.value=e,o},A.prototype.extractNumerical=function(t){return this.extract(t).map(I).filter(Number).filter((function(t){return!isNaN(t)}))},A.prototype.avg=function(t){return j(this.extractNumerical(t))},A.prototype.stdDev=function(t){return e=this.extractNumerical(t),n=j(e),r=j(e.map((function(t){var e=t-n;return e*e}))),Math.sqrt(r);var e,n,r},A.prototype.mode=function(t){var e,n,r,i={},o=this.extract(t);for(n in o.forEach((function(t){i[t]?i[t]+=1:i[t]=1})),i)e?e<i[n]&&(r=n):(r=n,e=i[n]);return r},A.prototype.median=function(t){var e=this.extractNumerical(t);e.sort(T);var n=Math.floor(e.length/2);return e.length%2?e[n]:(e[n-1]+e[n])/2},R.prototype={keys:[],values:[],sort:function(t,e){return t<e?-1:t>e?1:0},setSort:function(t){this.bs=new C(t)},bs:function(){return new C(this.sort)},set:function(t,e){var n=this.bs(this.keys,t);n.found?this.values[n.index]=e:(this.keys.splice(n.index,0,t),this.values.splice(n.index,0,e))},get:function(t){return this.values[D(this.keys,t,this.sort).index]}},k.prototype.keyMap={},k.prototype.lokiMap={},k.prototype.set=function(t){var e=t[this.field];if(null!=e){if(this.keyMap[e])throw new Error("Duplicate key for property "+this.field+": "+e);this.keyMap[e]=t,this.lokiMap[t.$loki]=e}},k.prototype.get=function(t){return this.keyMap[t]},k.prototype.byId=function(t){return this.keyMap[this.lokiMap[t]]},k.prototype.update=function(t,e){if(this.lokiMap[t.$loki]!==e[this.field]){var n=this.lokiMap[t.$loki];this.set(e),this.keyMap[n]=void 0}else this.keyMap[t[this.field]]=e},k.prototype.remove=function(t){var e=this.keyMap[t];if(null==e)throw new Error("Key is not in unique index: "+this.field);this.keyMap[t]=void 0,this.lokiMap[e.$loki]=void 0},k.prototype.clear=function(){this.keyMap={},this.lokiMap={}},B.prototype={set:function(t,e){this.index[t]?this.index[t].push(e):this.index[t]=[e]},remove:function(t,e){var n=this.index[t];for(var r in n)n[r]==e&&n.splice(r,1);n.length<1&&(this.index[t]=void 0)},get:function(t){return this.index[t]},clear:function(t){this.index={}}},g.LokiOps=d,g.Collection=A,g.KeyValueStore=R,g.LokiMemoryAdapter=m,g.LokiPartitioningAdapter=_,g.LokiLocalStorageAdapter=O,g.LokiFsAdapter=w,g.persistenceAdapters={fs:w,localStorage:O},g.aeq=s,g.lt=u,g.gt=a,g.Comparators=o,g}()})?o.apply(e,s):o)||(t.exports=u)}).call(this,n("yLpj"),n("8oxB"))},XlPw:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n("6blF");function i(t,e){return e?new r.a((function(n){return e.schedule(o,0,{error:t,subscriber:n})})):new r.a((function(e){return e.error(t)}))}function o(t){var e=t.error;t.subscriber.error(e)}},XttE:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,r,i){return(0,a.ensureActionsEnabled)(t),t.action((function(){return new Promise((function(o,s){var u;return Promise.resolve(g(t,e)).then((function(e){try{return u=e,Promise.resolve(Promise.all([m(t,u)].concat(l(i?w(t,u,n,r):[t.batch.apply(t,l(_(t,u,n,r)))])))).then((function(){try{return o()}catch(t){return s(t)}}),s)}catch(t){return s(t)}}),s)}))}),"sync-applyRemoteChanges")};var r=n("Ex95"),i=n("6Cb3"),o=n("ISfp"),s=function(t){if(t&&t.__esModule)return t;var e=c();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var o=r?Object.getOwnPropertyDescriptor(t,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=t[i]}}n.default=t,e&&e.set(t,n);return n}(n("0gbD")),u=n("eLCP"),a=n("w5US");function c(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return c=function(){return t},t}function l(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function h(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var d=function(t,e){var n=function({created:t,updated:e,deleted:n}){var r=[];return t.forEach((function(t){r.push(t.id)})),e.forEach((function(t){r.push(t.id)})),r.concat(n)}(e);return n.length?t.query(s.where((0,u.columnName)("id"),s.oneOf(n))).fetch():Promise.resolve([])},p=function(t,e){for(var n=0,r=e.length;n<r;n+=1)if(e[n]._raw.id===t)return e[n];return null};function y(t,e){return new Promise((function(n,i){var o,s,u,a,c;return({database:o,table:s}=t),({deleted:u}=e),Promise.resolve(Promise.all([d(t,e),o.adapter.getDeletedRecords(s)])).then((function(t){try{return[a,c]=t,n(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?f(n,!0).forEach((function(e){h(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):f(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},e,{records:a,locallyDeletedIds:c,recordsToDestroy:(0,r.filter)((function(t){return u.includes(t.id)}),a),deletedRecordsToDestroy:(0,r.filter)((function(t){return u.includes(t)}),c)}))}catch(t){return i(t)}}),i)}))}function b(t){(0,o.invariant)(t&&"object"==typeof t&&"id"in t&&!("_status"in t||"_changed"in t),"[Sync] Invalid raw record supplied to Sync. Records must be objects, must have an 'id' field, and must NOT have a '_status' or '_changed' fields")}function v(t,e,n,r){var{database:i,table:s}=t,{created:u,updated:c,recordsToDestroy:l,records:f,locallyDeletedIds:h}=e;n&&u.length&&(0,o.logError)("[Sync] 'sendCreatedAsUpdated' option is enabled, and yet server sends some records as 'created'");var d=[];return u.forEach((function(e){b(e);var n=p(e.id,f);n?((0,o.logError)("[Sync] Server wants client to create record ".concat(s,"#").concat(e.id,", but it already exists locally. This may suggest last sync partially executed, and then failed; or it could be a serious bug. Will update existing record instead.")),d.push((0,a.prepareUpdateFromRaw)(n,e,r))):h.includes(e.id)?((0,o.logError)("[Sync] Server wants client to create record ".concat(s,"#").concat(e.id,", but it already exists locally and is marked as deleted. This may suggest last sync partially executed, and then failed; or it could be a serious bug. Will delete local record and recreate it instead.")),i.adapter.destroyDeletedRecords(s,[e.id]),d.push((0,a.prepareCreateFromRaw)(t,e))):d.push((0,a.prepareCreateFromRaw)(t,e))})),c.forEach((function(e){b(e);var i=p(e.id,f);i?d.push((0,a.prepareUpdateFromRaw)(i,e,r)):h.includes(e.id)||(n||(0,o.logError)("[Sync] Server wants client to update record ".concat(s,"#").concat(e.id,", but it doesn't exist locally. This could be a serious bug. Will create record instead.")),d.push((0,a.prepareCreateFromRaw)(t,e)))})),l.forEach((function(t){d.push(t.prepareDestroyPermanently())})),d}var g=function(t,e){return(0,r.piped)(e,(0,r.map)((function(e,n){return y(t.collections.get(n),e)})),r.promiseAllObject)},m=function(t,e){return(0,r.piped)(e,(0,r.map)((function({deletedRecordsToDestroy:e},n){return e.length&&t.adapter.destroyDeletedRecords(n,e)})),r.promiseAllObject)},_=function(t,e,n,o){return(0,r.piped)(e,(0,r.map)((function(e,r){return v(t.collections.get(r),e,n,o)})),r.values,i.unnest)},w=function(t,e,n,o){return(0,r.piped)(e,(0,r.map)((function(e,i){return(0,r.piped)(v(t.collections.get(i),e,n,o),(0,r.splitEvery)(5e3),(0,r.map)((function(e){return t.batch.apply(t,l(e))})))})),r.values,i.unnest)}},YgyC:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){var{configurable:r,enumerable:i,initializer:o,value:s}=n;return{configurable:r,enumerable:i,get:function(){if(this!==t){var n=o?o.call(this):s;return Object.defineProperty(this,e,{configurable:r,enumerable:i,writable:!0,value:n}),n}}}}},ZEXy:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};return e>=n}},Ztl0:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.stepsForMigration=function({migrations:t,fromVersion:e,toVersion:n}){var{sortedMigrations:r,minVersion:i,maxVersion:s}=t;if(e<i||n>s)return null;var u=r.filter((function({toVersion:t}){return t>e&&t<=n}));return o(u)};var r=n("Ex95"),i=n("6Cb3"),o=(0,r.pipe)((0,r.map)((0,r.prop)("steps")),i.unnest)},ahDk:function(t,e,n){"use strict";n.r(e);var r=n("mrSG"),i=n("MGBS"),o=n("zotm");function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.durationSelector))},t}(),a=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.__extends(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=Object(o.a)(this,e);!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this.value,e=this.hasValue,n=this.throttled;n&&(this.remove(n),this.throttled=null,n.unsubscribe()),e&&(this.value=null,this.hasValue=!1,this.destination.next(t))},e.prototype.notifyNext=function(t,e,n,r){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.a),c=n("T1DM"),l=n("gI3B");function f(t,e){return void 0===e&&(e=c.a),s((function(){return Object(l.a)(t,e)}))}function h(t){return function(e){return e.lift(new d(t))}}var d=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new p(t,this.closingNotifier))},t}(),p=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add(Object(o.a)(r,n)),r}return r.__extends(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.buffer;this.buffer=[],this.destination.next(o)},e}(i.a),y=n("KD6q"),b=n("FFOo"),v=n("nkY7");function g(t){var e=arguments.length,n=c.a;Object(v.a)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new m(t,r,i,n))}}var m=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new w(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),_=function(){return function(){this.buffer=[]}}(),w=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.bufferTimeSpan=n,s.bufferCreationInterval=r,s.maxBufferSize=i,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==r||r<0,s.timespanOnly){var a={subscriber:s,context:u,bufferTimeSpan:n};s.add(u.closeAction=o.schedule(O,n,a))}else{var c={subscriber:s,context:u},l={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(S,n,c)),s.add(o.schedule(E,r,l))}return s}return r.__extends(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(O,n,r))}},e.prototype.openContext=function(){var t=new _;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(b.a);function O(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function E(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(S,n,{subscriber:r,context:o})),this.schedule(t,e))}function S(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var A=n("pugT");function P(t,e){return function(n){return n.lift(new I(t,e))}}var I=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new N(t,this.openings,this.closingSelector))},t}(),N=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(Object(o.a)(i,n)),i}return r.__extends(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new A.a,r={buffer:[],subscription:n};e.push(r);var i=Object(o.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(i.a);function T(t){return function(e){return e.lift(new j(t))}}var j=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new x(t,this.closingSelector))},t}(),x=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.__extends(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=null,this.subscribing=!1},e.prototype.notifyNext=function(t,e,n,r,i){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new A.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(o.a)(this,e)),this.subscribing=!1},e}(i.a),D=n("rPjj");function C(t){return function(e){var n=new R(t),r=e.lift(n);return n.caught=r}}var R=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new k(t,this.selector,this.caught))},t}(),k=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.__extends(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new D.a(this,void 0,void 0);this.add(r),Object(o.a)(this,n,void 0,void 0,r)}},e}(i.a),B=n("dzgT");function M(t){return function(e){return e.lift(new B.a(t))}}var U=n("isby"),L=n("0/uQ");function F(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&Object(U.a)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call(Object(L.a)([e].concat(t)),new B.a(n))}}var $=n("dEwP");function z(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call($.a.apply(void 0,[e].concat(t)))}}var q=n("Txjg"),V=n("psW0");function W(t,e){return Object(V.a)(t,e,1)}function Y(t,e){return W((function(){return t}),e)}function K(t){return function(e){return e.lift(new J(t,e))}}var J=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new G(t,this.predicate,this.source))},t}(),G=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.__extends(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(b.a);function H(t){return function(e){return e.lift(new X(t))}}var X=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Q(t,this.durationSelector))},t}(),Q=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r.durationSubscription=null,r}return r.__extends(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Object(o.a)(this,e))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=null,n.unsubscribe(),this.remove(n)),this.value=null,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.a);function Z(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new tt(t,e))}}var tt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.dueTime,this.scheduler))},t}(),et=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.__extends(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(nt,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(b.a);function nt(t){t.debouncedNext()}function rt(t){return void 0===t&&(t=null),function(e){return e.lift(new it(t))}}var it=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ot(t,this.defaultValue))},t}(),ot=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.__extends(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(b.a);function st(t){return t instanceof Date&&!isNaN(+t)}var ut=n("60iU");function at(t,e){void 0===e&&(e=c.a);var n=st(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ct(n,e))}}var ct=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new lt(t,this.delay,this.scheduler))},t}(),lt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.__extends(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new ft(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(ut.a.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(ut.a.createComplete()),this.unsubscribe()},e}(b.a),ft=function(){return function(t,e){this.time=t,this.notification=e}}(),ht=n("6blF");function dt(t,e){return e?function(n){return new bt(n,e).lift(new pt(t))}:function(e){return e.lift(new pt(t))}}var pt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new yt(t,this.delayDurationSelector))},t}(),yt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=Object(o.a)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(i.a),bt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.__extends(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new vt(t,this.source))},e}(ht.a),vt=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.__extends(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(b.a);function gt(){return function(t){return t.lift(new mt)}}var mt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new _t(t))},t}(),_t=function(t){function e(e){return t.call(this,e)||this}return r.__extends(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(b.a);function wt(t,e){return function(n){return n.lift(new Ot(t,e))}}var Ot=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new Et(t,this.keySelector,this.flushes))},t}(),Et=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=n,i.values=new Set,r&&i.add(Object(o.a)(i,r)),i}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.values.clear()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.a),St=n("ad02");function At(t,e){return Object(St.a)((function(n,r){return e?e(n[t],r[t]):n[t]===r[t]}))}var Pt=n("b7mW"),It=n("VnD/"),Nt=n("3fWJ");function Tt(t){return void 0===t&&(t=Dt),function(e){return e.lift(new jt(t))}}var jt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new xt(t,this.errorFactory))},t}(),xt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.__extends(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(b.a);function Dt(){return new Nt.a}var Ct=n("G5J1");function Rt(t){return function(e){return 0===t?Object(Ct.b)():e.lift(new kt(t))}}var kt=function(){function t(t){if(this.total=t,this.total<0)throw new Pt.a}return t.prototype.call=function(t,e){return e.subscribe(new Bt(t,this.total))},t}(),Bt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.__extends(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(b.a);function Mt(t,e){if(t<0)throw new Pt.a;var n=arguments.length>=2;return function(r){return r.pipe(Object(It.a)((function(e,n){return n===t})),Rt(1),n?rt(e):Tt((function(){return new Pt.a})))}}var Ut=n("F/XL");function Lt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Object($.a)(e,Ut.a.apply(void 0,t))}}function Ft(t,e){return function(n){return n.lift(new $t(t,e,n))}}var $t=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new zt(t,this.predicate,this.thisArg,this.source))},t}(),zt=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.__extends(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function qt(){return function(t){return t.lift(new Vt)}}var Vt=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Wt(t))},t}(),Wt=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.__extends(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(o.a)(this,t)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(t){this.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a),Yt=n("67Y/");function Kt(t,e){return e?function(n){return n.pipe(Kt((function(n,r){return Object(L.a)(t(n,r)).pipe(Object(Yt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new Jt(t))}}var Jt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t,this.project))},t}(),Gt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.__extends(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new D.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.remove(t),this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.a);function Ht(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=void 0),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new Xt(t,e,n))}}var Xt=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new Qt(t,this.project,this.concurrent,this.scheduler))},t}(),Qt=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.__extends(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add(Object(o.a)(this,t,e,n))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this._next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e&&e.length>0&&this._next(e.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.a);function Zt(t){return function(e){return e.lift(new te(t))}}var te=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new ee(t,this.callback))},t}(),ee=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new A.a(n)),r}return r.__extends(e,t),e}(b.a);function ne(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new re(t,n,!1,e))}}var re=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ie(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ie=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.predicate=n,s.source=r,s.yieldIndex=i,s.thisArg=o,s.index=0,s}return r.__extends(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(b.a);function oe(t,e){return function(n){return n.lift(new re(t,n,!0,e))}}var se=n("mChF");function ue(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(It.a)((function(e,n){return t(e,n,r)})):se.a,Rt(1),n?rt(e):Tt((function(){return new Nt.a})))}}var ae=n("IxPp");function ce(){return function(t){return t.lift(new le)}}var le=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new fe(t))},t}(),fe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype._next=function(t){},e}(b.a);function he(){return function(t){return t.lift(new de)}}var de=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new pe(t))},t}(),pe=function(t){function e(e){return t.call(this,e)||this}return r.__extends(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(b.a);function ye(t){return function(e){return 0===t?Object(Ct.b)():e.lift(new be(t))}}var be=function(){function t(t){if(this.total=t,this.total<0)throw new Pt.a}return t.prototype.call=function(t,e){return e.subscribe(new ve(t,this.total))},t}(),ve=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.__extends(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(b.a);function ge(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?Object(It.a)((function(e,n){return t(e,n,r)})):se.a,ye(1),n?rt(e):Tt((function(){return new Nt.a})))}}function me(t){return function(e){return e.lift(new _e(t))}}var _e=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new we(t,this.value))},t}(),we=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.__extends(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(b.a);function Oe(){return function(t){return t.lift(new Ee)}}var Ee=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Se(t))},t}(),Se=function(t){function e(e){return t.call(this,e)||this}return r.__extends(e,t),e.prototype._next=function(t){this.destination.next(ut.a.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(ut.a.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(ut.a.createComplete()),t.complete()},e}(b.a),Ae=n("dC0D"),Pe=n("y3By");function Ie(t,e){return arguments.length>=2?function(n){return Object(Pe.a)(Object(Ae.a)(t,e),ye(1),rt(e))(n)}:function(e){return Object(Pe.a)(Object(Ae.a)((function(e,n,r){return t(e,n,r+1)})),ye(1))(e)}}function Ne(t){return Ie("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Te=n("p0ib");function je(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Te.a.apply(void 0,[e].concat(t)))}}var xe=n("Zn8D");function De(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?Object(V.a)((function(){return t}),e,n):("number"==typeof e&&(n=e),Object(V.a)((function(){return t}),n))}function Ce(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new Re(t,e,n))}}var Re=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new ke(t,this.accumulator,this.seed,this.concurrent))},t}(),ke=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.__extends(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r,t,e)}else this.buffer.push(t)},e.prototype._innerSub=function(t,e,n){var r=new D.a(this,void 0,void 0);this.destination.add(r),Object(o.a)(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.destination;this.acc=e,this.hasValue=!0,o.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.destination.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.a);function Be(t){return Ie("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var Me=n("KhEm");function Ue(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Le(r,e));var i=Object.create(n,Me.b);return i.source=n,i.subjectFactory=r,i}}var Le=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),Fe=n("mZXl");function $e(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),function(e){return e.lift(new ze(t))}}var ze=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new qe(t,this.nextSources))},t}(),qe=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.__extends(e,t),e.prototype.notifyError=function(t,e){this.subscribeToNextSource()},e.prototype.notifyComplete=function(t){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new D.a(this,void 0,void 0);this.destination.add(e),Object(o.a)(this,t,void 0,void 0,e)}else this.destination.complete()},e}(i.a);function Ve(){return function(t){return t.lift(new We)}}var We=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Ye(t))},t}(),Ye=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.__extends(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(b.a),Ke=n("jFaF");function Je(t,e){return function(n){return[Object(It.a)(t,e)(n),Object(It.a)(Object(Ke.a)(t,e))(n)]}}var Ge=n("FYXD"),He=n("K9Ia");function Xe(t){return t?Ue((function(){return new He.a}),t):Ue(new He.a)}var Qe=n("26FU");function Ze(t){return function(e){return Ue(new Qe.a(t))(e)}}var tn=n("svcd");function en(){return function(t){return Ue(new tn.a)(t)}}var nn=n("S5bw");function rn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new nn.a(t,e,r);return function(t){return Ue((function(){return o}),i)(t)}}var on=n("W0Ae");function sn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),e.lift.call(on.a.apply(void 0,[e].concat(t)))}}function un(t){return void 0===t&&(t=-1),function(e){return 0===t?Object(Ct.b)():t<0?e.lift(new an(-1,e)):e.lift(new an(t-1,e))}}var an=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new cn(t,this.count,this.source))},t}(),cn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.__extends(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function ln(t){return function(e){return e.lift(new fn(t))}}var fn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new hn(t,this.notifier,e))},t}(),hn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(e){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next()}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new He.a;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=Object(o.a)(this,e)},e}(i.a);function dn(t){return void 0===t&&(t=-1),function(e){return e.lift(new pn(t,e))}}var pn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new yn(t,this.count,this.source))},t}(),yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.__extends(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(b.a);function bn(t){return function(e){return e.lift(new vn(t,e))}}var vn=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new gn(t,this.notifier,this.source))},t}(),gn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.__extends(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,i=this.retriesSubscription;if(r)this.errors=null,this.retriesSubscription=null;else{n=new He.a;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}i=Object(o.a)(this,r)}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=i,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=null),e&&(e.unsubscribe(),this.retriesSubscription=null),this.retries=null},e.prototype.notifyNext=function(t,e,n,r,i){var o=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=o,this.source.subscribe(this)},e}(i.a),mn=n("yGWI");function _n(t){return function(e){return e.lift(new wn(t))}}var wn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new On(t),r=e.subscribe(n);return r.add(Object(o.a)(n,this.notifier)),r},t}(),On=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.__extends(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(t,e,n,r,i){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.a);function En(t,e){return void 0===e&&(e=c.a),function(n){return n.lift(new Sn(t,e))}}var Sn=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new An(t,this.period,this.scheduler))},t}(),An=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pn,n,{subscriber:i,period:n})),i}return r.__extends(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(b.a);function Pn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function In(t,e){return function(n){return n.lift(new Nn(t,e))}}var Nn=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Tn(t,this.compareTo,this.comparator))},t}(),Tn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new jn(e,i))),i}return r.__extends(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this._a,e=this._b,n=this.comparator;t.length>0&&e.length>0;){var r=t.shift(),i=e.shift(),o=!1;try{o=n?n(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(b.a),jn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.__extends(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(b.a);function xn(){return new He.a}function Dn(){return function(t){return Object(mn.a)()(Ue(xn)(t))}}function Cn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift(function(t){var e,n,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,s=void 0===o?Number.POSITIVE_INFINITY:o,u=t.refCount,a=t.scheduler,c=0,l=!1,f=!1;return function(t){c++,e&&!l||(l=!1,e=new nn.a(i,s,a),n=t.subscribe({next:function(t){e.next(t)},error:function(t){l=!0,e.error(t)},complete:function(){f=!0,e.complete()}}));var r=e.subscribe(this);this.add((function(){c--,r.unsubscribe(),n&&!f&&u&&0===c&&(n.unsubscribe(),n=void 0,e=void 0)}))}}(r))}}function Rn(t){return function(e){return e.lift(new kn(t,e))}}var kn=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Bn(t,this.predicate,this.source))},t}(),Bn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.__extends(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new Nt.a)},e}(b.a);function Mn(t){return function(e){return e.lift(new Un(t))}}var Un=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new Ln(t,this.total))},t}(),Ln=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.__extends(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(b.a);function Fn(t){return function(e){return e.lift(new $n(t))}}var $n=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Pt.a}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new b.a(t)):e.subscribe(new zn(t,this._skipCount))},t}(),zn=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.__extends(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(b.a);function qn(t){return function(e){return e.lift(new Vn(t))}}var Vn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Wn(t,this.notifier))},t}(),Wn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var i=new D.a(r,void 0,void 0);return r.add(i),r.innerSubscription=i,Object(o.a)(r,n,void 0,void 0,i),r}return r.__extends(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(t,e,n,r,i){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.a);function Yn(t){return function(e){return e.lift(new Kn(t))}}var Kn=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new Jn(t,this.predicate))},t}(),Jn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.__extends(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(b.a);function Gn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Object(v.a)(n)?(t.pop(),function(e){return Object($.a)(t,e,n)}):function(e){return Object($.a)(t,e)}}var Hn=n("KQya"),Xn=n("/21U"),Qn=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=Hn.a);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!Object(Xn.a)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=Hn.a),i}return r.__extends(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=Hn.a),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(ht.a);function Zn(t,e){return void 0===e&&(e=0),function(n){return n.lift(new tr(t,e))}}var tr=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new Qn(e,this.delay,this.scheduler).subscribe(t)},t}();function er(t,e){return"function"==typeof e?function(n){return n.pipe(er((function(n,r){return Object(L.a)(t(n,r)).pipe(Object(Yt.a)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new nr(t))}}var nr=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new rr(t,this.project))},t}(),rr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.__extends(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=this.innerSubscription;r&&r.unsubscribe();var i=new D.a(this,void 0,void 0);this.destination.add(i),this.innerSubscription=Object(o.a)(this,t,e,n,i)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.destination.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e}(i.a);function ir(){return er(se.a)}function or(t,e){return e?er((function(){return t}),e):er((function(){return t}))}var sr=n("ny24");function ur(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new ar(t,e))}}var ar=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new cr(t,this.predicate,this.inclusive))},t}(),cr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.__extends(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(b.a),lr=n("+umK"),fr=n("2Bdj");function hr(t,e,n){return function(r){return r.lift(new dr(t,e,n))}}var dr=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new pr(t,this.nextOrObserver,this.error,this.complete))},t}(),pr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=lr.a,o._tapError=lr.a,o._tapComplete=lr.a,o._tapError=r||lr.a,o._tapComplete=i||lr.a,Object(fr.a)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||lr.a,o._tapError=n.error||lr.a,o._tapComplete=n.complete||lr.a),o}return r.__extends(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(b.a),yr={leading:!0,trailing:!1};function br(t,e){return void 0===e&&(e=yr),function(n){return n.lift(new vr(t,e.leading,e.trailing))}}var vr=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new gr(t,this.durationSelector,this.leading,this.trailing))},t}(),gr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.__extends(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=null},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=Object(o.a)(this,e))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=null,e&&this.send()},e.prototype.notifyNext=function(t,e,n,r,i){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.a);function mr(t,e,n){return void 0===e&&(e=c.a),void 0===n&&(n=yr),function(r){return r.lift(new _r(t,e,n.leading,n.trailing))}}var _r=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new wr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),wr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.duration=n,s.scheduler=r,s.leading=i,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return r.__extends(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Or,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(b.a);function Or(t){t.subscriber.clearThrottle()}var Er=n("lYZG");function Sr(t){return void 0===t&&(t=c.a),function(e){return Object(Er.a)((function(){return e.pipe(Object(Ae.a)((function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Yt.a)((function(t){var e=t.current,n=t.last,r=t.value;return new Ar(r,e-n)})))}))}}var Ar=function(){return function(t,e){this.value=t,this.interval=e}}(),Pr=n("3U0i");function Ir(t,e,n){return void 0===n&&(n=c.a),function(r){var i=st(t),o=i?+t-n.now():Math.abs(t);return r.lift(new Nr(o,i,e,n))}}var Nr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Tr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Tr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.absoluteTimeout=n,s.waitFor=r,s.withObservable=i,s.scheduler=o,s.action=null,s.scheduleTimeout(),s}return r.__extends(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(o.a)(t,e))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null},e}(i.a),jr=n("XlPw");function xr(t,e){return void 0===e&&(e=c.a),Ir(t,Object(jr.a)(new Pr.a),e)}function Dr(t){return void 0===t&&(t=c.a),Object(Yt.a)((function(e){return new Cr(e,t.now())}))}var Cr=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Rr(t,e,n){return 0===n?[e]:(t.push(e),t)}function kr(){return Ie(Rr,[])}function Br(t){return function(e){return e.lift(new Mr(t))}}var Mr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new Ur(t),r=e.subscribe(n);return r.closed||n.add(Object(o.a)(n,this.windowBoundaries)),r},t}(),Ur=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new He.a,e.next(n.window),n}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new He.a;e.next(n)},e}(i.a);function Lr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new Fr(t,e))}}var Fr=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new $r(t,this.windowSize,this.startWindowEvery))},t}(),$r=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new He.a],i.count=0,e.next(i.windows[0]),i}return r.__extends(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,s=0;s<o&&!this.closed;s++)i[s].next(t);var u=this.count-r+1;if(u>=0&&u%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var a=new He.a;i.push(a),n.next(a)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(b.a);function zr(t){var e=c.a,n=null,r=Number.POSITIVE_INFINITY;return Object(v.a)(arguments[3])&&(e=arguments[3]),Object(v.a)(arguments[2])?e=arguments[2]:Object(Xn.a)(arguments[2])&&(r=arguments[2]),Object(v.a)(arguments[1])?e=arguments[1]:Object(Xn.a)(arguments[1])&&(n=arguments[1]),function(i){return i.lift(new qr(t,n,r,e))}}var qr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Wr(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),Vr=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.__extends(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(He.a),Wr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=n,s.windowCreationInterval=r,s.maxWindowSize=i,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==r&&r>=0){var a={subscriber:s,window:u,context:null},c={windowTimeSpan:n,windowCreationInterval:r,subscriber:s,scheduler:o};s.add(o.schedule(Jr,n,a)),s.add(o.schedule(Kr,r,c))}else{var l={subscriber:s,window:u,windowTimeSpan:n};s.add(o.schedule(Yr,n,l))}return s}return r.__extends(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new Vr;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(b.a);function Yr(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function Kr(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),s={action:this,subscription:null},u={subscriber:n,window:o,context:s};s.subscription=r.schedule(Jr,e,u),this.add(s.subscription),this.schedule(t,i)}function Jr(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function Gr(t,e){return function(n){return n.lift(new Hr(t,e))}}var Hr=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Xr(t,this.openings,this.closingSelector))},t}(),Xr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(o.a)(i,n,n)),i}return r.__extends(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var s=void 0;try{s=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var u=new He.a,a=new A.a,c={window:u,subscription:a};this.contexts.push(c);var l=Object(o.a)(this,s,c);l.closed?this.closeWindow(this.contexts.length-1):(l.context=c,a.add(l)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(i.a);function Qr(t){return function(e){return e.lift(new Zr(t))}}var Zr=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new ti(t,this.closingSelector))},t}(),ti=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new He.a;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(o.a)(this,n))},e}(i.a),ei=n("/PH2"),ni=n("909l");function ri(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(ni.b.apply(void 0,[e].concat(t)))}}function ii(t){return function(e){return e.lift(new ni.a(t))}}n.d(e,"audit",(function(){return s})),n.d(e,"auditTime",(function(){return f})),n.d(e,"buffer",(function(){return h})),n.d(e,"bufferCount",(function(){return y.a})),n.d(e,"bufferTime",(function(){return g})),n.d(e,"bufferToggle",(function(){return P})),n.d(e,"bufferWhen",(function(){return T})),n.d(e,"catchError",(function(){return C})),n.d(e,"combineAll",(function(){return M})),n.d(e,"combineLatest",(function(){return F})),n.d(e,"concat",(function(){return z})),n.d(e,"concatAll",(function(){return q.a})),n.d(e,"concatMap",(function(){return W})),n.d(e,"concatMapTo",(function(){return Y})),n.d(e,"count",(function(){return K})),n.d(e,"debounce",(function(){return H})),n.d(e,"debounceTime",(function(){return Z})),n.d(e,"defaultIfEmpty",(function(){return rt})),n.d(e,"delay",(function(){return at})),n.d(e,"delayWhen",(function(){return dt})),n.d(e,"dematerialize",(function(){return gt})),n.d(e,"distinct",(function(){return wt})),n.d(e,"distinctUntilChanged",(function(){return St.a})),n.d(e,"distinctUntilKeyChanged",(function(){return At})),n.d(e,"elementAt",(function(){return Mt})),n.d(e,"endWith",(function(){return Lt})),n.d(e,"every",(function(){return Ft})),n.d(e,"exhaust",(function(){return qt})),n.d(e,"exhaustMap",(function(){return Kt})),n.d(e,"expand",(function(){return Ht})),n.d(e,"filter",(function(){return It.a})),n.d(e,"finalize",(function(){return Zt})),n.d(e,"find",(function(){return ne})),n.d(e,"findIndex",(function(){return oe})),n.d(e,"first",(function(){return ue})),n.d(e,"groupBy",(function(){return ae.b})),n.d(e,"ignoreElements",(function(){return ce})),n.d(e,"isEmpty",(function(){return he})),n.d(e,"last",(function(){return ge})),n.d(e,"map",(function(){return Yt.a})),n.d(e,"mapTo",(function(){return me})),n.d(e,"materialize",(function(){return Oe})),n.d(e,"max",(function(){return Ne})),n.d(e,"merge",(function(){return je})),n.d(e,"mergeAll",(function(){return xe.a})),n.d(e,"mergeMap",(function(){return V.a})),n.d(e,"flatMap",(function(){return V.a})),n.d(e,"mergeMapTo",(function(){return De})),n.d(e,"mergeScan",(function(){return Ce})),n.d(e,"min",(function(){return Be})),n.d(e,"multicast",(function(){return Ue})),n.d(e,"observeOn",(function(){return Fe.b})),n.d(e,"onErrorResumeNext",(function(){return $e})),n.d(e,"pairwise",(function(){return Ve})),n.d(e,"partition",(function(){return Je})),n.d(e,"pluck",(function(){return Ge.a})),n.d(e,"publish",(function(){return Xe})),n.d(e,"publishBehavior",(function(){return Ze})),n.d(e,"publishLast",(function(){return en})),n.d(e,"publishReplay",(function(){return rn})),n.d(e,"race",(function(){return sn})),n.d(e,"reduce",(function(){return Ie})),n.d(e,"repeat",(function(){return un})),n.d(e,"repeatWhen",(function(){return ln})),n.d(e,"retry",(function(){return dn})),n.d(e,"retryWhen",(function(){return bn})),n.d(e,"refCount",(function(){return mn.a})),n.d(e,"sample",(function(){return _n})),n.d(e,"sampleTime",(function(){return En})),n.d(e,"scan",(function(){return Ae.a})),n.d(e,"sequenceEqual",(function(){return In})),n.d(e,"share",(function(){return Dn})),n.d(e,"shareReplay",(function(){return Cn})),n.d(e,"single",(function(){return Rn})),n.d(e,"skip",(function(){return Mn})),n.d(e,"skipLast",(function(){return Fn})),n.d(e,"skipUntil",(function(){return qn})),n.d(e,"skipWhile",(function(){return Yn})),n.d(e,"startWith",(function(){return Gn})),n.d(e,"subscribeOn",(function(){return Zn})),n.d(e,"switchAll",(function(){return ir})),n.d(e,"switchMap",(function(){return er})),n.d(e,"switchMapTo",(function(){return or})),n.d(e,"take",(function(){return Rt})),n.d(e,"takeLast",(function(){return ye})),n.d(e,"takeUntil",(function(){return sr.a})),n.d(e,"takeWhile",(function(){return ur})),n.d(e,"tap",(function(){return hr})),n.d(e,"throttle",(function(){return br})),n.d(e,"throttleTime",(function(){return mr})),n.d(e,"throwIfEmpty",(function(){return Tt})),n.d(e,"timeInterval",(function(){return Sr})),n.d(e,"timeout",(function(){return xr})),n.d(e,"timeoutWith",(function(){return Ir})),n.d(e,"timestamp",(function(){return Dr})),n.d(e,"toArray",(function(){return kr})),n.d(e,"window",(function(){return Br})),n.d(e,"windowCount",(function(){return Lr})),n.d(e,"windowTime",(function(){return zr})),n.d(e,"windowToggle",(function(){return Gr})),n.d(e,"windowWhen",(function(){return Qr})),n.d(e,"withLatestFrom",(function(){return ei.a})),n.d(e,"zip",(function(){return ri})),n.d(e,"zipAll",(function(){return ii}))},b3vB:function(t,e,n){"use strict";n.r(e);var r=n("q1tI"),i=n.n(r),o=n("i8i4"),s=n.n(o),u=n("8RZD"),a=n("lTCR"),c=n.n(a),l=n("4KRT"),f=function(t){var e=t.reverse,n=t.top,r=t.down,o=t.ratio,s=void 0===o?.618:o,u={display:"flex",position:"relative",flexDirection:e?"column-reverse":"column",height:"100%",width:"100%"},a="".concat(100*s,"%"),c="".concat(100*(1-s),"%");return i.a.createElement("div",{style:u},i.a.createElement("div",{style:{height:c}},n),i.a.createElement("div",{style:{height:a}},r))},h=n("KUuw");function d(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y={photo:{value:"photo",defaultContentValue:"5cdba0e1476d9c0011cc2984"},story:{value:"story"}},b={cover:{type:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(Object(n),!0).forEach((function(e){p(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},y)}},v="command",g={ENABLE_UPDATES_ENTRY:"enableUpdatesEntry",ENABLE_NEXT_POST:"enableNextPost",ENABLE_PAGING_NAV_BTN:"enablePagingNavBtn",ENABLE_IMAGES_FLOW:"enableImagesFlow",SHOW_SPACE_GUIDELINE:"showSpaceGuideLine"},m="/stories",_="/about",w="/stories/:id",O="/photos",E="/photos/:id",S="/photo/:id",A="/unread",P="/",I=h.version,N=h.name,T={version:I,name:N,gitURL:"https://github.com/zjhou/toyBox/releases/tag/".concat(N,"@").concat(I)};function j(){var t=function(t,e){e||(e=t.slice(0));return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  query Photo($id: ID!) {\n    photo(id: $id) {\n      _id\n      title\n      date\n      content {\n        url\n      }\n    }\n  }\n"]);return j=function(){return t},t}var x=c()(j()),D=function(t){return i.a.createElement(Ne,{query:x,variables:{id:t.id}},(function(e){var n=e.data;return t.children({url:"https://api.zjh.im"+n.photo.content.url,title:n.photo.title})}))};function C(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var R=function(t){return"false"!==t&&("true"===t||t)},k=function(){var t={};return Object.entries(g).forEach((function(e){var n=C(e,2)[1];t[n]=R(localStorage.getItem(n))})),t},B=function(t){var e={};return Object.entries(g).forEach((function(n){var r=C(n,2)[1];e[r]=R(t[r])})),e};function M(){return(M=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function U(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function L(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var F=i.a.createContext({resetSpace:function(){},setSideSpaceContent:function(){}}),$=i.a.createContext(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?U(Object(n),!0).forEach((function(e){L(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},k())),z=function(t){return function(e){return i.a.createElement(F.Consumer,null,(function(n){var r=M({},n);return i.a.createElement(t,M({},r,e))}))}},q=function(t,e){var n=Object(r.useContext)(F).setSideSpaceContent;return Object(r.useEffect)((function(){n(t)}),e),Object(r.useEffect)((function(){return function(){n(null)}}),[]),null},V=function(t){var e=Object(r.useContext)($);return{status:e[t],toggle:function(n){e.setLocalStorageVal(t,n)}}};function W(t){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function K(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Y(Object(n),!0).forEach((function(e){Q(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Y(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function J(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function G(t){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function H(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function X(t,e){return(X=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Q(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Z="cyan",tt=function(t){return function(e){function n(){var t,e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n);for(var r=arguments.length,o=new Array(r),u=0;u<r;u++)o[u]=arguments[u];return e=function(t,e){return!e||"object"!==W(e)&&"function"!=typeof e?H(t):e}(this,(t=G(n)).call.apply(t,[this].concat(o))),Q(H(e),"handleResize",(function(t){s.a.render(e.renderGuideLines(e.$rootDom.getBoundingClientRect(),t),e.$container)})),Q(H(e),"renderGuideLines",(function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.props.showSpaceGuideLine,r=e.props,o=r.top,s=r.bottom,u=r.left,a=r.right,c=r.color,l=void 0===c?Z:c;if(n){var f={position:"fixed",background:l,zIndex:100},h=K({},f,{width:"100%",height:1,left:0}),d=K({},f,{height:"100%",width:1,top:0}),p=t.top,y=t.bottom,b=t.left,v=t.right;return[o&&i.a.createElement("div",{style:K({},h,{top:p})}),s&&i.a.createElement("div",{style:K({},h,{top:y})}),u&&i.a.createElement("div",{style:K({},d,{left:b})}),a&&i.a.createElement("div",{style:K({},d,{left:v})})]}})),e}var r,o,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&X(t,e)}(n,e),r=n,(o=[{key:"componentDidMount",value:function(){var t=this;this.$rootDom=s.a.findDOMNode(this),this.$container=document.createElement("div"),document.body.appendChild(this.$container),this.handleResize(),window.addEventListener("resize",(function(){t.handleResize()}))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize),s.a.unmountComponentAtNode(this.$container),this.$container.remove()}},{key:"componentWillReceiveProps",value:function(t,e){t.showSpaceGuideLine!==this.props.showSpaceGuideLine&&this.handleResize(t.showSpaceGuideLine)}},{key:"render",value:function(){return i.a.createElement(t,this.props)}}])&&J(r.prototype,o),u&&J(r,u),n}(i.a.PureComponent)},et=function(t){return z(tt(t))},nt=n("TSYQ"),rt=n.n(nt),it=(n("HAps"),function(t){var e=t.cols;return i.a.createElement("div",{style:{display:"flex",height:"100%",width:"100%"}},e.map((function(t){return i.a.createElement("div",{style:{flex:"1"}},t)})))}),ot=function(t,e){return function(n){var r=i.a.createElement(t,n);return Object(u.l)()?r:i.a.createElement(Ae,{top:null,down:r,ratio:e})}},st=.763924,ut=n("17x9"),at=n.n(ut),ct=n("K9Ia"),lt=n("p0ib"),ft=n("bne5"),ht=n("67Y/"),dt=n("VnD/"),pt=n("ny24"),yt=n("Txjg");n("r8OW");function bt(t){return(bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function gt(t){return(gt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function mt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _t(t,e){return(_t=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function wt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ot(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Et=function(t){return Ot(Array(t).keys())},St=new ct.a,At=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return n=function(t,e){return!e||"object"!==bt(e)&&"function"!=typeof e?mt(t):e}(this,(t=gt(e)).call.apply(t,[this].concat(o))),wt(mt(n),"state",{y:6*n.props.current,isDragging:!1}),wt(mt(n),"buildProgressStr",(function(){return"".concat((n.state.y-6)/6+1," / ").concat(n.props.total)})),wt(mt(n),"updatePointerPos",(function(t){n.setState({y:t})})),wt(mt(n),"updateDragStatus",(function(t){n.setState({isDragging:t})})),wt(mt(n),"pointerEventHandler",(function(t){St.next(t)})),wt(mt(n),"renderTickIndicator",(function(){var t=n.props,e=t.total,r=t.current;return i.a.createElement("div",{className:rt()("drag-tick-indicator",{absRight:n.props.absRight,isDragging:n.state.isDragging}),ref:function(t){n.indicator=t},onMouseUp:n.pointerEventHandler,onMouseMove:n.pointerEventHandler},Et(e).map((function(t){var e=t===r-1;return i.a.createElement("div",{onClick:function(e){return n.props.onClick(e,t)},className:rt()("tick",{active:e})})})),i.a.createElement("div",{className:"pointer","data-progress":n.buildProgressStr(),style:{top:n.state.y},ref:function(t){n.pointer=t},onMouseDown:n.pointerEventHandler}))})),n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_t(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this;document.onselectstart=function(){return!1};var e=this,n=St.pipe(Object(dt.a)((function(t){return"mousedown"===t.type}))),r=St.pipe(Object(dt.a)((function(t){return"mousemove"===t.type}))),i=Object(lt.a)(Object(ft.a)(document,"mouseup")),o=n.pipe(Object(ht.a)((function(){return r.pipe(Object(pt.a)(i))})),Object(yt.a)(),(function(t){return Object(ht.a)((function(t){var n=e.indicator&&e.indicator.getBoundingClientRect().y;return t.clientY-n-6}))(t)}),Object(ht.a)((function(t){return 6*Math.round(t/6)})),Object(dt.a)((function(e){return e<t.indicator.getBoundingClientRect().height-12&&e>=6})));this.dragNdropSubscribtion=o.subscribe(this.updatePointerPos),this.dragStartSubscribtion=n.subscribe((function(){t.updateDragStatus(!0)})),this.dragEndSubscribtion=i.pipe(Object(ht.a)((function(){var e=t.state.y,n=Math.floor(e/6);return n>=t.props.total?t.props.total:n<=1?1:n})),Object(dt.a)((function(){return t.state.isDragging}))).subscribe((function(e){t.props.onDrop(e),t.updateDragStatus(!1)}))}},{key:"componentWillUnmount",value:function(){this.dragEndSubscribtion.unsubscribe(),this.dragStartSubscribtion.unsubscribe(),this.dragNdropSubscribtion.unsubscribe()}},{key:"render",value:function(){return this.props.total<2?null:this.renderTickIndicator()}}])&&vt(n.prototype,r),o&&vt(n,o),e}(i.a.Component);function Pt(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}wt(At,"propTypes",{current:at.a.number,total:at.a.number,onClick:at.a.func,absRight:at.a.bool}),wt(At,"defaultProps",{onDrop:function(){},onClick:function(){},current:1,absRight:!1});var It=function(t){var e=t.current,n=t.total,r=t.vertical,o=t.onClick,s=void 0===o?function(){}:o,a=t.absRight,c=t.fixedTop;if(n<2)return null;var l,f=function(t){return"".concat(Object(u.d)("0")(t,n)," / ").concat(n)};return i.a.createElement("div",{className:rt()("tick-indicator",{"absolute-right":a,"fixed-top":c,vertical:r}),onClick:function(){s(e)}},(l=n,Pt(Array(l).keys())).map((function(t){var n=t===e-1;return i.a.createElement("div",{"data-title":f(t+1),className:rt()("tick",{active:n})})})))},Nt=(ot(It,st),function(t){var e=t.children;if(!e.length||"string"!=typeof e)return null;var n={"文":!0,"字":!0,"相":!0,"片":!0,"最":!0,"近":!0,"更":!0,"新":!0,"设":!0,"置":!0,"关":!0,"闭":!0,"福":!0};return e.split("").map((function(t){return n[t]?i.a.createElement("i",{className:"icon-".concat(t)}):t}))});n("AE4m");function Tt(){return(Tt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function jt(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var xt=function(t){var e=t.text,n=t.onClick,r=t.children,o=t.disabled,s=jt(t,["text","onClick","children","disabled"]);return i.a.createElement("div",Tt({className:rt()("base-btn",{disabled:o}),onClick:o?u.n:n},s),e||r)};n("hUxU");function Dt(t){return(Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Rt(t){return(Rt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function kt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Bt(t,e){return(Bt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Mt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Ut=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(t,e){return!e||"object"!==Dt(e)&&"function"!=typeof e?kt(t):e}(this,Rt(e).call(this,t)),Mt(kt(n),"handleMouseMove",(function(t){var e=t.clientX,r=t.clientY,i=n.self.getBoundingClientRect(),o=i.top,s=i.left;n.setState({x:e-s,y:r-o})})),Mt(kt(n),"setTooltipState",(function(t){n.setState({show:t})})),n.state={x:0,y:0,show:!0},n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Bt(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.self.getBoundingClientRect(),e=t.bottom,n=t.left;this.setState({x:n,y:e})}},{key:"render",value:function(){var t=this,e="translate3d(".concat(this.state.x+20,"px, ").concat(this.state.y+20,"px, 0)");return i.a.createElement("div",{onMouseMove:this.handleMouseMove,ref:function(e){return t.self=e},className:"tooltip-wrapper"},this.props.children({showTooltip:function(){t.setTooltipState(!0)},hideTooltip:function(){t.setTooltipState(!1)}}),i.a.createElement("div",{key:2,className:"tooltip",style:{transform:e}},this.state.show?this.props.tooltip:null))}}])&&Ct(n.prototype,r),o&&Ct(n,o),e}(i.a.PureComponent);n("Dk2R");function Lt(){return(Lt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Ft(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var $t=function(t){var e=t.href,n=t.text,r=t.type,o=t.command,s=t.className,u=Ft(t,["href","text","type","command","className"]);return r===v?i.a.createElement("span",{className:rt()("command base-link",s),"data-cmd":o},n):i.a.createElement("a",Lt({className:rt()("base-link",s),href:e,target:"_blank"},u),n)};n("DXLO");function zt(){return(zt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function qt(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var Vt=function(t){var e=t.data,n=void 0===e?[]:e,r=t.itemRenderer,o=void 0===r?u.n:r,s=t.emptyRenderer,a=t.beforeRenderer,c=void 0===a?u.n:a,l=t.afterRenderer,f=void 0===l?u.n:l,h=t.className,d=qt(t,["data","itemRenderer","emptyRenderer","beforeRenderer","afterRenderer","className"]);return n.length?i.a.createElement(i.a.Fragment,null,c(n),i.a.createElement("ul",zt({className:rt()("base-list",h)},d),n.map((function(t,e){return i.a.createElement("li",{className:"base-list-item"},o({item:t,index:e}))}))),f(n)):s?s():i.a.createElement(ge,null)};n("GtDr");function Wt(){return(Wt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Yt(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function Kt(t){return(Kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Gt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ht(t,e){return!e||"object"!==Kt(e)&&"function"!=typeof e?Qt(t):e}function Xt(t){return(Xt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Qt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Zt(t,e){return(Zt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function te(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ee=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),te(Qt(n=Ht(this,Xt(e).call(this,t))),"getStateByPropsAndCurrentPageIndex",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.currentPageIndex,r=t.pageSize,i=t.data,o=Math.ceil(i.length/r),s=(e-1)*r,u=e*r,a=i.slice(s,u)||[];return{hasNextPage:e<o,hasPrevPage:e>1,currentPageIndex:e,currentPageData:a,totalPages:o}})),te(Qt(n),"next",(function(){(n.state.hasNextPage||n.props.infiniteLoopMode)&&n.setState((function(t){return n.getStateByPropsAndCurrentPageIndex(n.props,t.hasNextPage?t.currentPageIndex+1:1)}))})),te(Qt(n),"prev",(function(){(n.state.hasPrevPage||n.props.infiniteLoopMode)&&n.setState((function(t){return n.getStateByPropsAndCurrentPageIndex(n.props,t.hasPrevPage?t.currentPageIndex-1:t.totalPages)}))})),te(Qt(n),"isValidProps",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,e=t.data,r=t.pageSize,i=t.currentPageIndex,o=void 0===i?1:i,s=Math.ceil(e.length/r);return e.length&&r>0&&o>=1&&o<=s})),n.isValidProps(t)?(n.state=n.getStateByPropsAndCurrentPageIndex(),n):Ht(n)}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zt(t,e)}(e,t),n=e,(r=[{key:"render",value:function(){return this.isValidProps(this.props)&&this.props.children(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Jt(Object(n),!0).forEach((function(e){te(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Jt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},this.state,{next:this.next,prev:this.prev}))}}])&&Gt(n.prototype,r),i&&Gt(n,i),e}(i.a.PureComponent);function ne(){return(ne=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}ee.defaultProps={currentPageIndex:1},ee.propTypes={data:at.a.array.isRequired,pageSize:at.a.number.isRequired,currentPageIndex:at.a.number,children:at.a.func.isRequired};var re=function(t){var e=t.pagingOption,n=t.pagingBtnRenderer,r=void 0===n?u.n:n,o=t.listOption;return i.a.createElement(ee,e,(function(e){return i.a.createElement(Vt,ne({},o,{data:e.currentPageData,afterRenderer:function(){return r(e)},beforeRenderer:function(){return t.children(e)}}))}))},ie=(Object(u.l)(),function(t){location.hash="#".concat(t)}),oe=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";ie("".concat(m,"/").concat(t))},se=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.prev,r=void 0===n?u.n:n,o=t.next,s=void 0===o?u.n:o,a=t.currentPageIndex,c=t.hasNextPage,l=t.hasPrevPage,f=e.disableAllBtns,h=e.disableListBtn,d=e.disablePrevBtn,p=e.disableNextBtn,y=e.onListBtnClick,b=V(g.ENABLE_PAGING_NAV_BTN),v=b.status,m=[i.a.createElement(xt,{disabled:d||!l,onClick:r},"上页"),i.a.createElement(xt,{disabled:h,onClick:y||function(){oe()}},"列表"),i.a.createElement(xt,{disabled:p||!c,onClick:s},"下页")],_={display:"flex",flexDirection:"column",alignItems:"flex-end",justifyContent:"space-between",height:120,textAlign:"right",padding:"5px 10px"};q(v&&!f&&i.a.createElement(Ae,{top:null,style:_,down:m}),[a,v])},ue=n("KD6q"),ae=n("ad02");function ce(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var le=function(t){var e=ce(Object(r.useState)("up"),2),n=e[0],i=e[1],o=Object(ft.a)(t||document,"scroll").pipe(Object(ht.a)((function(t){return t.target.scrollTop})),Object(ue.a)(2),Object(ht.a)((function(t){var e=ce(t,2);return e[0]-e[1]>0?"UP":"DOWN"})),Object(ae.a)()),s=new ct.a;return o.subscribe(s),Object(r.useEffect)((function(){var t=s.subscribe((function(t){i(t)}));return function(){return t.unsubscribe()}})),[n]};function fe(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var he=function(t,e){var n=fe(Object(r.useState)(!1),2),i=n[0],o=n[1],s=Object(ft.a)(t||document,"scroll").pipe(Object(ht.a)((function(t){var n=t.target;return e?n.scrollTop>=n.scrollHeight-n.offsetHeight-e:n.scrollTop===n.scrollHeight-n.offsetHeight})),Object(ae.a)()),u=new ct.a;return s.subscribe(u),Object(r.useEffect)((function(){var t=u.subscribe((function(t){o(t)}));return function(){return t.unsubscribe()}})),[i]};function de(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var pe=function(t){var e=t.wrapperSelector,n=t.children,i=t.mountSize,o=t.bufferDistance;if(n.length<=1)return n;var s=i>0?i:1,a=de(Object(r.useState)(1*s),2),c=a[0],l=a[1],f=de(he(Object(u.a)(e),o),1)[0];return Object(r.useEffect)((function(){f&&l(c+1)}),[f]),n.slice(0,c*s)};n("ETDC");n("vzVe");var ye=function(t){var e=t.absCenter,n=void 0===e||e,r=t.style;return i.a.createElement("div",{style:r,className:rt()("tick-loader",{center:n&&Object(u.l)()})})},be=function(t){var e=t.sizeStr,n=t.color;return i.a.createElement("div",{className:"logo",style:{paddingLeft:".4em"},dangerouslySetInnerHTML:{__html:Object(u.f)({small:3,middle:4,big:5}[e],null,n)}})},ve=function(){return i.a.createElement("div",{style:{display:"flex",height:"100%"}})},ge=function(){return i.a.createElement("span",{style:{color:"#ccc"}},"无")},me=function(t){return window.converter&&t?window.converter.makeHtml(t):t},_e=function(t){var e=t.md,n=t.className;return i.a.createElement("div",{dangerouslySetInnerHTML:{__html:me(e)},className:n})};function we(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Oe(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?we(Object(n),!0).forEach((function(e){Ee(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):we(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ee(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Se=et(ve),Ae=function(t){var e=t.top,n=t.down,r=t.alignTopItems,o=t.ratio,s=t.padding,u=t.fullHeight,a=t.withGuideLine,c=t.style;return i.a.createElement(f,{ratio:o,top:i.a.createElement(f,{down:i.a.createElement("div",{style:{height:"100%",display:"flex",flexDirection:"column",justifyContent:"flex-end",padding:s,alignItems:r||"unset"}},e),top:a?i.a.createElement(Se,{top:!0,bottom:!0}):null,reverse:!0}),down:i.a.createElement("div",{style:Oe({padding:s,height:u?"100%":"auto"},c)},n)})},Pe=function(t){var e=t.style;return Object(u.l)()?i.a.createElement(ye,null):i.a.createElement(Ae,{top:null,down:i.a.createElement(ye,{style:e})})};function Ie(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var Ne=function(t){var e=t.spinnerAtContent,n=Ie(t,["spinnerAtContent"]),r=t.spinner||(e?i.a.createElement(Pe,null):i.a.createElement(ye,null));return i.a.createElement(l.Query,n,(function(e){var n=e.data,i=e.loading,o=e.error;return o?":(":i?r:t.children({error:o,data:n})}))};function Te(){var t=function(t,e){e||(e=t.slice(0));return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  query {\n    covers {\n      content_id\n      type\n      show\n    }\n  }\n"]);return Te=function(){return t},t}c()(Te());function je(){var t=function(t,e){e||(e=t.slice(0));return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(['\n  {\n    posts(sort: "date:DESC") {\n      _id\n      title\n      date\n      content\n      photogroup {\n        title\n        _id\n      }\n    }\n  }\n']);return je=function(){return t},t}c()(je());function xe(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function De(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ce(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function Re(){var t=function(t,e){e||(e=t.slice(0));return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  {\n    photogroups {\n      _id\n      title\n      date\n      visible\n    }\n  }\n"]);return Re=function(){return t},t}var ke=c()(Re()),Be=function(t){return i.a.createElement(Ne,{query:ke},(function(e){var n=e.data;return t.children(n.photogroups.filter((function(t){return t.visible})).map((function(t){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?xe(Object(n),!0).forEach((function(e){De(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({id:t._id},Ce(t,["_id"]))})))}))};function Me(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ue(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Le(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function Fe(){var t=function(t,e){e||(e=t.slice(0));return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(['\n  query Photogroup($id: ID!) {\n    photogroup(id: $id) {\n      post {\n        _id\n      }\n      photos(sort: "date:DESC") {\n        _id\n        title\n        date\n        content {\n          url \n        }\n      }\n    }\n  }\n']);return Fe=function(){return t},t}var $e=c()(Fe()),ze=function(t){return i.a.createElement(Ne,{query:$e,spinner:t.spinner,variables:{id:t.id}},(function(e){var n=e.data,r=n.photogroup.photos.map((function(t){var e=t.content,n=Le(t,["content"]);return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Me(Object(n),!0).forEach((function(e){Ue(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Me(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({url:"https://api.zjh.im"+e.url},n)})),i=n.photogroup.post;return t.children({photos:r,post:i})}))};n("OgkG"),n("+u0c");function qe(t){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ve(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function We(t){return(We=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ye(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ke(t,e){return(Ke=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Je=function(){var t=window.innerHeight,e=(window.innerWidth-(t-100)*(1+.618))/2;return{display:"flex",width:"calc(100% - ".concat(2*e,"px)"),height:"calc(100% - ".concat(100,"px)"),margin:"".concat(50,"px ").concat(e,"px")}},Ge=function(t){function e(t){var n,r,i,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(t,e){return!e||"object"!==qe(e)&&"function"!=typeof e?Ye(t):e}(this,We(e).call(this,t)),r=Ye(n),o=function(){n.setState({style:Je()})},(i="updateStyle")in r?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o,n.state={style:Je()},n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ke(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateStyle)}},{key:"render",value:function(){var t=this.props,e=t.left,n=t.right;return i.a.createElement("div",{className:"container lr",style:this.state.style},i.a.createElement("div",{className:"left",style:{flex:.618+1}},e),i.a.createElement("div",{className:"right",style:{flex:1,overflow:"auto"}},n))}}])&&Ve(n.prototype,r),o&&Ve(n,o),e}(i.a.PureComponent);var He,Xe=n("eO8H"),Qe=n("no5z");!function(t){t[t.ActiveUserChanged=0]="ActiveUserChanged",t[t.ListenerRegistered=1]="ListenerRegistered",t[t.UserAdded=2]="UserAdded",t[t.UserLinked=3]="UserLinked",t[t.UserLoggedIn=4]="UserLoggedIn",t[t.UserLoggedOut=5]="UserLoggedOut",t[t.UserRemoved=6]="UserRemoved"}(He||(He={}));var Ze,tn=function(){function t(t,e,n,r,i,o,s,u){this.userId=t,this.deviceId=e,this.accessToken=n,this.refreshToken=r,this.loggedInProviderType=i,this.loggedInProviderName=o,this.lastAuthActivity=s,this.userProfile=u}return t.empty=function(){return new t(void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0)},Object.defineProperty(t.prototype,"hasUser",{get:function(){return void 0!==this.userId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isEmpty",{get:function(){return void 0===this.deviceId},enumerable:!0,configurable:!0}),t.prototype.loggedOut=function(){return new t(this.userId,this.deviceId,void 0,void 0,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},t.prototype.withClearedUser=function(){return new t(void 0,this.deviceId,void 0,void 0,void 0,void 0,void 0,void 0)},t.prototype.withAuthProvider=function(e,n){return new t(this.userId,this.deviceId,this.accessToken,this.refreshToken,e,n,new Date,this.userProfile)},t.prototype.withNewAuthActivityTime=function(){return new t(this.userId,this.deviceId,this.accessToken,this.refreshToken,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},Object.defineProperty(t.prototype,"isLoggedIn",{get:function(){return void 0!==this.accessToken&&void 0!==this.refreshToken},enumerable:!0,configurable:!0}),t.prototype.merge=function(e){return new t(void 0===e.userId?this.userId:e.userId,void 0===e.deviceId?this.deviceId:e.deviceId,void 0===e.accessToken?this.accessToken:e.accessToken,void 0===e.refreshToken?this.refreshToken:e.refreshToken,void 0===e.loggedInProviderType?this.loggedInProviderType:e.loggedInProviderType,void 0===e.loggedInProviderName?this.loggedInProviderName:e.loggedInProviderName,void 0===e.lastAuthActivity?this.lastAuthActivity:e.lastAuthActivity,void 0===e.userProfile?this.userProfile:e.userProfile)},t}(),en=(Ze=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}Ze(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),nn=function(t){Error.call(this,t),Error.captureStackTrace&&Error.captureStackTrace(this),this.message=t,this.name=this.constructor.name};nn.prototype=Object.create(Error.prototype);var rn,on,sn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return en(e,t),e}(nn);!function(t){t[t.TRANSPORT_ERROR=0]="TRANSPORT_ERROR",t[t.DECODING_ERROR=1]="DECODING_ERROR",t[t.ENCODING_ERROR=2]="ENCODING_ERROR"}(on||(on={}));var un,an=((rn={})[on.TRANSPORT_ERROR]="the request transport encountered an error communicating with Stitch",rn[on.DECODING_ERROR]="an error occurred while decoding a response from Stitch",rn[on.ENCODING_ERROR]="an error occurred while encoding a request for Stitch",rn),cn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ln=function(t){function e(e,n){var r=this,i="("+on[n]+"): "+an[n]+": "+e.message;return(r=t.call(this,i)||this).underlyingError=e,r.errorCode=n,r.errorCodeName=on[n],r}return cn(e,t),e}(sn);!function(t){t[t.MissingAuthReq=0]="MissingAuthReq",t[t.InvalidSession=1]="InvalidSession",t[t.UserAppDomainMismatch=2]="UserAppDomainMismatch",t[t.DomainNotAllowed=3]="DomainNotAllowed",t[t.ReadSizeLimitExceeded=4]="ReadSizeLimitExceeded",t[t.InvalidParameter=5]="InvalidParameter",t[t.MissingParameter=6]="MissingParameter",t[t.TwilioError=7]="TwilioError",t[t.GCMError=8]="GCMError",t[t.HTTPError=9]="HTTPError",t[t.AWSError=10]="AWSError",t[t.MongoDBError=11]="MongoDBError",t[t.ArgumentsNotAllowed=12]="ArgumentsNotAllowed",t[t.FunctionExecutionError=13]="FunctionExecutionError",t[t.NoMatchingRuleFound=14]="NoMatchingRuleFound",t[t.InternalServerError=15]="InternalServerError",t[t.AuthProviderNotFound=16]="AuthProviderNotFound",t[t.AuthProviderAlreadyExists=17]="AuthProviderAlreadyExists",t[t.ServiceNotFound=18]="ServiceNotFound",t[t.ServiceTypeNotFound=19]="ServiceTypeNotFound",t[t.ServiceAlreadyExists=20]="ServiceAlreadyExists",t[t.ServiceCommandNotFound=21]="ServiceCommandNotFound",t[t.ValueNotFound=22]="ValueNotFound",t[t.ValueAlreadyExists=23]="ValueAlreadyExists",t[t.ValueDuplicateName=24]="ValueDuplicateName",t[t.FunctionNotFound=25]="FunctionNotFound",t[t.FunctionAlreadyExists=26]="FunctionAlreadyExists",t[t.FunctionDuplicateName=27]="FunctionDuplicateName",t[t.FunctionSyntaxError=28]="FunctionSyntaxError",t[t.FunctionInvalid=29]="FunctionInvalid",t[t.IncomingWebhookNotFound=30]="IncomingWebhookNotFound",t[t.IncomingWebhookAlreadyExists=31]="IncomingWebhookAlreadyExists",t[t.IncomingWebhookDuplicateName=32]="IncomingWebhookDuplicateName",t[t.RuleNotFound=33]="RuleNotFound",t[t.ApiKeyNotFound=34]="ApiKeyNotFound",t[t.RuleAlreadyExists=35]="RuleAlreadyExists",t[t.RuleDuplicateName=36]="RuleDuplicateName",t[t.AuthProviderDuplicateName=37]="AuthProviderDuplicateName",t[t.RestrictedHost=38]="RestrictedHost",t[t.ApiKeyAlreadyExists=39]="ApiKeyAlreadyExists",t[t.IncomingWebhookAuthFailed=40]="IncomingWebhookAuthFailed",t[t.ExecutionTimeLimitExceeded=41]="ExecutionTimeLimitExceeded",t[t.FunctionNotCallable=42]="FunctionNotCallable",t[t.UserAlreadyConfirmed=43]="UserAlreadyConfirmed",t[t.UserNotFound=44]="UserNotFound",t[t.UserDisabled=45]="UserDisabled",t[t.Unknown=46]="Unknown"}(un||(un={}));var fn={APIKeyAlreadyExists:un.ApiKeyAlreadyExists,APIKeyNotFound:un.ApiKeyNotFound,AWSError:un.AWSError,ArgumentsNotAllowed:un.ArgumentsNotAllowed,AuthProviderAlreadyExists:un.AuthProviderAlreadyExists,AuthProviderDuplicateName:un.AuthProviderDuplicateName,AuthProviderNotFound:un.AuthProviderNotFound,DomainNotAllowed:un.DomainNotAllowed,ExecutionTimeLimitExceeded:un.ExecutionTimeLimitExceeded,FunctionAlreadyExists:un.FunctionAlreadyExists,FunctionDuplicateName:un.FunctionDuplicateName,FunctionExecutionError:un.FunctionExecutionError,FunctionInvalid:un.FunctionInvalid,FunctionNotCallable:un.FunctionNotCallable,FunctionNotFound:un.FunctionNotFound,FunctionSyntaxError:un.FunctionSyntaxError,GCMError:un.GCMError,HTTPError:un.HTTPError,IncomingWebhookAlreadyExists:un.IncomingWebhookAlreadyExists,IncomingWebhookAuthFailed:un.IncomingWebhookAuthFailed,IncomingWebhookDuplicateName:un.IncomingWebhookDuplicateName,IncomingWebhookNotFound:un.IncomingWebhookNotFound,InternalServerError:un.InternalServerError,InvalidParameter:un.InvalidParameter,InvalidSession:un.InvalidSession,MissingAuthReq:un.MissingAuthReq,MissingParameter:un.MissingParameter,MongoDBError:un.MongoDBError,NoMatchingRuleFound:un.NoMatchingRuleFound,ReadSizeLimitExceeded:un.ReadSizeLimitExceeded,RestrictedHost:un.RestrictedHost,RuleAlreadyExists:un.RuleAlreadyExists,RuleDuplicateName:un.RuleDuplicateName,RuleNotFound:un.RuleNotFound,ServiceAlreadyExists:un.ServiceAlreadyExists,ServiceCommandNotFound:un.ServiceCommandNotFound,ServiceNotFound:un.ServiceNotFound,ServiceTypeNotFound:un.ServiceTypeNotFound,TwilioError:un.TwilioError,UserAlreadyConfirmed:un.UserAlreadyConfirmed,UserAppDomainMismatch:un.UserAppDomainMismatch,UserDisabled:un.UserDisabled,UserNotFound:un.UserNotFound,ValueAlreadyExists:un.ValueAlreadyExists,ValueDuplicateName:un.ValueDuplicateName,ValueNotFound:un.ValueNotFound};function hn(t){return t in fn?fn[t]:un.Unknown}var dn,pn,yn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),bn=function(t){function e(e,n){void 0===n&&(n=un.Unknown);var r=t.call(this,e)||this;return r.message=e,r.errorCode=n,r.errorCodeName=un[n],r}return yn(e,t),e}(sn),vn=function(){function t(){}return t.APPLICATION_JSON="application/json",t.TEXT_EVENT_STREAM="text/event-stream",t}(),gn=function(){function t(){}return t.getAuthorizationBearer=function(e){return t.AUTHORIZATION_BEARER+" "+e},t.CONTENT_TYPE_CANON="Content-Type",t.CONTENT_TYPE=t.CONTENT_TYPE_CANON.toLocaleLowerCase(),t.AUTHORIZATION_CANON="Authorization",t.AUTHORIZATION=t.AUTHORIZATION_CANON.toLocaleLowerCase(),t.ACCEPT_CANON="Accept",t.ACCEPT=t.ACCEPT_CANON.toLocaleLowerCase(),t.AUTHORIZATION_BEARER="Bearer",t}();function mn(t){return t instanceof sn?t:new ln(t,on.DECODING_ERROR)}function _n(t){if(void 0===t.body)throw new bn("received unexpected status code "+t.statusCode,un.Unknown);var e;try{e=t.body}catch(e){throw new bn("received unexpected status code "+t.statusCode,un.Unknown)}var n=function(t,e){if(void 0===t.headers[gn.CONTENT_TYPE]||void 0!==t.headers[gn.CONTENT_TYPE]&&t.headers[gn.CONTENT_TYPE]!==vn.APPLICATION_JSON)return e;var n=JSON.parse(e);if(!(n instanceof Object))return e;var r=n;if(void 0===r[dn.ERROR])return e;var i=r[dn.ERROR];if(void 0===r[dn.ERROR_CODE])return i;var o=r[dn.ERROR_CODE];throw new bn(i,hn(o))}(t,e);throw new bn(n,un.Unknown)}!function(t){t.ERROR="error",t.ERROR_CODE="error_code"}(dn||(dn={})),function(t){t.GET="GET",t.POST="POST",t.PUT="PUT",t.DELETE="DELETE",t.HEAD="HEAD",t.OPTIONS="OPTIONS",t.TRACE="TRACE",t.PATCH="PATCH"}(pn||(pn={}));var wn=pn,On=function(){function t(t,e,n,r,i){this.method=t,this.path=e,this.headers=n,this.body=i,this.startedAt=r}return Object.defineProperty(t.prototype,"builder",{get:function(){return new t.Builder(this)},enumerable:!0,configurable:!0}),t}();!function(t){var e=function(){function e(t){void 0!==t&&(this.method=t.method,this.path=t.path,this.headers=t.headers,this.body=t.body,this.startedAt=t.startedAt)}return e.prototype.withMethod=function(t){return this.method=t,this},e.prototype.withPath=function(t){return this.path=t,this},e.prototype.withHeaders=function(t){return this.headers=t,this},e.prototype.withBody=function(t){return this.body=t,this},e.prototype.build=function(){if(void 0===this.method)throw Error("must set method");if(void 0===this.path)throw Error("must set non-empty path");return void 0===this.startedAt&&(this.startedAt=Date.now()/1e3),new t(this.method,this.path,void 0===this.headers?{}:this.headers,this.startedAt,this.body)},e}();t.Builder=e}(On||(On={}));var En,Sn,An=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pn=function(t){function e(e,n,r){void 0===n&&(n=!1),void 0===r&&(r=!0);var i=t.call(this,e.method,e.path,e.headers,e.startedAt,e.body)||this;return i.useRefreshToken=n,i.shouldRefreshOnFailure=r,i}return An(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(On);En=Pn||(Pn={}),Sn=function(t){function e(e){return t.call(this,e)||this}return An(e,t),e.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},e.prototype.withRefreshToken=function(){return this.useRefreshToken=!0,this},e.prototype.withShouldRefreshOnFailure=function(t){return this.shouldRefreshOnFailure=t,this},e.prototype.build=function(){return this.useRefreshToken&&(this.shouldRefreshOnFailure=!1),new En(t.prototype.build.call(this),this.useRefreshToken,this.shouldRefreshOnFailure)},e}(On.Builder),En.Builder=Sn;var In=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Nn=function(t){function e(e,n){var r=this;return(r=e instanceof Pn?t.call(this,e,e.useRefreshToken,e.shouldRefreshOnFailure)||this:t.call(this,e)||this).document=n,r}return In(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(Pn);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return void 0!==t&&(n.document=t.document,n.useRefreshToken=t.useRefreshToken),n}return In(n,e),n.prototype.withDocument=function(t){return this.document=t,this},n.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set: "+this.document);return void 0===this.headers&&this.withHeaders({}),this.headers[gn.CONTENT_TYPE]=vn.APPLICATION_JSON,this.withBody(Qe.a.stringify(this.document,{relaxed:!1})),new t(e.prototype.build.call(this),this.document)},n}(Pn.Builder);t.Builder=e}(Nn||(Nn={}));var Tn,jn,xn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Dn=function(t){function e(e,n){var r=t.call(this,e.method,e.path,e.headers,e.startedAt,e.body)||this;return r.document=n,r}return xn(e,t),Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}(On);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return void 0!==t&&(n.document=t.document),n}return xn(n,e),n.prototype.withDocument=function(t){return this.document=t,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set");return void 0===this.headers&&this.withHeaders({}),this.headers[gn.CONTENT_TYPE]=vn.APPLICATION_JSON,this.withBody(Qe.a.stringify(this.document,{relaxed:!1})),new t(e.prototype.build.call(this),this.document)},n}(On.Builder);t.Builder=e}(Dn||(Dn={})),function(t){t[t.LoggedOutDuringRequest=0]="LoggedOutDuringRequest",t[t.MustAuthenticateFirst=1]="MustAuthenticateFirst",t[t.UserNoLongerValid=2]="UserNoLongerValid",t[t.UserNotFound=3]="UserNotFound",t[t.UserNotLoggedIn=4]="UserNotLoggedIn",t[t.CouldNotLoadPersistedAuthInfo=5]="CouldNotLoadPersistedAuthInfo",t[t.CouldNotPersistAuthInfo=6]="CouldNotPersistAuthInfo",t[t.StreamingNotSupported=7]="StreamingNotSupported",t[t.StreamClosed=8]="StreamClosed",t[t.UnexpectedArguments=9]="UnexpectedArguments"}(jn||(jn={}));var Cn,Rn=((Tn={})[jn.LoggedOutDuringRequest]="logged out while making a request to Stitch",Tn[jn.MustAuthenticateFirst]="method called requires being authenticated",Tn[jn.UserNoLongerValid]="user instance being accessed is no longer valid; please get a new user with auth.getUser()",Tn[jn.UserNotFound]="user not found in list of users",Tn[jn.UserNotLoggedIn]="cannot make the active user a logged out user; please use loginWithCredential() to switch to this user",Tn[jn.CouldNotLoadPersistedAuthInfo]="failed to load stored auth information for Stitch",Tn[jn.CouldNotPersistAuthInfo]="failed to save auth information for Stitch",Tn[jn.StreamingNotSupported]="streaming not supported in this SDK",Tn[jn.StreamClosed]="stream is closed",Tn[jn.UnexpectedArguments]="function does not accept arguments",Tn),kn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Bn=function(t){function e(e){var n=this,r="("+jn[e]+"): "+Rn[e];return(n=t.call(this,r)||this).errorCode=e,n.errorCodeName=jn[e],n}return kn(e,t),e}(sn),Mn=function(){function t(t,e){this.eventName=t,this.data=e}return t.MESSAGE_EVENT="message",t}(),Un=function(){function t(e,n,r){this.eventName=e,n=n||"";for(var i=[],o=0;o<n.length;o++){var s=n[o];switch(s){case"%":if(o+2>=n.length)break;var u=void 0;switch(n.substring(o+1,o+3)){case"25":u=!0,i.push("%");break;case"0A":u=!0,i.push("\n");break;case"0D":u=!0,i.push("\r");break;default:u=!1}if(u){o+=2;continue}}i.push(s)}var a=i.join("");switch(this.eventName){case t.ERROR_EVENT_NAME:var c=void 0,l=void 0;try{var f=Qe.a.parse(a,{strict:!1});c=f[Cn.Error],l=hn(f[Cn.ErrorCode])}catch(t){c=a,l=un.Unknown}this.error=new bn(c,l);break;case Mn.MESSAGE_EVENT:this.data=Qe.a.parse(a,{strict:!1}),r&&(this.data=r.decode(this.data))}}return t.fromEvent=function(e,n){return new t(e.eventName,e.data,n)},t.ERROR_EVENT_NAME="error",t}();!function(t){t.Error="error",t.ErrorCode="error_code"}(Cn||(Cn={}));var Ln=function(){function t(t,e){this.eventStream=t,this.decoder=e,this.listeners=[]}return t.prototype.next=function(){var t=this;return this.eventStream.nextEvent().then((function(e){var n=Un.fromEvent(e,t.decoder);if(n.eventName===Un.ERROR_EVENT_NAME)throw n.error;return n.eventName===Mn.MESSAGE_EVENT?n.data:t.next()}))},t.prototype.onNext=function(t){var e=this,n={onEvent:function(n){var r=Un.fromEvent(n,e.decoder);r.eventName===Mn.MESSAGE_EVENT&&t(r.data)}};this.eventStream.addListener(n)},t.prototype.onError=function(t){var e=this,n={onEvent:function(n){var r=Un.fromEvent(n,e.decoder);r.eventName===Un.ERROR_EVENT_NAME&&t(r.error)}};this.eventStream.addListener(n)},t.prototype.addListener=function(t){var e=this,n={onEvent:function(n){var r=Un.fromEvent(n,e.decoder);r.eventName===Un.ERROR_EVENT_NAME?t.onError&&t.onError(r.error):t.onNext&&t.onNext(r.data)}};this.listeners.push([t,n]),this.eventStream.addListener(n)},t.prototype.removeListener=function(t){for(var e=-1,n=0;n<this.listeners.length;n++)if(this.listeners[n][0]===t){e=n;break}if(-1!==e){var r=this.listeners[e][1];this.listeners.splice(e,1),this.eventStream.removeListener(r)}},t.prototype.isOpen=function(){return this.eventStream.isOpen()},t.prototype.close=function(){this.eventStream.close()},t}(),Fn=function(){function t(){}return t.TYPE="anon-user",t.DEFAULT_NAME="anon-user",t}(),$n=function(t,e,n,r){this.authInfo=t,this.providerType=e,this.providerName=n,this.asLink=r},zn=n("H7XF");function qn(t){var e,n=t.length%4;0!=n?e=t+"=".repeat(4-n):e=t;var r=Object(zn.toByteArray)(e);return function(t,e,n){var r="",i="";n=Math.min(t.length,n||1/0);for(var o=e=e||0;o<n;o++)t[o]<=127?(r+=Yn(i)+String.fromCharCode(t[o]),i=""):i+="%"+t[o].toString(16);return r+Yn(i)}(r,0,r.length)}function Vn(t){var e;return"undefined"==typeof Uint8Array&&(e=Wn(t)),e=new Uint8Array(Wn(t)),Object(zn.fromByteArray)(e)}function Wn(t){for(var e,n=1/0,r=t.length,i=null,o=[],s=0;s<r;s++){if((e=t.charCodeAt(s))>55295&&e<57344){if(!i){if(e>56319){(n-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(n-=3)>-1&&o.push(239,191,189);continue}i=e;continue}if(e<56320){(n-=3)>-1&&o.push(239,191,189),i=e;continue}e=i-55296<<10|e-56320|65536,i=null}else i&&((n-=3)>-1&&o.push(239,191,189),i=null);if(e<128){if((n-=1)<0)break;o.push(e)}else if(e<2048){if((n-=2)<0)break;o.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;o.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<2097152))throw new Error("Invalid code point");if((n-=4)<0)break;o.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return o}function Yn(t){try{return decodeURIComponent(t)}catch(t){return String.fromCharCode(65533)}}var Kn,Jn=function(){function t(t,e){this.expires=t,this.issuedAt=e}return t.fromEncoded=function(e){var n=t.splitToken(e),r=JSON.parse(qn(n[1]));return new t(r.exp,r.iat)},t.splitToken=function(t){var e=t.split(".");if(3!==e.length)throw new Error("Malformed JWT token. The string "+t+" should have 3 parts.");return e},t}(),Gn=function(){function t(t){this.auth=t}return t.prototype.shouldRefresh=function(){var t=this.auth;if(void 0===t)return!1;if(!t.isLoggedIn)return!1;var e,n=t.authInfo;if(void 0===n)return!1;if(!n.isLoggedIn)return!1;try{e=Jn.fromEncoded(n.accessToken)}catch(t){return console.log(t),!1}return!(Date.now()/1e3<e.expires-300)},t.prototype.run=function(){var t=this;this.shouldRefresh()?this.auth.refreshAccessToken().then((function(){t.nextTimeout=setTimeout((function(){return t.run()}),6e4)})).catch((function(){t.nextTimeout=setTimeout((function(){return t.run()}),6e4)})):this.nextTimeout=setTimeout((function(){return t.run()}),6e4)},t.prototype.stop=function(){clearTimeout(this.nextTimeout)},t}(),Hn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.USER_ID="user_id",t.DEVICE_ID="device_id",t.ACCESS_TOKEN="access_token",t.REFRESH_TOKEN="refresh_token"}(Kn||(Kn={}));var Xn,Qn=function(t){function e(e,n,r,i){return t.call(this,e,n,r,i)||this}return Hn(e,t),e.fromJSON=function(t){return new e(t[Kn.USER_ID],t[Kn.DEVICE_ID],t[Kn.ACCESS_TOKEN],t[Kn.REFRESH_TOKEN])},e.prototype.toJSON=function(){var t;return(t={})[Kn.USER_ID]=this.userId,t[Kn.DEVICE_ID]=this.deviceId,t[Kn.ACCESS_TOKEN]=this.accessToken,t[Kn.REFRESH_TOKEN]=this.refreshToken,t},e}(tn),Zn=function(){function t(){}return t.keyPresent=function(t,e){if(void 0===e[t])throw new Error("expected "+t+" to be present")},t}(),tr=function(){function t(t,e,n){void 0===e&&(e={}),void 0===n&&(n=[]),this.userType=t,this.data=e,this.identities=n}return t.empty=function(){return new t},Object.defineProperty(t.prototype,"name",{get:function(){return this.data.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"email",{get:function(){return this.data.email},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pictureUrl",{get:function(){return this.data.picture},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"firstName",{get:function(){return this.data.first_name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"lastName",{get:function(){return this.data.last_name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gender",{get:function(){return this.data.gender},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"birthday",{get:function(){return this.data.birthday},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"minAge",{get:function(){var t=this.data.min_age;if(void 0!==t)return t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxAge",{get:function(){var t=this.data.max_age;if(void 0!==t)return t},enumerable:!0,configurable:!0}),t}(),er=function(t,e){this.id=t,this.providerType=e},nr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.ID="id",t.PROVIDER_TYPE="provider_type"}(Xn||(Xn={}));var rr,ir=function(t){function e(e,n){return t.call(this,e,n)||this}return nr(e,t),e.fromJSON=function(t){return new e(t[Xn.ID],t[Xn.PROVIDER_TYPE])},e.prototype.toJSON=function(){var t;return(t={})[Xn.ID]=this.id,t[Xn.PROVIDER_TYPE]=this.providerType,t},e}(er),or=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.DATA="data",t.USER_TYPE="type",t.IDENTITIES="identities"}(rr||(rr={}));var sr,ur=function(t){function e(e,n,r){return t.call(this,e,n,r)||this}return or(e,t),e.fromJSON=function(t){return Zn.keyPresent(rr.USER_TYPE,t),Zn.keyPresent(rr.DATA,t),Zn.keyPresent(rr.IDENTITIES,t),new e(t[rr.USER_TYPE],t[rr.DATA],t[rr.IDENTITIES].map(ir.fromJSON))},e.prototype.toJSON=function(){var t;return(t={})[rr.DATA]=this.data,t[rr.USER_TYPE]=this.userType,t[rr.IDENTITIES]=this.identities,t},e}(tr),ar=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.ID="id",t.PROVIDER_TYPE="provider_type"}(sr||(sr={}));var cr,lr=function(t){function e(e,n){return t.call(this,e,n)||this}return ar(e,t),e.decode=function(t){return new e(t[sr.ID],t[sr.PROVIDER_TYPE])},e.prototype.encode=function(){var t;return(t={})[sr.ID]=this.id,t[sr.PROVIDER_TYPE]=this.providerType,t},e}(er),fr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.DATA="data",t.USER_TYPE="type",t.IDENTITIES="identities"}(cr||(cr={}));var hr,dr=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this;return i.userType=e,i.data=n,i.identities=r,i}return fr(e,t),e.decode=function(t){return t?new e(t[cr.USER_TYPE],t[cr.DATA],t[cr.IDENTITIES].map((function(t){return lr.decode(t)}))):void 0},e.prototype.encode=function(){var t;return(t={})[cr.DATA]=this.data,t[cr.USER_TYPE]=this.userType,t[cr.IDENTITIES]=this.identities.map((function(t){return t.encode()})),t},e}(tr),pr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function yr(t,e){if(t.isEmpty)e.remove(gr.ACTIVE_USER_STORAGE_NAME);else{var n=new gr(t.userId,t.deviceId,t.accessToken,t.refreshToken,t.loggedInProviderType,t.loggedInProviderName,t.lastAuthActivity,t.userProfile?new dr(t.userProfile.userType,t.userProfile.data,t.userProfile.identities.map((function(t){return new lr(t.id,t.providerType)}))):void 0);e.set(gr.ACTIVE_USER_STORAGE_NAME,JSON.stringify(n.encode()))}}function br(t,e){var n=[];t.forEach((function(t,e){var r=new gr(e,t.deviceId,t.accessToken,t.refreshToken,t.loggedInProviderType,t.loggedInProviderName,t.lastAuthActivity,t.userProfile?new dr(t.userProfile.userType,t.userProfile.data,t.userProfile.identities.map((function(t){return new lr(t.id,t.providerType)}))):void 0);n.push(r.encode())})),e.set(gr.ALL_USERS_STORAGE_NAME,JSON.stringify(n))}!function(t){t.USER_ID="user_id",t.DEVICE_ID="device_id",t.ACCESS_TOKEN="access_token",t.REFRESH_TOKEN="refresh_token",t.LAST_AUTH_ACTIVITY="last_auth_activity",t.LOGGED_IN_PROVIDER_TYPE="logged_in_provider_type",t.LOGGED_IN_PROVIDER_NAME="logged_in_provider_name",t.USER_PROFILE="user_profile"}(hr||(hr={}));var vr,gr=function(t){function e(e,n,r,i,o,s,u,a){var c=t.call(this,e,n,r,i,o,s,u,a)||this;return c.userProfile=a,c}return pr(e,t),e.decode=function(t){var n=t[hr.USER_ID],r=t[hr.DEVICE_ID],i=t[hr.ACCESS_TOKEN],o=t[hr.REFRESH_TOKEN],s=t[hr.LOGGED_IN_PROVIDER_TYPE],u=t[hr.LOGGED_IN_PROVIDER_NAME],a=t[hr.USER_PROFILE],c=t[hr.LAST_AUTH_ACTIVITY];return new e(n,r,i,o,s,u,new Date(c),dr.decode(a))},e.prototype.encode=function(){var t={};return t[hr.USER_ID]=this.userId,t[hr.ACCESS_TOKEN]=this.accessToken,t[hr.REFRESH_TOKEN]=this.refreshToken,t[hr.DEVICE_ID]=this.deviceId,t[hr.LOGGED_IN_PROVIDER_NAME]=this.loggedInProviderName,t[hr.LOGGED_IN_PROVIDER_TYPE]=this.loggedInProviderType,t[hr.LAST_AUTH_ACTIVITY]=this.lastAuthActivity?this.lastAuthActivity.getTime():void 0,t[hr.USER_PROFILE]=this.userProfile?this.userProfile.encode():void 0,t},e.ACTIVE_USER_STORAGE_NAME="auth_info",e.ALL_USERS_STORAGE_NAME="all_auth_infos",e}(tn),mr=function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}},_r=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},wr=function(){function t(t,e,n,r){var i,o;void 0===r&&(r=!0),this.requestClient=t,this.authRoutes=e,this.storage=n;try{i=function(t){var e=t.get(gr.ALL_USERS_STORAGE_NAME);if(!e)return new Map;var n=JSON.parse(e);if(!Array.isArray(n))throw new Bn(jn.CouldNotLoadPersistedAuthInfo);var r=new Map;return n.forEach((function(t){var e=gr.decode(t);r.set(e.userId,e)})),r}(n)}catch(t){throw new Bn(jn.CouldNotLoadPersistedAuthInfo)}this.allUsersAuthInfo=i;try{o=function(t){var e=t.get(gr.ACTIVE_USER_STORAGE_NAME);if(e)return gr.decode(JSON.parse(e))}(n)}catch(t){throw new Bn(jn.CouldNotLoadPersistedAuthInfo)}this.activeUserAuthInfo=void 0===o?tn.empty():o,this.activeUserAuthInfo.hasUser&&(this.currentUser=this.prepUser(this.activeUserAuthInfo)),r&&(this.accessTokenRefresher=new Gn(this),this.accessTokenRefresher.run())}return Object.defineProperty(t.prototype,"authInfo",{get:function(){return this.activeUserAuthInfo},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoggedIn",{get:function(){return void 0!==this.currentUser&&this.currentUser.isLoggedIn},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.currentUser},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasDeviceId",{get:function(){return void 0!==this.activeUserAuthInfo.deviceId&&""!==this.activeUserAuthInfo.deviceId&&"000000000000000000000000"!==this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"deviceId",{get:function(){if(this.hasDeviceId)return this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),t.prototype.listUsers=function(){var t=this,e=[];return this.allUsersAuthInfo.forEach((function(n){e.push(t.prepUser(n))})),e},t.prototype.doAuthenticatedRequest=function(t,e){var n=this;try{return this.requestClient.doRequest(this.prepareAuthRequest(t,e||this.activeUserAuthInfo)).catch((function(e){return n.handleAuthFailure(e,t)}))}catch(t){return Promise.reject(t)}},t.prototype.doAuthenticatedRequestWithDecoder=function(t,e){return this.doAuthenticatedRequest(t).then((function(t){var n=Qe.a.parse(t.body,{strict:!1});return e?e.decode(n):n})).catch((function(t){throw mn(t)}))},t.prototype.openAuthenticatedEventStream=function(t,e){var n=this;if(void 0===e&&(e=!0),!this.isLoggedIn)throw new Bn(jn.MustAuthenticateFirst);var r=t.useRefreshToken?this.activeUserAuthInfo.refreshToken:this.activeUserAuthInfo.accessToken;return this.requestClient.doStreamRequest(t.builder.withPath(t.path+"&stitch_at="+r).build(),e,(function(){return n.openAuthenticatedEventStream(t,!1)})).catch((function(r){return n.handleAuthFailureForEventStream(r,t,e)}))},t.prototype.openAuthenticatedStreamWithDecoder=function(t,e){return this.openAuthenticatedEventStream(t).then((function(t){return new Ln(t,e)}))},t.prototype.refreshAccessToken=function(){var t=this,e=(new Pn.Builder).withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(wn.POST);return this.doAuthenticatedRequest(e.build()).then((function(e){try{var n=Qn.fromJSON(JSON.parse(e.body));t.activeUserAuthInfo=t.activeUserAuthInfo.merge(n)}catch(t){throw new ln(t,on.DECODING_ERROR)}try{yr(t.activeUserAuthInfo,t.storage),t.allUsersAuthInfo.set(t.activeUserAuthInfo.userId,t.activeUserAuthInfo),br(t.allUsersAuthInfo,t.storage)}catch(t){throw new Bn(jn.CouldNotPersistAuthInfo)}}))},t.prototype.switchToUserWithId=function(t){var e=this.allUsersAuthInfo.get(t);if(void 0===e)throw new Bn(jn.UserNotFound);if(!e.isLoggedIn)throw new Bn(jn.UserNotLoggedIn);this.activeUserAuthInfo.hasUser&&this.allUsersAuthInfo.set(this.activeUserAuthInfo.userId,this.activeUserAuthInfo.withNewAuthActivityTime());var n=e.withNewAuthActivityTime();this.allUsersAuthInfo.set(t,n),yr(n,this.storage),this.activeUserAuthInfo=n;var r=this.currentUser;return this.currentUser=this.prepUser(n),this.onAuthEvent(),this.dispatchAuthEvent({currentActiveUser:this.currentUser,kind:He.ActiveUserChanged,previousActiveUser:r}),this.currentUser},t.prototype.loginWithCredentialInternal=function(t){var e,n,r=this;if(t instanceof $n)return this.processLogin(t,t.authInfo,t.asLink).then((function(t){return r.dispatchAuthEvent({kind:He.UserLoggedIn,loggedInUser:t}),t}));if(t.providerCapabilities.reusesExistingSession)try{for(var i=mr(this.allUsersAuthInfo),o=i.next();!o.done;o=i.next()){var s=_r(o.value,2),u=s[0],a=s[1];if(a.loggedInProviderType===t.providerType){if(a.isLoggedIn)try{return Promise.resolve(this.switchToUserWithId(u))}catch(t){return Promise.reject(t)}void 0!==a.userId&&this.removeUserWithIdInternal(a.userId)}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return this.doLogin(t,!1)},t.prototype.linkUserWithCredentialInternal=function(t,e){return void 0!==this.currentUser&&t.id!==this.currentUser.id?Promise.reject(new Bn(jn.UserNoLongerValid)):this.doLogin(e,!0)},t.prototype.logoutInternal=function(){return this.isLoggedIn&&this.currentUser?this.logoutUserWithIdInternal(this.currentUser.id):Promise.resolve()},t.prototype.logoutUserWithIdInternal=function(t){var e=this,n=this.allUsersAuthInfo.get(t);if(void 0===n)return Promise.reject(new Bn(jn.UserNotFound));if(!n.isLoggedIn)return Promise.resolve();var r=function(){e.clearUserAuthTokens(n.userId),n.loggedInProviderType===Fn.TYPE&&e.removeUserWithIdInternal(n.userId)};return this.doLogout(n).then((function(){r()})).catch((function(){r()}))},t.prototype.removeUserInternal=function(){return this.isLoggedIn&&void 0!==this.currentUser?this.removeUserWithIdInternal(this.currentUser.id):Promise.resolve()},t.prototype.removeUserWithIdInternal=function(t){var e=this,n=this.allUsersAuthInfo.get(t);if(void 0===n)return Promise.reject(new Bn(jn.UserNotFound));var r=function(){e.clearUserAuthTokens(n.userId),e.allUsersAuthInfo.delete(t),br(e.allUsersAuthInfo,e.storage);var r=e.prepUser(n.loggedOut());e.onAuthEvent(),e.dispatchAuthEvent({kind:He.UserRemoved,removedUser:r})};return n.isLoggedIn?this.doLogout(n).then((function(){r()})).catch((function(t){r()})):(r(),Promise.resolve())},t.prototype.close=function(){this.accessTokenRefresher&&this.accessTokenRefresher.stop()},t.prototype.prepareAuthRequest=function(t,e){if(!e.isLoggedIn)throw new Bn(jn.MustAuthenticateFirst);var n=t.builder,r=n.headers||{};return t.useRefreshToken?r[gn.AUTHORIZATION]=gn.getAuthorizationBearer(e.refreshToken):r[gn.AUTHORIZATION]=gn.getAuthorizationBearer(e.accessToken),n.withHeaders(r),n.build()},t.prototype.handleAuthFailureForEventStream=function(t,e,n){var r=this;if(void 0===n&&(n=!0),!(t instanceof bn)||t.errorCode!==un.InvalidSession)throw t;if(e.useRefreshToken||!e.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),t;return this.tryRefreshAccessToken(e.startedAt).then((function(){return r.openAuthenticatedEventStream(e.builder.withShouldRefreshOnFailure(!1).build(),n)}))},t.prototype.handleAuthFailure=function(t,e){var n=this;if(!(t instanceof bn)||t.errorCode!==un.InvalidSession)throw t;if(e.useRefreshToken||!e.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),t;return this.tryRefreshAccessToken(e.startedAt).then((function(){return n.doAuthenticatedRequest(e.builder.withShouldRefreshOnFailure(!1).build())}))},t.prototype.tryRefreshAccessToken=function(t){if(!this.isLoggedIn)throw new Bn(jn.LoggedOutDuringRequest);try{if(Jn.fromEncoded(this.activeUserAuthInfo.accessToken).issuedAt>=t)return Promise.resolve()}catch(t){}return this.refreshAccessToken()},t.prototype.prepUser=function(t){return this.userFactory.makeUser(t.userId,t.loggedInProviderType,t.loggedInProviderName,t.isLoggedIn,t.lastAuthActivity,t.userProfile)},t.prototype.attachAuthOptions=function(t){var e={};e.device=this.deviceInfo,t.options=e},t.prototype.doLogin=function(t,e){var n=this,r=this.currentUser;return this.doLoginRequest(t,e).then((function(r){return n.processLoginResponse(t,r,e)})).then((function(t){return n.onAuthEvent(),e?n.dispatchAuthEvent({kind:He.UserLinked,linkedUser:t}):(n.dispatchAuthEvent({kind:He.UserLoggedIn,loggedInUser:t}),n.dispatchAuthEvent({currentActiveUser:t,kind:He.ActiveUserChanged,previousActiveUser:r})),t}))},t.prototype.doLoginRequest=function(t,e){var n=new Dn.Builder;n.withMethod(wn.POST),e?n.withPath(this.authRoutes.getAuthProviderLinkRoute(t.providerName)):n.withPath(this.authRoutes.getAuthProviderLoginRoute(t.providerName));var r=t.material;if(this.attachAuthOptions(r),n.withDocument(r),!e)return this.requestClient.doRequest(n.build());var i=new Nn(n.build(),n.document);return this.doAuthenticatedRequest(i)},t.prototype.processLogin=function(t,e,n){var r=this,i=this.activeUserAuthInfo,o=this.currentUser;return e=this.activeUserAuthInfo.merge(new tn(e.userId,e.deviceId,e.accessToken,e.refreshToken,t.providerType,t.providerName,void 0,void 0)),this.activeUserAuthInfo=e,this.currentUser=this.userFactory.makeUser(this.activeUserAuthInfo.userId,t.providerType,t.providerName,this.activeUserAuthInfo.isLoggedIn,new Date,void 0),this.doGetUserProfile().then((function(n){i.hasUser&&r.allUsersAuthInfo.set(i.userId,i.withNewAuthActivityTime()),e=e.merge(new tn(e.userId,e.deviceId,e.accessToken,e.refreshToken,t.providerType,t.providerName,new Date,n));var s=!r.allUsersAuthInfo.has(e.userId);try{yr(e,r.storage),r.allUsersAuthInfo.set(e.userId,e),br(r.allUsersAuthInfo,r.storage)}catch(t){throw r.activeUserAuthInfo=i,r.currentUser=o,e.userId!==i.userId&&e.userId&&r.allUsersAuthInfo.delete(e.userId),new Bn(jn.CouldNotPersistAuthInfo)}return r.activeUserAuthInfo=e,r.currentUser=r.userFactory.makeUser(r.activeUserAuthInfo.userId,t.providerType,t.providerName,r.activeUserAuthInfo.isLoggedIn,r.activeUserAuthInfo.lastAuthActivity,n),s&&(r.onAuthEvent(),r.dispatchAuthEvent({addedUser:r.currentUser,kind:He.UserAdded})),r.currentUser})).catch((function(t){if(t instanceof Bn)throw t;if(n||i.hasUser){var e=r.activeUserAuthInfo;r.activeUserAuthInfo=i,r.currentUser=o,n&&(r.activeUserAuthInfo=r.activeUserAuthInfo.withAuthProvider(e.loggedInProviderType,e.loggedInProviderName))}else r.clearActiveUserAuth();throw t}))},t.prototype.processLoginResponse=function(t,e,n){try{if(!e)throw new bn("the login response could not be processed for credential: "+t+";response was undefined");if(!e.body)throw new bn("response with status code "+e.statusCode+" has empty body");return this.processLogin(t,Qn.fromJSON(JSON.parse(e.body)),n)}catch(t){throw new ln(t,on.DECODING_ERROR)}},t.prototype.doGetUserProfile=function(){var t=new Pn.Builder;return t.withMethod(wn.GET).withPath(this.authRoutes.profileRoute),this.doAuthenticatedRequest(t.build()).then((function(t){return ur.fromJSON(JSON.parse(t.body))})).catch((function(t){throw t instanceof sn?t:new ln(t,on.DECODING_ERROR)}))},t.prototype.doLogout=function(t){var e=new Pn.Builder;return e.withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(wn.DELETE),this.doAuthenticatedRequest(e.build(),t).then((function(){}))},t.prototype.clearActiveUserAuth=function(){this.isLoggedIn&&this.clearUserAuthTokens(this.activeUserAuthInfo.userId)},t.prototype.clearUserAuthTokens=function(t){var e=this.allUsersAuthInfo.get(t);if(void 0===e){if(this.activeUserAuthInfo.userId!==t)throw new Bn(jn.UserNotFound)}else if(!e.isLoggedIn)return;try{var n=void 0;if(e){var r=e.loggedOut();this.allUsersAuthInfo.set(t,r),br(this.allUsersAuthInfo,this.storage),n=this.userFactory.makeUser(r.userId,r.loggedInProviderType,r.loggedInProviderName,r.isLoggedIn,r.lastAuthActivity,r.userProfile)}var i=!1;this.activeUserAuthInfo.hasUser&&this.activeUserAuthInfo.userId===t&&(i=!0,this.activeUserAuthInfo=this.activeUserAuthInfo.withClearedUser(),this.currentUser=void 0,yr(this.activeUserAuthInfo,this.storage)),n&&(this.onAuthEvent(),this.dispatchAuthEvent({kind:He.UserLoggedOut,loggedOutUser:n}),i&&this.dispatchAuthEvent({currentActiveUser:void 0,kind:He.ActiveUserChanged,previousActiveUser:n}))}catch(t){throw new Bn(jn.CouldNotPersistAuthInfo)}},t}(),Or=function(){function t(t,e,n,r,i,o){this.id=t,this.loggedInProviderType=e,this.loggedInProviderName=n,this.profile=void 0===o?tr.empty():o,this.isLoggedIn=r,this.lastAuthActivity=i}return Object.defineProperty(t.prototype,"userType",{get:function(){return this.profile.userType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"identities",{get:function(){return this.profile.identities},enumerable:!0,configurable:!0}),t.prototype.equals=function(t){return this.id===t.id&&JSON.stringify(this.identities)===JSON.stringify(t.identities)&&this.isLoggedIn===t.isLoggedIn&&this.loggedInProviderName===t.loggedInProviderName&&this.loggedInProviderType===t.loggedInProviderType&&JSON.stringify(this.profile)===JSON.stringify(t.profile)},t}();!function(t){t.DEVICE_ID="deviceId",t.APP_ID="appId",t.APP_VERSION="appVersion",t.PLATFORM="platform",t.PLATFORM_VERSION="platformVersion",t.SDK_VERSION="sdkVersion"}(vr||(vr={}));var Er,Sr=vr,Ar=function(t){void 0===t&&(t=!1),this.reusesExistingSession=t},Pr=function(t){void 0===t&&(t=Fn.DEFAULT_NAME),this.providerType=Fn.TYPE,this.material={},this.providerCapabilities=new Ar(!0),this.providerName=t};!function(){function t(){}t.TYPE="custom-token",t.DEFAULT_NAME="custom-token"}();!function(t){t.TOKEN="token"}(Er||(Er={}));var Ir,Nr=function(){function t(){}return t.TYPE="oauth2-facebook",t.DEFAULT_NAME="oauth2-facebook",t}();!function(t){t.ACCESS_TOKEN="accessToken"}(Ir||(Ir={}));!function(){function t(t,e){var n;void 0===e&&(e=Nr.DEFAULT_NAME),this.providerType=Nr.TYPE,this.providerName=e,this.accessToken=t,this.material=((n={})[Ir.ACCESS_TOKEN]=this.accessToken,n)}Object.defineProperty(t.prototype,"providerCapabilities",{get:function(){return new Ar(!1)},enumerable:!0,configurable:!0})}();var Tr,jr=function(){function t(){}return t.TYPE="custom-function",t.DEFAULT_NAME="custom-function",t}();(function(){function t(t,e){void 0===e&&(e=jr.DEFAULT_NAME),this.providerType=jr.TYPE,this.providerName=e,this.material=t}Object.defineProperty(t.prototype,"providerCapabilities",{get:function(){return new Ar(!1)},enumerable:!0,configurable:!0})})(),function(){function t(){}t.TYPE="oauth2-google",t.DEFAULT_NAME="oauth2-google"}();!function(t){t.AUTH_CODE="authCode"}(Tr||(Tr={}));var xr;!function(){function t(){}t.TYPE="api-key",t.DEFAULT_NAME="api-key"}();!function(t){t.KEY="key"}(xr||(xr={}));var Dr,Cr=function(t,e,n){this.providerName=t,this.requestClient=e,this.baseRoute=n};!function(t){t.ID="_id",t.KEY="key",t.NAME="name",t.DISABLED="disabled"}(Dr||(Dr={}));var Rr,kr=function(){function t(t,e,n,r){this.id=Qe.b.ObjectID.createFromHexString(t),this.key=e,this.name=n,this.disabled=r}return t.readFromApi=function(e){var n="string"==typeof e?JSON.parse(e):e;return Zn.keyPresent(Dr.ID,n),Zn.keyPresent(Dr.NAME,n),Zn.keyPresent(Dr.DISABLED,n),new t(n[Dr.ID],n[Dr.KEY],n[Dr.NAME],n[Dr.DISABLED])},t.prototype.toJSON=function(){var t;return(t={})[Dr.ID]=this.id,t[Dr.KEY]=this.key,t[Dr.NAME]=this.name,t[Dr.DISABLED]=this.disabled,t},t}(),Br=function(){function t(){}return t.TYPE="api-key",t.DEFAULT_NAME="api-key",t}(),Mr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.NAME="name"}(Rr||(Rr={}));var Ur,Lr=function(t){function e(e,n){var r=n.baseAuthRoute+"/api_keys",i=Br.DEFAULT_NAME;return t.call(this,i,e,r)||this}return Mr(e,t),e.prototype.createApiKey=function(t){var e,n=new Nn.Builder;return n.withMethod(wn.POST).withPath(this.baseRoute).withDocument((e={},e[Rr.NAME]=t,e)).withRefreshToken(),this.requestClient.doAuthenticatedRequest(n.build()).then((function(t){return kr.readFromApi(t.body)})).catch((function(t){throw mn(t)}))},e.prototype.fetchApiKey=function(t){var e=new Pn.Builder;return e.withMethod(wn.GET).withPath(this.getApiKeyRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then((function(t){return kr.readFromApi(t.body)})).catch((function(t){throw mn(t)}))},e.prototype.fetchApiKeys=function(){var t=new Pn.Builder;return t.withMethod(wn.GET).withPath(this.baseRoute),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then((function(t){var e=JSON.parse(t.body);if(Array.isArray(e))return e.map((function(t){return kr.readFromApi(t)}));throw new ln(new Error("unexpected non-array response from server"),on.DECODING_ERROR)})).catch((function(t){throw mn(t)}))},e.prototype.deleteApiKey=function(t){var e=new Pn.Builder;return e.withMethod(wn.DELETE).withPath(this.getApiKeyRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then((function(){}))},e.prototype.enableApiKey=function(t){var e=new Pn.Builder;return e.withMethod(wn.PUT).withPath(this.getApiKeyEnableRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then((function(){}))},e.prototype.disableApiKey=function(t){var e=new Pn.Builder;return e.withMethod(wn.PUT).withPath(this.getApiKeyDisableRoute(t.toHexString())),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then((function(){}))},e.prototype.getApiKeyRoute=function(t){return this.baseRoute+"/"+t},e.prototype.getApiKeyEnableRoute=function(t){return this.getApiKeyRoute(t)+"/enable"},e.prototype.getApiKeyDisableRoute=function(t){return this.getApiKeyRoute(t)+"/disable"},e}(Cr);!function(t){t.KEY="key"}(Ur||(Ur={}));var Fr,$r,zr=function(){function t(){}return t.TYPE="local-userpass",t.DEFAULT_NAME="local-userpass",t}(),qr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t.EMAIL="email",t.PASSWORD="password"}(Fr||(Fr={})),function(t){t.EMAIL="email",t.PASSWORD="password",t.TOKEN="token",t.TOKEN_ID="tokenId",t.ARGS="arguments"}($r||($r={}));var Vr,Wr=function(t){function e(e,n,r){void 0===e&&(e=zr.DEFAULT_NAME);var i=r.getAuthProviderRoute(e);return t.call(this,e,n,i)||this}return qr(e,t),e.prototype.registerWithEmailInternal=function(t,e){var n,r=new Dn.Builder;return r.withMethod(wn.POST).withPath(this.getRegisterWithEmailRoute()),r.withDocument(((n={})[Fr.EMAIL]=t,n[Fr.PASSWORD]=e,n)),this.requestClient.doRequest(r.build()).then((function(){}))},e.prototype.confirmUserInternal=function(t,e){var n,r=new Dn.Builder;return r.withMethod(wn.POST).withPath(this.getConfirmUserRoute()),r.withDocument(((n={})[$r.TOKEN]=t,n[$r.TOKEN_ID]=e,n)),this.requestClient.doRequest(r.build()).then((function(){}))},e.prototype.resendConfirmationEmailInternal=function(t){var e,n=new Dn.Builder;return n.withMethod(wn.POST).withPath(this.getResendConfirmationEmailRoute()),n.withDocument(((e={})[$r.EMAIL]=t,e)),this.requestClient.doRequest(n.build()).then((function(){}))},e.prototype.resetPasswordInternal=function(t,e,n){var r,i=new Dn.Builder;return i.withMethod(wn.POST).withPath(this.getResetPasswordRoute()),i.withDocument(((r={})[$r.TOKEN]=t,r[$r.TOKEN_ID]=e,r[$r.PASSWORD]=n,r)),this.requestClient.doRequest(i.build()).then((function(){}))},e.prototype.sendResetPasswordEmailInternal=function(t){var e,n=new Dn.Builder;return n.withMethod(wn.POST).withPath(this.getSendResetPasswordEmailRoute()),n.withDocument(((e={})[$r.EMAIL]=t,e)),this.requestClient.doRequest(n.build()).then((function(){}))},e.prototype.callResetPasswordFunctionInternal=function(t,e,n){var r,i=new Dn.Builder;return i.withMethod(wn.POST).withPath(this.getCallResetPasswordFunctionRoute()),i.withDocument(((r={})[$r.EMAIL]=t,r[$r.PASSWORD]=e,r[$r.ARGS]=n,r)),this.requestClient.doRequest(i.build()).then((function(){}))},e.prototype.getRegisterWithEmailRoute=function(){return this.getExtensionRoute("register")},e.prototype.getConfirmUserRoute=function(){return this.getExtensionRoute("confirm")},e.prototype.getResendConfirmationEmailRoute=function(){return this.getExtensionRoute("confirm/send")},e.prototype.getResetPasswordRoute=function(){return this.getExtensionRoute("reset")},e.prototype.getSendResetPasswordEmailRoute=function(){return this.getExtensionRoute("reset/send")},e.prototype.getCallResetPasswordFunctionRoute=function(){return this.getExtensionRoute("reset/call")},e.prototype.getExtensionRoute=function(t){return this.baseRoute+"/"+t},e}(Cr);!function(t){t.USERNAME="username",t.PASSWORD="password"}(Vr||(Vr={}));var Yr;!function(t){t.Normal="normal",t.Server="server",t.Unknown="unknown"}(Yr||(Yr={}));!function(){function t(t){this.suiteName=t,this.storage={}}t.prototype.get=function(t){return this.storage[this.suiteName+"."+t]},t.prototype.set=function(t,e){this.storage[this.suiteName+"."+t]=e},t.prototype.remove=function(t){delete this.storage[this.suiteName+"."+t]}}();var Kr,Jr=function(){};!function(t){t[t.AUTH_EVENT=0]="AUTH_EVENT"}(Kr||(Kr={}));var Gr=function(){function t(t,e,n){this.serviceField="service",this.argumentsField="arguments",this.requestClient=t,this.serviceRoutes=e,this.serviceName=n,this.serviceBinders=[],this.allocatedStreams=[]}return t.prototype.callFunction=function(t,e,n){return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(t,e),n)},t.prototype.streamFunction=function(t,e,n){var r=this;return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(t,e),n).then((function(t){return r.allocatedStreams.push(t),t}))},t.prototype.bind=function(t){this.serviceBinders.push(t)},t.prototype.onRebindEvent=function(t){switch(t.type){case Kr.AUTH_EVENT:t.event.kind===He.ActiveUserChanged&&this.closeAllocatedStreams()}this.serviceBinders.forEach((function(e){e.onRebindEvent(t)}))},t.prototype.getStreamServiceFunctionRequest=function(t,e){var n={name:t};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=e;var r=new Pn.Builder;return r.withMethod(wn.GET).withPath(this.serviceRoutes.functionCallRoute+"?stitch_request="+encodeURIComponent(Vn(Qe.a.stringify(n)))),r.build()},t.prototype.getCallServiceFunctionRequest=function(t,e){var n={name:t};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=e;var r=new Nn.Builder;return r.withMethod(wn.POST).withPath(this.serviceRoutes.functionCallRoute),r.withDocument(n),r.build()},t.prototype.closeAllocatedStreams=function(){this.allocatedStreams.forEach((function(t){t.isOpen()&&t.close()})),this.allocatedStreams=[]},t}(),Hr=function(){function t(t,e){this.functionService=new Gr(t,e.serviceRoutes)}return t.prototype.callFunction=function(t,e,n){return this.functionService.callFunction(t,e,n)},t}(),Xr=function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}},Qr=function(){function t(t){this.reconnecter=t,this.closed=!1,this.events=[],this.listeners=[],this.lastErr=void 0}return t.prototype.isOpen=function(){return!this.closed},t.prototype.addListener=function(t){var e=this;this.closed?setTimeout((function(){return t.onEvent(new Mn(Un.ERROR_EVENT_NAME,"stream closed"))}),0):void 0===this.lastErr?(this.listeners.push(t),this.poll()):setTimeout((function(){return t.onEvent(new Mn(Un.ERROR_EVENT_NAME,e.lastErr))}),0)},t.prototype.removeListener=function(t){var e=this.listeners.indexOf(t);-1!==e&&this.listeners.splice(e,1)},t.prototype.nextEvent=function(){var t=this;return this.closed?Promise.reject(new Mn(Un.ERROR_EVENT_NAME,"stream closed")):void 0!==this.lastErr?Promise.reject(new Mn(Un.ERROR_EVENT_NAME,this.lastErr)):new Promise((function(e,n){t.listenOnce({onEvent:function(t){e(t)}})}))},t.prototype.close=function(){this.closed||(this.closed=!0,this.afterClose())},t.prototype.reconnect=function(e){var n=this;this.reconnecter?this.reconnecter().then((function(t){n.onReconnect(t)})).catch((function(r){if(!(r instanceof sn&&r instanceof ln))return n.closed=!0,n.events.push(new Mn(Un.ERROR_EVENT_NAME,"stream closed: "+e)),void n.poll();setTimeout((function(){return n.reconnect(r)}),t.RETRY_TIMEOUT_MILLIS)})):this.closed||(this.closed=!0,this.events.push(new Mn(Un.ERROR_EVENT_NAME,"stream closed: "+e)),this.poll())},t.prototype.poll=function(){for(var t,e;0!==this.events.length;){var n=this.events.pop();try{for(var r=Xr(this.listeners),i=r.next();!i.done;i=r.next()){var o=i.value;o.onEvent&&o.onEvent(n)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}}},t.prototype.listenOnce=function(t){var e=this;if(this.closed)setTimeout((function(){return t.onEvent(new Mn(Un.ERROR_EVENT_NAME,"stream closed"))}),0);else if(void 0===this.lastErr){var n={onEvent:function(r){e.removeListener(n),t.onEvent(r)}};this.addListener(n)}else setTimeout((function(){return t.onEvent(new Mn(Un.ERROR_EVENT_NAME,e.lastErr))}),0)},t.RETRY_TIMEOUT_MILLIS=5e3,t}(),Zr=function(t,e,n,r){this.method=t,this.url=e,this.headers=n,this.body=r};!function(t){var e=function(){function e(t){t&&(this.method=t.method,this.url=t.url,this.headers=t.headers,this.body=t.body)}return e.prototype.withMethod=function(t){return this.method=t,this},e.prototype.withUrl=function(t){return this.url=t,this},e.prototype.withHeaders=function(t){return this.headers=t,this},e.prototype.withBody=function(t){return this.body=t,this},e.prototype.build=function(){if(void 0===this.method)throw new Error("must set method");if(void 0===this.url)throw new Error("must set non-empty url");return new t(this.method,this.url,void 0===this.headers?{}:this.headers,this.body)},e}();t.Builder=e}(Zr||(Zr={}));var ti=function(t,e,n){var r=this;this.statusCode=e,this.body=n,this.headers={},Object.keys(t).map((function(e,n){r.headers[e.toLocaleLowerCase()]=t[e]}))},ei="/api/client/v2.0";function ni(t){return ei+"/app/"+t}function ri(t){return ni(t)+"/functions/call"}function ii(t,e){return ni(t)+"/auth/providers/"+e}function oi(t,e){return ii(t,e)+"/login"}var si,ui=function(){function t(t){var e=this;this.baseAuthRoute=ei+"/auth",this.sessionRoute=e.baseAuthRoute+"/session",this.profileRoute=e.baseAuthRoute+"/profile",this.clientAppId=t}return t.prototype.getAuthProviderRoute=function(t){return ii(this.clientAppId,t)},t.prototype.getAuthProviderLoginRoute=function(t){return oi(this.clientAppId,t)},t.prototype.getAuthProviderLinkRoute=function(t){return function(t,e){return oi(t,e)+"?link=true"}(this.clientAppId,t)},t.prototype.getAuthProviderExtensionRoute=function(t,e){return this.getAuthProviderRoute(t)+"/"+e},t}();!function(t){t.DEPLOYMENT_MODEL="deployment_model",t.LOCATION="location",t.HOSTNAME="hostname"}(si||(si={}));var ai=function(){function t(t,e,n){this.deploymentModel=t,this.location=e,this.hostname=n}return t.fromJSON=function(e){return new t(e[si.DEPLOYMENT_MODEL],e[si.LOCATION],e[si.HOSTNAME])},t.prototype.toJSON=function(){var t;return(t={})[si.DEPLOYMENT_MODEL]=this.deploymentModel,t[si.LOCATION]=this.location,t[si.HOSTNAME]=this.hostname,t},t}();var ci=function(){function t(t,e){this.baseUrl=t,this.transport=e}return t.prototype.doRequestToURL=function(t,e){return this.transport.roundTrip(this.buildRequest(t,e)).catch((function(t){throw new ln(t,on.TRANSPORT_ERROR)})).then((function(t){return(e=t).statusCode>=200&&e.statusCode<300?e:_n(e);var e}))},t.prototype.doStreamRequestToURL=function(t,e,n,r){return void 0===n&&(n=!0),this.transport.stream(this.buildRequest(t,e),n,r).catch((function(t){if(t instanceof sn)throw t;throw new ln(t,on.TRANSPORT_ERROR)}))},t.prototype.buildRequest=function(t,e){return(new Zr.Builder).withMethod(t.method).withUrl(""+e+t.path).withHeaders(t.headers).withBody(t.body).build()},t}(),li=function(t){this.clientAppId=t,this.functionCallRoute=ri(t)},fi=function(t){this.clientAppId=t,this.authRoutes=new ui(t),this.serviceRoutes=new li(t),this.appMetadataRoute=function(t){return ni(t)+"/location"}(t),this.functionCallRoute=ri(t)},hi=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),di=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function u(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(s,u)}a((r=r.apply(t,e||[])).next())}))},pi=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},yi=function(t){function e(e,n,r){var i=t.call(this,n,r)||this;return i.clientAppId=e,i.routes=new fi(e),i}return hi(e,t),e.prototype.doRequest=function(e){var n=this;return this.initAppMetadata().then((function(r){return t.prototype.doRequestToURL.call(n,e,r.hostname)}))},e.prototype.doStreamRequest=function(e,n,r){var i=this;return void 0===n&&(n=!0),this.initAppMetadata().then((function(o){return t.prototype.doStreamRequestToURL.call(i,e,o.hostname,n,r)}))},e.prototype.getBaseURL=function(){return di(this,void 0,void 0,(function(){return pi(this,(function(t){return[2,this.initAppMetadata().then((function(t){return t.hostname}))]}))}))},e.prototype.initAppMetadata=function(){var e=this;if(this.appMetadata)return Promise.resolve(this.appMetadata);var n=(new On.Builder).withMethod(wn.GET).withPath(this.routes.appMetadataRoute).build();return t.prototype.doRequestToURL.call(this,n,this.baseUrl).then((function(t){return e.appMetadata=ai.fromJSON(Qe.a.parse(t.body)),e.appMetadata}))},e}(ci),bi=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),vi=(function(t){function e(e,n){return t.call(this,e,n)||this}bi(e,t),e.prototype.doRequest=function(e){return t.prototype.doRequestToURL.call(this,e,this.baseUrl)},e.prototype.doStreamRequest=function(e,n,r){return void 0===n&&(n=!0),t.prototype.doStreamRequestToURL.call(this,e,this.baseUrl,n,r)},e.prototype.getBaseURL=function(){return Promise.resolve(this.baseUrl)}}(ci),function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),gi=function(t){function e(e){var n=t.call(this)||this;return n.type=Kr.AUTH_EVENT,n.event=e,n}return vi(e,t),e}(Jr),mi=function(){function t(t,e,n,r){this.baseUrl=t,this.storage=e,this.dataDirectory=n,this.transport=r}return t.prototype.builder=function(){return new t.Builder(this)},t}();!function(t){var e=function(){function e(t){t&&(this.baseUrl=t.baseUrl,this.storage=t.storage,this.dataDirectory=t.dataDirectory,this.transport=t.transport)}return e.prototype.withBaseUrl=function(t){return this.baseUrl=t,this},e.prototype.withStorage=function(t){return this.storage=t,this},e.prototype.withDataDirectory=function(t){return this.dataDirectory=t,this},e.prototype.withTransport=function(t){return this.transport=t,this},e.prototype.build=function(){return new t(this.baseUrl,this.storage,this.dataDirectory,this.transport)},e}();t.Builder=e}(mi||(mi={}));var _i=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),wi=function(t){function e(e,n,r){var i=t.call(this,e.baseUrl,e.storage,e.dataDirectory,e.transport)||this;return i.localAppVersion=r,i.localAppName=n,i}return _i(e,t),e.prototype.builder=function(){return new e.Builder(this)},e}(mi);!function(t){var e=function(e){function n(t){var n=e.call(this,t)||this;return t&&(n.localAppVersion=t.localAppVersion,n.localAppName=t.localAppName),n}return _i(n,e),n.prototype.withLocalAppName=function(t){return this.localAppName=t,this},n.prototype.withLocalAppVersion=function(t){return this.localAppVersion=t,this},n.prototype.build=function(){var n=e.prototype.build.call(this);return new t(n,this.localAppName,this.localAppVersion)},n}(mi.Builder);t.Builder=e}(wi||(wi={}));var Oi,Ei=function(t,e,n,r){this.clientAppId=t,this.dataDirectory=e,this.localAppName=n,this.localAppVersion=r},Si=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ai=function(t){function e(e,n){return t.call(this,e,n)||this}return Si(e,t),e.prototype.createApiKey=function(e){return t.prototype.createApiKey.call(this,e)},e.prototype.fetchApiKey=function(e){return t.prototype.fetchApiKey.call(this,e)},e.prototype.fetchApiKeys=function(){return t.prototype.fetchApiKeys.call(this)},e.prototype.deleteApiKey=function(e){return t.prototype.deleteApiKey.call(this,e)},e.prototype.enableApiKey=function(e){return t.prototype.enableApiKey.call(this,e)},e.prototype.disableApiKey=function(e){return t.prototype.disableApiKey.call(this,e)},e}(Lr);(Oi||(Oi={})).factory=new(function(){function t(){}return t.prototype.getClient=function(t,e,n){return new Ai(t,n)},t}());var Pi,Ii=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ni=function(t){function e(e,n){return t.call(this,zr.DEFAULT_NAME,e,n)||this}return Ii(e,t),e.prototype.registerWithEmail=function(e,n){return t.prototype.registerWithEmailInternal.call(this,e,n)},e.prototype.confirmUser=function(e,n){return t.prototype.confirmUserInternal.call(this,e,n)},e.prototype.resendConfirmationEmail=function(e){return t.prototype.resendConfirmationEmailInternal.call(this,e)},e.prototype.resetPassword=function(e,n,r){return t.prototype.resetPasswordInternal.call(this,e,n,r)},e.prototype.sendResetPasswordEmail=function(e){return t.prototype.sendResetPasswordEmailInternal.call(this,e)},e.prototype.callResetPasswordFunction=function(e,n,r){return t.prototype.callResetPasswordFunctionInternal.call(this,e,n,r)},e}(Wr);(Pi||(Pi={})).factory=new(function(){function t(){}return t.prototype.getClient=function(t,e,n){return new Ni(e,n)},t}());var Ti={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(Ti.arrayBuffer)var ji=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],xi=ArrayBuffer.isView||function(t){return t&&ji.indexOf(Object.prototype.toString.call(t))>-1};function Di(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function Ci(t){return"string"!=typeof t&&(t=String(t)),t}function Ri(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return Ti.iterable&&(e[Symbol.iterator]=function(){return e}),e}function ki(t){this.map={},t instanceof ki?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function Bi(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function Mi(t){return new Promise((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function Ui(t){var e=new FileReader,n=Mi(e);return e.readAsArrayBuffer(t),n}function Li(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function Fi(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:Ti.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:Ti.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:Ti.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():Ti.arrayBuffer&&Ti.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=Li(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):Ti.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||xi(t))?this._bodyArrayBuffer=Li(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):Ti.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},Ti.blob&&(this.blob=function(){var t=Bi(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?Bi(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(Ui)}),this.text=function(){var t,e,n,r=Bi(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=Mi(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},Ti.formData&&(this.formData=function(){return this.text().then(qi)}),this.json=function(){return this.text().then(JSON.parse)},this}ki.prototype.append=function(t,e){t=Di(t),e=Ci(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},ki.prototype.delete=function(t){delete this.map[Di(t)]},ki.prototype.get=function(t){return t=Di(t),this.has(t)?this.map[t]:null},ki.prototype.has=function(t){return this.map.hasOwnProperty(Di(t))},ki.prototype.set=function(t,e){this.map[Di(t)]=Ci(e)},ki.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},ki.prototype.keys=function(){var t=[];return this.forEach((function(e,n){t.push(n)})),Ri(t)},ki.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),Ri(t)},ki.prototype.entries=function(){var t=[];return this.forEach((function(e,n){t.push([n,e])})),Ri(t)},Ti.iterable&&(ki.prototype[Symbol.iterator]=ki.prototype.entries);var $i=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function zi(t,e){var n,r,i=(e=e||{}).body;if(t instanceof zi){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new ki(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new ki(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),$i.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function qi(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}})),e}function Vi(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new ki(e.headers),this.url=e.url||"",this._initBody(t)}zi.prototype.clone=function(){return new zi(this,{body:this._bodyInit})},Fi.call(zi.prototype),Fi.call(Vi.prototype),Vi.prototype.clone=function(){return new Vi(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new ki(this.headers),url:this.url})},Vi.error=function(){var t=new Vi(null,{status:0,statusText:""});return t.type="error",t};var Wi=[301,302,303,307,308];Vi.redirect=function(t,e){if(-1===Wi.indexOf(e))throw new RangeError("Invalid status code");return new Vi(null,{status:e,headers:{location:t}})};var Yi=self.DOMException;try{new Yi}catch(t){(Yi=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),Yi.prototype.constructor=Yi}function Ki(t,e){return new Promise((function(n,r){var i=new zi(t,e);if(i.signal&&i.signal.aborted)return r(new Yi("Aborted","AbortError"));var o=new XMLHttpRequest;function s(){o.abort()}o.onload=function(){var t,e,r={status:o.status,statusText:o.statusText,headers:(t=o.getAllResponseHeaders()||"",e=new ki,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}})),e)};r.url="responseURL"in o?o.responseURL:r.headers.get("X-Request-URL");var i="response"in o?o.response:o.responseText;n(new Vi(i,r))},o.onerror=function(){r(new TypeError("Network request failed"))},o.ontimeout=function(){r(new TypeError("Network request failed"))},o.onabort=function(){r(new Yi("Aborted","AbortError"))},o.open(i.method,i.url,!0),"include"===i.credentials?o.withCredentials=!0:"omit"===i.credentials&&(o.withCredentials=!1),"responseType"in o&&Ti.blob&&(o.responseType="blob"),i.headers.forEach((function(t,e){o.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",s),o.onreadystatechange=function(){4===o.readyState&&i.signal.removeEventListener("abort",s)}),o.send(void 0===i._bodyInit?null:i._bodyInit)}))}Ki.polyfill=!0,self.fetch||(self.fetch=Ki,self.Headers=ki,self.Request=zi,self.Response=Vi);var Ji,Gi=function(){function t(){}return t.prototype.roundTrip=function(t){var e=Ki(t.url,{body:t.body,headers:t.headers,method:t.method,mode:"cors"}),n=e.then((function(t){return t.text()}));return Promise.all([e,n]).then((function(t){var e=t[0],n=t[1],r={};return e.headers.forEach((function(t,e){r[e]=t})),new ti(r,e.status,n)}))},t.prototype.stream=function(t,e,n){throw void 0===e&&(e=!0),new Bn(jn.StreamingNotSupported)},t}(),Hi=function(){function t(t){this.suiteName=t}return t.prototype.get=function(t){return localStorage.getItem(this.getKey(t))},t.prototype.set=function(t,e){localStorage.setItem(this.getKey(t),e)},t.prototype.remove=function(t){localStorage.removeItem(this.getKey(t))},t.prototype.getKey=function(t){return"__stitch.client."+this.suiteName+"."+t},t}(),Xi=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Qi=function(t){function e(e,n,r,i){var o=t.call(this,i)||this;return o.evtSrc=e,o.onOpenError=r,o.openedOnce=!1,o.evtSrc.onopen=function(t){n(o),o.openedOnce=!0},o.reset(),o}return Xi(e,t),e.prototype.open=function(){if(this.closed)throw new Bn(jn.StreamClosed)},e.prototype.afterClose=function(){this.evtSrc.close()},e.prototype.onReconnect=function(t){this.evtSrc=t.evtSrc,this.reset(),this.events=t.events.concat(this.events)},e.prototype.reset=function(){var t=this;this.evtSrc.onmessage=function(e){t.events.push(new Mn(Mn.MESSAGE_EVENT,e.data)),t.poll()},this.evtSrc.onerror=function(e){return e instanceof MessageEvent?(t.lastErr=e.data,t.events.push(new Mn(Un.ERROR_EVENT_NAME,t.lastErr)),t.close(),void t.poll()):t.openedOnce?(t.evtSrc.close(),void t.reconnect()):(t.close(),void t.onOpenError(new Error("event source failed to open and will not reconnect; check network log for more details")))}},e}(Qr),Zi=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),to=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},eo=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Zi(e,t),e.prototype.stream=function(t,e,n){void 0===e&&(e=!0);var r=to({},t.headers);return r[gn.ACCEPT]=vn.TEXT_EVENT_STREAM,r[gn.CONTENT_TYPE]=vn.TEXT_EVENT_STREAM,Ki(t.url+"&stitch_validate=true",{body:t.body,headers:r,method:t.method,mode:"cors"}).then((function(e){var r={};return e.headers.forEach((function(t,e){r[e]=t})),e.status<200||e.status>=300?e.text().then((function(t){return _n(new ti(r,e.status,t))})):new Promise((function(e,r){return new Qi(new EventSource(t.url),(function(t){return e(t)}),(function(t){return r(t)}),n?function(){return n().then((function(t){return t}))}:void 0)}))}))},e}(Gi),no=function(){function t(t){this.proxy=t}return t.prototype.callFunction=function(t,e,n){return this.proxy.callFunction(t,e,n)},t.prototype.streamFunction=function(t,e,n){return this.proxy.streamFunction(t,e,n)},t}(),ro=n("SjWX");!function(t){t.StitchError="_stitch_error",t.State="_stitch_state",t.UserAuth="_stitch_ua",t.LinkUser="_stitch_link_user",t.StitchLink="_stitch_link",t.ClientAppId="_stitch_client_app_id"}(Ji||(Ji={}));var io,oo=Ji;!function(t){t.ProviderName="_stitch_redirect_provider_name",t.ProviderType="_stitch_redirect_provider_type",t.State="_stitch_redirect_state"}(io||(io={}));var so=io,uo=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ao=function(t){function e(e){return t.call(this,e)||this}return uo(e,t),e}(sn),co=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),lo=function(t){function e(e,n,r,i,o,s,u){var a=t.call(this,e,n,r,i,o,s)||this;return a.auth=u,a}return co(e,t),e.prototype.linkWithCredential=function(t){return this.auth.linkWithCredential(this,t)},e.prototype.linkUserWithRedirect=function(t){return this.auth.linkWithRedirectInternal(this,t)},e}(Or),fo=function(){function t(t){this.auth=t}return t.prototype.makeUser=function(t,e,n,r,i,o){return new lo(t,e,n,r,i,o,this.auth)},t}(),ho=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),po=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s},yo="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",bo=function(t){function e(e,n,r,i,o){void 0===o&&(o=window);var s=t.call(this,e,n,r)||this;return s.browserAuthRoutes=n,s.authStorage=r,s.appInfo=i,s.jsdomWindow=o,s.listeners=new Set,s.synchronousListeners=new Set,s}return ho(e,t),Object.defineProperty(e.prototype,"userFactory",{get:function(){return new fo(this)},enumerable:!0,configurable:!0}),e.prototype.getProviderClient=function(t,e){return function(t){return void 0!==t.getClient}(t)?t.getClient(this,this.requestClient,this.authRoutes):t.getNamedClient(e,this.requestClient,this.authRoutes)},e.prototype.loginWithCredential=function(e){return t.prototype.loginWithCredentialInternal.call(this,e)},e.prototype.loginWithRedirect=function(t){var e=this,n=this.prepareRedirect(t),r=n.redirectUrl,i=n.state;this.requestClient.getBaseURL().then((function(n){e.jsdomWindow.location.replace(n+e.browserAuthRoutes.getAuthProviderRedirectRoute(t,r,i,e.deviceInfo))}))},e.prototype.linkWithRedirectInternal=function(t,n){var r=this;if(void 0!==this.user&&t.id!==this.user.id)return Promise.reject(new Bn(jn.UserNoLongerValid));var i=this.prepareRedirect(n),o=i.redirectUrl,s=i.state;return this.requestClient.getBaseURL().then((function(t){var i=t+r.browserAuthRoutes.getAuthProviderLinkRedirectRoute(n,o,s,r.deviceInfo);return(e.injectedFetch?e.injectedFetch:fetch)(new Request(i,{credentials:"include",headers:{Authorization:"Bearer "+r.authInfo.accessToken},mode:"cors"}))})).then((function(t){r.jsdomWindow.location.replace(t.headers.get("X-Stitch-Location"))}))},e.prototype.hasRedirectResult=function(){var t=!1;try{return t=this.parseRedirect().isValid}catch(t){return!1}finally{t||this.cleanupRedirect()}},e.prototype.handleRedirectResult=function(){try{var t=this.authStorage.get(so.ProviderName),e=this.authStorage.get(so.ProviderType),n=this.parseRedirect();return this.loginWithCredentialInternal(new $n(this.processRedirectResult(n),e,t,n.asLink)).then((function(t){return t}))}catch(t){return Promise.reject(t)}},e.prototype.linkWithCredential=function(e,n){return t.prototype.linkUserWithCredentialInternal.call(this,e,n)},e.prototype.logout=function(){return arguments.length>0?Promise.reject(new Bn(jn.UnexpectedArguments)):t.prototype.logoutInternal.call(this)},e.prototype.logoutUserWithId=function(e){return t.prototype.logoutUserWithIdInternal.call(this,e)},e.prototype.removeUser=function(){return arguments.length>0?Promise.reject(new Bn(jn.UnexpectedArguments)):t.prototype.removeUserInternal.call(this)},e.prototype.removeUserWithId=function(e){return t.prototype.removeUserWithIdInternal.call(this,e)},Object.defineProperty(e.prototype,"deviceInfo",{get:function(){var t={};this.hasDeviceId&&(t[Sr.DEVICE_ID]=this.deviceId),void 0!==this.appInfo.localAppName&&(t[Sr.APP_ID]=this.appInfo.localAppName),void 0!==this.appInfo.localAppVersion&&(t[Sr.APP_VERSION]=this.appInfo.localAppVersion);var e=Object(ro.detect)();return e?(t[Sr.PLATFORM]=e.name,t[Sr.PLATFORM_VERSION]=e.version):(t[Sr.PLATFORM]="web",t[Sr.PLATFORM_VERSION]="0.0.0"),t[Sr.SDK_VERSION]="4.7.1",t},enumerable:!0,configurable:!0}),e.prototype.addAuthListener=function(t){this.listeners.add(t),this.onAuthEvent(t),this.dispatchAuthEvent({kind:He.ListenerRegistered})},e.prototype.addSynchronousAuthListener=function(t){this.listeners.add(t),this.onAuthEvent(t),this.dispatchAuthEvent({kind:He.ListenerRegistered})},e.prototype.removeAuthListener=function(t){this.listeners.delete(t)},e.prototype.onAuthEvent=function(t){var e=this;if(t)new Promise((function(n){t.onAuthEvent&&t.onAuthEvent(e),n(void 0)}));else this.listeners.forEach((function(t){e.onAuthEvent(t)}))},e.prototype.dispatchAuthEvent=function(t){var e=this;switch(t.kind){case He.ActiveUserChanged:this.dispatchBlockToListeners((function(n){n.onActiveUserChanged&&n.onActiveUserChanged(e,t.currentActiveUser,t.previousActiveUser)}));break;case He.ListenerRegistered:this.dispatchBlockToListeners((function(t){t.onListenerRegistered&&t.onListenerRegistered(e)}));break;case He.UserAdded:this.dispatchBlockToListeners((function(n){n.onUserAdded&&n.onUserAdded(e,t.addedUser)}));break;case He.UserLinked:this.dispatchBlockToListeners((function(n){n.onUserLinked&&n.onUserLinked(e,t.linkedUser)}));break;case He.UserLoggedIn:this.dispatchBlockToListeners((function(n){n.onUserLoggedIn&&n.onUserLoggedIn(e,t.loggedInUser)}));break;case He.UserLoggedOut:this.dispatchBlockToListeners((function(n){n.onUserLoggedOut&&n.onUserLoggedOut(e,t.loggedOutUser)}));break;case He.UserRemoved:this.dispatchBlockToListeners((function(n){n.onUserRemoved&&n.onUserRemoved(e,t.removedUser)}));break;default:return this.assertNever(t)}},e.prototype.assertNever=function(t){throw new Error("unexpected object: "+t)},e.prototype.dispatchBlockToListeners=function(t){this.synchronousListeners.forEach(t),this.listeners.forEach((function(e){new Promise((function(n){t(e),n(void 0)}))}))},e.prototype.cleanupRedirect=function(){this.jsdomWindow.history.replaceState(null,"",this.pageRootUrl()),this.authStorage.remove(so.State),this.authStorage.remove(so.ProviderName),this.authStorage.remove(so.ProviderType)},e.prototype.parseRedirect=function(){if(void 0===this.jsdomWindow)throw new ao("running in a non-browser environment");if(!this.jsdomWindow.location||!this.jsdomWindow.location.hash)throw new ao("window location hash was undefined");var t=this.authStorage.get(so.State);return function(t,e,n){var r=t.split("&"),i=new vo;return r.forEach((function(t){var r=t.split("=");switch(decodeURIComponent(r[0])){case oo.StitchError:i.lastError=decodeURIComponent(r[1]);break;case oo.UserAuth:try{i.authInfo=function(t){var e=t.split("$");if(4!==e.length)throw new ao("invalid user auth data provided while marshalling user authentication data: "+t);var n=po(e,4),r=n[0],i=n[1],o=n[2],s=n[3];return new tn(o,s,r,i)}(decodeURIComponent(r[1]))}catch(t){i.lastError=t}break;case oo.StitchLink:"ok"===r[1]&&(i.asLink=!0);break;case oo.State:var o=decodeURIComponent(r[1]);e===o&&(i.stateValid=!0);break;case oo.ClientAppId:var s=decodeURIComponent(r[1]);n===s&&(i.clientAppIdValid=!0)}})),i}(this.jsdomWindow.location.hash.substring(1),t,this.appInfo.clientAppId)},e.prototype.processRedirectResult=function(t){try{if(!t.isValid)throw new ao("invalid redirect result");if(t.lastError)throw new ao("error handling redirect: "+t.lastError);if(!t.authInfo)throw new ao("no user auth value was found: it could not be decoded from fragment")}catch(t){throw t}finally{this.cleanupRedirect()}return t.authInfo},e.prototype.prepareRedirect=function(t){this.authStorage.set(so.ProviderName,t.providerName),this.authStorage.set(so.ProviderType,t.providerType);var e=t.redirectUrl;void 0===e&&(e=this.pageRootUrl());var n=function(){for(var t="",e=0;e<64;++e)t+=yo.charAt(Math.floor(Math.random()*yo.length));return t}();return this.authStorage.set(so.State,n),{redirectUrl:e,state:n}},e.prototype.pageRootUrl=function(){return[this.jsdomWindow.location.protocol,"//",this.jsdomWindow.location.host,this.jsdomWindow.location.pathname].join("")},e}(wr);var vo=function(){function t(){this.stateValid=!1,this.clientAppIdValid=!1,this.asLink=!1}return Object.defineProperty(t.prototype,"isValid",{get:function(){return this.stateValid&&this.clientAppIdValid},enumerable:!0,configurable:!0}),t}();var go=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),mo=function(t){function e(e){return t.call(this,e)||this}return go(e,t),e.prototype.getAuthProviderRedirectRoute=function(t,e,n,r){return this.getAuthProviderLoginRoute(t.providerName)+"?redirect="+encodeURI(e)+"&state="+n+"&device="+this.uriEncodeObject(r)},e.prototype.getAuthProviderLinkRedirectRoute=function(t,e,n,r){return this.getAuthProviderLoginRoute(t.providerName)+"?redirect="+encodeURI(e)+"&state="+n+"&device="+this.uriEncodeObject(r)+"&link=true&providerRedirectHeader=true"},e.prototype.uriEncodeObject=function(t){return encodeURIComponent(Vn(JSON.stringify(t)))},e}(ui),_o=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),wo=function(t){function e(e){var n=t.call(this,e)||this;return n.authRoutes=new mo(e),n}return _o(e,t),e}(fi),Oo=function(){function t(t,e){this.info=new Ei(t,e.dataDirectory,e.localAppName,e.localAppVersion),this.routes=new wo(this.info.clientAppId);var n=new yi(t,e.baseUrl,e.transport);this.auth=new bo(n,this.routes.authRoutes,e.storage,this.info),this.coreClient=new Hr(this.auth,this.routes),this.serviceClients=[],this.auth.addSynchronousAuthListener(this)}return t.prototype.getServiceClient=function(t,e){if(function(t){return void 0!==t.getClient}(t)){var n=new Gr(this.auth,this.routes.serviceRoutes,"");return this.bindServiceClient(n),t.getClient(n,this.info)}n=new Gr(this.auth,this.routes.serviceRoutes,e);return this.bindServiceClient(n),t.getNamedClient(n,this.info)},t.prototype.getGeneralServiceClient=function(t){var e=new Gr(this.auth,this.routes.serviceRoutes,t);return this.bindServiceClient(e),new no(e)},t.prototype.callFunction=function(t,e){return this.coreClient.callFunction(t,e)},t.prototype.onActiveUserChanged=function(t,e,n){this.onRebindEvent(new gi({currentActiveUser:e,kind:He.ActiveUserChanged,previousActiveUser:n}))},t.prototype.bindServiceClient=function(t){this.serviceClients.push(t)},t.prototype.onRebindEvent=function(t){this.serviceClients.forEach((function(e){e.onRebindEvent(t)}))},t}();var Eo,So={},Ao=function(){function t(){}return Object.defineProperty(t,"defaultAppClient",{get:function(){if(void 0===t.defaultClientAppId)throw new Error("default app client has not yet been initialized/set");return So[t.defaultClientAppId]},enumerable:!0,configurable:!0}),t.getAppClient=function(t){if(void 0===So[t])throw new Error("client for app '"+t+"' has not yet been initialized");return So[t]},t.hasAppClient=function(t){return void 0!==So[t]},t.initializeDefaultAppClient=function(e,n){if(void 0===n&&(n=(new wi.Builder).build()),void 0===e||""===e)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==t.defaultClientAppId)throw new Error("default app can only be set once; currently set to '"+t.defaultClientAppId+"'");var r=t.initializeAppClient(e,n);return t.defaultClientAppId=e,r},t.initializeAppClient=function(e,n){if(void 0===n&&(n=(new wi.Builder).build()),void 0===e||""===e)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==So[e])throw new Error("client for app '"+e+"' has already been initialized");var r=n.builder?n.builder():new wi.Builder(n);void 0===r.storage&&r.withStorage(new Hi(e)),void 0===r.transport&&(window.EventSource?r.withTransport(new eo):r.withTransport(new Gi)),void 0!==r.baseUrl&&""!==r.baseUrl||r.withBaseUrl("https://stitch.mongodb.com"),void 0!==r.localAppName&&""!==r.localAppName||r.withLocalAppName(t.localAppName),void 0!==r.localAppVersion&&""!==r.localAppVersion||r.withLocalAppVersion(t.localAppVersion);var i=new Oo(e,r.build());return So[e]=i,i},t.clearApps=function(){So={}},t}(),Po=function(){function t(t,e,n,r){this.command=t,this.args=e,this.service=n,r&&(this.collectionDecoder=new(function(){function t(){}return t.prototype.decode=function(t){return t instanceof Array?t.map((function(t){return r.decode(t)})):[r.decode(t)]},t}()))}return t.prototype.iterator=function(){return this.executeRead().then((function(t){return t[Symbol.iterator]()}))},t.prototype.first=function(){return this.executeRead().then((function(t){return t[0]}))},t.prototype.toArray=function(){return this.executeRead()},t.prototype.asArray=function(){return this.toArray()},t.prototype.executeRead=function(){return this.service.callFunction(this.command,[this.args],this.collectionDecoder)},t}();function Io(t){switch(t){case"insert":return Eo.Insert;case"delete":return Eo.Delete;case"replace":return Eo.Replace;case"update":return Eo.Update;default:return Eo.Unknown}}!function(t){t.Insert="insert",t.Delete="delete",t.Replace="replace",t.Update="update",t.Unknown="unknown"}(Eo||(Eo={}));var No,To,jo,xo,Do,Co,Ro,ko=function(t){var e={};t.forEach((function(t,n){e[n]=t})),this.insertedIds=e};!function(t){t.InsertedIds="insertedIds"}(No||(No={})),function(t){t.InsertedId="insertedId"}(To||(To={})),function(t){t.MatchedCount="matchedCount",t.ModifiedCount="modifiedCount",t.UpsertedId="upsertedId"}(jo||(jo={})),function(t){t.DeletedCount="deletedCount"}(xo||(xo={})),function(t){t.UpdatedFields="updatedFields",t.RemovedFields="removedFields"}(Do||(Do={})),function(t){t.Id="_id",t.OperationType="operationType",t.FullDocument="fullDocument",t.DocumentKey="documentKey",t.Namespace="ns",t.NamespaceDb="db",t.NamespaceColl="coll",t.UpdateDescription="updateDescription"}(Co||(Co={})),function(t){t.OperationType="ot",t.FullDocument="fd",t.DocumentKey="dk",t.UpdateDescription="ud",t.StitchDocumentVersion="sdv",t.StitchDocumentHash="sdh"}(Ro||(Ro={}));var Bo=function(){function t(){}return t.prototype.decode=function(t){return new ko(t[No.InsertedIds])},t}(),Mo=function(){function t(){}return t.prototype.decode=function(t){return{insertedId:t[To.InsertedId]}},t}(),Uo=function(){function t(){}return t.prototype.decode=function(t){return{matchedCount:t[jo.MatchedCount],modifiedCount:t[jo.ModifiedCount],upsertedId:t[jo.UpsertedId]}},t}(),Lo=function(){function t(){}return t.prototype.decode=function(t){return{deletedCount:t[xo.DeletedCount]}},t}(),Fo=function(){function t(){}return t.prototype.decode=function(t){return Zn.keyPresent(Do.UpdatedFields,t),Zn.keyPresent(Do.RemovedFields,t),{removedFields:t[Do.RemovedFields],updatedFields:t[Do.UpdatedFields]}},t}();function $o(t,e,n,r){var i,o;return i=e in t?Wo.updateDescriptionDecoder.decode(t[e]):void 0,n in t?(o=t[n],r&&(o=r.decode(o))):o=void 0,{updateDescription:i,fullDocument:o}}var zo,qo=function(){function t(t){this.decoder=t}return t.prototype.decode=function(t){Zn.keyPresent(Co.Id,t),Zn.keyPresent(Co.OperationType,t),Zn.keyPresent(Co.Namespace,t),Zn.keyPresent(Co.DocumentKey,t);var e=t[Co.Namespace],n=$o(t,Co.UpdateDescription,Co.FullDocument,this.decoder),r=n.updateDescription,i=n.fullDocument;return{documentKey:t[Co.DocumentKey],fullDocument:i,id:t[Co.Id],namespace:{collection:e[Co.NamespaceColl],database:e[Co.NamespaceDb]},operationType:Io(t[Co.OperationType]),updateDescription:r}},t}(),Vo=function(){function t(t){this.decoder=t}return t.prototype.decode=function(t){Zn.keyPresent(Ro.OperationType,t),Zn.keyPresent(Ro.DocumentKey,t);var e,n,r=$o(t,Ro.UpdateDescription,Ro.FullDocument,this.decoder),i=r.updateDescription,o=r.fullDocument;return e=Ro.StitchDocumentVersion in t?t[Ro.StitchDocumentVersion]:void 0,n=Ro.StitchDocumentHash in t?t[Ro.StitchDocumentHash]:void 0,{documentKey:t[Ro.DocumentKey],fullDocument:o,operationType:Io(t[Ro.OperationType]),stitchDocumentHash:n,stitchDocumentVersion:e,updateDescription:i}},t}(),Wo=function(){function t(){}return t.remoteInsertManyResultDecoder=new Bo,t.remoteInsertOneResultDecoder=new Mo,t.remoteUpdateResultDecoder=new Uo,t.remoteDeleteResultDecoder=new Lo,t.updateDescriptionDecoder=new Fo,t.ChangeEventDecoder=qo,t.CompactChangeEventDecoder=Vo,t}(),Yo=Wo,Ko=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},Jo=function(){function t(t,e,n,r){var i=this;this.name=t,this.databaseName=e,this.service=n,this.codec=r,this.namespace=this.databaseName+"."+this.name,this.baseOperationArgs={collection:i.name,database:i.databaseName}}return t.prototype.withCollectionType=function(e){return new t(this.name,this.databaseName,this.service,e)},t.prototype.find=function(t,e){void 0===t&&(t={});var n=Ko({},this.baseOperationArgs);return n.query=t,e&&(e.limit&&(n.limit=e.limit),e.projection&&(n.project=e.projection),e.sort&&(n.sort=e.sort)),new Po("find",n,this.service,this.codec)},t.prototype.findOne=function(t,e){void 0===t&&(t={});var n=Ko({},this.baseOperationArgs);return n.query=t,e&&(e.projection&&(n.project=e.projection),e.sort&&(n.sort=e.sort)),this.service.callFunction("findOne",[n],this.codec)},t.prototype.findOneAndUpdate=function(t,e,n){var r=Ko({},this.baseOperationArgs);return r.filter=t,r.update=e,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndUpdate",[r],this.codec)},t.prototype.findOneAndReplace=function(t,e,n){var r=Ko({},this.baseOperationArgs);return r.filter=t,r.update=e,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndReplace",[r],this.codec)},t.prototype.findOneAndDelete=function(t,e){var n=Ko({},this.baseOperationArgs);return n.filter=t,e&&(e.projection&&(n.projection=e.projection),e.sort&&(n.sort=e.sort)),this.service.callFunction("findOneAndDelete",[n],this.codec)},t.prototype.aggregate=function(t){var e=Ko({},this.baseOperationArgs);return e.pipeline=t,new Po("aggregate",e,this.service,this.codec)},t.prototype.count=function(t,e){void 0===t&&(t={});var n=Ko({},this.baseOperationArgs);return n.query=t,e&&e.limit&&(n.limit=e.limit),this.service.callFunction("count",[n])},t.prototype.insertOne=function(t){var e=Ko({},this.baseOperationArgs);return e.document=this.generateObjectIdIfMissing(this.codec?this.codec.encode(t):t),this.service.callFunction("insertOne",[e],Yo.remoteInsertOneResultDecoder)},t.prototype.insertMany=function(t){var e=this,n=Ko({},this.baseOperationArgs);return n.documents=t.map((function(t){return e.generateObjectIdIfMissing(e.codec?e.codec.encode(t):t)})),this.service.callFunction("insertMany",[n],Yo.remoteInsertManyResultDecoder)},t.prototype.deleteOne=function(t){return this.executeDelete(t,!1)},t.prototype.deleteMany=function(t){return this.executeDelete(t,!0)},t.prototype.updateOne=function(t,e,n){return this.executeUpdate(t,e,n,!1)},t.prototype.updateMany=function(t,e,n){return this.executeUpdate(t,e,n,!0)},t.prototype.watch=function(t){var e=Ko({},this.baseOperationArgs);return void 0!==t&&(t instanceof Array?0!==t.length&&(e.ids=t):t instanceof Object&&(e.filter=t)),e.useCompactEvents=!1,this.service.streamFunction("watch",[e],new Yo.ChangeEventDecoder(this.codec))},t.prototype.watchCompact=function(t){var e=Ko({},this.baseOperationArgs);return e.ids=t,e.useCompactEvents=!0,this.service.streamFunction("watch",[e],new Yo.CompactChangeEventDecoder(this.codec))},t.prototype.executeDelete=function(t,e){var n=Ko({},this.baseOperationArgs);return n.query=t,this.service.callFunction(e?"deleteMany":"deleteOne",[n],Yo.remoteDeleteResultDecoder)},t.prototype.executeUpdate=function(t,e,n,r){void 0===r&&(r=!1);var i=Ko({},this.baseOperationArgs);return i.query=t,i.update=e,n&&n.upsert&&(i.upsert=n.upsert),this.service.callFunction(r?"updateMany":"updateOne",[i],Yo.remoteUpdateResultDecoder)},t.prototype.generateObjectIdIfMissing=function(t){if(!t._id){var e=t;return e._id=new Qe.b.ObjectID,e}return t},t}(),Go=function(){function t(t,e){this.name=t,this.service=e}return t.prototype.collection=function(t,e){return new Jo(t,this.name,this.service,e)},t}(),Ho=function(){function t(t){this.service=t}return t.prototype.db=function(t){return new Go(t,this.service)},t}(),Xo=function(){function t(t){this.proxy=t}return t.prototype.next=function(){return Promise.resolve(this.proxy.next().value)},t}(),Qo=function(){function t(t){this.proxy=t}return t.prototype.first=function(){return this.proxy.first()},t.prototype.toArray=function(){return this.proxy.toArray()},t.prototype.asArray=function(){return this.toArray()},t.prototype.iterator=function(){return this.proxy.iterator().then((function(t){return new Xo(t)}))},t}(),Zo=function(){function t(t){this.proxy=t,this.namespace=this.proxy.namespace}return t.prototype.withCollectionType=function(e){return new t(this.proxy.withCollectionType(e))},t.prototype.count=function(t,e){return this.proxy.count(t,e)},t.prototype.find=function(t,e){return new Qo(this.proxy.find(t,e))},t.prototype.findOne=function(t,e){return this.proxy.findOne(t,e)},t.prototype.findOneAndUpdate=function(t,e,n){return this.proxy.findOneAndUpdate(t,e,n)},t.prototype.findOneAndReplace=function(t,e,n){return this.proxy.findOneAndReplace(t,e,n)},t.prototype.findOneAndDelete=function(t,e){return this.proxy.findOneAndDelete(t,e)},t.prototype.aggregate=function(t){return new Qo(this.proxy.aggregate(t))},t.prototype.insertOne=function(t){return this.proxy.insertOne(t)},t.prototype.insertMany=function(t){return this.proxy.insertMany(t)},t.prototype.deleteOne=function(t){return this.proxy.deleteOne(t)},t.prototype.deleteMany=function(t){return this.proxy.deleteMany(t)},t.prototype.updateOne=function(t,e,n){return this.proxy.updateOne(t,e,n)},t.prototype.updateMany=function(t,e,n){return this.proxy.updateMany(t,e,n)},t.prototype.watch=function(t){return this.proxy.watch(t)},t.prototype.watchCompact=function(t){return this.proxy.watchCompact(t)},t}(),ts=function(){function t(t){this.proxy=t,this.name=this.proxy.name}return t.prototype.collection=function(t,e){return new Zo(this.proxy.collection(t,e))},t}(),es=function(){function t(t){this.proxy=t}return t.prototype.db=function(t){return new ts(this.proxy.db(t))},t}();(zo||(zo={})).factory=new(function(){function t(){}return t.prototype.getNamedClient=function(t,e){return new es(new Ho(t))},t}());var ns,rs,is,os=function t(e){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),{id:e._id.toString(),title:e.title,content:e.content}},ss={appID:"blog-tjxya",dbName:"blog",postsCollectionName:"posts"},us=Ao.initializeDefaultAppClient(ss.appID),as=us.getServiceClient(zo.factory,"mongodb-atlas").db(ss.dbName),cs=(rs=(ns={db:as,client:us}).db,is=ns.client,function(t){return new Promise((function(e,n){is.auth.loginWithCredential(new Pr).then((function(){return rs.collection("posts").find({type:"text",last_modified:{$gt:t||0}}).asArray()})).then((function(t){e(t.map((function(t){return new os(t)})))})).catch(n)}))}),ls=n("JXZH"),fs=n("zwBs"),hs=n.n(fs);function ds(t){return(ds="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ps(t,e){return!e||"object"!==ds(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ys(t){return(ys=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function bs(t,e){return(bs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var vs,gs,ms,_s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),ps(this,ys(e).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&bs(t,e)}(e,t),e}(ls.Model);ms="posts",(gs="table")in(vs=_s)?Object.defineProperty(vs,gs,{value:ms,enumerable:!0,configurable:!0,writable:!0}):vs[gs]=ms;var ws=Object(ls.appSchema)({version:1,tables:[Object(ls.tableSchema)({name:"posts",columns:[{name:"title",type:"string"},{name:"content",type:"string"}]})]}),Os=new hs.a({schema:ws,useWebWorker:!1}),Es=new ls.Database({adapter:Os,modelClasses:[_s],actionsEnabled:!0}),Ss=function(t){return function(e){return Promise.all(e.map(function(t){return function(e){var n=e.title,r=e.content;return t.action((function(){return regeneratorRuntime.async((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(t.collections.get("posts").create((function(t){t.title=n,t.content=r})));case 2:e.sent;case 3:case"end":return e.stop()}}))}))}}(t)))}},As=n("1gTA");function Ps(t){return(Ps="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Is(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ns(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ts(t,e,n){return e&&Ns(t.prototype,e),n&&Ns(t,n),t}function js(t,e){return!e||"object"!==Ps(e)&&"function"!=typeof e?Ds(t):e}function xs(t){return(xs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ds(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Cs(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Rs(t,e)}function Rs(t,e){return(Rs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ks(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Bs=function(t,e){var n;return function(){if(t){var r=t.apply(this,arguments);return n=e||r,t=null,r}return n}},Ms=(Bs((function(){return cs().then(Ss(Es))}),Promise.resolve()),Bs((function(){return regeneratorRuntime.async((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,regeneratorRuntime.awrap(Object(As.synchronize)({database:Es,pullChanges:function(t){var e,n;return regeneratorRuntime.async((function(r){for(;;)switch(r.prev=r.next){case 0:return e=t.lastPulledAt,r.next=3,regeneratorRuntime.awrap(cs(1e3*e));case 3:return n=r.sent,r.abrupt("return",{changes:{posts:{created:n,updated:[],deleted:[]}},timestamp:Date.now()});case 5:case"end":return r.stop()}}))},pushChanges:function(t){return regeneratorRuntime.async((function(e){for(;;)switch(e.prev=e.next){case 0:t.changes,t.lastPulledAt;case 1:case"end":return e.stop()}}))}}));case 2:case"end":return t.stop()}}))}),Promise.resolve())),Us=function(t){return t._raw},Ls=function(t){return t.map(Us)};window.db=Es;var Fs,$s=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return Promise.resolve()},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"payload",n=function(n){function r(){var t,n,i;Is(this,r);for(var o=arguments.length,s=new Array(o),u=0;u<o;u++)s[u]=arguments[u];return ks(Ds(i=js(this,(t=xs(r)).call.apply(t,[this].concat(s)))),"state",(ks(n={loading:!0},e,null),ks(n,"error",null),n)),i}return Cs(r,n),Ts(r,[{key:"componentDidMount",value:function(){var n=this;t().then((function(t){var r;n.setState((ks(r={},e,t),ks(r,"loading",!1),r))})).catch((function(t){n.setState({error:t,loading:!1})}))}},{key:"render",value:function(){var t=this.props,e=t.spinner,n=t.errorView;return e&&this.state.loading?e:n&&this.state.error?n:this.props.children(this.state)}}]),r}(i.a.PureComponent);return n}((function(){return Ms().then((function(){return Es.collections.get(Fs).query().fetch()})).then(Ls)}),Fs="posts");function zs(t){return(zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function qs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Vs(t,e){return!e||"object"!==zs(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ws(t){return(Ws=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ys(t,e){return(Ys=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Ks=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=Vs(this,Ws(e).call(this,t))).state={hasError:!1},n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ys(t,e)}(e,t),n=e,(r=[{key:"componentDidCatch",value:function(t,e){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?null:this.props.children}}])&&qs(n.prototype,r),i&&qs(n,i),e}(i.a.Component),Js=n("+eFp"),Gs=n.n(Js);n("O5PD");function Hs(t){return(Hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Qs(t){return(Qs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Zs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function tu(t,e){return(tu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var eu=function(t){function e(t){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(t,e){return!e||"object"!==Hs(e)&&"function"!=typeof e?Zs(t):e}(this,Qs(e).call(this,t)),function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(Zs(n),"renderImg",(function(){return n.props.disableAnimation||Object(u.l)()?i.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style}):i.a.createElement(Gs.a,{component:i.a.Fragment,transitionName:"example",transitionEnterTimeout:300,transitionLeaveTimeout:300},i.a.createElement(Ut,{tooltip:n.props.tooltip},(function(t){var e=t.showTooltip,r=t.hideTooltip;return i.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style,onMouseEnter:e,onMouseLeave:r})})))}));var r=u.s.get(t.url);return n.state={loading:!r,error:null},n.loadImage=n.loadImage.bind(Zs(n)),n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&tu(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){this.loadImage(this.props.src)}},{key:"componentWillReceiveProps",value:function(t){this.props.src!==t.src&&this.loadImage(t.src)}},{key:"loadImage",value:function(t){var e=this,n=this.props.onLoad||u.n;if(u.s.get(t))return n(t),void this.setState({loading:!1});this.setState({loading:!0}),Object(u.g)(t).then((function(){n(t),e.setState({loading:!1})})).catch((function(t){e.setState({loading:!1,error:t})}))}},{key:"render",value:function(){return this.state.error?":(":this.state.loading&&!this.props.loaded?!this.props.hideSpinner&&i.a.createElement(ye,null):this.renderImg()}}])&&Xs(n.prototype,r),o&&Xs(n,o),e}(i.a.Component);function nu(){return(nu=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function ru(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function iu(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var ou=function(t){var e=t.photo,n=t.className,o=t.showTitle,s=iu(t,["photo","className","showTitle"]),u=ru(Object(r.useState)(!0),2),a=u[0],c=u[1];return i.a.createElement("div",{className:"post ".concat(n)},i.a.createElement("div",{className:"post-content"},i.a.createElement(eu,nu({src:e.url,onLoad:function(){c(!1)}},s,{tooltip:e.title}),i.a.createElement("div",{className:"image-title",style:{color:"#fff"}},e.title)),o&&!a&&i.a.createElement("div",{className:"photo-title"},e.title||"-")))};function su(){return(su=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function uu(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var au=ot((function(t){var e=t.id,n=t.match,r=uu(t,["id","match"]);return i.a.createElement(D,{id:e||n.params.id},(function(t){return i.a.createElement(ou,su({photo:t},r))}))}),st);n("1zZr"),n("8zDj");function cu(t){return(cu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function lu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function fu(t){return(fu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function hu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function du(t,e){return(du=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function pu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var yu=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(t,e){return!e||"object"!==cu(e)&&"function"!=typeof e?hu(t):e}(this,fu(e).call(this,t)),pu(hu(n),"renderTick",(function(){var t=n.state.currentIndex,e=n.props.photos,r=n.props.post&&n.props.post._id,o=e.length,s=function(t){var e=t.id;return i.a.createElement("div",{className:"link-to-post"},i.a.createElement("div",{onClick:function(){oe(e)}}))},a=ot((function(t){return[n.props.post?i.a.createElement(s,{id:r}):null,i.a.createElement(At,t)]}),st);n.props.setSideSpaceContent(i.a.createElement(a,{current:t+1,total:o,onDrop:Object(u.t)(n.goto,300),onClick:Object(u.t)(n.next,300),absRight:!0}))})),pu(hu(n),"handleCurrentImgLoad",(function(){n.setState({isCurrentImgReady:!0},(function(){n.props.thumbnailMode||n.renderTick()}))})),pu(hu(n),"preLoadPhotos",(function(t){t.map(u.g)})),pu(hu(n),"nextIndex",(function(t){return t+1<=n.props.photos.length-1?t+1:0})),pu(hu(n),"goto",(function(t){console.log("goto"),n.props.photos.length&&n.setState({currentIndex:t-1},n.renderTick)})),pu(hu(n),"next",(function(){if(console.log("next"),n.props.photos.length){n.setState({isCurrentImgReady:!1});var t=n.props.photos.length;n.state.currentIndex<t-1?n.setState((function(t){return{currentIndex:t.currentIndex+1}}),n.renderTick):n.setState({currentIndex:0},n.renderTick)}})),n.state={currentIndex:0,isCurrentImgReady:!1},n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&du(t,e)}(e,t),n=e,(r=[{key:"componentDidMount",value:function(){var t=this.props.photos.map((function(t){return t.url}));this.preLoadPhotos(t)}},{key:"componentWillUnmount",value:function(){this.props.setSideSpaceContent(null)}},{key:"render",value:function(){var t=this.state.currentIndex,e=this.props.photos,n=e.length,r=n>1;return e&&e.length?i.a.createElement("div",{className:"photos",style:{maxWidth:this.props.thumbnailMode?30:"unset"},"data-prog":"".concat(t+1," of ").concat(e.length)},i.a.createElement(ou,{photo:e[t],onLoad:this.handleCurrentImgLoad,onClick:r?Object(u.t)(this.next,300):u.n,style:{cursor:r?"pointer":"default"},hideSpinner:this.props.hideSpinner}),this.props.showNextThumbnail&&r&&this.state.isCurrentImgReady&&i.a.createElement("div",{className:"thumbnail-progress-wrapper"},i.a.createElement(ou,{photo:e[this.nextIndex(t)],className:rt()("thumbnail",{hide:!this.state.isCurrentImgReady}),disableAnimation:!0,onClick:r?Object(u.t)(this.next,300):u.n,style:{cursor:r?"pointer":"default"},hideSpinner:!0}),Object(u.l)()&&i.a.createElement(It,{current:t+1,total:n}))):":( not found"}}])&&lu(n.prototype,r),o&&lu(n,o),e}(i.a.Component),bu=z(yu);function vu(){return(vu=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function gu(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var mu=function(t){var e=t.id,n=t.match,r=gu(t,["id","match"]),o=V(g.ENABLE_IMAGES_FLOW).status&&!t.thumbnailMode||Object(u.l)();return i.a.createElement(ze,{id:e||n.params.id,spinner:r.spinner},(function(t){var e=t.photos,n=t.post;return o?e.map((function(t){return i.a.createElement(ou,{className:"photo-in-waterfall",disableAnimation:!0,showTitle:!0,photo:t})})):i.a.createElement(bu,vu({post:n,photos:e,showNextThumbnail:!0},r))}))},_u=ot(mu,st),wu=function(t){var e=t.id,n=gu(t,["id"]);return i.a.createElement(mu,vu({id:e,showNextThumbnail:!1,thumbnailMode:!0},n))};function Ou(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Eu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Su=function(t){return i.a.createElement("div",{className:"photos-attachment",onClick:function(){!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";ie("".concat(O,"/").concat(t))}(t.id)}},i.a.createElement(wu,{id:t.id,hideSpinner:Object(u.l)(),spinner:i.a.createElement(ye,{absCenter:!1})}))},Au=function(t){var e=t.post,n=t.className,r=t.totalLen,o=t.index,s=t.next,a=t.disableTick;return Object(u.l)()?i.a.createElement("div",{className:"post ".concat(n)},i.a.createElement("div",{className:"post-title"},e.title),i.a.createElement("div",{className:"post-content markdown-body"},i.a.createElement(_e,{md:e.content})),i.a.createElement("div",{className:"post-date"},e.date)):(se(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ou(Object(n),!0).forEach((function(e){Eu(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ou(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},t,{currentPageIndex:o}),{disableAllBtns:a}),i.a.createElement(Ae,{top:[e.title,!a&&i.a.createElement(It,{total:r,current:o,onClick:s,fixedTop:!0})],padding:"0 10px",down:i.a.createElement("div",{className:"post ".concat(n)},i.a.createElement(_e,{md:e.content,className:"post-content"}),i.a.createElement("div",{className:"post-date"},e.date),e.photogroupId&&i.a.createElement(Su,{id:e.photogroupId}))}))};function Pu(){return(Pu=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Iu(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var Nu,Tu=function(t){var e=t.id,n=t.classNames,r=t.match,o=e||r.params.id;return i.a.createElement($s,{id:o,spinner:i.a.createElement(Pe,{style:{paddingLeft:10}})},(function(t){var e=t.posts,s=(t.loading,e.findIndex((function(t){return t.id===o})));return i.a.createElement(ee,{data:e,pageSize:1,currentPageIndex:s+1,infiniteLoopMode:!0},(function(t){var e=t.currentPageData,o=t.currentPageIndex,s=t.totalPages,u=t.next,a=Iu(t,["currentPageData","currentPageIndex","totalPages","next"]);return i.a.createElement(Au,Pu({next:u,totalLen:s,index:o,post:e[0],className:n,disableTick:!r},a))}))}))};function ju(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}ju(Nu={},b.cover.type.photo.value,(function(t){var e=t.id;return Object(u.l)()?i.a.createElement("div",{className:"mobile-cover"},i.a.createElement(au,{id:e})):i.a.createElement(au,{id:e,className:"cover-image"})})),ju(Nu,b.cover.type.story.value,(function(t){var e=t.id;return i.a.createElement(Tu,{id:e,className:"cover-story"})}));var xu=function(){return null};n("A21b");function Du(t){return(Du="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Cu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ru(t){return(Ru=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ku(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Bu(t,e){return(Bu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Mu=function(t){var e=t.item;return i.a.createElement(Au,{post:e})},Uu=function(t){var e=t.item;return i.a.createElement(Xe.Link,{key:e.id,to:"".concat(m,"/").concat(e.id)},e.title)},Lu=function(){return i.a.createElement($s,{spinner:i.a.createElement(Pe,null)},(function(t){var e=t.posts;t.loading;return i.a.createElement(Vt,{className:"post-list mobile-posts",data:e,itemRenderer:Mu})}))},Fu=function(t){var e=t.currentPageIndex,n=t.totalPages,r=t.next;return se(t,{disableListBtn:!0}),i.a.createElement(It,{current:e,total:n,onClick:r,fixedTop:!0})},$u=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return n=function(t,e){return!e||"object"!==Du(e)&&"function"!=typeof e?ku(t):e}(this,(t=Ru(e)).call.apply(t,[this].concat(o))),function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(ku(n),"renderList",(function(){return i.a.createElement($s,{spinner:i.a.createElement(Pe,null)},(function(t){var e=t.posts;t.loading,t.error;return i.a.createElement(Xe.HashRouter,null,i.a.createElement(re,{pagingOption:{data:e,pageSize:10,infiniteLoopMode:!0},listOption:{className:"post-list pc",itemRenderer:Uu}},(function(t){return i.a.createElement(Fu,t)})))}))})),n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Bu(t,e)}(e,t),n=e,(r=[{key:"render",value:function(){return i.a.createElement(Ae,{top:"文字",down:this.renderList(),padding:"0 10px"})}}])&&Cu(n.prototype,r),o&&Cu(n,o),e}(i.a.PureComponent),zu=function(){return Object(u.l)()?i.a.createElement(Lu,null):i.a.createElement($u,null)},qu=function(){return i.a.createElement(Tu,{id:"5d920090a589b4121dd2be60"})},Vu=function(t){var e=t.customItemRenderer,n=function(t){var e=t.item;return i.a.createElement(Xe.Link,{key:e.id,to:"".concat(O,"/").concat(e.id)},e.title)};return i.a.createElement(Be,null,(function(t){return i.a.createElement(Xe.HashRouter,null,i.a.createElement(Vt,{data:t,className:"photo-group-title-list",itemRenderer:e||n}))}))},Wu=function(){return i.a.createElement(Be,null,(function(t){return i.a.createElement(pe,{wrapperSelector:".menu-panel:nth-child(3) .panel",bufferDistance:500},t.map((function(t){var e=t.id;return i.a.createElement(mu,{id:e})})))}))},Yu=function(){return Object(u.l)()?i.a.createElement("div",{className:"photo-group-title-list"},i.a.createElement(Wu,null)):i.a.createElement(Ae,{top:"相片",down:i.a.createElement(Vu,null),padding:"0 10px"})};function Ku(){return(Ku=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Ju(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var Gu=function(t){var e=t.to,n=t.onClick,r=Ju(t,["to","onClick"]);return i.a.createElement(Xe.Route,{path:e,children:function(t){var o=t.match;return i.a.createElement("li",{className:o?"active":"",onClick:n||function(){}},i.a.createElement(Xe.Link,Ku({to:e},r)))}})};n("AdgS");function Hu(){return(Hu=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Xu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}n("gy2t"),n("AAEI");var Qu=Object(u.l)()?function(){var t=Xu(Object(r.useState)(!0),2),e=t[0],n=t[1],o=e?{"data-close":!0}:{},s=function(){n(!0)};return i.a.createElement(Xe.HashRouter,null,i.a.createElement("div",{className:rt()("top-bar",{close:e})},i.a.createElement(Xe.Link,{to:P},i.a.createElement("div",{className:"logo",dangerouslySetInnerHTML:{__html:Object(u.f)()},onClick:s})),i.a.createElement("ul",Hu({className:"mobile nav"},o,{onClick:function(t){t.stopPropagation(),e&&n(!1)}}),i.a.createElement(Gu,{onClick:s,to:O},"JPG"),i.a.createElement(Gu,{onClick:s,to:m},"TXT"))))}:function(){var t=[{text:i.a.createElement(Nt,null,"福福"),href:"https://fufu.im",className:"license"}],e=[{type:"link",text:i.a.createElement(Nt,null,"文字"),route:m}];Object(r.useContext)($)[g.ENABLE_UPDATES_ENTRY]&&e.push({type:"link",text:i.a.createElement(Nt,null,"最近更新"),route:A});var n=i.a.createElement(Vt,{data:t,className:"footer",itemRenderer:function(t){var e=t.item;return e.customRenderer?e.customRenderer():i.a.createElement($t,e)}});return i.a.createElement(Ae,{alignTopItems:"center",withGuideLine:!0,fullHeight:!0,top:i.a.createElement("div",{className:"logo-wrapper"},i.a.createElement(Xe.HashRouter,null,i.a.createElement(Xe.Link,{to:P},i.a.createElement(be,null)))),down:i.a.createElement(Xe.HashRouter,null,i.a.createElement("div",{className:"nav pc"},i.a.createElement(Vt,{top:!0,data:e,itemRenderer:function(t){var e=t.item;return i.a.createElement(Gu,{to:e.route},e.text)}}),n))})},Zu=function(t){return function(e){return i.a.createElement(Ks,null,i.a.createElement(t,e))}},ta=function(){return i.a.createElement(Xe.HashRouter,null,i.a.createElement(Ks,null,i.a.createElement(Xe.Route,{path:S,component:au}),i.a.createElement(Xe.Route,{path:w,component:Tu})))},ea=function(){return i.a.createElement(Xe.HashRouter,null,i.a.createElement(Ks,null,i.a.createElement(Xe.Route,{exact:!0,path:P,component:function(){return i.a.createElement(Xe.Redirect,{to:m})}}),i.a.createElement(Xe.Route,{path:m,exact:!0,component:zu}),i.a.createElement(Xe.Route,{path:O,exact:!0,component:Zu(Yu)}),i.a.createElement(Xe.Route,{path:E,component:Zu(_u)}),i.a.createElement(Xe.Route,{path:S,component:Zu(au)}),i.a.createElement(Xe.Route,{path:w,component:Tu}),i.a.createElement(Xe.Route,{path:_,component:Zu(qu)})))},na=n("SsKX");n("dj+h");function ra(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],r=!0,i=!1,o=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var ia=function(t){var e=t.onClick,n=t.className,r=document.querySelector(".menu-panel.active .panel"),o=ra(le(r),1)[0];return i.a.createElement("button",{type:"button",className:rt()("menu-button",n,{hidden:"DOWN"===o}),onClick:e,onTouchStart:""})};ia.propTypes={onClick:at.a.func.isRequired,className:at.a.string.isRequired};var oa=function(t){var e=t.children,n=t.titles,o=t.activePanelIndex;if(!e.length)return null;var s=ra(Object(r.useState)(!1),2),u=s[0],a=s[1],c=ra(Object(r.useState)(o),2),l=c[0],f=c[1],h=(window.innerWidth-100)/e.length;return i.a.createElement("div",{"data-active-panel":l,className:rt()("menu-panel-container",{open:u})},e.map((function(t,r){var o,s=r===e.length-1,c=u?r*h:0;return o=null!==l?l===r?{top:0,left:0}:{top:"calc(100% + 20px)",left:r*h}:{top:c,left:c},i.a.createElement("div",{tabIndex:-1,role:"button",className:rt()("menu-panel",{last:s,active:l===r}),onTouchStart:"",onClick:function(){f(r),setTimeout((function(){a(!1)}),700)},onKeyPress:function(){},style:o},i.a.createElement("div",{className:"panel"},i.a.createElement("div",{className:"panel-title"},n[r]),(l===r||s)&&t))})),i.a.createElement(ia,{className:rt()({hidden:u}),onClick:function(){if(!u){setTimeout((function(){f(null),a(!u)}),300)}}}))};oa.propTypes={titles:at.a.arrayOf(at.a.string)},oa.defaultProps={titles:[]};var sa=oa,ua=function(){var t=location.hash.replace("#",""),e=Object(na.default)(t,{path:S})||Object(na.default)(t,{path:w});return i.a.createElement(sa,{activePanelIndex:e?0:null,titles:["","关于","照片","文章","封面"]},i.a.createElement(ta,null),i.a.createElement("div",null,i.a.createElement($t,{className:"version",text:"v"+T.version,href:T.gitURL}),i.a.createElement(qu,null)),i.a.createElement(Yu,null),i.a.createElement(zu,null),i.a.createElement(xu,null))};function aa(t){return(aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ca(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function la(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ca(Object(n),!0).forEach((function(e){ya(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ca(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function fa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ha(t){return(ha=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function da(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function pa(t,e){return(pa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ya(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ba=et(Ge),va=et(Qu),ga=et(ve),ma=function(t){function e(){var t,n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return n=function(t,e){return!e||"object"!==aa(e)&&"function"!=typeof e?da(t):e}(this,(t=ha(e)).call.apply(t,[this].concat(o))),ya(da(n),"state",la({sideSpaceContent:null,leftSpaceContent:null},k())),ya(da(n),"toggleSpaceGuideLine",(function(t){n.setState({showSpaceGuideLine:t},(function(){localStorage.setItem(g.SHOW_SPACE_GUIDELINE,t)}))})),ya(da(n),"setSpaceContext",(function(t,e){n.setState(ya({},t,e))})),ya(da(n),"setLocalStorageVal",(function(t,e){n.setState(ya({},t,e),(function(){localStorage.setItem(t,e)}))})),ya(da(n),"getLocalStorageVal",(function(t){return n.state[t]})),ya(da(n),"providerLayer",(function(t){return i.a.createElement(F.Provider,{value:{setLeftSpaceContent:function(t){n.setSpaceContext("leftSpaceContent",t)},setSideSpaceContent:function(t){n.setSpaceContext("sideSpaceContent",t)},destroyAllSpace:function(){n.props.exit()},toggleSpaceGuideLine:n.toggleSpaceGuideLine,showSpaceGuideLine:n.state.showSpaceGuideLine}},i.a.createElement($.Provider,{value:la({},B(n.state),{getLocalStorageVal:n.getLocalStorageVal,setLocalStorageVal:n.setLocalStorageVal})},t))})),ya(da(n),"renderPcView",(function(){var t=et((function(){return n.state.sideSpaceContent}));return n.providerLayer(i.a.createElement(ba,{top:!0,bottom:!0,left:i.a.createElement(it,{cols:[n.state.leftSpaceContent,i.a.createElement(va,{right:!0,left:!0}),n.state.sideSpaceContent?i.a.createElement(t,{right:!0}):i.a.createElement(ga,{right:!0})]}),right:i.a.createElement(ea,null)}))})),ya(da(n),"renderMobileView",(function(){return n.providerLayer(i.a.createElement(ua,null))})),n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&pa(t,e)}(e,t),n=e,(r=[{key:"render",value:function(){var t=Object(u.l)();return i.a.createElement("div",{className:rt()("App",{mobile:t})},t?this.renderMobileView():this.renderPcView())}}])&&fa(n.prototype,r),o&&fa(n,o),e}(r.Component),_a=function(t){var e=t.exit;return(i.a.createElement(ma,{exit:e}))},wa=function(t,e,n){e?s.a.unmountComponentAtNode(t):s.a.render(i.a.createElement(_a,{exit:n}),t)};e.default={shortopts:"e",handler:function(){var t,e,n,r,i=arguments;return regeneratorRuntime.async((function(o){for(;;)switch(o.prev=o.next){case 0:if(t=i.length>0&&void 0!==i[0]?i[0]:{},i.length>1?i[1]:void 0,i.length>2?i[2]:void 0,i.length>3?i[3]:void 0,i.length>4?i[4]:void 0,e=t.e,n=Object(u.a)("#gui"),r=document.body,!e){o.next=15;break}return wa(n,e),n.classList.remove("blog"),r.classList.remove("white-bg"),o.abrupt("return","Goodbye");case 15:if(!Object(u.k)(n)){o.next=19;break}return r.classList.add("white-bg"),n.classList.add("blog"),o.abrupt("return",new Promise((function(t,e){wa(n,null,(function(){t(),setTimeout((function(){Terminal.exec("blog -e")}))}))})));case 19:case"end":return o.stop()}}))}}},b7mW:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},b9Gj:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t.pipe((0,i.distinctUntilChanged)(),o.default).refCount()};var r,i=n("ahDk"),o=(r=n("eCbD"))&&r.__esModule?r:{default:r}},"c/G6":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var{table:e,description:{where:n,join:r},associations:i}=t;return{table:e,query:A(n),joins:j(i,r)}};var r=n("Ex95"),i=f(n("giDl")),o=f(n("FZ/z")),s=f(n("1KF6")),u=f(n("Q3Zk")),a=f(n("OFZ/")),c=f(n("oEso")),l=n("eLCP");function f(t){return t&&t.__esModule?t:{default:t}}var h=(0,u.default)([[(0,r.has)("value"),(0,r.prop)("value")],[(0,r.has)("values"),(0,r.prop)("values")],[(0,r.has)("column"),function(){return(0,a.default)(!1,"Column comparisons unimplemented!")}]]),d=function(t){return{$not:{$aeq:t}}},p=function(t){return function(e){return{$and:[t(e),d(null)]}}},y={eq:(0,o.default)("$aeq"),notEq:d,gt:(0,o.default)("$gt"),gte:(0,o.default)("$gte"),weakGt:(0,o.default)("$gt"),lt:p((0,o.default)("$lt")),lte:p((0,o.default)("$lte")),oneOf:(0,o.default)("$in"),notIn:p((0,o.default)("$nin")),between:(0,o.default)("$between"),like:function(t){return"string"==typeof t?{$regex:(0,c.default)(t)}:{}},notLike:function(t){return"string"==typeof t?{$and:[{$not:{$eq:null}},{$not:{$regex:(0,c.default)(t)}}]}:{}}},b={_fakeAlwaysTrue:{$eq:void 0}},v=function({left:t,comparison:e}){return(0,r.has)("column",e.right)?b:(0,o.default)(t,function({operator:t,right:e}){var n=h(e);if("string"==typeof n){if("eq"===t)return{$eq:n};if("notEq"===t)return{$ne:n}}return y[t](n)}(e))},g=(0,r.propEq)("type"),m=function(t){return(0,u.default)([[g("and"),w],[g("or"),O],[g("where"),v],[g("on"),v]])(t)},_=function(t){return(0,r.pipe)((0,r.prop)("conditions"),(0,r.map)(m),(0,o.default)(t))},w=_("$and"),O=_("$or"),E=function(t){return(0,r.pipe)(r.length,(0,i.default)(t))},S=(0,u.default)([[E(0),(0,r.always)(void 0)],[E(1),r.head],[r.T,(0,o.default)("$and")]]),A=(0,r.pipe)((function(t){return(0,r.map)(m,t)}),S),P=(0,r.ifElse)((0,r.propEq)("type","belongs_to"),(0,r.always)((0,l.columnName)("id")),(0,r.prop)("foreignKey")),I=(0,r.ifElse)((0,r.propEq)("type","belongs_to"),(0,r.prop)("key"),(0,r.always)((0,l.columnName)("id"))),N=(0,r.map)((function({left:t,comparison:e}){return{type:"where",left:t,comparison:e}})),T=(0,r.pipe)((0,r.groupBy)((0,r.prop)("table")),r.values),j=function(t,e){var n=function(t,e){return(0,s.default)(t,T(e))}(t,e);return(0,r.map)((function([t,e]){return function([t,e],n){return{table:t,query:A(n),originalConditions:N(n),mapKey:P(e),joinKey:I(e)}}(t,e)}),n)}},cDIe:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var{join:e,where:n}=t;return(0,i.default)(!e.length,"Queries with joins can't be encoded into a matcher"),a(n)};var r=n("Ex95"),i=s(n("OFZ/")),o=s(n("ChnD"));function s(t){return t&&t.__esModule?t:{default:t}}var u=function(t){switch(t.type){case"where":return e=t,function(t){var n,r=t[e.left],{comparison:i}=e,s=o.default[i.operator],u=i.right;if(void 0!==u.value)n=u.value;else if(u.values)n=u.values;else{if(!u.column)throw new Error("Invalid comparisonRight");n=t[u.column]}return s(r,n)};case"and":return(0,r.allPass)(t.conditions.map(u));case"or":return(0,r.anyPass)(t.conditions.map(u));default:throw new Error("Invalid Where")}var e},a=(0,r.pipe)((0,r.map)(u),r.allPass)},dEwP:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n("F/XL"),i=n("Txjg");function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Object(i.a)()(r.a.apply(void 0,t))}},dhN9:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("Ex95"),i=s(n("RFli")),o=s(n("R529"));function s(t){return t&&t.__esModule?t:{default:t}}var u=(0,r.ifElse)((0,r.prop)("hasJoins"),i.default,o.default);e.default=u},"dj+h":function(t,e,n){},eCbD:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t.pipe((0,i.multicast)((function(){return new r.ReplaySubject(1)})))};var r=n("HDK4"),i=n("ahDk")},eLCP:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.tableName=function(t){return t},e.columnName=function(t){return t},e.appSchema=function({version:t,tables:e}){var n=e.reduce((function(t,e){return t[e.name]=e,t}),{});return{version:t,tables:n}},e.validateColumnSchema=function(t){0},e.tableSchema=function({name:t,columns:e}){0;var n=e.reduce((function(t,e){return t[e.name]=e,t}),{});return{name:t,columns:n,columnArray:e}};var r;(r=n("OFZ/"))&&r.__esModule},"fi+a":function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.devMeasureTime=function(t){var e=n(),r=t(),i=n()-e;return[r,i]},e.devMeasureTimeAsync=function(t){return new Promise((function(e,r){var i,o,s;return i=n(),Promise.resolve(t()).then((function(t){try{return o=t,s=n()-i,e([o,s])}catch(t){return r(t)}}),r)}))},e.getPreciseTime=void 0;var n=void 0!==t&&t.nativePerformanceNow?t.nativePerformanceNow:"undefined"!=typeof window&&window.performance&&window.performance.now?window.performance.now.bind(window.performance):Date.now;e.getPreciseTime=n}).call(this,n("yLpj"))},"g5+O":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var{database:n}=t.collection,i=n.withChangesForTables(t.allTables);return(e?i.pipe((0,r.throttleTime)(250)):i).pipe((0,r.switchMap)((function(){return t.collection.fetchCount(t)})),(0,r.distinctUntilChanged)())};var r=n("ahDk")},gI3B:function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var r=n("6blF"),i=n("T1DM"),o=n("/21U"),s=n("nkY7");function u(t,e,n){void 0===t&&(t=0);var u=-1;return Object(o.a)(e)?u=Number(e)<1?1:Number(e):Object(s.a)(e)&&(n=e),Object(s.a)(n)||(n=i.a),new r.a((function(e){var r=Object(o.a)(t)?t:+t-n.now();return n.schedule(a,r,{index:0,period:u,subscriber:e})}))}function a(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},gYkS:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("tgZe"))},giDl:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};if(e===n)return 0!==e||1/e==1/n;return e!=e&&n!=n}},gy2t:function(t,e,n){},h9Dq:function(t,e,n){"use strict";var r=n("mrSG"),i=function(t){function e(e,n){return t.call(this)||this}return r.__extends(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n("pugT").a);n.d(e,"a",(function(){return o}));var o=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.__extends(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(i)},hUxU:function(t,e,n){},hw3F:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,o.default)(!(0,i.is)(Promise,t),"Unexpected Promise. Passed function should be synchronous."),t};var r,i=n("6Cb3"),o=(r=n("OFZ/"))&&r.__esModule?r:{default:r}},hyL6:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n("Cu4n")),i=o(n("OFZ/"));function o(t){return t&&t.__esModule?t:{default:t}}var s=function(){function t(t,e){this.map=new Map,this.tableName=t,this.recordInsantiator=e}var e=t.prototype;return e.get=function(t){return this.map.get(t)},e.add=function(t){this.map.set(t.id,t)},e.delete=function(t){this.map.delete(t.id)},e.unsafeClear=function(){this.map=new Map},e.recordsFromQueryResult=function(t){var e=this;return t.map((function(t){return e.recordFromQueryResult(t)}))},e.recordFromQueryResult=function(t){return"string"==typeof t?this._cachedModelForId(t):this._modelForRaw(t)},e._cachedModelForId=function(t){var e=this.map.get(t);return(0,i.default)(e,"Record ID ".concat(this.tableName,"#").concat(t," was sent over the bridge, but it's not cached")),e},e._modelForRaw=function(t){var e=this.map.get(t.id);if(e)return(0,r.default)("Record ".concat(this.tableName,"#").concat(e.id," is cached, but full raw object was sent over the bridge")),e;var n=this.recordInsantiator(t);return this.add(n),n},t}();e.default=s},ieMx:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(1===arguments.length)return function(n){return t(e,n)};return e>n}},ihlm:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return r.Observable.create((function(n){var r=!0,i=!1,c=!0,h=[],d=new Map,p=function(t){return n.next(t.slice(0))},[y,b]=t.hasJoins?[(0,a.default)(t,!0),!0]:[(0,u.default)(t,!0),!1],v=y.subscribe((function(t){if(!1!==t){r=!1;var n=t;(c||i||!(0,o.default)(n,h))&&p(n),i=!1,c=!1;var{added:u,removed:a}=(0,s.default)(h,n);h=n,a.forEach((function(t){d.delete(t.id)})),u.forEach((function(t){d.set(t.id,l(t,e))}))}else r=!0})),g=t.collection.changes.subscribe((function(t){var n=!1;t.forEach((function({record:t,type:r}){if("updated"===r){var i=d.get(t.id);if(i){var o=l(t,e);f(i,o)||(d.set(t.id,o),n=!0)}}})),n&&(r||!b?i=!0:p(h))}));return v.add(g)}))};var r=n("4c1C"),i=n("Ex95"),o=c(n("8Gr5")),s=c(n("QnJh")),u=c(n("R529")),a=c(n("RFli"));function c(t){return t&&t.__esModule?t:{default:t}}var l=function(t,e){return(0,i.pickAll)(e,t._raw)},f=function(t,e){return(0,o.default)((0,i.values)(t),(0,i.values)(e))}},ilZr:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(...e){return 3>e.length?t.apply(void 0,e):t().apply(void 0,e)}}},j3qq:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.associations=function(...t){return(0,s.default)(t)},e.default=void 0;var r=n("nDsj"),i=h(n("OFZ/")),o=h(n("hw3F")),s=h(n("xcVR")),u=h(n("tUd9")),a=n("eLCP"),c=n("oPt8"),l=n("knDm"),f=n("n8Lz");function h(t){return t&&t.__esModule?t:{default:t}}function d(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=function(){var t,e,n,s=h.prototype;function h(t,e){this._isEditing=!1,this._isCommitted=!0,this._hasPendingUpdate=!1,this._hasPendingDelete=!1,this.__changes=null,this.collection=t,this._raw=e}return s._getChanges=function(){return this.__changes||(this.__changes=new r.BehaviorSubject(this)),this.__changes},s.update=function(t=u.default){return new Promise(function(e,n){return this.collection.database._ensureInAction("Model.update() can only be called from inside of an Action. See docs for more details."),this.prepareUpdate(t),Promise.resolve(this.collection.database.batch(this)).then((function(){try{return e()}catch(t){return n(t)}}),n)}.bind(this))},s.prepareUpdate=function(t=u.default){return(0,i.default)(this._isCommitted,"Cannot update uncommitted record"),(0,i.default)(!this._hasPendingUpdate,"Cannot update a record with pending updates"),this._isEditing=!0,(0,f.hasUpdatedAt)(this)&&this._setRaw((0,a.columnName)("updated_at"),Date.now()),(0,o.default)(t(this)),this._isEditing=!1,this._hasPendingUpdate=!0,this},s.prepareMarkAsDeleted=function(){return(0,i.default)(this._isCommitted,"Cannot mark an uncomitted record as deleted"),(0,i.default)(!this._hasPendingUpdate,"Cannot mark an updated record as deleted"),this._isEditing=!0,this._raw._status="deleted",this._hasPendingDelete="mark",this._isEditing=!1,this},s.prepareDestroyPermanently=function(){return(0,i.default)(this._isCommitted,"Cannot mark an uncomitted record as deleted"),(0,i.default)(!this._hasPendingUpdate,"Cannot mark an updated record as deleted"),this._isEditing=!0,this._raw._status="deleted",this._hasPendingDelete="destroy",this._isEditing=!1,this},s.markAsDeleted=function(){return new Promise(function(t,e){return this.collection.database._ensureInAction("Model.markAsDeleted() can only be called from inside of an Action. See docs for more details."),Promise.resolve(this.collection.database.batch(this.prepareMarkAsDeleted())).then((function(){try{return t()}catch(t){return e(t)}}),e)}.bind(this))},s.destroyPermanently=function(){return new Promise(function(t,e){return this.collection.database._ensureInAction("Model.destroyPermanently() can only be called from inside of an Action. See docs for more details."),Promise.resolve(this.collection.database.batch(this.prepareDestroyPermanently())).then((function(){try{return t()}catch(t){return e(t)}}),e)}.bind(this))},s.experimentalMarkAsDeleted=function(){return new Promise(function(t,e){var n,r;return this.collection.database._ensureInAction("Model.experimental_markAsDeleted() can only be called from inside of an Action. See docs for more details."),Promise.resolve((0,f.fetchChildren)(this)).then(function(i){try{return(r=i).forEach((function(t){return t.prepareMarkAsDeleted()})),Promise.resolve((n=this.collection.database).batch.apply(n,d(r).concat([this.prepareMarkAsDeleted()]))).then((function(){try{return t()}catch(t){return e(t)}}),e)}catch(t){return e(t)}}.bind(this),e)}.bind(this))},s.experimentalDestroyPermanently=function(){return new Promise(function(t,e){var n,r;return this.collection.database._ensureInAction("Model.experimental_destroyPermanently() can only be called from inside of an Action. See docs for more details."),Promise.resolve((0,f.fetchChildren)(this)).then(function(i){try{return(r=i).forEach((function(t){return t.prepareDestroyPermanently()})),Promise.resolve((n=this.collection.database).batch.apply(n,d(r).concat([this.prepareDestroyPermanently()]))).then((function(){try{return t()}catch(t){return e(t)}}),e)}catch(t){return e(t)}}.bind(this),e)}.bind(this))},s.observe=function(){return(0,i.default)(this._isCommitted,"Cannot observe uncommitted record"),this._getChanges()},s.batch=function(...t){var e;return(e=this.collection.database).batch.apply(e,t)},s.subAction=function(t){return this.collection.database._actionQueue.subAction(t)},t=h,(e=[{key:"id",get:function(){return this._raw.id}},{key:"syncStatus",get:function(){return this._raw._status}},{key:"collections",get:function(){return this.database.collections}},{key:"database",get:function(){return this.collection.database}},{key:"asModel",get:function(){return this}},{key:"table",get:function(){return this.constructor.table}}])&&p(t.prototype,e),n&&p(t,n),h._prepareCreate=function(t,e){var n=new this(t,(0,c.sanitizedRaw)((0,f.createTimestampsFor)(this.prototype),t.schema));return n._isCommitted=!1,n._isEditing=!0,(0,o.default)(e(n)),n._isEditing=!1,n},h._prepareCreateFromDirtyRaw=function(t,e){var n=new this(t,(0,c.sanitizedRaw)(e,t.schema));return n._isCommitted=!1,n},s._notifyChanged=function(){this._getChanges().next(this)},s._notifyDestroyed=function(){this._getChanges().complete()},s._getRaw=function(t){return this._raw[t]},s._setRaw=function(t,e){(0,i.default)(this._isEditing,"Not allowed to change record outside of create/update()"),(0,i.default)(!this._getChanges().isStopped&&"deleted"!==this._raw._status,"Not allowed to change deleted records");var n=this._raw[t];(0,c.setRawSanitized)(this._raw,t,e,this.collection.schema.columns[t]),n!==this._raw[t]&&(0,l.setRawColumnChange)(this._raw,t)},s._dangerouslySetRawWithoutMarkingColumnChange=function(t,e){(0,i.default)(this._isEditing,"Not allowed to change record outside of create/update()"),(0,i.default)(!this._getChanges().isStopped&&"deleted"!==this._raw._status,"Not allowed to change deleted records"),(0,c.setRawSanitized)(this._raw,t,e,this.collection.schema.columns[t])},h}();e.default=y,y.associations={}},jFaF:function(t,e,n){"use strict";function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,"a",(function(){return r}))},jblg:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.useCustomDiagnosticErrorFunction=function(t){r=t},e.default=function(t){if(r)return r(t);var e=new Error(t);return e.framesToPop=1,e.name="Diagnostic error",e};var r=null},"kVK+":function(t,e){e.read=function(t,e,n,r,i){var o,s,u=8*i-r-1,a=(1<<u)-1,c=a>>1,l=-7,f=n?i-1:0,h=n?-1:1,d=t[e+f];for(f+=h,o=d&(1<<-l)-1,d>>=-l,l+=u;l>0;o=256*o+t[e+f],f+=h,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===a)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=c}return(d?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,u,a,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-s))<1&&(s--,a*=2),(e+=s+f>=1?h/a:h*Math.pow(2,1-f))*a>=2&&(s++,a/=2),s+f>=l?(u=0,s=l):s+f>=1?(u=(e*a-1)*Math.pow(2,i),s+=f):(u=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&u,d+=p,u/=256,i-=8);for(s=s<<i|u,c+=i;c>0;t[n+d]=255&s,d+=p,s/=256,c-=8);t[n+d-p]|=128*y}},knDm:function(t,e,n){"use strict";function r(t,e){var n=t?t.split(","):[],r=new Set(n);return r.add(e),Array.from(r).join(",")}Object.defineProperty(e,"__esModule",{value:!0}),e.addToRawSet=r,e.setRawColumnChange=function(t,e){"created"!==t._status&&(t._changed=r(t._changed,e),t._status="updated")}},"lHM+":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createObservable=void 0;var r=n("G4OQ"),i=n("ahDk");e.createObservable=function(t){return t._isImmutable?function(t){return t._model.collections.get(t._relationTableName).findAndObserve(t.id)}(t):function(t){return t._model.observe().pipe((0,i.map)((function(e){return e._getRaw(t._columnName)})),(0,i.distinctUntilChanged)(),(0,i.switchMap)((function(e){return e?t._model.collections.get(t._relationTableName).findAndObserve(e):(0,r.of)(null)})))}(t)}},lYZG:function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n("6blF"),i=n("0/uQ"),o=n("G5J1");function s(t){return new r.a((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Object(i.a)(n):Object(o.b)()).subscribe(e)}))}},mZXl:function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return a}));var r=n("mrSG"),i=n("FFOo"),o=n("60iU");function s(t,e){return void 0===e&&(e=0),function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.scheduler,this.delay))},t}(),a=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.__extends(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new c(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},e}(i.a),c=function(){return function(t,e){this.notification=t,this.destination=e}}()},n8Lz:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fetchChildren=function t(e){return new Promise((function(n,o){var s,u,a;return s=function(e){return new Promise((function(n,i){var o,s;return Promise.resolve(e.fetch()).then((function(e){try{return o=e,Promise.resolve((0,r.allPromises)(t,o)).then((function(t){try{return s=t,n((0,r.unnest)(s).concat(o))}catch(t){return i(t)}}),i)}catch(t){return i(t)}}),i)}))},u=function(t){return Object.entries(t.constructor.associations).filter((function([,t]){return"has_many"===t.type})).map((function([e,n]){return t.collections.get(e).query(i.where(n.foreignKey,t.id))}))}(e),Promise.resolve((0,r.allPromises)(s,u)).then((function(t){try{return a=t,n((0,r.unnest)(a))}catch(t){return o(t)}}),o)}))},e.createTimestampsFor=e.hasUpdatedAt=void 0;var r=n("6Cb3"),i=function(t){if(t&&t.__esModule)return t;var e=o();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var s=r?Object.getOwnPropertyDescriptor(t,i):null;s&&(s.get||s.set)?Object.defineProperty(n,i,s):n[i]=t[i]}}n.default=t,e&&e.set(t,n);return n}(n("0gbD"));function o(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return o=function(){return t},t}var s=(0,r.hasIn)("createdAt"),u=(0,r.hasIn)("updatedAt");e.hasUpdatedAt=u;e.createTimestampsFor=function(t){var e=Date.now(),n={};return s(t)&&(n.created_at=e),u(t)&&(n.updated_at=e),n}},nDsj:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n("Hm89"))},no5z:function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global,Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return bson_54}));var long__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("2lpH"),long__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__),buffer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("HDXh"),buffer__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__),commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(t,e){return t(e={exports:{}},e.exports),e.exports}var map=createCommonjsModule((function(t){if(void 0!==commonjsGlobal.Map)t.exports=commonjsGlobal.Map,t.exports.Map=commonjsGlobal.Map;else{var e=function(t){this._keys=[],this._values={};for(var e=0;e<t.length;e++)if(null!=t[e]){var n=t[e],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};e.prototype.clear=function(){this._keys=[],this._values={}},e.prototype.delete=function(t){var e=this._values[t];return null!=e&&(delete this._values[t],this._keys.splice(e.i,1),!0)},e.prototype.entries=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?[n,t._values[n].v]:void 0,done:void 0===n}}}},e.prototype.forEach=function(t,e){e=e||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];t.call(e,this._values[r].v,r,e)}},e.prototype.get=function(t){return this._values[t]?this._values[t].v:void 0},e.prototype.has=function(t){return null!=this._values[t]},e.prototype.keys=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?n:void 0,done:void 0===n}}}},e.prototype.set=function(t,e){return this._values[t]?(this._values[t].v=e,this):(this._keys.push(t),this._values[t]={v:e,i:this._keys.length-1},this)},e.prototype.values=function(){var t=this,e=0;return{next:function(){var n=t._keys[e++];return{value:void 0!==n?t._values[n].v:void 0,done:void 0===n}}}},Object.defineProperty(e.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),t.exports=e}})),map_1=map.Map;long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.toExtendedJSON=function(t){return t&&t.relaxed?this.toNumber():{$numberLong:this.toString()}},long__WEBPACK_IMPORTED_MODULE_0___default.a.fromExtendedJSON=function(t,e){var n=long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(t.$numberLong);return e&&e.relaxed?n.toNumber():n},Object.defineProperty(long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype,"_bsontype",{value:"Long"});var long_1=long__WEBPACK_IMPORTED_MODULE_0___default.a;function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Double=function(){function t(e){_classCallCheck(this,t),this.value=e}return _createClass(t,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(t){return t&&t.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,n){return n&&n.relaxed?parseFloat(e.$numberDouble):new t(parseFloat(e.$numberDouble))}}]),t}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck$1(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$1(t,e,n){return e&&_defineProperties$1(t.prototype,e),n&&_defineProperties$1(t,n),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Timestamp=function(t){function e(t,n){var r;return _classCallCheck$1(this,e),r=long_1.isLong(t)?_possibleConstructorReturn(this,_getPrototypeOf(e).call(this,t.low,t.high)):_possibleConstructorReturn(this,_getPrototypeOf(e).call(this,t,n)),_possibleConstructorReturn(r)}return _inherits(e,t),_createClass$1(e,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(t){return new e(long_1.fromInt(t))}},{key:"fromNumber",value:function(t){return new e(long_1.fromNumber(t))}},{key:"fromBits",value:function(t,n){return new e(t,n)}},{key:"fromString",value:function(t,n){return new e(long_1.fromString(t,n))}},{key:"fromExtendedJSON",value:function(t){return new e(t.$timestamp.i,t.$timestamp.t)}}]),e}(long_1);Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,require$$0={};function normalizedFunctionString(t){return t.toString().replace("function(","function (")}function insecureRandomBytes(t){for(var e=new Uint8Array(t),n=0;n<t;++n)e[n]=Math.floor(256*Math.random());return e}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(t){return window.crypto.getRandomValues(new Uint8Array(t))};else{try{randomBytes=require$$0.randomBytes}catch(t){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(t){if(cachedSetTimeout===setTimeout)return setTimeout(t,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(t,0);try{return cachedSetTimeout(t,0)}catch(e){try{return cachedSetTimeout.call(null,t,0)}catch(e){return cachedSetTimeout.call(this,t,0)}}}function runClearTimeout(t){if(cachedClearTimeout===clearTimeout)return clearTimeout(t);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(t);try{return cachedClearTimeout(t)}catch(e){try{return cachedClearTimeout.call(null,t)}catch(e){return cachedClearTimeout.call(this,t)}}}"function"==typeof global.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global.clearTimeout&&(cachedClearTimeout=clearTimeout);var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var t=runTimeout(cleanUpNextTick);draining=!0;for(var e=queue.length;e;){for(currentQueue=queue,queue=[];++queueIndex<e;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,e=queue.length}currentQueue=null,draining=!1,runClearTimeout(t)}}function nextTick(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];queue.push(new Item(t,e)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(t,e){this.fun=t,this.array=e}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(t){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(t){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(t){var e=.001*performanceNow.call(performance),n=Math.floor(e),r=Math.floor(e%1*1e9);return t&&(n-=t[0],(r-=t[1])<0&&(n--,r+=1e9)),[n,r]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},inherits;inherits="function"==typeof Object.create?function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t};var inherits$1=inherits;function _typeof$1(t){return(_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var formatRegExp=/%[sdj%]/g;function format(t){if(!isString(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(inspect(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(formatRegExp,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(t,e){if(isUndefined(global.process))return function(){return deprecate(t,e).apply(this,arguments)};var n=!1;return function(){return n||(console.error(e),n=!0),t.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(t){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),t=t.toUpperCase(),!debugs[t])if(new RegExp("\\b"+t+"\\b","i").test(debugEnviron)){debugs[t]=function(){var e=format.apply(null,arguments);console.error("%s %d: %s",t,0,e)}}else debugs[t]=function(){};return debugs[t]}function inspect(t,e){var n={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),isBoolean(e)?n.showHidden=e:e&&_extend(n,e),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,t,n.depth)}function stylizeWithColor(t,e){var n=inspect.styles[e];return n?"["+inspect.colors[n][0]+"m"+t+"["+inspect.colors[n][1]+"m":t}function stylizeNoColor(t,e){return t}function arrayToHash(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}function formatValue(t,e,n){if(t.customInspect&&e&&isFunction(e.inspect)&&e.inspect!==inspect&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(n,t);return isString(r)||(r=formatValue(t,r,n)),r}var i=formatPrimitive(t,e);if(i)return i;var o=Object.keys(e),s=arrayToHash(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(e)),isError(e)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(e);if(0===o.length){if(isFunction(e)){var u=e.name?": "+e.name:"";return t.stylize("[Function"+u+"]","special")}if(isRegExp(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(isDate(e))return t.stylize(Date.prototype.toString.call(e),"date");if(isError(e))return formatError(e)}var a,c="",l=!1,f=["{","}"];(isArray(e)&&(l=!0,f=["[","]"]),isFunction(e))&&(c=" [Function"+(e.name?": "+e.name:"")+"]");return isRegExp(e)&&(c=" "+RegExp.prototype.toString.call(e)),isDate(e)&&(c=" "+Date.prototype.toUTCString.call(e)),isError(e)&&(c=" "+formatError(e)),0!==o.length||l&&0!=e.length?n<0?isRegExp(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),a=l?formatArray(t,e,n,s,o):o.map((function(r){return formatProperty(t,e,n,s,r,l)})),t.seen.pop(),reduceToSingleString(a,c,f)):f[0]+c+f[1]}function formatPrimitive(t,e){if(isUndefined(e))return t.stylize("undefined","undefined");if(isString(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return isNumber(e)?t.stylize(""+e,"number"):isBoolean(e)?t.stylize(""+e,"boolean"):isNull(e)?t.stylize("null","null"):void 0}function formatError(t){return"["+Error.prototype.toString.call(t)+"]"}function formatArray(t,e,n,r,i){for(var o=[],s=0,u=e.length;s<u;++s)hasOwnProperty(e,String(s))?o.push(formatProperty(t,e,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(formatProperty(t,e,n,r,i,!0))})),o}function formatProperty(t,e,n,r,i,o){var s,u,a;if((a=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?u=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(u=t.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),u||(t.seen.indexOf(a.value)<0?(u=isNull(n)?formatValue(t,a.value,null):formatValue(t,a.value,n-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+u.split("\n").map((function(t){return"   "+t})).join("\n")):u=t.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}function isArray(t){return Array.isArray(t)}function isBoolean(t){return"boolean"==typeof t}function isNull(t){return null===t}function isNullOrUndefined(t){return null==t}function isNumber(t){return"number"==typeof t}function isString(t){return"string"==typeof t}function isSymbol(t){return"symbol"===_typeof$1(t)}function isUndefined(t){return void 0===t}function isRegExp(t){return isObject(t)&&"[object RegExp]"===objectToString(t)}function isObject(t){return"object"===_typeof$1(t)&&null!==t}function isDate(t){return isObject(t)&&"[object Date]"===objectToString(t)}function isError(t){return isObject(t)&&("[object Error]"===objectToString(t)||t instanceof Error)}function isFunction(t){return"function"==typeof t}function isPrimitive(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"===_typeof$1(t)||void 0===t}function isBuffer(t){return Buffer.isBuffer(t)}function objectToString(t){return Object.prototype.toString.call(t)}function pad(t){return t<10?"0"+t.toString(10):t.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var t=new Date,e=[pad(t.getHours()),pad(t.getMinutes()),pad(t.getSeconds())].join(":");return[t.getDate(),months[t.getMonth()],e].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(t,e){if(!e||!isObject(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}function hasOwnProperty(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog};function _classCallCheck$2(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$2(t,e,n){return e&&_defineProperties$2(t.prototype,e),n&&_defineProperties$2(t,n),t}var Buffer$1=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(t){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(t){return t.toString("hex")}function makeObjectIdError(t,e){var n=t[e];return new TypeError('ObjectId string "'.concat(t,'" contains invalid character "').concat(n,'" with character code (').concat(t.charCodeAt(e),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function t(e){if(_classCallCheck$2(this,t),e instanceof t)return e;if(null==e||"number"==typeof e)return this.id=t.generate(e),void(t.cacheHexString&&(this.__id=this.toString("hex")));var n=t.isValid(e);if(!n&&null!=e)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(n&&"string"==typeof e&&24===e.length&&hasBufferType)return new t(Buffer$1.from(e,"hex"));if(n&&"string"==typeof e&&24===e.length)return t.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&e.toHexString)return t.createFromHexString(e.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,t.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(t,[{key:"toHexString",value:function(){if(t.cacheHexString&&this.__id)return this.__id;var e="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return e=convertToHex(this.id),t.cacheHexString&&(this.__id=e),e;for(var n=0;n<this.id.length;n++){var r=hexTable[this.id.charCodeAt(n)];if("string"!=typeof r)throw makeObjectIdError(this.id,n);e+=r}return t.cacheHexString&&(this.__id=e),e}},{key:"toString",value:function(t){return this.id&&this.id.copy?this.id.toString("string"==typeof t?t:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(e){return e instanceof t?this.toString()===e.toString():"string"==typeof e&&t.isValid(e)&&12===e.length&&this.id instanceof _Buffer?e===this.id.toString("binary"):"string"==typeof e&&t.isValid(e)&&24===e.length?e.toLowerCase()===this.toHexString():"string"==typeof e&&t.isValid(e)&&12===e.length?e===this.id:!(null==e||!(e instanceof t||e.toHexString))&&e.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var t=new Date,e=this.id.readUInt32BE(0);return t.setTime(1e3*Math.floor(e)),t}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return t.index=(t.index+1)%16777215}},{key:"generate",value:function(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));var n=t.getInc(),r=Buffer$1.alloc(12);return r[3]=255&e,r[2]=e>>8&255,r[1]=e>>16&255,r[0]=e>>24&255,r[4]=PROCESS_UNIQUE[0],r[5]=PROCESS_UNIQUE[1],r[6]=PROCESS_UNIQUE[2],r[7]=PROCESS_UNIQUE[3],r[8]=PROCESS_UNIQUE[4],r[11]=255&n,r[10]=n>>8&255,r[9]=n>>16&255,r}},{key:"createPk",value:function(){return new t}},{key:"createFromTime",value:function(e){var n=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return n[3]=255&e,n[2]=e>>8&255,n[1]=e>>16&255,n[0]=e>>24&255,new t(n)}},{key:"createFromHexString",value:function(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new t(Buffer$1.from(e,"hex"));for(var n=new _Buffer(12),r=0,i=0;i<24;)n[r++]=decodeLookup[e.charCodeAt(i++)]<<4|decodeLookup[e.charCodeAt(i++)];return new t(n)}},{key:"isValid",value:function(e){return null!=e&&("number"==typeof e||("string"==typeof e?12===e.length||24===e.length&&checkForHexRegExp.test(e):e instanceof t||(e instanceof _Buffer&&12===e.length||!!e.toHexString&&(12===e.id.length||24===e.id.length&&checkForHexRegExp.test(e.id)))))}},{key:"fromExtendedJSON",value:function(e){return new t(e.$oid)}}]),t}();ObjectId.get_inc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1((function(t){return ObjectId.generate(t)}),"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(t){this.id[3]=255&t,this.id[2]=t>>8&255,this.id[1]=t>>16&255,this.id[0]=t>>24&255}}),ObjectId.prototype[util.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$3(t,e,n){return e&&_defineProperties$3(t.prototype,e),n&&_defineProperties$3(t,n),t}function alphabetize(t){return t.split("").sort().join("")}var BSONRegExp=function(){function t(e,n){_classCallCheck$3(this,t),this.pattern=e||"",this.options=n?alphabetize(n):"";for(var r=0;r<this.options.length;r++)if("i"!==this.options[r]&&"m"!==this.options[r]&&"x"!==this.options[r]&&"l"!==this.options[r]&&"s"!==this.options[r]&&"u"!==this.options[r])throw new Error("The regular expression option [".concat(this.options[r],"] is not supported"))}return _createClass$3(t,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$regularExpression.pattern,e.$regularExpression.options.split("").sort().join(""))}}]),t}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$4(t,e,n){return e&&_defineProperties$4(t.prototype,e),n&&_defineProperties$4(t,n),t}var BSONSymbol=function(){function t(e){_classCallCheck$4(this,t),this.value=e}return _createClass$4(t,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$symbol)}}]),t}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$5(t,e,n){return e&&_defineProperties$5(t.prototype,e),n&&_defineProperties$5(t,n),t}var Int32=function(){function t(e){_classCallCheck$5(this,t),this.value=e}return _createClass$5(t,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(t){return t&&t.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,n){return n&&n.relaxed?parseInt(e.$numberInt,10):new t(e.$numberInt)}}]),t}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$6(t,e,n){return e&&_defineProperties$6(t.prototype,e),n&&_defineProperties$6(t,n),t}var Code=function(){function t(e,n){_classCallCheck$6(this,t),this.code=e,this.scope=n}return _createClass$6(t,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$code,e.$scope)}}]),t}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(t){return!isNaN(parseInt(t,10))}function divideu128(t){var e=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(t.parts[0]||t.parts[1]||t.parts[2]||t.parts[3]))return{quotient:t,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(t.parts[r],0)),t.parts[r]=n.div(e).low,n=n.modulo(e);return{quotient:t,rem:n}}function multiply64x2(t,e){if(!t&&!e)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=t.shiftRightUnsigned(32),r=new long_1(t.getLowBits(),0),i=e.shiftRightUnsigned(32),o=new long_1(e.getLowBits(),0),s=n.multiply(i),u=n.multiply(o),a=r.multiply(i),c=r.multiply(o);return s=s.add(u.shiftRightUnsigned(32)),u=new long_1(u.getLowBits(),0).add(a).add(c.shiftRightUnsigned(32)),{high:s=s.add(u.shiftRightUnsigned(32)),low:c=u.shiftLeft(32).add(new long_1(c.getLowBits(),0))}}function lessThan(t,e){var n=t.high>>>0,r=e.high>>>0;return n<r||n===r&&t.low>>>0<e.low>>>0}function invalidErr(t,e){throw new TypeError('"'.concat(t,'" is not a valid Decimal128 string - ').concat(e))}function Decimal128(t){this.bytes=t}Decimal128.fromString=function(t){var e,n=!1,r=!1,i=!1,o=0,s=0,u=0,a=0,c=0,l=[0],f=0,h=0,d=0,p=0,y=0,b=0,v=[0,0],g=[0,0],m=0;if(t.length>=7e3)throw new TypeError(t+" not a valid Decimal128 string");var _=t.match(PARSE_STRING_REGEXP),w=t.match(PARSE_INF_REGEXP),O=t.match(PARSE_NAN_REGEXP);if(!_&&!w&&!O||0===t.length)throw new TypeError(t+" not a valid Decimal128 string");if(_){var E=_[2],S=_[4],A=_[5],P=_[6];S&&void 0===P&&invalidErr(t,"missing exponent power"),S&&void 0===E&&invalidErr(t,"missing exponent base"),void 0===S&&(A||P)&&invalidErr(t,"missing e before exponent")}if("+"!==t[m]&&"-"!==t[m]||(n="-"===t[m++]),!isDigit(t[m])&&"."!==t[m]){if("i"===t[m]||"I"===t[m])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===t[m])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(t[m])||"."===t[m];)"."!==t[m]?(f<34&&("0"!==t[m]||i)&&(i||(c=s),i=!0,l[h++]=parseInt(t[m],10),f+=1),i&&(u+=1),r&&(a+=1),s+=1,m+=1):(r&&invalidErr(t,"contains multiple periods"),r=!0,m+=1);if(r&&!s)throw new TypeError(t+" not a valid Decimal128 string");if("e"===t[m]||"E"===t[m]){var I=t.substr(++m).match(EXPONENT_REGEX);if(!I||!I[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));y=parseInt(I[0],10),m+=I[0].length}if(t[m])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(d=0,f){if(p=f-1,1!==(o=u))for(;"0"===t[c+o-1];)o-=1}else d=0,p=0,l[0]=0,u=1,f=1,o=0;for(y<=a&&a-y>16384?y=EXPONENT_MIN:y-=a;y>EXPONENT_MAX;){if((p+=1)-d>MAX_DIGITS){if(l.join("").match(/^0+$/)){y=EXPONENT_MAX;break}invalidErr(t,"overflow")}y-=1}for(;y<EXPONENT_MIN||f<u;){if(0===p&&o<f){y=EXPONENT_MIN,o=0;break}if(f<u?u-=1:p-=1,y<EXPONENT_MAX)y+=1;else{if(l.join("").match(/^0+$/)){y=EXPONENT_MAX;break}invalidErr(t,"overflow")}}if(p-d+1<o){var N=s;r&&(c+=1,N+=1),n&&(c+=1,N+=1);var T=parseInt(t[c+p+1],10),j=0;if(T>=5&&(j=1,5===T))for(j=l[p]%2==1,b=c+p+2;b<N;b++)if(parseInt(t[b],10)){j=1;break}if(j)for(var x=p;x>=0;x--)if(++l[x]>9&&(l[x]=0,0===x)){if(!(y<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));y+=1,l[x]=1}}if(v=long_1.fromNumber(0),g=long_1.fromNumber(0),0===o)v=long_1.fromNumber(0),g=long_1.fromNumber(0);else if(p-d<17){var D=d;for(g=long_1.fromNumber(l[D++]),v=new long_1(0,0);D<=p;D++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[D]))}else{var C=d;for(v=long_1.fromNumber(l[C++]);C<=p-17;C++)v=(v=v.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[C]));for(g=long_1.fromNumber(l[C++]);C<=p;C++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[C]))}var R=multiply64x2(v,long_1.fromString("100000000000000000"));R.low=R.low.add(g),lessThan(R.low,g)&&(R.high=R.high.add(long_1.fromNumber(1))),e=y+EXPONENT_BIAS;var k={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};R.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(k.high=k.high.or(long_1.fromNumber(3).shiftLeft(61)),k.high=k.high.or(long_1.fromNumber(e).and(long_1.fromNumber(16383).shiftLeft(47))),k.high=k.high.or(R.high.and(long_1.fromNumber(0x7fffffffffff)))):(k.high=k.high.or(long_1.fromNumber(16383&e).shiftLeft(49)),k.high=k.high.or(R.high.and(long_1.fromNumber(562949953421311)))),k.low=R.low,n&&(k.high=k.high.or(long_1.fromString("9223372036854775808")));var B=Buffer$2.alloc(16);return m=0,B[m++]=255&k.low.low,B[m++]=k.low.low>>8&255,B[m++]=k.low.low>>16&255,B[m++]=k.low.low>>24&255,B[m++]=255&k.low.high,B[m++]=k.low.high>>8&255,B[m++]=k.low.high>>16&255,B[m++]=k.low.high>>24&255,B[m++]=255&k.high.low,B[m++]=k.high.low>>8&255,B[m++]=k.high.low>>16&255,B[m++]=k.high.low>>24&255,B[m++]=255&k.high.high,B[m++]=k.high.high>>8&255,B[m++]=k.high.high>>16&255,B[m++]=k.high.high>>24&255,new Decimal128(B)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var t,e,n,r,i,o,s=0,u=new Array(36),a=0;a<u.length;a++)u[a]=0;var c,l,f,h,d,p=0,y=!1,b={parts:new Array(4)},v=[];p=0;var g=this.bytes;if(r=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,n=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,e=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,t=g[p++]|g[p++]<<8|g[p++]<<16|g[p++]<<24,p=0,{low:new long_1(r,n),high:new long_1(e,t)}.high.lessThan(long_1.ZERO)&&v.push("-"),(i=t>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return v.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=t>>15&EXPONENT_MASK,f=8+(t>>14&1)}else f=t>>14&7,o=t>>17&EXPONENT_MASK;if(c=o-EXPONENT_BIAS,b.parts[0]=(16383&t)+((15&f)<<14),b.parts[1]=e,b.parts[2]=n,b.parts[3]=r,0===b.parts[0]&&0===b.parts[1]&&0===b.parts[2]&&0===b.parts[3])y=!0;else for(d=3;d>=0;d--){var m=0,_=divideu128(b);if(b=_.quotient,m=_.rem.low)for(h=8;h>=0;h--)u[9*d+h]=m%10,m=Math.floor(m/10)}if(y)s=1,u[p]=0;else for(s=36;!u[p];)s-=1,p+=1;if((l=s-1+c)>=34||l<=-7||c>0){if(s>34)return v.push(0),c>0?v.push("E+"+c):c<0&&v.push("E"+c),v.join("");v.push(u[p++]),(s-=1)&&v.push(".");for(var w=0;w<s;w++)v.push(u[p++]);v.push("E"),l>0?v.push("+"+l):v.push(l)}else if(c>=0)for(var O=0;O<s;O++)v.push(u[p++]);else{var E=s+c;if(E>0)for(var S=0;S<E;S++)v.push(u[p++]);else v.push("0");for(v.push(".");E++<0;)v.push("0");for(var A=0;A<s-Math.max(E-1,0);A++)v.push(u[p++])}return v.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(t){return Decimal128.fromString(t.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$7(t,e,n){return e&&_defineProperties$7(t.prototype,e),n&&_defineProperties$7(t,n),t}var MinKey=function(){function t(){_classCallCheck$7(this,t)}return _createClass$7(t,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new t}}]),t}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$8(t,e,n){return e&&_defineProperties$8(t.prototype,e),n&&_defineProperties$8(t,n),t}var MaxKey=function(){function t(){_classCallCheck$8(this,t)}return _createClass$8(t,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new t}}]),t}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$9(t,e,n){return e&&_defineProperties$9(t.prototype,e),n&&_defineProperties$9(t,n),t}var DBRef=function(){function t(e,n,r,i){_classCallCheck$9(this,t);var o=e.split(".");2===o.length&&(r=o.shift(),e=o.shift()),this.collection=e,this.oid=n,this.db=r,this.fields=i||{}}return _createClass$9(t,[{key:"toJSON",value:function(){var t=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(t.$db=this.db),t}},{key:"toExtendedJSON",value:function(){var t={$ref:this.collection,$id:this.oid};return this.db&&(t.$db=this.db),t=Object.assign(t,this.fields)}}],[{key:"fromExtendedJSON",value:function(e){var n=Object.assign({},e);return["$ref","$id","$db"].forEach((function(t){return delete n[t]})),new t(e.$ref,e.$id,e.$db,n)}}]),t}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(t){this.collection=t},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass$a(t,e,n){return e&&_defineProperties$a(t.prototype,e),n&&_defineProperties$a(t,n),t}var Buffer$3=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,Binary=function(){function t(e,n){if(_classCallCheck$a(this,t),!(null==e||"string"==typeof e||Buffer$3.isBuffer(e)||e instanceof Uint8Array||Array.isArray(e)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==n?BSON_BINARY_SUBTYPE_DEFAULT:n,this.position=0,null==e||e instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(t.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(t.BUFFER_SIZE)):this.buffer=new Array(t.BUFFER_SIZE);else{if("string"==typeof e)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(e);else{if("undefined"==typeof Uint8Array&&!Array.isArray(e))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(e)}else this.buffer=e;this.position=e.length}}return _createClass$a(t,[{key:"put",value:function(e){if(null!=e.length&&"number"!=typeof e&&1!==e.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof e&&e<0||e>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var n=null;if(n="string"==typeof e?e.charCodeAt(0):null!=e.length?e[0]:e,this.buffer.length>this.position)this.buffer[this.position++]=n;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var r=Buffer$3.alloc(t.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=n}else{var i=null;i=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(t.BUFFER_SIZE+this.buffer.length)):new Array(t.BUFFER_SIZE+this.buffer.length);for(var o=0;o<this.buffer.length;o++)i[o]=this.buffer[o];this.buffer=i,this.buffer[this.position++]=n}}},{key:"write",value:function(t,e){if(e="number"==typeof e?e:this.position,this.buffer.length<e+t.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+t.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+t.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(t)&&Buffer$3.isBuffer(this.buffer))t.copy(this.buffer,e,0,t.length),this.position=e+t.length>this.position?e+t.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof t&&Buffer$3.isBuffer(this.buffer))this.buffer.write(t,e,"binary"),this.position=e+t.length>this.position?e+t.length:this.position;else if(isUint8Array(t)||Array.isArray(t)&&"string"!=typeof t){for(var i=0;i<t.length;i++)this.buffer[e++]=t[i];this.position=e>this.position?e:this.position}else if("string"==typeof t){for(var o=0;o<t.length;o++)this.buffer[e++]=t.charCodeAt(o);this.position=e>this.position?e:this.position}}},{key:"read",value:function(t,e){if(e=e&&e>0?e:this.position,this.buffer.slice)return this.buffer.slice(t,t+e);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e)):new Array(e),r=0;r<e;r++)n[r]=this.buffer[t++];return n}},{key:"value",value:function(t){if((t=null!=t&&t)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return t?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(t){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var e=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)e[n]=this.buffer[n];return e}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(t){return null!=this.buffer?this.buffer.slice(0,this.position).toString(t):""}},{key:"toExtendedJSON",value:function(){var t=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),e=Number(this.sub_type).toString(16);return{$binary:{base64:t,subType:1===e.length?"0"+e:e}}}}],[{key:"fromExtendedJSON",value:function(e){var n=e.$binary.subType?parseInt(e.$binary.subType,16):0;return new t(Buffer$3.from(e.$binary.base64,"base64"),n)}}]),t}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(t){return"[object Uint8Array]"===Object.prototype.toString.call(t)}function writeStringToArray(t){for(var e="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t.length)):new Array(t.length),n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}function convertArraytoUtf8BinaryString(t,e,n){for(var r="",i=e;i<n;i++)r+=String.fromCharCode(t[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(t){return(_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(t,e,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(n>=BSON_INT32_MIN&&n<=BSON_INT32_MAX)return new int_32(n);if(n>=BSON_INT64_MIN&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter((function(t){return t.startsWith("$")&&null!=n[t]})),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var u=n.$date,a=new Date;return"string"==typeof u?a.setTime(Date.parse(u)):long_1.isLong(u)?a.setTime(u.toNumber()):"number"==typeof u&&r.relaxed&&a.setTime(u),a}if(null!=n.$code){var c=Object.assign({},n);return n.$scope&&(c.$scope=deserializeValue(t,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var l=n.$ref?n:n.$dbPointer;if(l instanceof db_ref)return l;var f=Object.keys(l).filter((function(t){return t.startsWith("$")})),h=!0;if(f.forEach((function(t){-1===["$ref","$id","$db"].indexOf(t)&&(h=!1)})),h)return db_ref.fromExtendedJSON(l)}return n}function parse(t,e){var n=this;return"boolean"==typeof(e=Object.assign({},{relaxed:!0},e)).relaxed&&(e.strict=!e.relaxed),"boolean"==typeof e.strict&&(e.relaxed=!e.strict),JSON.parse(t,(function(t,r){return deserializeValue(n,t,r,e)}))}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(t,e,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==e||"object"!==_typeof$2(e)||Array.isArray(e)||(r=e,e=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(t)?serializeArray(t,r):serializeDocument(t,r);return JSON.stringify(i,e,n)}function serialize(t,e){return e=e||{},JSON.parse(stringify(t,e))}function deserialize(t,e){return e=e||{},parse(JSON.stringify(t),e)}function serializeArray(t,e){return t.map((function(t){return serializeValue(t,e)}))}function getISOString(t){var e=t.toISOString();return 0!==t.getUTCMilliseconds()?e:e.slice(0,-5)+"Z"}function serializeValue(t,e){if(Array.isArray(t))return serializeArray(t,e);if(void 0===t)return null;if(t instanceof Date){var n=t.getTime(),r=n>-1&&n<2534023188e5;return e.relaxed&&r?{$date:getISOString(t)}:{$date:{$numberLong:t.getTime().toString()}}}if("number"==typeof t&&!e.relaxed){if(Math.floor(t)===t){var i=t>=BSON_INT64_MIN&&t<=BSON_INT64_MAX;if(t>=BSON_INT32_MIN&&t<=BSON_INT32_MAX)return{$numberInt:t.toString()};if(i)return{$numberLong:t.toString()}}return{$numberDouble:t.toString()}}if(t instanceof RegExp){var o=t.flags;return void 0===o&&(o=t.toString().match(/[gimuy]*$/)[0]),new regexp(t.source,o).toExtendedJSON()}return null!=t&&"object"===_typeof$2(t)?serializeDocument(t,e):t}var BSON_TYPE_MAPPINGS={Binary:function(t){return new binary(t.value(),t.subtype)},Code:function(t){return new code(t.code,t.scope)},DBRef:function(t){return new db_ref(t.collection||t.namespace,t.oid,t.db,t.fields)},Decimal128:function(t){return new decimal128(t.bytes)},Double:function(t){return new double_1(t.value)},Int32:function(t){return new int_32(t.value)},Long:function(t){return long_1.fromBits(null!=t.low?t.low:t.low_,null!=t.low?t.high:t.high_,null!=t.low?t.unsigned:t.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(t){return new objectid(t)},ObjectId:function(t){return new objectid(t)},BSONRegExp:function(t){return new regexp(t.pattern,t.options)},Symbol:function(t){return new symbol(t.value)},Timestamp:function(t){return timestamp.fromBits(t.low,t.high)}};function serializeDocument(t,e){if(null==t||"object"!==_typeof$2(t))throw new Error("not an object instance");var n=t._bsontype;if(void 0===n){var r={};for(var i in t)r[i]=serializeValue(t[i],e);return r}if("string"==typeof n){var o=t;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,e)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,e),o.db,o.fields)),o.toExtendedJSON(e)}throw new Error("_bsontype must be a string, but was: "+_typeof$2(n))}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(t,e,n){for(var r=0,i=e;i<n;i+=1){var o=t[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(t,e,n){var r=(e=null==e?{}:e)&&e.index?e.index:0,i=t[r]|t[r+1]<<8|t[r+2]<<16|t[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(e.allowObjectSmallerThanBufferSize&&t.length<i)throw new Error("buffer length ".concat(t.length," must be >= bson size ").concat(i));if(!e.allowObjectSmallerThanBufferSize&&t.length!==i)throw new Error("buffer length ".concat(t.length," must === bson size ").concat(i));if(i+r>t.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(t),")"));if(0!==t[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(t,r,e,n)}function deserializeObject(t,e,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var u=null;var a=null==n.fieldsAsRaw?null:n.fieldsAsRaw,c=null!=n.raw&&n.raw,l="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,f=null!=n.promoteBuffers&&n.promoteBuffers,h=null==n.promoteLongs||n.promoteLongs,d=null==n.promoteValues||n.promoteValues,p=e;if(t.length<5)throw new Error("corrupt bson message < 5 bytes long");var y=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(y<5||y>t.length)throw new Error("corrupt bson message");for(var b=r?[]:{},v=0;;){var g=t[e++];if(0===g)break;for(var m=e;0!==t[m]&&m<t.length;)m++;if(m>=Buffer$4.byteLength(t))throw new Error("Bad BSON Document: illegal CString");var _=r?v++:t.toString("utf8",e,m);if(e=m+1,g===constants.BSON_DATA_STRING){var w=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(w<=0||w>t.length-e||0!==t[e+w-1])throw new Error("bad string length in bson");if(!validateUtf8$1(t,e,e+w-1))throw new Error("Invalid UTF-8 string in BSON document");var O=t.toString("utf8",e,e+w-1);b[_]=O,e+=w}else if(g===constants.BSON_DATA_OID){var E=Buffer$4.alloc(12);t.copy(E,0,e,e+12),b[_]=new objectid(E),e+=12}else if(g===constants.BSON_DATA_INT&&!1===d)b[_]=new int_32(t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24);else if(g===constants.BSON_DATA_INT)b[_]=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;else if(g===constants.BSON_DATA_NUMBER&&!1===d)b[_]=new double_1(t.readDoubleLE(e)),e+=8;else if(g===constants.BSON_DATA_NUMBER)b[_]=t.readDoubleLE(e),e+=8;else if(g===constants.BSON_DATA_DATE){var S=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,A=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;b[_]=new Date(new long_1(S,A).toNumber())}else if(g===constants.BSON_DATA_BOOLEAN){if(0!==t[e]&&1!==t[e])throw new Error("illegal boolean type value");b[_]=1===t[e++]}else if(g===constants.BSON_DATA_OBJECT){var P=e,I=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24;if(I<=0||I>t.length-e)throw new Error("bad embedded document length in bson");b[_]=c?t.slice(e,e+I):deserializeObject(t,P,n,!1),e+=I}else if(g===constants.BSON_DATA_ARRAY){var N=e,T=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24,j=n,x=e+T;if(a&&a[_]){for(var D in j={},n)j[D]=n[D];j.raw=!0}if(b[_]=deserializeObject(t,N,j,!0),0!==t[(e+=T)-1])throw new Error("invalid array terminator byte");if(e!==x)throw new Error("corrupted array bson")}else if(g===constants.BSON_DATA_UNDEFINED)b[_]=void 0;else if(g===constants.BSON_DATA_NULL)b[_]=null;else if(g===constants.BSON_DATA_LONG){var C=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,R=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,k=new long_1(C,R);b[_]=h&&!0===d&&k.lessThanOrEqual(JS_INT_MAX_LONG)&&k.greaterThanOrEqual(JS_INT_MIN_LONG)?k.toNumber():k}else if(g===constants.BSON_DATA_DECIMAL128){var B=Buffer$4.alloc(16);t.copy(B,0,e,e+16),e+=16;var M=new decimal128(B);b[_]=M.toObject?M.toObject():M}else if(g===constants.BSON_DATA_BINARY){var U=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,L=U,F=t[e++];if(U<0)throw new Error("Negative binary type element size found");if(U>Buffer$4.byteLength(t))throw new Error("Binary type size larger than document size");if(null!=t.slice){if(F===binary.SUBTYPE_BYTE_ARRAY){if((U=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U>L-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(U<L-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}b[_]=f&&d?t.slice(e,e+U):new binary(t.slice(e,e+U),F)}else{var $="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(U)):new Array(U);if(F===binary.SUBTYPE_BYTE_ARRAY){if((U=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U>L-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(U<L-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(m=0;m<U;m++)$[m]=t[e+m];b[_]=f&&d?$:new binary($,F)}e+=U}else if(g===constants.BSON_DATA_REGEXP&&!1===l){for(m=e;0!==t[m]&&m<t.length;)m++;if(m>=t.length)throw new Error("Bad BSON Document: illegal CString");var z=t.toString("utf8",e,m);for(m=e=m+1;0!==t[m]&&m<t.length;)m++;if(m>=t.length)throw new Error("Bad BSON Document: illegal CString");var q=t.toString("utf8",e,m);e=m+1;var V=new Array(q.length);for(m=0;m<q.length;m++)switch(q[m]){case"m":V[m]="m";break;case"s":V[m]="g";break;case"i":V[m]="i"}b[_]=new RegExp(z,V.join(""))}else if(g===constants.BSON_DATA_REGEXP&&!0===l){for(m=e;0!==t[m]&&m<t.length;)m++;if(m>=t.length)throw new Error("Bad BSON Document: illegal CString");var W=t.toString("utf8",e,m);for(m=e=m+1;0!==t[m]&&m<t.length;)m++;if(m>=t.length)throw new Error("Bad BSON Document: illegal CString");var Y=t.toString("utf8",e,m);e=m+1,b[_]=new regexp(W,Y)}else if(g===constants.BSON_DATA_SYMBOL){var K=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(K<=0||K>t.length-e||0!==t[e+K-1])throw new Error("bad string length in bson");b[_]=t.toString("utf8",e,e+K-1),e+=K}else if(g===constants.BSON_DATA_TIMESTAMP){var J=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24,G=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;b[_]=new timestamp(J,G)}else if(g===constants.BSON_DATA_MIN_KEY)b[_]=new min_key;else if(g===constants.BSON_DATA_MAX_KEY)b[_]=new max_key;else if(g===constants.BSON_DATA_CODE){var H=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(H<=0||H>t.length-e||0!==t[e+H-1])throw new Error("bad string length in bson");var X=t.toString("utf8",e,e+H-1);if(i)if(o){var Q=s?u(X):X;b[_]=isolateEvalWithHash(functionCache,Q,X,b)}else b[_]=isolateEval(X);else b[_]=new code(X);e+=H}else if(g===constants.BSON_DATA_CODE_W_SCOPE){var Z=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(Z<13)throw new Error("code_w_scope total size shorter minimum expected length");var tt=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(tt<=0||tt>t.length-e||0!==t[e+tt-1])throw new Error("bad string length in bson");var et=t.toString("utf8",e,e+tt-1),nt=e+=tt,rt=t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24,it=deserializeObject(t,nt,n,!1);if(e+=rt,Z<8+rt+tt)throw new Error("code_w_scope total size is to short, truncating scope");if(Z>8+rt+tt)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var ot=s?u(et):et;b[_]=isolateEvalWithHash(functionCache,ot,et,b)}else b[_]=isolateEval(et);b[_].scope=it}else b[_]=new code(et,it)}else{if(g!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+g.toString(16)+' for fieldname "'+_+'", are you using the latest BSON parser?');var st=t[e++]|t[e++]<<8|t[e++]<<16|t[e++]<<24;if(st<=0||st>t.length-e||0!==t[e+st-1])throw new Error("bad string length in bson");if(!validateUtf8$1(t,e,e+st-1))throw new Error("Invalid UTF-8 string in BSON document");var ut=t.toString("utf8",e,e+st-1);e+=st;var at=Buffer$4.alloc(12);t.copy(at,0,e,e+12);var ct=new objectid(at);e+=12,b[_]=new db_ref(ut,ct)}}if(y!==e-p){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var lt=Object.keys(b).filter((function(t){return t.startsWith("$")})),ft=!0;if(lt.forEach((function(t){-1===["$ref","$id","$db"].indexOf(t)&&(ft=!1)})),!ft)return b;if(null!=b.$id&&null!=b.$ref){var ht=Object.assign({},b);return delete ht.$ref,delete ht.$id,delete ht.$db,new db_ref(b.$ref,b.$id,b.$db||null,ht)}return b}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(t,e,n,r,i){var o,s,u="big"===n,a=8*i-r-1,c=(1<<a)-1,l=c>>1,f=-7,h=u?0:i-1,d=u?1:-1,p=t[e+h];for(h+=d,o=p&(1<<-f)-1,p>>=-f,f+=a;f>0;o=256*o+t[e+h],h+=d,f-=8);for(s=o&(1<<-f)-1,o>>=-f,f+=r;f>0;s=256*s+t[e+h],h+=d,f-=8);if(0===o)o=1-l;else{if(o===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=l}return(p?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(t,e,n,r,i,o){var s,u,a,c="big"===r,l=8*o-i-1,f=(1<<l)-1,h=f>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=c?o-1:0,y=c?-1:1,b=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-s))<1&&(s--,a*=2),(e+=s+h>=1?d/a:d*Math.pow(2,1-h))*a>=2&&(s++,a/=2),s+h>=f?(u=0,s=f):s+h>=1?(u=(e*a-1)*Math.pow(2,i),s+=h):(u=e*Math.pow(2,h-1)*Math.pow(2,i),s=0)),isNaN(e)&&(u=0);i>=8;)t[n+p]=255&u,p+=y,u/=256,i-=8;for(s=s<<i|u,isNaN(e)&&(s+=8),l+=i;l>0;)t[n+p]=255&s,p+=y,s/=256,l-=8;t[n+p-y]|=128*b}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(t){return(_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Buffer$5=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(t){return"object"===_typeof$3(t)&&"[object Date]"===Object.prototype.toString.call(t)},isRegExp$1=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)};function serializeString(t,e,n,r,i){t[r++]=constants.BSON_DATA_STRING;var o=i?t.write(e,r,"ascii"):t.write(e,r,"utf8");t[(r=r+o+1)-1]=0;var s=t.write(n,r+4,"utf8");return t[r+3]=s+1>>24&255,t[r+2]=s+1>>16&255,t[r+1]=s+1>>8&255,t[r]=s+1&255,r=r+4+s,t[r++]=0,r}function serializeNumber(t,e,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)t[r++]=constants.BSON_DATA_INT,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=255&n,t[r++]=n>>8&255,t[r++]=n>>16&255,t[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n,r,"little",52,8),r+=8}else{t[r++]=constants.BSON_DATA_LONG,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),u=o.getHighBits();t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=255&u,t[r++]=u>>8&255,t[r++]=u>>16&255,t[r++]=u>>24&255}else t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n,r,"little",52,8),r+=8;return r}function serializeNull(t,e,n,r,i){return t[r++]=constants.BSON_DATA_NULL,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,r}function serializeBoolean(t,e,n,r,i){return t[r++]=constants.BSON_DATA_BOOLEAN,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=n?1:0,r}function serializeDate(t,e,n,r,i){t[r++]=constants.BSON_DATA_DATE,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),u=o.getHighBits();return t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=255&u,t[r++]=u>>8&255,t[r++]=u>>16&255,t[r++]=u>>24&255,r}function serializeRegExp(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_REGEXP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=t.write(n.source,r,"utf8"),t[r++]=0,n.ignoreCase&&(t[r++]=105),n.global&&(t[r++]=115),n.multiline&&(t[r++]=109),t[r++]=0,r}function serializeBSONRegExp(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_REGEXP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=t.write(n.pattern,r,"utf8"),t[r++]=0,r+=t.write(n.options.split("").sort().join(""),r,"utf8"),t[r++]=0,r}function serializeMinMax(t,e,n,r,i){return null===n?t[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?t[r++]=constants.BSON_DATA_MIN_KEY:t[r++]=constants.BSON_DATA_MAX_KEY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,r}function serializeObjectId(t,e,n,r,i){if(t[r++]=constants.BSON_DATA_OID,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,"string"==typeof n.id)t.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(t,r,0,12)}return r+12}function serializeBuffer(t,e,n,r,i){t[r++]=constants.BSON_DATA_BINARY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.length;return t[r++]=255&o,t[r++]=o>>8&255,t[r++]=o>>16&255,t[r++]=o>>24&255,t[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(t,r,0,o),r+=o}function serializeObject(t,e,n,r,i,o,s,u,a,c){for(var l=0;l<c.length;l++)if(c[l]===n)throw new Error("cyclic dependency detected");c.push(n),t[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=a?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var f=serializeInto(t,n,i,r,o+1,s,u,c);return c.pop(),f}function serializeDecimal128(t,e,n,r,i){return t[r++]=constants.BSON_DATA_DECIMAL128,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,n.bytes.copy(t,r,0,16),r+16}function serializeLong(t,e,n,r,i){t[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return t[r++]=255&o,t[r++]=o>>8&255,t[r++]=o>>16&255,t[r++]=o>>24&255,t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,r}function serializeInt32(t,e,n,r,i){return t[r++]=constants.BSON_DATA_INT,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,t[r++]=255&n,t[r++]=n>>8&255,t[r++]=n>>16&255,t[r++]=n>>24&255,r}function serializeDouble(t,e,n,r,i){return t[r++]=constants.BSON_DATA_NUMBER,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0,writeIEEE754$1(t,n.value,r,"little",52,8),r+=8}function serializeFunction(t,e,n,r,i,o,s){t[r++]=constants.BSON_DATA_CODE,r+=s?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var u=normalizedFunctionString$1(n),a=t.write(u,r+4,"utf8")+1;return t[r]=255&a,t[r+1]=a>>8&255,t[r+2]=a>>16&255,t[r+3]=a>>24&255,r=r+4+a-1,t[r++]=0,r}function serializeCode(t,e,n,r,i,o,s,u,a){if(n.scope&&"object"===_typeof$3(n.scope)){t[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=a?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var c=r,l="string"==typeof n.code?n.code:n.code.toString();r+=4;var f=t.write(l,r+4,"utf8")+1;t[r]=255&f,t[r+1]=f>>8&255,t[r+2]=f>>16&255,t[r+3]=f>>24&255,t[r+4+f-1]=0,r=r+f+4;var h=serializeInto(t,n.scope,i,r,o+1,s,u);r=h-1;var d=h-c;t[c++]=255&d,t[c++]=d>>8&255,t[c++]=d>>16&255,t[c++]=d>>24&255,t[r++]=0}else{t[r++]=constants.BSON_DATA_CODE,r+=a?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var p=n.code.toString(),y=t.write(p,r+4,"utf8")+1;t[r]=255&y,t[r+1]=y>>8&255,t[r+2]=y>>16&255,t[r+3]=y>>24&255,r=r+4+y-1,t[r++]=0}return r}function serializeBinary(t,e,n,r,i){t[r++]=constants.BSON_DATA_BINARY,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255,t[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,t[r++]=255&s,t[r++]=s>>8&255,t[r++]=s>>16&255,t[r++]=s>>24&255),o.copy(t,r,0,n.position),r+=n.position}function serializeSymbol(t,e,n,r,i){t[r++]=constants.BSON_DATA_SYMBOL,r+=i?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var o=t.write(n.value,r+4,"utf8")+1;return t[r]=255&o,t[r+1]=o>>8&255,t[r+2]=o>>16&255,t[r+3]=o>>24&255,r=r+4+o-1,t[r++]=0,r}function serializeDBRef(t,e,n,r,i,o,s){t[r++]=constants.BSON_DATA_OBJECT,r+=s?t.write(e,r,"ascii"):t.write(e,r,"utf8"),t[r++]=0;var u,a=r,c={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(c.$db=n.db);var l=(u=serializeInto(t,c=Object.assign(c,n.fields),!1,r,i+1,o))-a;return t[a++]=255&l,t[a++]=l>>8&255,t[a++]=l>>16&255,t[a++]=l>>24&255,u}function serializeInto(t,e,n,r,i,o,s,u){r=r||0,(u=u||[]).push(e);var a=r+4;if(Array.isArray(e))for(var c=0;c<e.length;c++){var l=""+c,f=e[c];if(f&&f.toBSON){if("function"!=typeof f.toBSON)throw new TypeError("toBSON is not a function");f=f.toBSON()}var h=_typeof$3(f);if("string"===h)a=serializeString(t,l,f,a,!0);else if("number"===h)a=serializeNumber(t,l,f,a,!0);else if("boolean"===h)a=serializeBoolean(t,l,f,a,!0);else if(f instanceof Date||isDate$1(f))a=serializeDate(t,l,f,a,!0);else if(void 0===f)a=serializeNull(t,l,f,a,!0);else if(null===f)a=serializeNull(t,l,f,a,!0);else if("ObjectId"===f._bsontype||"ObjectID"===f._bsontype)a=serializeObjectId(t,l,f,a,!0);else if(Buffer$5.isBuffer(f))a=serializeBuffer(t,l,f,a,!0);else if(f instanceof RegExp||isRegExp$1(f))a=serializeRegExp(t,l,f,a,!0);else if("object"===h&&null==f._bsontype)a=serializeObject(t,l,f,a,n,i,o,s,!0,u);else if("object"===h&&"Decimal128"===f._bsontype)a=serializeDecimal128(t,l,f,a,!0);else if("Long"===f._bsontype||"Timestamp"===f._bsontype)a=serializeLong(t,l,f,a,!0);else if("Double"===f._bsontype)a=serializeDouble(t,l,f,a,!0);else if("function"==typeof f&&o)a=serializeFunction(t,l,f,a,n,i,o,!0);else if("Code"===f._bsontype)a=serializeCode(t,l,f,a,n,i,o,s,!0);else if("Binary"===f._bsontype)a=serializeBinary(t,l,f,a,!0);else if("Symbol"===f._bsontype)a=serializeSymbol(t,l,f,a,!0);else if("DBRef"===f._bsontype)a=serializeDBRef(t,l,f,a,i,o,!0);else if("BSONRegExp"===f._bsontype)a=serializeBSONRegExp(t,l,f,a,!0);else if("Int32"===f._bsontype)a=serializeInt32(t,l,f,a,!0);else if("MinKey"===f._bsontype||"MaxKey"===f._bsontype)a=serializeMinMax(t,l,f,a,!0);else if(void 0!==f._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+f._bsontype)}else if(e instanceof map)for(var d=e.entries(),p=!1;!p;){var y=d.next();if(!(p=y.done)){var b=y.value[0],v=y.value[1],g=_typeof$3(v);if("string"==typeof b&&!ignoreKeys.has(b)){if(null!=b.match(regexp$1))throw Error("key "+b+" must not contain null bytes");if(n){if("$"===b[0])throw Error("key "+b+" must not start with '$'");if(~b.indexOf("."))throw Error("key "+b+" must not contain '.'")}}if("string"===g)a=serializeString(t,b,v,a);else if("number"===g)a=serializeNumber(t,b,v,a);else if("boolean"===g)a=serializeBoolean(t,b,v,a);else if(v instanceof Date||isDate$1(v))a=serializeDate(t,b,v,a);else if(null===v||void 0===v&&!1===s)a=serializeNull(t,b,v,a);else if("ObjectId"===v._bsontype||"ObjectID"===v._bsontype)a=serializeObjectId(t,b,v,a);else if(Buffer$5.isBuffer(v))a=serializeBuffer(t,b,v,a);else if(v instanceof RegExp||isRegExp$1(v))a=serializeRegExp(t,b,v,a);else if("object"===g&&null==v._bsontype)a=serializeObject(t,b,v,a,n,i,o,s,!1,u);else if("object"===g&&"Decimal128"===v._bsontype)a=serializeDecimal128(t,b,v,a);else if("Long"===v._bsontype||"Timestamp"===v._bsontype)a=serializeLong(t,b,v,a);else if("Double"===v._bsontype)a=serializeDouble(t,b,v,a);else if("Code"===v._bsontype)a=serializeCode(t,b,v,a,n,i,o,s);else if("function"==typeof v&&o)a=serializeFunction(t,b,v,a,n,i,o);else if("Binary"===v._bsontype)a=serializeBinary(t,b,v,a);else if("Symbol"===v._bsontype)a=serializeSymbol(t,b,v,a);else if("DBRef"===v._bsontype)a=serializeDBRef(t,b,v,a,i,o);else if("BSONRegExp"===v._bsontype)a=serializeBSONRegExp(t,b,v,a);else if("Int32"===v._bsontype)a=serializeInt32(t,b,v,a);else if("MinKey"===v._bsontype||"MaxKey"===v._bsontype)a=serializeMinMax(t,b,v,a);else if(void 0!==v._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+v._bsontype)}}else{if(e.toBSON){if("function"!=typeof e.toBSON)throw new TypeError("toBSON is not a function");if(null!=(e=e.toBSON())&&"object"!==_typeof$3(e))throw new TypeError("toBSON function did not return an object")}for(var m in e){var _=e[m];if(_&&_.toBSON){if("function"!=typeof _.toBSON)throw new TypeError("toBSON is not a function");_=_.toBSON()}var w=_typeof$3(_);if("string"==typeof m&&!ignoreKeys.has(m)){if(null!=m.match(regexp$1))throw Error("key "+m+" must not contain null bytes");if(n){if("$"===m[0])throw Error("key "+m+" must not start with '$'");if(~m.indexOf("."))throw Error("key "+m+" must not contain '.'")}}if("string"===w)a=serializeString(t,m,_,a);else if("number"===w)a=serializeNumber(t,m,_,a);else if("boolean"===w)a=serializeBoolean(t,m,_,a);else if(_ instanceof Date||isDate$1(_))a=serializeDate(t,m,_,a);else if(void 0===_)!1===s&&(a=serializeNull(t,m,_,a));else if(null===_)a=serializeNull(t,m,_,a);else if("ObjectId"===_._bsontype||"ObjectID"===_._bsontype)a=serializeObjectId(t,m,_,a);else if(Buffer$5.isBuffer(_))a=serializeBuffer(t,m,_,a);else if(_ instanceof RegExp||isRegExp$1(_))a=serializeRegExp(t,m,_,a);else if("object"===w&&null==_._bsontype)a=serializeObject(t,m,_,a,n,i,o,s,!1,u);else if("object"===w&&"Decimal128"===_._bsontype)a=serializeDecimal128(t,m,_,a);else if("Long"===_._bsontype||"Timestamp"===_._bsontype)a=serializeLong(t,m,_,a);else if("Double"===_._bsontype)a=serializeDouble(t,m,_,a);else if("Code"===_._bsontype)a=serializeCode(t,m,_,a,n,i,o,s);else if("function"==typeof _&&o)a=serializeFunction(t,m,_,a,n,i,o);else if("Binary"===_._bsontype)a=serializeBinary(t,m,_,a);else if("Symbol"===_._bsontype)a=serializeSymbol(t,m,_,a);else if("DBRef"===_._bsontype)a=serializeDBRef(t,m,_,a,i,o);else if("BSONRegExp"===_._bsontype)a=serializeBSONRegExp(t,m,_,a);else if("Int32"===_._bsontype)a=serializeInt32(t,m,_,a);else if("MinKey"===_._bsontype||"MaxKey"===_._bsontype)a=serializeMinMax(t,m,_,a);else if(void 0!==_._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+_._bsontype)}}u.pop(),t[a++]=0;var O=a-r;return t[r++]=255&O,t[r++]=O>>8&255,t[r++]=O>>16&255,t[r++]=O>>24&255,a}var serializer=serializeInto;function _typeof$4(t){return(_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Buffer$6=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(t){return"object"===_typeof$4(t)&&"[object Date]"===Object.prototype.toString.call(t)}function calculateObjectSize(t,e,n){var r=5;if(Array.isArray(t))for(var i=0;i<t.length;i++)r+=calculateElement(i.toString(),t[i],e,!0,n);else for(var o in t.toBSON&&(t=t.toBSON()),t)r+=calculateElement(o,t[o],e,!1,n);return r}function calculateElement(t,e,n,r,i){switch(e&&e.toBSON&&(e=e.toBSON()),_typeof$4(e)){case"string":return 1+Buffer$6.byteLength(t,"utf8")+1+4+Buffer$6.byteLength(e,"utf8")+1;case"number":return Math.floor(e)===e&&e>=constants.JS_INT_MIN&&e<=constants.JS_INT_MAX&&e>=constants.BSON_INT32_MIN&&e<=constants.BSON_INT32_MAX?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+5:(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1:0;case"boolean":return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+2;case"object":if(null==e||"MinKey"===e._bsontype||"MaxKey"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1;if("ObjectId"===e._bsontype||"ObjectID"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+13;if(e instanceof Date||isDate$2(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+6+e.length;if("Long"===e._bsontype||"Double"===e._bsontype||"Timestamp"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+9;if("Decimal128"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+17;if("Code"===e._bsontype)return null!=e.scope&&Object.keys(e.scope).length>0?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(e.code.toString(),"utf8")+1+calculateObjectSize(e.scope,n,i):(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+Buffer$6.byteLength(e.code.toString(),"utf8")+1;if("Binary"===e._bsontype)return e.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+(e.position+1+4+1+4):(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+(e.position+1+4+1);if("Symbol"===e._bsontype)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+Buffer$6.byteLength(e.value,"utf8")+4+1+1;if("DBRef"===e._bsontype){var o=Object.assign({$ref:e.collection,$id:e.oid},e.fields);return null!=e.db&&(o.$db=e.db),(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+calculateObjectSize(o,n,i)}return e instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(e)?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.source,"utf8")+1+(e.global?1:0)+(e.ignoreCase?1:0)+(e.multiline?1:0)+1:"BSONRegExp"===e._bsontype?(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.pattern,"utf8")+1+Buffer$6.byteLength(e.options,"utf8")+1:(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+calculateObjectSize(e,n,i)+1;case"function":if(e instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(e)||"[object RegExp]"===String.call(e))return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+Buffer$6.byteLength(e.source,"utf8")+1+(e.global?1:0)+(e.ignoreCase?1:0)+(e.multiline?1:0)+1;if(n&&null!=e.scope&&Object.keys(e.scope).length>0)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(e),"utf8")+1+calculateObjectSize(e.scope,n,i);if(n)return(null!=t?Buffer$6.byteLength(t,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(e),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,ensure_buffer=function(t){if(t instanceof Buffer$7)return t;if(t instanceof Uint8Array)return Buffer$7.from(t.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(t){buffer$1.length<t&&(buffer$1=Buffer$8.alloc(t))}function serialize$1(t,e){var n="boolean"==typeof(e=e||{}).checkKeys&&e.checkKeys,r="boolean"==typeof e.serializeFunctions&&e.serializeFunctions,i="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined,o="number"==typeof e.minInternalBufferSize?e.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,t,n,0,0,r,i,[]),u=Buffer$8.alloc(s);return buffer$1.copy(u,0,0,u.length),u}function serializeWithBufferAndIndex(t,e,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,u=serializer(buffer$1,t,r,0,0,i,o);return buffer$1.copy(e,s,0,u),s+u-1}function deserialize$2(t,e){return t=ensure_buffer(t),deserializer(t,e)}function calculateObjectSize$1(t,e){var n="boolean"==typeof(e=e||{}).serializeFunctions&&e.serializeFunctions,r="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined;return calculate_size(t,n,r)}function deserializeStream(t,e,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),t=ensure_buffer(t);for(var s=e,u=0;u<n;u++){var a=t[s]|t[s+1]<<8|t[s+2]<<16|t[s+3]<<24;o.index=s,r[i+u]=deserializer(t,o),s+=a}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;__webpack_exports__.b=bson}).call(this,__webpack_require__("yLpj"),__webpack_require__("HDXh").Buffer)},ny24:function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n("mrSG"),i=n("MGBS"),o=n("zotm");function s(t){return function(e){return e.lift(new u(t))}}var u=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new a(t),r=Object(o.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),a=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.__extends(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.a)},oEso:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e="^".concat(t,"$").replace(/%/g,".*").replace(/_/g,".");return new RegExp(e,"i")}},oPt8:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sanitizedRaw=function(t,e){var{id:n,_status:r,_changed:s}=t,u={};"string"==typeof n?(u.id=n,u._status=function(t){return"created"===t||"updated"===t||"deleted"===t||"synced"===t}(r)?r:"created",u._changed="string"==typeof s?s:""):(u.id=(0,i.default)(),u._status="created",u._changed="");for(var a=e.columnArray,c=0,l=a.length;c<l;c+=1){var f=a[c],h=f.name,d=t[h];o(u,h,d,f)}return u},e.setRawSanitized=function(t,e,n,r){o(t,e,n,r)},e.nullValue=function(t){var{isOptional:e,type:n}=t;if(e)return null;if("string"===n)return"";if("number"===n)return 0;if("boolean"===n)return!1;throw new Error("Unknown type for column schema ".concat(JSON.stringify(t)))};var r,i=(r=n("/ux2"))&&r.__esModule?r:{default:r};function o(t,e,n,r){var{type:i,isOptional:o}=r;"string"===i?t[e]="string"==typeof n?n:o?null:"":"boolean"===i?t[e]="boolean"==typeof n?n:1===n||0===n?Boolean(n):!!o&&null:!function(t){return"number"==typeof t&&t==t&&t!==1/0&&t!==-1/0}(n)?t[e]=o?null:0:t[e]=n}},pnzC:function(t,e,n){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){return function(){function t(t,e){if(this.app="loki",this.options=e||{},void 0!==t&&(this.app=t),this.catalog=null,!this.checkAvailability())throw new Error("indexedDB does not seem to be supported for your environment")}function e(t){this.db=null,this.initializeLokiCatalog(t)}return t.prototype.closeDatabase=function(){this.catalog&&this.catalog.db&&(this.catalog.db.close(),this.catalog.db=null)},t.prototype.checkAvailability=function(){return!("undefined"==typeof indexedDB||!indexedDB)},t.prototype.loadDatabase=function(t,n){var r=this.app,i=this;null!==this.catalog&&null!==this.catalog.db?this.catalog.getAppKey(r,t,(function(t){if("function"==typeof n){if(0===t.id)return void n(null);n(t.val)}else console.log(t.val)})):this.catalog=new e((function(e){i.catalog=e,i.loadDatabase(t,n)}))},t.prototype.loadKey=t.prototype.loadDatabase,t.prototype.saveDatabase=function(t,n,r){var i=this.app,o=this;function s(t){t&&!0===t.success?r(null):r(new Error("Error saving database")),o.options.closeAfterSave&&o.closeDatabase()}null!==this.catalog&&null!==this.catalog.db?this.catalog.setAppKey(i,t,n,s):this.catalog=new e((function(e){o.saveDatabase(t,n,s)}))},t.prototype.saveKey=t.prototype.saveDatabase,t.prototype.deleteDatabase=function(t,n){var r=this.app,i=this;null!==this.catalog&&null!==this.catalog.db?this.catalog.getAppKey(r,t,(function(t){var e=t.id;0!==e?i.catalog.deleteAppKey(e,n):"function"==typeof n&&n({success:!0})})):this.catalog=new e((function(e){i.catalog=e,i.deleteDatabase(t,n)}))},t.prototype.deleteKey=t.prototype.deleteDatabase,t.prototype.deleteDatabasePartitions=function(t){var e=this;this.getDatabaseList((function(n){n.forEach((function(n){n.startsWith(t)&&e.deleteDatabase(n)}))}))},t.prototype.getDatabaseList=function(t){var n=this.app,r=this;null!==this.catalog&&null!==this.catalog.db?this.catalog.getAppKeys(n,(function(e){for(var n=[],r=0;r<e.length;r++)n.push(e[r].key);"function"==typeof t?t(n):n.forEach((function(t){console.log(t)}))})):this.catalog=new e((function(e){r.catalog=e,r.getDatabaseList(t)}))},t.prototype.getKeyList=t.prototype.getDatabaseList,t.prototype.getCatalogSummary=function(t){this.app;var n=this;null!==this.catalog&&null!==this.catalog.db?this.catalog.getAllKeys((function(e){for(var n,r,i,o,s,u=[],a=0;a<e.length;a++)i=(n=e[a]).app||"",o=n.key||"",s=n.val||"",r=2*i.length+2*o.length+s.length+1,u.push({app:n.app,key:n.key,size:r});"function"==typeof t?t(u):u.forEach((function(t){console.log(t)}))})):this.catalog=new e((function(e){n.catalog=e,n.getCatalogSummary(t)}))},e.prototype.initializeLokiCatalog=function(t){var e=indexedDB.open("LokiCatalog",1),n=this;e.onupgradeneeded=function(t){var e=t.target.result;if(e.objectStoreNames.contains("LokiAKV")&&e.deleteObjectStore("LokiAKV"),!e.objectStoreNames.contains("LokiAKV")){var n=e.createObjectStore("LokiAKV",{keyPath:"id",autoIncrement:!0});n.createIndex("app","app",{unique:!1}),n.createIndex("key","key",{unique:!1}),n.createIndex("appkey","appkey",{unique:!0})}},e.onsuccess=function(e){n.db=e.target.result,"function"==typeof t&&t(n)},e.onerror=function(t){throw t}},e.prototype.getAppKey=function(t,e,n){var r,i=t+","+e,o=this.db.transaction(["LokiAKV"],"readonly").objectStore("LokiAKV").index("appkey").get(i);o.onsuccess=(r=n,function(t){var e=t.target.result;null==e&&(e={id:0,success:!1}),"function"==typeof r?r(e):console.log(e)}),o.onerror=function(t){return function(e){if("function"!=typeof t)throw e;t({id:0,success:!1})}}(n)},e.prototype.getAppKeyById=function(t,e,n){this.db.transaction(["LokiAKV"],"readonly").objectStore("LokiAKV").get(t).onsuccess=function(t,e){return function(n){"function"==typeof e?e(n.target.result,t):console.log(n.target.result)}}(n,e)},e.prototype.setAppKey=function(t,e,n,r){var i,o=this.db.transaction(["LokiAKV"],"readwrite").objectStore("LokiAKV"),s=o.index("appkey"),u=t+","+e,a=s.get(u);a.onsuccess=function(i){var s=i.target.result;null==s?s={app:t,key:e,appkey:t+","+e,val:n}:s.val=n;var u,c=o.put(s);c.onerror=(u=r,function(t){"function"==typeof u?u({success:!1}):(console.error("LokiCatalog.setAppKey (set) onerror"),console.error(a.error))}),c.onsuccess=function(t){return function(e){"function"==typeof t&&t({success:!0})}}(r)},a.onerror=(i=r,function(t){"function"==typeof i?i({success:!1}):(console.error("LokiCatalog.setAppKey (get) onerror"),console.error(a.error))})},e.prototype.deleteAppKey=function(t,e){var n,r=this.db.transaction(["LokiAKV"],"readwrite").objectStore("LokiAKV").delete(t);r.onsuccess=(n=e,function(t){"function"==typeof n&&n({success:!0})}),r.onerror=function(t){return function(e){"function"==typeof t?t({success:!1}):(console.error("LokiCatalog.deleteAppKey raised onerror"),console.error(r.error))}}(e)},e.prototype.getAppKeys=function(t,e){var n,r=this.db.transaction(["LokiAKV"],"readonly").objectStore("LokiAKV").index("app"),i=IDBKeyRange.only(t),o=r.openCursor(i);o.onsuccess=function(t,e){return function(n){var r=n.target.result;if(r){var i=r.value;t.push(i),r.continue()}else"function"==typeof e?e(t):console.log(t)}}([],e),o.onerror=(n=e,function(t){"function"==typeof n?n(null):(console.error("LokiCatalog.getAppKeys raised onerror"),console.error(t))})},e.prototype.getAllKeys=function(t){var e,n=this.db.transaction(["LokiAKV"],"readonly").objectStore("LokiAKV").openCursor();n.onsuccess=function(t,e){return function(n){var r=n.target.result;if(r){var i=r.value;t.push(i),r.continue()}else"function"==typeof e?e(t):console.log(t)}}([],t),n.onerror=(e=t,function(t){"function"==typeof e&&e(null)})},t}()})?r.apply(e,i):r)||(t.exports=o)},"q5+k":function(t,e,n){"use strict";var r=n("TqRt");e.__esModule=!0,e.default=void 0;var i,o=r(n("Bp9Y")),s="clearTimeout",u=function(t){var e=(new Date).getTime(),n=Math.max(0,16-(e-c)),r=setTimeout(t,n);return c=e,r},a=function(t,e){return t+(t?e[0].toUpperCase()+e.substr(1):e)+"AnimationFrame"};o.default&&["","webkit","moz","o","ms"].some((function(t){var e=a(t,"request");if(e in window)return s=a(t,"cancel"),u=function(t){return window[e](t)}}));var c=(new Date).getTime();(i=function(t){return u(t)}).cancel=function(t){window[s]&&"function"==typeof window[s]&&window[s](t)};var l=i;e.default=l,t.exports=e.default},qsUr:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function t(e,n){if(void 0===n)return function(n){return t(e,n)};if((0,i.default)(Array,n)){for(var r=[[],[]],o=0,s=n.length;o<s;o++){var u=n[o];r[e(u)?0:1].push(u)}return r}r=[{},{}];var a=Object.keys(n);for(o=0,s=a.length;o<s;o++){var c=a[o];u=n[c];r[e(u)?0:1][c]=u}return r};var r,i=(r=n("Tuwf"))&&r.__esModule?r:{default:r}},r8OW:function(t,e,n){},siIJ:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},svcd:function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var r=n("mrSG"),i=n("K9Ia"),o=n("pugT"),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.__extends(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.a)},tUd9:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){}},tgZe:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.defer=r.defer},u9xY:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("8yf6"),i=n("4c1C"),o=n("ahDk"),s=a(n("ItuZ")),u=a(n("tUd9"));function a(t){return t&&t.__esModule?t:{default:t}}var c=function(t){var e=new r.Subject;return e.pipe((0,o.concatMap)(s.default,u.default)).subscribe(u.default),{push:function(n,r){e.next(function(t,e,n){return i.Observable.create((function(r){t(e,(function(t){r.next(e),n(t),r.complete()}))}))}(t,n,r))}}};e.default=c},uAl9:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n("8yf6"),i=n("gYkS"),o=n("ahDk"),s=f(n("OFZ/")),u=f(n("tUd9")),a=f(n("F8Mn")),c=f(n("hyL6")),l=n("3Gn5");function f(t){return t&&t.__esModule?t:{default:t}}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var d=function(){function t(t,e){var n=this;this.changes=new r.Subject,this.database=t,this.modelClass=e,this._cache=new c.default(e.table,(function(t){return new e(n,t)}))}var e,n,f,d=t.prototype;return d.find=function(t){return new Promise(function(e){return(0,s.default)(t,"Invalid record ID ".concat(this.table,"#").concat(t)),e(this._cache.get(t)||this._fetchRecord(t))}.bind(this))},d.findAndObserve=function(t){var e=this;return(0,i.defer)((function(){return e.find(t)})).pipe((0,o.switchMap)((function(t){return t.observe()})))},d.query=function(...t){return new a.default(this,t)},d.create=function(t=u.default){return new Promise(function(e,n){var r;return this.database._ensureInAction("Collection.create() can only be called from inside of an Action. See docs for more details."),r=this.prepareCreate(t),Promise.resolve(this.database.batch(r)).then((function(){try{return e(r)}catch(t){return n(t)}}),n)}.bind(this))},d.prepareCreate=function(t=u.default){return this.modelClass._prepareCreate(this,t)},d.prepareCreateFromDirtyRaw=function(t){return this.modelClass._prepareCreateFromDirtyRaw(this,t)},d.fetchQuery=function(t){return new Promise(function(e,n){var r;return Promise.resolve(this.database.adapter.query(t.serialize())).then(function(t){try{return r=t,e(this._cache.recordsFromQueryResult(r))}catch(t){return n(t)}}.bind(this),n)}.bind(this))},d.unsafeFetchRecordsWithSQL=function(t){return new Promise(function(e,n){var r,i,o;return({adapter:r}=this.database),(0,s.default)("function"==typeof r.unsafeSqlQuery,"unsafeFetchRecordsWithSQL called on database that does not support SQL"),i=r,Promise.resolve(i.unsafeSqlQuery(this.modelClass.table,t)).then(function(t){try{return o=t,e(this._cache.recordsFromQueryResult(o))}catch(t){return n(t)}}.bind(this),n)}.bind(this))},d.fetchCount=function(t){return this.database.adapter.count(t.serialize())},d._fetchRecord=function(t){return new Promise(function(e,n){var r;return Promise.resolve(this.database.adapter.find(this.table,t)).then(function(i){try{return r=i,(0,s.default)(r,"Record ".concat(this.table,"#").concat(t," not found")),e(this._cache.recordFromQueryResult(r))}catch(t){return n(t)}}.bind(this),n)}.bind(this))},d.changeSet=function(t){var e=this;t.forEach((function({record:t,type:n}){n===l.CollectionChangeTypes.created?(t._isCommitted=!0,e._cache.add(t)):n===l.CollectionChangeTypes.destroyed&&e._cache.delete(t)})),this.changes.next(t),t.forEach((function({record:t,type:e}){e===l.CollectionChangeTypes.updated?t._notifyChanged():e===l.CollectionChangeTypes.destroyed&&t._notifyDestroyed()}))},d.unsafeClearCache=function(){this._cache.unsafeClear()},e=t,(n=[{key:"table",get:function(){return this.modelClass.table}},{key:"schema",get:function(){return this.database.schema.tables[this.table]}}])&&h(e.prototype,n),f&&h(e,f),t}();e.default=d},vzVe:function(t,e,n){},w5US:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.resolveConflict=c,e.prepareCreateFromRaw=function(t,e){var n=Object.assign({},e,{_status:"synced",_changed:""});return t.prepareCreateFromDirtyRaw(n)},e.prepareUpdateFromRaw=function(t,e,n){var r=n&&!!t._raw._changed,i=r?u({},t._raw):{},o=r?u({},e):{},s=c(t._raw,e);return t.prepareUpdate((function(){l(t,s),r&&n&&(n.resolvedConflicts=n.resolvedConflicts||[],n.resolvedConflicts.push({local:i,remote:o,resolved:u({},t._raw)}))}))},e.prepareMarkAsSynced=function(t){var e=Object.assign({},t._raw,{_status:"synced",_changed:""});return t.prepareUpdate((function(){l(t,e)}))},e.ensureActionsEnabled=function(t){(0,i.invariant)(t._actionsEnabled,"[Sync] To use Sync, Actions must be enabled. Pass `{ actionsEnabled: true }` to Database constructor — see docs for more details")},e.ensureSameDatabase=function(t,e){(0,i.invariant)(t._resetCount===e,"[Sync] Sync aborted because database was reset")},e.isChangeSetEmpty=void 0;var r=n("Ex95"),i=n("ISfp"),o=n("oPt8");function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(n,!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){if("deleted"===t._status)return t;var n=u({},t,{},e,{id:t.id,_status:t._status,_changed:t._changed});return t._changed.split(",").forEach((function(e){n[e]=t[e]})),"created"===t._status&&((0,i.logError)("[Sync] Server wants client to update record ".concat(t.id,", but it's marked as locally created. This is most likely either a server error or a Watermelon bug (please file an issue if it is!). Will assume it should have been 'synced', and just replace the raw")),n._status="synced"),n}function l(t,e){t._raw=(0,o.sanitizedRaw)(e,t.collection.schema)}var f=(0,r.pipe)(r.values,(0,r.all)((function({created:t,updated:e,deleted:n}){return 0===t.length+e.length+n.length})));e.isChangeSetEmpty=f},xM0j:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return(0,a.ensureActionsEnabled)(t),t.action((function(){return new Promise((function(e,n){var i;return Promise.resolve((0,r.promiseAllObject)((0,r.map)(f,t.collections.map))).then((function(t){try{return e({changes:h(i=t),affectedRecords:d(i)})}catch(t){return n(t)}}),n)}))}),"sync-fetchLocalChanges")},e.hasUnsyncedChanges=function(t){return(0,a.ensureActionsEnabled)(t),t.action((function(){return new Promise((function(e,n){var o,s,u;return o=(0,r.values)(t.collections.map),s=function(e){return new Promise((function(n,r){var i;return Promise.resolve(e.query(l).fetchCount()).then((function(o){try{return i=o,Promise.resolve(t.adapter.getDeletedRecords(e.table)).then((function(t){try{return n(0<i+t.length)}catch(t){return r(t)}}),r)}catch(t){return r(t)}}),r)}))},Promise.resolve((0,i.allPromises)(s,o)).then((function(t){try{return u=t,e((0,r.any)(r.identity,u))}catch(t){return n(t)}}),n)}))}),"sync-hasUnsyncedChanges")};var r=n("Ex95"),i=n("6Cb3"),o=n("ISfp"),s=function(t){if(t&&t.__esModule)return t;var e=c();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var o=r?Object.getOwnPropertyDescriptor(t,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=t[i]}}n.default=t,e&&e.set(t,n);return n}(n("0gbD")),u=n("eLCP"),a=n("w5US");function c(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return c=function(){return t},t}var l=s.where((0,u.columnName)("_status"),s.notEq("synced"));function f(t){return new Promise((function(e,n){var r,i,s;return Promise.resolve(Promise.all([t.query(l).fetch(),t.database.adapter.getDeletedRecords(t.table)])).then((function(t){try{return[r,i]=t,s={created:[],updated:[],deleted:i},r.forEach((function(t){var e=t._raw._status;(0,o.invariant)("created"===e||"updated"===e,"Invalid changed record status"),s[e].push(Object.assign({},t._raw))})),e([s,r])}catch(t){return n(t)}}),n)}))}var h=(0,r.map)((function([t]){return t})),d=(0,r.pipe)(r.values,(0,r.map)((function([,t]){return t})),i.unnest)},xU8c:function(t,e,n){"use strict";var r=n("TqRt");e.__esModule=!0,e.default=e.animationEnd=e.animationDelay=e.animationTiming=e.animationDuration=e.animationName=e.transitionEnd=e.transitionDuration=e.transitionDelay=e.transitionTiming=e.transitionProperty=e.transform=void 0;var i,o,s,u,a,c,l,f,h,d,p,y=r(n("Bp9Y")),b="transform";if(e.transform=b,e.animationEnd=s,e.transitionEnd=o,e.transitionDelay=l,e.transitionTiming=c,e.transitionDuration=a,e.transitionProperty=u,e.animationDelay=p,e.animationTiming=d,e.animationDuration=h,e.animationName=f,y.default){var v=function(){for(var t,e,n=document.createElement("div").style,r={O:function(t){return"o"+t.toLowerCase()},Moz:function(t){return t.toLowerCase()},Webkit:function(t){return"webkit"+t},ms:function(t){return"MS"+t}},i=Object.keys(r),o="",s=0;s<i.length;s++){var u=i[s];if(u+"TransitionProperty"in n){o="-"+u.toLowerCase(),t=r[u]("TransitionEnd"),e=r[u]("AnimationEnd");break}}!t&&"transitionProperty"in n&&(t="transitionend");!e&&"animationName"in n&&(e="animationend");return n=null,{animationEnd:e,transitionEnd:t,prefix:o}}();i=v.prefix,e.transitionEnd=o=v.transitionEnd,e.animationEnd=s=v.animationEnd,e.transform=b=i+"-"+b,e.transitionProperty=u=i+"-transition-property",e.transitionDuration=a=i+"-transition-duration",e.transitionDelay=l=i+"-transition-delay",e.transitionTiming=c=i+"-transition-timing-function",e.animationName=f=i+"-animation-name",e.animationDuration=h=i+"-animation-duration",e.animationTiming=d=i+"-animation-delay",e.animationDelay=p=i+"-animation-timing-function"}var g={transform:b,end:o,property:u,timing:c,delay:l,duration:a};e.default=g},xcVR:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e={},n=0,r=t.length;n<r;n++)e[t[n][0]]=t[n][1];return e}},xfxO:function(t,e,n){"use strict";e.__esModule=!0,e.nameShape=void 0,e.transitionTimeout=function(t){var e="transition"+t+"Timeout",n="transition"+t;return function(t){if(t[n]){if(null==t[e])return new Error(e+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof t[e])return new Error(e+" must be a number (in milliseconds)")}return null}};i(n("q1tI"));var r=i(n("17x9"));function i(t){return t&&t.__esModule?t:{default:t}}e.nameShape=r.default.oneOfType([r.default.string,r.default.shape({enter:r.default.string,leave:r.default.string,active:r.default.string}),r.default.shape({enter:r.default.string,enterActive:r.default.string,leave:r.default.string,leaveActive:r.default.string,appear:r.default.string,appearActive:r.default.string})])},xp1A:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.ReplaySubject=r.ReplaySubject},yD6e:function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){return t.classList?!!e&&t.classList.contains(e):-1!==(" "+(t.className.baseVal||t.className)+" ").indexOf(" "+e+" ")},t.exports=e.default},yGWI:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n("mrSG"),i=n("FFOo");function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new u(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.__extends(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.a)},ycFn:function(t,e,n){"use strict";var r=n("TqRt");e.__esModule=!0,e.default=function(t,e){t.classList?t.classList.add(e):(0,i.default)(t,e)||("string"==typeof t.className?t.className=t.className+" "+e:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+e))};var i=r(n("yD6e"));t.exports=e.default},"z/u3":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getLastPulledAt=l,e.setLastPulledAt=function(t,e){return new Promise((function(n,i){var o;return Promise.resolve(l(t)).then((function(s){try{return e<(o=s||0)&&(0,r.logError)("[Sync] Pull has finished and received server time ".concat(e," — but previous pulled-at time was greater - ").concat(o,". This is most likely server bug.")),Promise.resolve(t.adapter.setLocal(c,"".concat(e))).then((function(){try{return n()}catch(t){return i(t)}}),i)}catch(t){return i(t)}}),i)}))},Object.defineProperty(e,"applyRemoteChanges",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(e,"fetchLocalChanges",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"hasUnsyncedChanges",{enumerable:!0,get:function(){return o.hasUnsyncedChanges}}),Object.defineProperty(e,"markLocalChangesAsSynced",{enumerable:!0,get:function(){return s.default}});var r=n("ISfp"),i=a(n("XttE")),o=function(t){if(t&&t.__esModule)return t;var e=u();if(e&&e.has(t))return e.get(t);var n={};if(null!=t){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var o=r?Object.getOwnPropertyDescriptor(t,i):null;o&&(o.get||o.set)?Object.defineProperty(n,i,o):n[i]=t[i]}}n.default=t,e&&e.set(t,n);return n}(n("xM0j")),s=a(n("4e+6"));function u(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return u=function(){return t},t}function a(t){return t&&t.__esModule?t:{default:t}}var c="__watermelon_last_pulled_at";function l(t){return new Promise((function(e,n){return Promise.resolve(t.adapter.getLocal(c)).then((function(t){try{return e(parseInt(t,10)||null)}catch(t){return n(t)}}),n)}))}},zB99:function(t,e,n){"use strict";e.__esModule=!0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=h(n("ycFn")),o=h(n("VOcB")),s=h(n("q5+k")),u=n("xU8c"),a=h(n("q1tI")),c=h(n("17x9")),l=n("i8i4"),f=n("xfxO");function h(t){return t&&t.__esModule?t:{default:t}}function d(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var p=[];u.transitionEnd&&p.push(u.transitionEnd),u.animationEnd&&p.push(u.animationEnd);c.default.node,f.nameShape.isRequired,c.default.bool,c.default.bool,c.default.bool,c.default.number,c.default.number,c.default.number;var y=function(t){function e(){var n,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var i=arguments.length,o=Array(i),s=0;s<i;s++)o[s]=arguments[s];return n=r=d(this,t.call.apply(t,[this].concat(o))),r.componentWillAppear=function(t){r.props.appear?r.transition("appear",t,r.props.appearTimeout):t()},r.componentWillEnter=function(t){r.props.enter?r.transition("enter",t,r.props.enterTimeout):t()},r.componentWillLeave=function(t){r.props.leave?r.transition("leave",t,r.props.leaveTimeout):t()},d(r,n)}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},e.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach((function(t){clearTimeout(t)})),this.classNameAndNodeQueue.length=0},e.prototype.transition=function(t,e,n){var r=(0,l.findDOMNode)(this);if(r){var s=this.props.name[t]||this.props.name+"-"+t,a=this.props.name[t+"Active"]||s+"-active",c=null,f=void 0;(0,i.default)(r,s),this.queueClassAndNode(a,r);var h=function(t){t&&t.target!==r||(clearTimeout(c),f&&f(),(0,o.default)(r,s),(0,o.default)(r,a),f&&f(),e&&e())};n?(c=setTimeout(h,n),this.transitionTimeouts.push(c)):u.transitionEnd&&(f=function(t,e){return p.length?p.forEach((function(n){return t.addEventListener(n,e,!1)})):setTimeout(e,0),function(){p.length&&p.forEach((function(n){return t.removeEventListener(n,e,!1)}))}}(r,h))}else e&&e()},e.prototype.queueClassAndNode=function(t,e){var n=this;this.classNameAndNodeQueue.push({className:t,node:e}),this.rafHandle||(this.rafHandle=(0,s.default)((function(){return n.flushClassNameAndNodeQueue()})))},e.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach((function(t){t.node.scrollTop,(0,i.default)(t.node,t.className)})),this.classNameAndNodeQueue.length=0,this.rafHandle=null},e.prototype.render=function(){var t=r({},this.props);return delete t.name,delete t.appear,delete t.enter,delete t.leave,delete t.appearTimeout,delete t.enterTimeout,delete t.leaveTimeout,delete t.children,a.default.cloneElement(a.default.Children.only(this.props.children),t)},e}(a.default.Component);y.displayName="CSSTransitionGroupChild",y.propTypes={},e.default=y,t.exports=e.default},zPYJ:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("DtyJ");e.merge=r.merge},zT9C:function(t,e,n){(function(t,n){var r=200,i="__lodash_hash_undefined__",o=9007199254740991,s="[object Arguments]",u="[object Boolean]",a="[object Date]",c="[object Function]",l="[object GeneratorFunction]",f="[object Map]",h="[object Number]",d="[object Object]",p="[object RegExp]",y="[object Set]",b="[object String]",v="[object Symbol]",g="[object ArrayBuffer]",m="[object DataView]",_="[object Float32Array]",w="[object Float64Array]",O="[object Int8Array]",E="[object Int16Array]",S="[object Int32Array]",A="[object Uint8Array]",P="[object Uint8ClampedArray]",I="[object Uint16Array]",N="[object Uint32Array]",T=/\w*$/,j=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,D={};D[s]=D["[object Array]"]=D[g]=D[m]=D[u]=D[a]=D[_]=D[w]=D[O]=D[E]=D[S]=D[f]=D[h]=D[d]=D[p]=D[y]=D[b]=D[v]=D[A]=D[P]=D[I]=D[N]=!0,D["[object Error]"]=D[c]=D["[object WeakMap]"]=!1;var C="object"==typeof t&&t&&t.Object===Object&&t,R="object"==typeof self&&self&&self.Object===Object&&self,k=C||R||Function("return this")(),B=e&&!e.nodeType&&e,M=B&&"object"==typeof n&&n&&!n.nodeType&&n,U=M&&M.exports===B;function L(t,e){return t.set(e[0],e[1]),t}function F(t,e){return t.add(e),t}function $(t,e,n,r){var i=-1,o=t?t.length:0;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function z(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function q(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function V(t,e){return function(n){return t(e(n))}}function W(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}var Y,K=Array.prototype,J=Function.prototype,G=Object.prototype,H=k["__core-js_shared__"],X=(Y=/[^.]+$/.exec(H&&H.keys&&H.keys.IE_PROTO||""))?"Symbol(src)_1."+Y:"",Q=J.toString,Z=G.hasOwnProperty,tt=G.toString,et=RegExp("^"+Q.call(Z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),nt=U?k.Buffer:void 0,rt=k.Symbol,it=k.Uint8Array,ot=V(Object.getPrototypeOf,Object),st=Object.create,ut=G.propertyIsEnumerable,at=K.splice,ct=Object.getOwnPropertySymbols,lt=nt?nt.isBuffer:void 0,ft=V(Object.keys,Object),ht=Mt(k,"DataView"),dt=Mt(k,"Map"),pt=Mt(k,"Promise"),yt=Mt(k,"Set"),bt=Mt(k,"WeakMap"),vt=Mt(Object,"create"),gt=zt(ht),mt=zt(dt),_t=zt(pt),wt=zt(yt),Ot=zt(bt),Et=rt?rt.prototype:void 0,St=Et?Et.valueOf:void 0;function At(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Pt(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function It(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Nt(t){this.__data__=new Pt(t)}function Tt(t,e){var n=Vt(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&Wt(t)}(t)&&Z.call(t,"callee")&&(!ut.call(t,"callee")||tt.call(t)==s)}(t)?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],r=n.length,i=!!r;for(var o in t)!e&&!Z.call(t,o)||i&&("length"==o||Ft(o,r))||n.push(o);return n}function jt(t,e,n){var r=t[e];Z.call(t,e)&&qt(r,n)&&(void 0!==n||e in t)||(t[e]=n)}function xt(t,e){for(var n=t.length;n--;)if(qt(t[n][0],e))return n;return-1}function Dt(t,e,n,r,i,o,j){var x;if(r&&(x=o?r(t,i,o,j):r(t)),void 0!==x)return x;if(!Jt(t))return t;var C=Vt(t);if(C){if(x=function(t){var e=t.length,n=t.constructor(e);e&&"string"==typeof t[0]&&Z.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!e)return function(t,e){var n=-1,r=t.length;e||(e=Array(r));for(;++n<r;)e[n]=t[n];return e}(t,x)}else{var R=Lt(t),k=R==c||R==l;if(Yt(t))return function(t,e){if(e)return t.slice();var n=new t.constructor(t.length);return t.copy(n),n}(t,e);if(R==d||R==s||k&&!o){if(z(t))return o?t:{};if(x=function(t){return"function"!=typeof t.constructor||$t(t)?{}:(e=ot(t),Jt(e)?st(e):{});var e}(k?{}:t),!e)return function(t,e){return kt(t,Ut(t),e)}(t,function(t,e){return t&&kt(e,Gt(e),t)}(x,t))}else{if(!D[R])return o?t:{};x=function(t,e,n,r){var i=t.constructor;switch(e){case g:return Rt(t);case u:case a:return new i(+t);case m:return function(t,e){var n=e?Rt(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,r);case _:case w:case O:case E:case S:case A:case P:case I:case N:return function(t,e){var n=e?Rt(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}(t,r);case f:return function(t,e,n){return $(e?n(q(t),!0):q(t),L,new t.constructor)}(t,r,n);case h:case b:return new i(t);case p:return function(t){var e=new t.constructor(t.source,T.exec(t));return e.lastIndex=t.lastIndex,e}(t);case y:return function(t,e,n){return $(e?n(W(t),!0):W(t),F,new t.constructor)}(t,r,n);case v:return o=t,St?Object(St.call(o)):{}}var o}(t,R,Dt,e)}}j||(j=new Nt);var B=j.get(t);if(B)return B;if(j.set(t,x),!C)var M=n?function(t){return function(t,e,n){var r=e(t);return Vt(t)?r:function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}(r,n(t))}(t,Gt,Ut)}(t):Gt(t);return function(t,e){for(var n=-1,r=t?t.length:0;++n<r&&!1!==e(t[n],n,t););}(M||t,(function(i,o){M&&(i=t[o=i]),jt(x,o,Dt(i,e,n,r,o,t,j))})),x}function Ct(t){return!(!Jt(t)||(e=t,X&&X in e))&&(Kt(t)||z(t)?et:j).test(zt(t));var e}function Rt(t){var e=new t.constructor(t.byteLength);return new it(e).set(new it(t)),e}function kt(t,e,n,r){n||(n={});for(var i=-1,o=e.length;++i<o;){var s=e[i],u=r?r(n[s],t[s],s,n,t):void 0;jt(n,s,void 0===u?t[s]:u)}return n}function Bt(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Mt(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return Ct(n)?n:void 0}At.prototype.clear=function(){this.__data__=vt?vt(null):{}},At.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},At.prototype.get=function(t){var e=this.__data__;if(vt){var n=e[t];return n===i?void 0:n}return Z.call(e,t)?e[t]:void 0},At.prototype.has=function(t){var e=this.__data__;return vt?void 0!==e[t]:Z.call(e,t)},At.prototype.set=function(t,e){return this.__data__[t]=vt&&void 0===e?i:e,this},Pt.prototype.clear=function(){this.__data__=[]},Pt.prototype.delete=function(t){var e=this.__data__,n=xt(e,t);return!(n<0)&&(n==e.length-1?e.pop():at.call(e,n,1),!0)},Pt.prototype.get=function(t){var e=this.__data__,n=xt(e,t);return n<0?void 0:e[n][1]},Pt.prototype.has=function(t){return xt(this.__data__,t)>-1},Pt.prototype.set=function(t,e){var n=this.__data__,r=xt(n,t);return r<0?n.push([t,e]):n[r][1]=e,this},It.prototype.clear=function(){this.__data__={hash:new At,map:new(dt||Pt),string:new At}},It.prototype.delete=function(t){return Bt(this,t).delete(t)},It.prototype.get=function(t){return Bt(this,t).get(t)},It.prototype.has=function(t){return Bt(this,t).has(t)},It.prototype.set=function(t,e){return Bt(this,t).set(t,e),this},Nt.prototype.clear=function(){this.__data__=new Pt},Nt.prototype.delete=function(t){return this.__data__.delete(t)},Nt.prototype.get=function(t){return this.__data__.get(t)},Nt.prototype.has=function(t){return this.__data__.has(t)},Nt.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Pt){var i=n.__data__;if(!dt||i.length<r-1)return i.push([t,e]),this;n=this.__data__=new It(i)}return n.set(t,e),this};var Ut=ct?V(ct,Object):function(){return[]},Lt=function(t){return tt.call(t)};function Ft(t,e){return!!(e=null==e?o:e)&&("number"==typeof t||x.test(t))&&t>-1&&t%1==0&&t<e}function $t(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||G)}function zt(t){if(null!=t){try{return Q.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function qt(t,e){return t===e||t!=t&&e!=e}(ht&&Lt(new ht(new ArrayBuffer(1)))!=m||dt&&Lt(new dt)!=f||pt&&"[object Promise]"!=Lt(pt.resolve())||yt&&Lt(new yt)!=y||bt&&"[object WeakMap]"!=Lt(new bt))&&(Lt=function(t){var e=tt.call(t),n=e==d?t.constructor:void 0,r=n?zt(n):void 0;if(r)switch(r){case gt:return m;case mt:return f;case _t:return"[object Promise]";case wt:return y;case Ot:return"[object WeakMap]"}return e});var Vt=Array.isArray;function Wt(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=o}(t.length)&&!Kt(t)}var Yt=lt||function(){return!1};function Kt(t){var e=Jt(t)?tt.call(t):"";return e==c||e==l}function Jt(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Gt(t){return Wt(t)?Tt(t):function(t){if(!$t(t))return ft(t);var e=[];for(var n in Object(t))Z.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)}n.exports=function(t){return Dt(t,!0,!0)}}).call(this,n("yLpj"),n("YuTi")(t))},zo3G:function(t,e,n){"use strict";var r=n("mrSG"),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.__extends(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n("h9Dq").a),o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e}(n("CS9Q").a);n.d(e,"a",(function(){return s}));var s=new o(i)},zwBs:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;n("ISfp");var r,i=n("7tKj"),o=(r=n("Q2IC"))&&r.__esModule?r:{default:r},s=n("MgNV");function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var{SETUP:c,FIND:l,QUERY:f,COUNT:h,BATCH:d,UNSAFE_RESET_DATABASE:p,GET_LOCAL:y,SET_LOCAL:b,REMOVE_LOCAL:v,GET_DELETED_RECORDS:g,DESTROY_DELETED_RECORDS:m}=s.actions,_=function(){function t(t){var e,n=this,{schema:r,migrations:s,dbName:u}=t,a=null===(e=t.useWebWorker)||void 0===e||e;this.workerBridge=new o.default(a),this.schema=r,this.migrations=s,this._dbName=u,(0,i.devLogSetUp)((function(){return n.workerBridge.send(c,[t])}))}var e=t.prototype;return e.testClone=function(e={}){var{executor:n}=this.workerBridge._worker._worker;n.loki.close();var r=n.loki.persistenceAdapter;return new t(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(n,!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({dbName:this._dbName,schema:this.schema},this.migrations?{migrations:this.migrations}:{},{_testLokiAdapter:r},e))},e.find=function(t,e){var n=this;return(0,i.devLogFind)((function(){return n.workerBridge.send(l,[t,e])}),t,e)},e.query=function(t){var e=this;return(0,i.devLogQuery)((function(){return e.workerBridge.send(f,[t],"immutable")}),t)},e.count=function(t){var e=this;return(0,i.devLogCount)((function(){return e.workerBridge.send(h,[t],"immutable")}),t)},e.batch=function(t){var e=this;return(0,i.devLogBatch)((function(){return e.workerBridge.send(d,[t],"shallowCloneDeepObjects")}),t)},e.getDeletedRecords=function(t){return this.workerBridge.send(g,[t])},e.destroyDeletedRecords=function(t,e){return this.workerBridge.send(m,[t,e])},e.unsafeResetDatabase=function(){return this.workerBridge.send(p)},e.getLocal=function(t){return this.workerBridge.send(y,[t])},e.setLocal=function(t,e){return this.workerBridge.send(b,[t,e])},e.removeLocal=function(t){return this.workerBridge.send(v,[t])},t}();e.default=_}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,