!function(n){function t(t){for(var e,o,i=t[0],a=t[1],u=0,s=[];u<i.length;u++)o=i[u],r[o]&&s.push(r[o][0]),r[o]=0;for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e]);for(c&&c(t);s.length;)s.shift()()}var e={},r={0:0};function o(t){if(e[t])return e[t].exports;var r=e[t]={i:t,l:!1,exports:{}};return n[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(n){var t=[],e=r[n];if(0!==e)if(e)t.push(e[2]);else{var i=new Promise(function(t,o){e=r[n]=[t,o]});t.push(e[2]=i);var a,u=document.createElement("script");u.charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.src=function(n){return o.p+""+({}[n]||n)+".436af2.js"}(n),a=function(t){u.onerror=u.onload=null,clearTimeout(c);var e=r[n];if(0!==e){if(e){var o=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src,a=new Error("Loading chunk "+n+" failed.\n("+o+": "+i+")");a.type=o,a.request=i,e[1](a)}r[n]=void 0}};var c=setTimeout(function(){a({type:"timeout",target:u})},12e4);u.onerror=u.onload=a,document.head.appendChild(u)}return Promise.all(t)},o.m=n,o.c=e,o.d=function(n,t,e){o.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,t){if(1&t&&(n=o(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(o.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)o.d(e,r,function(t){return n[t]}.bind(null,r));return e},o.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(t,"a",t),t},o.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},o.p="/assets/",o.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=t,i=i.slice();for(var u=0;u<i.length;u++)t(i[u]);var c=a;o(o.s=0)}({0:function(n,t,e){n.exports=e("EYcP")},"1EKS":function(n,t,e){n.exports=e("rhkP")(190)},"8RZD":function(n,t,e){"use strict";var r=function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),r=1;r<t;r++)e[r-1]=arguments[r];return 0===e.length?n:n.replace(/{(\d+)}/g,function(n,t){return null!=e[t]?e[t]:n})},o=function(n){for(var t=["〇","一","二","三","四","五","六","七","八","九"],e=[],r=n.getFullYear().toString(),o=0;o<r.length;o++)t[r.charAt(o)]?e.push(t[r.charAt(o)]):e.push(r.charAt(o));e.push("年");var i=n.getMonth()+1;i<10?e.push(t[i]):i<20&&e.push("十"+t[i%10]),e.push("月");var a=n.getDate();return a<10?e.push(t[a]):a<20?e.push("十"+t[a%10]):e.push("二十"+t[a%10]),e.push("日"),e.join("")},i={decode:function(n){return decodeURIComponent(escape(window.atob(n)))},encode:function(n){return window.btoa(unescape(encodeURIComponent(n)))}},a=function(n){if(!n)return"";var t=n.split("\n"),e=t.filter(function(n){return/^[^-\s].*/.test(n)&&""!==n}).length>0;if(1===t.length||e)return n;var r=t.map(function(n){return n.match(/^\s+/)}).filter(function(n){return n}).map(function(n){return n[0]}),o=Math.min.apply(null,r.map(function(n){return n.length})),i=t.map(function(n){return n.slice(o)}).join("\n");return i.startsWith("\n")?i.replace("\n",""):i},u=function(n,t,e){var r,o=t||["-","\\","|","/"],i=0;return function(t,e){t?r=setInterval(function(){i++,e?e.innerHTML=o[i%o.length]:n&&n(o[i%o.length])},80):(e&&e.remove(),clearInterval(r))}},c=function(){var n=new Date,t=n.getFullYear(),e=n.getMonth()+1,r=e<10?"0"+e:e,o=n.getDate(),i=o<10?"0"+o:o;return"".concat(t,"-").concat(r,"-").concat(i)};function s(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=[],r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!t||e.length!==t);r=!0);}catch(n){o=!0,i=n}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return e}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}document.querySelectorAll.bind(document);var f=document.querySelector.bind(document),l=function(n){var t=document.createElement("a");t.href=n||"about:blanket",t.target="_blanket",t.click(),t=null},p=function(n){var t=document.createElement("div");return t.innerHTML=n,t.children.length?t.children:t.childNodes},d=function(n){return!(n.children&&n.children.length)},h=function(n){return n.slice().pop()},v=function(){var n,t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=function n(t){return t<2?t:n(t-1)+n(t-2)},i=o(e),a=o(e+1),u=o(e+2),c=o(e+3),f=o(e+4),l=function(n){return n.replace(/[\n]/g,"")},d=[[0,0],[a+i,0],[0,2*i],[a+i,2*i],[0,f-u]].map(function(n,t){var e=s(n,2),r=4===t;return function(n,t,e,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"#000";return l('\n      <rect \n        x="'.concat(n,'"\n        y="').concat(t,'" \n        width="').concat(e,'" \n        height="').concat(r,'" \n        fill="').concat(o,'" \n        stroke-width="0"\n      />\n    '))}(e[0],e[1],r?c:a,r?u:i)}).join(""),h=(n=f,t=d,l('\n      <svg\n        width="'.concat(c,'"\n        height="').concat(n,'"\n        version="1.1"\n        xmlns="http://www.w3.org/2000/svg"\n      >\n        ').concat(t,"\n      </svg>\n    ")));return r?p(h)[0]:h},m=function(n){var t=document.getElementsByTagName("head")[0],e=t.querySelector("style");e||(e=t.appendChild(document.createElement("style"))).setAttribute("type","text/css"),e.appendChild(p(a(n))[0])},g=function(n,t){var e=document.createEvent("Events");e.initEvent("keyup",!0,!0),e.key=t,n.dispatchEvent(e)},y=function(n){return function(t,e){return String(n).repeat(String(e).length-String(t).length)+t}},b=function(n){n.scrollTop=n.scrollHeight},w=function(n,t){return"<a href=".concat(t,' target="_blanket" >').concat(n,"</a>")},x=function(n,t,e){return"\n    NAME\n        ".concat(n,"\n        \n    SYNOPSIS\n        ").concat(t,"\n        \n    DESCRIPTION\n        ").concat(e).replace(/</g,"&lt;")},R=new Map,j=e("1EKS"),E=e.n(j);function A(n,t,e,r,o,i,a){try{var u=n[i](a),c=u.value}catch(n){return void e(n)}u.done?t(c):Promise.resolve(c).then(r,o)}function S(n){return function(){var t=this,e=arguments;return new Promise(function(r,o){var i=n.apply(t,e);function a(n){A(i,r,o,a,u,"next",n)}function u(n){A(i,r,o,a,u,"throw",n)}a(void 0)})}}var k=function(){var n=S(regeneratorRuntime.mark(function n(t,e,r,o){var i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return i=new Headers({"Content-Type":"application/json",Accept:"application/json"}),o&&i.append("Authorization","token ".concat(o)),n.next=4,fetch(t,{method:e,headers:i,body:r?JSON.stringify(r):null});case 4:return n.abrupt("return",n.sent.json());case 5:case"end":return n.stop()}},n)}));return function(t,e,r,o){return n.apply(this,arguments)}}(),T=function(){var n=S(regeneratorRuntime.mark(function n(){var t,e,r,o,i,a,u=arguments;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:for(t=u.length,e=new Array(t),r=0;r<t;r++)e[r]=u[r];if(o=E()(e),!(i=R.get(o))){n.next=7;break}return n.abrupt("return",i);case 7:return n.next=9,k.apply(void 0,e);case 9:return a=n.sent,R.set(o,a),n.abrupt("return",a);case 12:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}(),C=function(n){if(R.get(n))return Promise.resolve();var t=new Image;return t.src=n,t.decode().then(function(){R.set(n,!0)})},O=e("v/Yx"),P=e.n(O);function I(n){return function(n){if(Array.isArray(n)){for(var t=0,e=new Array(n.length);t<n.length;t++)e[t]=n[t];return e}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function L(n,t,e,r,o,i,a){try{var u=n[i](a),c=u.value}catch(n){return void e(n)}u.done?t(c):Promise.resolve(c).then(r,o)}function M(n){return function(){var t=this,e=arguments;return new Promise(function(r,o){var i=n.apply(t,e);function a(n){L(i,r,o,a,u,"next",n)}function u(n){L(i,r,o,a,u,"throw",n)}a(void 0)})}}e.d(t,"t",function(){return B}),e.d(t,"p",function(){return H}),e.d(t,"m",function(){return D}),e.d(t,"s",function(){return z}),e.d(t,"y",function(){return _}),e.d(t,"a",function(){return f}),e.d(t,"l",function(){return l}),e.d(t,"o",function(){return d}),e.d(t,"f",function(){return p}),e.d(t,"i",function(){return v}),e.d(t,"k",function(){return h}),e.d(t,"n",function(){return m}),e.d(t,"A",function(){return g}),e.d(t,"e",function(){return y}),e.d(t,"w",function(){return b}),e.d(t,"q",function(){return w}),e.d(t,"g",function(){return x}),e.d(t,"h",function(){return r}),e.d(t,"b",function(){return o}),e.d(t,"d",function(){return i}),e.d(t,"z",function(){return c}),e.d(t,"c",function(){return a}),e.d(t,"r",function(){return u}),e.d(t,"u",function(){return k}),e.d(t,"j",function(){return C}),e.d(t,"v",function(){return T}),e.d(t,"x",function(){return R});var U=new P.a(navigator.userAgent),B=function(){var n=M(regeneratorRuntime.mark(function n(t,e){var r,o,i,a,u,c,s=arguments;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:for(r=s.length,o=new Array(r>2?r-2:0),i=2;i<r;i++)o[i-2]=s[i];return a=I(t),u=a[0],c=a.slice(1),n.abrupt("return",c.reduce(function(){var n=M(regeneratorRuntime.mark(function n(t,r,i){var a;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t;case 2:return a=n.sent,e&&"function"==typeof e&&e(i+1),n.abrupt("return",r.apply(void 0,[a].concat(o)));case 5:case"end":return n.stop()}},n)}));return function(t,e,r){return n.apply(this,arguments)}}(),u().then(function(n){return e&&"function"==typeof e&&e(0),n})));case 3:case"end":return n.stop()}},n)}));return function(t,e){return n.apply(this,arguments)}}();function N(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,o=0;return new Promise(function(i,a){!function u(){"function"==typeof n?e>=0?(n(r?o:e),o++,e--,setTimeout(u,function(n){return Math.round(Math.random()*n/2)+n}(t))):setTimeout(function(){i("done")},5*t):a("invalid param")}()})}function _(n,t){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=null,o=!0;return function(){var i=this,a=arguments,u=function(){n.apply(i,a),r=null};e&&o&&(o=!1,u()),r||(r=setTimeout(u,t))}}function D(n,t,e){return N(function(e){return t(n.slice(0,e))},e,n.length,!0)}function z(){}var H=function(){return"mobile"===U.device.type}},"9tPo":function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,r=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var o,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},BaMe:function(n,t,e){var r=e("FR55");"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e("aET+")(r,o);r.locals&&(n.exports=r.locals)},EYcP:function(n,t,e){"use strict";e.r(t);var r=e("8RZD"),o=(e("BaMe"),{totalStep:0,indicatorColor:"#000",indicatorHighlightColor:"#fff",x:0,y:0}),i=function(n){var t=Object.assign(o,n),e=function(){var n='\n        <div class="step-indicator">\n            '.concat("<span>.</span>".repeat(t.totalStep),"\n        </div>\n    "),e=Object(r.f)(n)[0],o="\n      position: absolute;\n      top: ".concat(t.y,";\n      left: ").concat(t.x,";\n      color: ").concat(t.indicatorColor,"\n     ");if(e.setAttribute("style",o),document.body.append(e),"center"===t.x){var i=e.getBoundingClientRect().width;e.style.left="calc(50% - ".concat(i/2,"px)")}return e}();return{highlightStep:function(n){n<0||n>t.totalStep-1||(e.children[n].style.color=t.indicatorHighlightColor)},destroy:function(){e.classList.add("done"),setTimeout(function(){e.remove(),e=null},2e3)}}};function a(n,t,e,r,o,i,a){try{var u=n[i](a),c=u.value}catch(n){return void e(n)}u.done?t(c):Promise.resolve(c).then(r,o)}function u(n){return function(){var t=this,e=arguments;return new Promise(function(r,o){var i=n.apply(t,e);function u(n){a(i,r,o,u,c,"next",n)}function c(n){a(i,r,o,u,c,"throw",n)}u(void 0)})}}var c=function(){return s.apply(this,arguments)};function s(){return(s=u(regeneratorRuntime.mark(function n(){var t,o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(window.Terminal){n.next=2;break}return n.abrupt("return",!1);case 2:return o=i({totalStep:(t=[function(){var n=u(regeneratorRuntime.mark(function n(){var t,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Promise.all([e.e(4),e.e(7)]).then(e.bind(null,"97er"));case 2:t=n.sent,r=t.default,window.Terminal.addCommands(r);case 5:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}(),function(){var n=u(regeneratorRuntime.mark(function n(){var t,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,e.e(5).then(e.bind(null,"zsIg"));case 2:t=n.sent,r=t.default,window.Terminal.addCommands({edit:r});case 5:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}(),function(){var n=u(regeneratorRuntime.mark(function n(){var t,r;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Promise.all([e.e(2),e.e(3)]).then(e.bind(null,"b3vB"));case 2:t=n.sent,r=t.default,window.Terminal.addCommands({blog:r});case 5:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}()]).length,indicatorColor:"#ccc",x:"center",y:"calc(40% + 62px)"}),n.abrupt("return",Object(r.t)(t,o.highlightStep).then(o.destroy));case 8:case"end":return n.stop()}},n)}))).apply(this,arguments)}e("t4vB");function f(n,t,e,r,o,i,a){try{var u=n[i](a),c=u.value}catch(n){return void e(n)}u.done?t(c):Promise.resolve(c).then(r,o)}(function(){var n,t=(n=regeneratorRuntime.mark(function n(){var t,o,i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Promise.all([e.e(6),e.e(8)]).then(e.bind(null,"Rf5Z"));case 2:return t=n.sent,o=t.default,i=o(Object(r.a)("#terminal"),{background:"rgba(253, 165, 142, 0.8784313725490196)",color:"#fff",cursorColor:"#fff"}),window.Terminal=i,document.addEventListener("click",function(n){if(Array.from(n.target.classList).includes("command")){var t=n.target.getAttribute("data-cmd"),e=n.target.hasAttribute("multi"),r=e?t.split(/\s*&&\s*/):t,o=e?"humanizerExecCmdArr":"humanizerExec";n.target.classList.remove("command"),i[o](r).then(function(){n.target.classList.add("command")})}}),n.abrupt("return",c().then(function(){if(Object(r.p)())return i.humanizerExecCmdArr(["blog","exit"])}));case 8:case"end":return n.stop()}},n)}),function(){var t=this,e=arguments;return new Promise(function(r,o){var i=n.apply(t,e);function a(n){f(i,r,o,a,u,"next",n)}function u(n){f(i,r,o,a,u,"throw",n)}a(void 0)})});return function(){return t.apply(this,arguments)}})()().then()},FR55:function(n,t,e){(n.exports=e("I1BE")(!1)).push([n.i,".step-indicator {\n  position: absolute;\n  opacity: 1;\n  transition: opacity 2s;\n  font-family: monospace;\n  font-size: 12px;\n  letter-spacing: -3px; }\n  .step-indicator.done {\n    opacity: 0; }\n",""])},I1BE:function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),t.push(a))}},t}},PEsd:function(n,t,e){(n.exports=e("I1BE")(!1)).push([n.i,"@media (max-width: 500px) {\n  #pointer {\n    display: none; } }\n\nbody {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100%;\n  background: #fffffb; }\n\nbody.fullscreen #terminal {\n  width: 100vw;\n  height: 98vh;\n  margin-top: 0; }\n\nhtml {\n  overflow: hidden; }\n\n#terminal {\n  /*top: 131px;*/\n  height: 93px;\n  width: 383px;\n  margin-top: -10%;\n  transition: all .3s;\n  position: relative;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }\n\n#terminal > div {\n  padding: 10px;\n  height: calc(100% - 20px) !important;\n  background: #fefefe;\n  border-radius: 15px; }\n\n.command {\n  cursor: pointer; }\n\n.command:hover {\n  text-decoration: line-through; }\n\n@media screen and (max-width: 671px) {\n  body {\n    display: unset; }\n  #terminal {\n    width: 100%;\n    height: 100%;\n    position: static;\n    margin: 0;\n    box-shadow: unset; }\n  #terminal div {\n    border-radius: 0; }\n  #copyright,\n  .link-to-blog {\n    display: none; } }\n\n#terminal a {\n  color: #000;\n  border-bottom: solid 1px #000;\n  padding-bottom: 1px; }\n\n.love, a {\n  color: #ff8888;\n  text-decoration: none; }\n\n.input {\n  font-weight: 700; }\n\n.output > pre {\n  margin-top: 8px;\n  white-space: pre-wrap; }\n\n#copyright {\n  font-size: 12px;\n  color: #d8d8d8;\n  position: absolute;\n  bottom: 50px;\n  left: 61%;\n  margin-left: -72px; }\n\nsvg#logo {\n  vertical-align: top;\n  margin-right: 10px;\n  position: relative;\n  top: 2px; }\n\n::-webkit-scrollbar {\n  width: 0 !important; }\n\n.human-shadow > img {\n  position: absolute; }\n",""])},"aET+":function(n,t,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(n){var t={};return function(n){if("function"==typeof n)return n();if(void 0===t[n]){var e=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}}(),c=null,s=0,f=[],l=e("9tPo");function p(n,t){for(var e=0;e<n.length;e++){var r=n[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(n,t){for(var e=[],r={},o=0;o<n.length;o++){var i=n[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):e.push(r[a]={id:a,parts:[u]})}return e}function h(n,t){var e=u(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===n.insertAt)r?r.nextSibling?e.insertBefore(t,r.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),f.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(n.insertInto+" "+n.insertAt.before);e.insertBefore(t,o)}}function v(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=f.indexOf(n);t>=0&&f.splice(t,1)}function m(n){var t=document.createElement("style");return n.attrs.type="text/css",g(t,n.attrs),h(n,t),t}function g(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function y(n,t){var e,r,o,i;if(t.transform&&n.css){if(!(i=t.transform(n.css)))return function(){};n.css=i}if(t.singleton){var a=s++;e=c||(c=m(t)),r=x.bind(null,e,a,!1),o=x.bind(null,e,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",g(t,n.attrs),h(n,t),t}(t),r=function(n,t,e){var r=e.css,o=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=n.href;n.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,e,t),o=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=m(t),r=function(n,t){var e=t.css,r=t.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){v(e)});return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=d(n,t);return p(e,t),function(n){for(var r=[],o=0;o<e.length;o++){var a=e[o];(u=i[a.id]).refs--,r.push(u)}n&&p(d(n,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete i[u.id]}}}};var b,w=(b=[],function(n,t){return b[n]=t,b.filter(Boolean).join("\n")});function x(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(i,a[t]):n.appendChild(i)}}},rhkP:function(n,t){n.exports=vendor_lib_042591fa69d93412fd5c},t4vB:function(n,t,e){var r=e("PEsd");"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e("aET+")(r,o);r.locals&&(n.exports=r.locals)},"v/Yx":function(n,t,e){n.exports=e("rhkP")(204)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9vYmplY3QtaGFzaC9kaXN0L29iamVjdF9oYXNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSB2ZW5kb3JfbGliXzA0MjU5MWZhNjlkOTM0MTJmZDVjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvc3RydXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3V0aWxzL2xpYi9kb211dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvdHBsdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vdXRpbHMvbGliL3N0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvcmVxdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3V0aWxzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdHlsZS9pbmRpY2F0b3Iuc2Nzcz81ZTQ4Iiwid2VicGFjazovLy8uL2FwcC9qcy93aWRnZXRzL3N0ZXBJbmRpY2F0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2pzL21haW4vcHJlSW5zdGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvanMvbWFpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3R5bGUvaW5kaWNhdG9yLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL2FwcC9zdHlsZS9pbmRleC5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2ZW5kb3JfbGliXzA0MjU5MWZhNjlkOTM0MTJmZDVjXCIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0eWxlL2luZGV4LnNjc3M/MWZlNyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3VhLWRldmljZS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2UgdmVuZG9yX2xpYl8wNDI1OTFmYTY5ZDkzNDEyZmQ1YyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwibW9kdWxlIiwibCIsImUiLCJwcm9taXNlcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwicCIsImpzb25wU2NyaXB0U3JjIiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiY2h1bmsiLCJlcnJvclR5cGUiLCJ0eXBlIiwicmVhbFNyYyIsInRhcmdldCIsImVycm9yIiwiRXJyb3IiLCJyZXF1ZXN0IiwidW5kZWZpbmVkIiwic2V0VGltZW91dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImFsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImVyciIsImNvbnNvbGUiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwicyIsImZvcm1hdCIsIm1zZyIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwicmVwbGFjZSIsIm1hdGNoIiwibnVtYmVyIiwiQ05EYXRlU3RyaW5nIiwiZGF0ZSIsImNuIiwiWVkiLCJnZXRGdWxsWWVhciIsInRvU3RyaW5nIiwiY2hhckF0IiwiTU0iLCJnZXRNb250aCIsIkREIiwiZ2V0RGF0ZSIsImpvaW4iLCJiYXNlNjQiLCJkZWNvZGUiLCJzdHIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJhdG9iIiwiZW5jb2RlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiVHJpbSIsInN0ckFyciIsInNwbGl0Iiwibm9TdGFydFNwYWNlIiwiZmlsdGVyIiwidGVzdCIsInNwYWNlQXJyIiwibWFwIiwidiIsImFyciIsInNob3J0ZXN0U3BhY2VMZW4iLCJNYXRoIiwibWluIiwiYXBwbHkiLCJzcGFjZSIsInJlc3VsdCIsInN0YXJ0c1dpdGgiLCJtYWtlVGV4dFNwaW5uZXIiLCJjYiIsInRleHRBcnIiLCJ0aW1lciIsInRleHQiLCJjb3VudGVyIiwibG9hZGluZyIsIiRlbGUiLCJzZXRJbnRlcnZhbCIsImlubmVySFRNTCIsInJlbW92ZSIsImNsZWFySW50ZXJ2YWwiLCJ0b2RheSIsIm5vdyIsIkRhdGUiLCJZWVlZIiwibW0iLCJkZCIsImNvbmNhdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCIkIiwicXVlcnlTZWxlY3RvciIsImdvdG8iLCJ1cmwiLCIkdG1wTGluayIsImhyZWYiLCJjbGljayIsImNyZWF0ZU5vZGVzRnJvbSIsImh0bWxTdHIiLCIkbm9kZXNXcmFwcGVyIiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiaXNFbGVtZW50RW1wdHkiLCJnZXRMYXN0RWxlIiwicG9wIiwiZ2VuU3ZnTG9nbyIsImgiLCJjb250ZW50IiwicmV0dXJuRG9tRWxlbWVudCIsIkZpYiIsInNtUmVjdEh0Iiwic21SZWN0V2QiLCJsZ1JlY3RIdCIsImxnUmVjdFdkIiwibG9nb0h0Iiwib25lTGluZSIsImxvZ29Db250ZW50IiwiX3JlZiIsImluZGV4IiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheSIsImlzTGFyZ2VSZWN0IiwieCIsInkiLCJ3IiwicmVuZGVyUmVjdCIsImxvZ29TdHIiLCJpbmplY3RDU1MiLCJjc3NTdHIiLCIkaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiJHN0eWxlIiwidHJpZ2dlciIsImV2IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY29tcGxldGlvbldpdGgiLCJmaWxsaW5nQ2hhciIsInNob3J0IiwibG9uZyIsIlN0cmluZyIsInJlcGVhdCIsInNjcm9sbFRvQm90dG9tIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0IiwibGluayIsImRvY1RwbCIsInN5bm9wc2lzIiwiZGVzY3JpcHRpb24iLCJzdG9yZSIsIk1hcCIsInJlcSIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJtZXRob2QiLCJ0b2tlbiIsImhlYWRlcnMiLCJ3cmFwIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIkhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJBY2NlcHQiLCJhcHBlbmQiLCJmZXRjaCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJydXB0Iiwic2VudCIsImpzb24iLCJzdG9wIiwiX3giLCJfeDIiLCJfeDMiLCJfeDQiLCJ0aGlzIiwicmVxQW5kQ2FjaGUiLCJfY2FsbGVlMiIsIm5ld1Jlc3VsdCIsIl9hcmdzMiIsIl9jb250ZXh0MiIsImhhc2giLCJzZXQiLCJnZXRJbWFnZSIsImltYWdlIiwiSW1hZ2UiLCJ0aGVuIiwidWFJbmZvIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwcm9taXNlT25lQnlPbmUiLCJsaWJfYXN5bmNUb0dlbmVyYXRvciIsImZ1bmNBcnIiLCJjYkZuIiwiZXh0cmFQYXJhbXMiLCJmaXJzdCIsInJlc3QiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJyZWR1Y2UiLCJfcmVmMyIsImFjYyIsImZ1bmMiLCJwcmV2UmVzdWx0IiwiX3g1IiwiaHVtYW5pemVyRGVsYXlDYWxsIiwiZnVuIiwiZGVsYXkiLCJ0aW1lcyIsImlmSW5jIiwicm91bmQiLCJyYW5kb20iLCJodW1hbml6ZXJEZWxheSIsInRocm90dGxlIiwiY2FsbGJhY2siLCJ3YWl0IiwiaW1tZWRpYXRlIiwiaW5pdGlhbENhbGwiLCJfdGhpcyIsIl9hcmd1bWVudHMiLCJodW1hbml6ZXJJbnB1dCIsImlucHV0RnVuIiwic3BlZWQiLCJub29wIiwiaXNNb2JpbGUiLCJkZXZpY2UiLCJjc3MiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwiaW5kZXhPZiIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwiZGVmYXVsdENvbmZpZyIsInRvdGFsU3RlcCIsImluZGljYXRvckNvbG9yIiwiaW5kaWNhdG9ySGlnaGxpZ2h0Q29sb3IiLCJzdGVwSW5kaWNhdG9yIiwidXNlckNvbmZpZyIsImNvbmZpZyIsImFzc2lnbiIsIiRpbmRpY2F0b3IiLCJpbmRpY2F0b3JUcGwiLCJzdHlsZVN0ciIsIndpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3R5bGUiLCJsZWZ0IiwibW91bnRTZWxmIiwiaGlnaGxpZ2h0U3RlcCIsImNvbG9yIiwiZGVzdHJveSIsImNsYXNzTGlzdCIsImFkZCIsInByZUluc3RhbGwiLCJwcmVJbnN0YWxsX3JlZiIsIl9jYWxsZWU0IiwicHJvbWlzZVF1ZXVlIiwiaW5kaWNhdG9yIiwiX2NvbnRleHQ0IiwiVGVybWluYWwiLCJjb21tYW5kcyIsImFkZENvbW1hbmRzIiwiX3JlZjQiLCJfcmVmNSIsImVkaXQiLCJfcmVmNiIsIl9jYWxsZWUzIiwiX3JlZjciLCJibG9nIiwiX2NvbnRleHQzIiwiUHNldWRvVGVybWluYWwiLCJiYWNrZ3JvdW5kIiwiY3Vyc29yQ29sb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwiZnJvbSIsImluY2x1ZGVzIiwiY29tbWFuZCIsImdldEF0dHJpYnV0ZSIsImlzTXVsdGkiLCJoYXNBdHRyaWJ1dGUiLCJ0b0V4ZWMiLCJleGVjRm4iLCJpbnN0YWxsQ29tbWFuZHMiLCJodW1hbml6ZXJFeGVjQ21kQXJyIiwiaW5pdCIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJpdGVtIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4Iiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJvYmoiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJ2ZW5kb3JfbGliXzA0MjU5MWZhNjlkOTM0MTJmZDVjIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBS0FLLEVBQUEsRUFBQUMsRUFBQSxHQUNRRCxFQUFBRixFQUFBSSxPQUFvQkYsSUFDNUJILEVBQUFDLEVBQUFFLEdBQ0FHLEVBQUFOLElBQ0FJLEVBQUFHLEtBQUFELEVBQUFOLEdBQUEsSUFFQU0sRUFBQU4sR0FBQSxFQUVBLElBQUFELEtBQUFHLEVBQ0FNLE9BQUFDLFVBQUFDLGVB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LFlBRTlDZCxFQUFBWSxFQUFBZixRQTZMQSxJQUNBZ0UsRUFEQUMsR0FDQUQsRUFBQSxHQUVBLFNBQUF2USxFQUFBeVEsR0FHQSxPQUZBRixFQUFBdlEsR0FBQXlRLEVBRUFGLEVBQUFwVSxPQUFBdVUsU0FBQXRWLEtBQUEsUUFJQSxTQUFBaVUsRUFBQXBHLEVBQUFqSixFQUFBdEMsRUFBQXdSLEdBQ0EsSUFBQWpJLEVBQUF2SixFQUFBLEdBQUF3UixFQUFBakksSUFFQSxHQUFBZ0MsRUFBQStHLFdBQ0EvRyxFQUFBK0csV0FBQUMsUUFBQU8sRUFBQXhRLEVBQUFpSCxPQUNFLENBQ0YsSUFBQTBKLEVBQUFyYSxTQUFBNFosZUFBQWpKLEdBQ0FsSSxFQUFBa0ssRUFBQWxLLFdBRUFBLEVBQUFpQixJQUFBaUosRUFBQXdGLFlBQUExUCxFQUFBaUIsSUFFQWpCLEVBQUFsSyxPQUNBb1UsRUFBQW1GLGFBQUF1QyxFQUFBNVIsRUFBQWlCLElBRUFpSixFQUFBblIsWUFBQTZZLHlCQ25VQWhiLEVBQUFELFFBQUFrYixzRENDQSxJQUFBdlIsRUFBYzVKLEVBQVEsUUFFdEIsaUJBQUE0SixNQUFBLEVBQTRDMUosRUFBQWhCLEVBQVMwSyxFQUFBLE1BT3JELElBQUEwSSxFQUFBLENBQWVDLEtBQUEsRUFFZkMsZUFQQUEsRUFRQUMsZ0JBQUF2USxHQUVhbEMsRUFBUSxPQUFSQSxDQUEyRDRKLEVBQUEwSSxHQUV4RTFJLEVBQUE4SSxTQUFBeFMsRUFBQUQsUUFBQTJKLEVBQUE4SSxnQ0NqQkF4UyxFQUFBRCxRQUFBRCxFQUFBIiwiZmlsZSI6Im1haW4uNDM2YWYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuXG5cbiBcdC8vIHNjcmlwdCBwYXRoIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBqc29ucFNjcmlwdFNyYyhjaHVua0lkKSB7XG4gXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgKHt9W2NodW5rSWRdfHxjaHVua0lkKSArIFwiLlwiICsgXCI0MzZhZjJcIiArIFwiLmpzXCJcbiBcdH1cblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCkge1xuIFx0XHR2YXIgcHJvbWlzZXMgPSBbXTtcblxuXG4gXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblxuIFx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cbiBcdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG4gXHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiBcdFx0XHRcdH0pO1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuIFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuIFx0XHRcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRcdFx0dmFyIG9uU2NyaXB0Q29tcGxldGU7XG5cbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuIFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcbiBcdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c2NyaXB0LnNyYyA9IGpzb25wU2NyaXB0U3JjKGNodW5rSWQpO1xuXG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJyk7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG4gXHRcdFx0XHRcdFx0XHRjaHVua1sxXShlcnJvcik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuIFx0XHRcdFx0XHRvblNjcmlwdENvbXBsZXRlKHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KTtcbiBcdFx0XHRcdH0sIDEyMDAwMCk7XG4gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuIFx0fTtcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9hc3NldHMvXCI7XG5cbiBcdC8vIG9uIGVycm9yIGZ1bmN0aW9uIGZvciBhc3luYyBsb2FkaW5nXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oXCJyaGtQXCIpKSgxOTApOyIsImNvbnN0IGZvcm1hdCA9IChtc2csIC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiBtc2c7XG4gICAgcmV0dXJuIG1zZy5yZXBsYWNlKC97KFxcZCspfS9nLFxuICAgICAgICAobWF0Y2gsIG51bWJlcikgPT4gKGFyZ3NbbnVtYmVyXSAhPSBudWxsXG4gICAgICAgICAgICA/IGFyZ3NbbnVtYmVyXVxuICAgICAgICAgICAgOiBtYXRjaCkpO1xufTtcbmNvbnN0IGluc2VydCA9IChwcmVmaXgpID0+IChzdHIpID0+IHByZWZpeCArIHN0cjtcblxuY29uc3QgQ05EYXRlU3RyaW5nID0gKGRhdGUpID0+IHtcbiAgbGV0IGNuID0gW1wi44CHXCIsXCLkuIBcIixcIuS6jFwiLFwi5LiJXCIsXCLlm5tcIixcIuS6lFwiLFwi5YWtXCIsXCLkuINcIixcIuWFq1wiLFwi5LmdXCJdO1xuICBsZXQgcyA9IFtdO1xuICBsZXQgWVkgPSBkYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgZm9yIChsZXQgaT0wOyBpPFlZLmxlbmd0aDsgaSsrKVxuICAgIGlmIChjbltZWS5jaGFyQXQoaSldKVxuICAgICAgcy5wdXNoKGNuW1lZLmNoYXJBdChpKV0pO1xuICAgIGVsc2VcbiAgICAgIHMucHVzaChZWS5jaGFyQXQoaSkpO1xuICBzLnB1c2goXCLlubRcIik7XG4gIGxldCBNTSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gIGlmIChNTTwxMClcbiAgICBzLnB1c2goY25bTU1dKTtcbiAgZWxzZSBpZiAoTU08MjApXG4gICAgcy5wdXNoKFwi5Y2BXCIgKyBjbltNTSUgMTBdKTtcbiAgcy5wdXNoKFwi5pyIXCIpO1xuICBsZXQgREQgPSBkYXRlLmdldERhdGUoKTtcbiAgaWYgKEREPDEwKVxuICAgIHMucHVzaChjbltERF0pO1xuICBlbHNlIGlmIChERDwyMClcbiAgICBzLnB1c2goXCLljYFcIiArIGNuW0REJSAxMF0pO1xuICBlbHNlXG4gICAgcy5wdXNoKFwi5LqM5Y2BXCIgKyBjbltERCUgMTBdKTtcbiAgcy5wdXNoKFwi5pelXCIpO1xuICByZXR1cm4gcy5qb2luKCcnKTtcbn07XG5cbmNvbnN0IGJhc2U2NCA9IHtcbiAgZGVjb2RlOiAoc3RyKSA9PiB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUod2luZG93LmF0b2Ioc3RyKSkpO1xuICB9LFxuICBlbmNvZGU6IHN0ciA9PiB3aW5kb3cuYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpXG59O1xuXG5jb25zdCBUcmltID0gKHN0cikgPT4ge1xuICBpZighc3RyKSByZXR1cm4gXCJcIjtcbiAgbGV0IHN0ckFyciA9IHN0ci5zcGxpdCgnXFxuJyksXG4gICAgbm9TdGFydFNwYWNlID0gc3RyQXJyLmZpbHRlcihzdHIgPT4gL15bXi1cXHNdLiovLnRlc3Qoc3RyKSAmJiBzdHIgIT09ICcnKS5sZW5ndGggPiAwO1xuICBpZiAoc3RyQXJyLmxlbmd0aCA9PT0gMSB8fCBub1N0YXJ0U3BhY2UpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGVsc2Uge1xuICAgIGxldCBzcGFjZUFyciA9IHN0ckFyci5tYXAoc3RyID0+IHN0ci5tYXRjaCgvXlxccysvKSkuZmlsdGVyKHYgPT4gdikubWFwKGFyciA9PiBhcnJbMF0pO1xuICAgIGxldCBzaG9ydGVzdFNwYWNlTGVuID0gTWF0aC5taW4uYXBwbHkobnVsbCwgc3BhY2VBcnIubWFwKHNwYWNlID0+IHNwYWNlLmxlbmd0aCkpO1xuICAgIGxldCByZXN1bHQgPSBzdHJBcnIubWFwKHN0ciA9PiBzdHIuc2xpY2Uoc2hvcnRlc3RTcGFjZUxlbikpLmpvaW4oJ1xcbicpO1xuICAgIHJldHVybiByZXN1bHQuc3RhcnRzV2l0aChcIlxcblwiKVxuICAgICAgPyByZXN1bHQucmVwbGFjZShcIlxcblwiLCBcIlwiKVxuICAgICAgOiByZXN1bHQ7XG4gIH1cbn07XG5cbmNvbnN0IG1ha2VUZXh0U3Bpbm5lciA9IChjYiwgdGV4dEFyciwgdGltZW91dCkgPT4ge1xuICBsZXQgdGV4dCA9IHRleHRBcnIgfHwgWyctJywgJ1xcXFwnLCAnfCcsICcvJ10sXG4gICAgdGltZXIsXG4gICAgY291bnRlciA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGxvYWRpbmcsICRlbGUpIHtcbiAgICBpZiAobG9hZGluZykge1xuICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgY291bnRlcisrO1xuICAgICAgICBpZigkZWxlKXtcbiAgICAgICAgICAkZWxlLmlubmVySFRNTCA9IHRleHRbY291bnRlciAlIHRleHQubGVuZ3RoXTtcbiAgICAgICAgfWVsc2UgaWYgKGNiKXtcbiAgICAgICAgICBjYih0ZXh0W2NvdW50ZXIgJSB0ZXh0Lmxlbmd0aF0pXG4gICAgICAgIH1cbiAgICAgIH0sIDgwKVxuICAgIH1lbHNle1xuICAgICAgaWYoJGVsZSkgeyRlbGUucmVtb3ZlKCl9XG4gICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHRvZGF5ID0gKCkgPT4ge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBZWVlZID0gbm93LmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgbW0gPSBub3cuZ2V0TW9udGgoKSArIDE7XG4gIGNvbnN0IE1NID0gbW0gPCAxMCA/ICcwJyArIG1tIDogbW07XG5cbiAgY29uc3QgZGQgPSBub3cuZ2V0RGF0ZSgpO1xuICBjb25zdCBERCA9IGRkIDwgMTAgPyAnMCcgKyBkZCA6IGRkO1xuICByZXR1cm4gYCR7WVlZWX0tJHtNTX0tJHtERH1gO1xufTtcblxuZXhwb3J0IHtmb3JtYXQsIGluc2VydCwgQ05EYXRlU3RyaW5nLCBiYXNlNjQsIHRvZGF5LCBUcmltLCBtYWtlVGV4dFNwaW5uZXJ9O1xuIiwiaW1wb3J0IHtUcmltfSBmcm9tIFwiLi9zdHJ1dGlsc1wiO1xuXG5jb25zdCAkJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwuYmluZChkb2N1bWVudCk7XG5jb25zdCAkID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvci5iaW5kKGRvY3VtZW50KTtcbmNvbnN0IGdvdG8gPSAodXJsKSA9PiB7XG4gICAgbGV0ICR0bXBMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICR0bXBMaW5rLmhyZWYgPSB1cmwgfHwgJ2Fib3V0OmJsYW5rZXQnO1xuICAgICR0bXBMaW5rLnRhcmdldCA9ICdfYmxhbmtldCc7XG4gICAgJHRtcExpbmsuY2xpY2soKTtcbiAgICAkdG1wTGluayA9IG51bGw7XG59O1xuXG5jb25zdCBjcmVhdGVOb2Rlc0Zyb20gPSAoaHRtbFN0cikgPT4ge1xuICAgIGxldCAkbm9kZXNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgJG5vZGVzV3JhcHBlci5pbm5lckhUTUwgPSBodG1sU3RyO1xuICAgIHJldHVybiAkbm9kZXNXcmFwcGVyLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgPyAkbm9kZXNXcmFwcGVyLmNoaWxkcmVuXG4gICAgICA6ICRub2Rlc1dyYXBwZXIuY2hpbGROb2Rlcztcbn07XG5cbmNvbnN0IGlzRWxlbWVudEVtcHR5ID0gKCRlbGUpID0+IHtcbiAgICByZXR1cm4gISgkZWxlLmNoaWxkcmVuICYmICRlbGUuY2hpbGRyZW4ubGVuZ3RoKTtcbn07XG5cbmNvbnN0IGdldExhc3RFbGUgPSBhcnIgPT4ge1xuICAgIHJldHVybiBhcnIuc2xpY2UoKS5wb3AoKTtcbn07XG5cbmNvbnN0IGdlblN2Z0xvZ28gPSAobiA9IDMsIHJldHVybkRvbUVsZW1lbnQgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IEZpYiA9IChuKSA9PiB7XG4gICAgICAgIHJldHVybiBuIDwgMiA/IG4gOiAoRmliKG4gLSAxKSArIEZpYihuIC0gMikpO1xuICAgIH07XG5cbiAgICBjb25zdCBzbVJlY3RIdCA9IEZpYihuKVxuICAgICAgLCBzbVJlY3RXZCA9IEZpYihuICsgMSlcbiAgICAgICwgbGdSZWN0SHQgPSBGaWIobiArIDIpXG4gICAgICAsIGxnUmVjdFdkID0gRmliKG4gKyAzKVxuICAgICAgLCBsb2dvSHQgICA9IEZpYihuICsgNCk7XG5cbiAgICBjb25zdCBwb3NBcnI9IFtcbiAgICAgICAgWzAsIDBdLFxuICAgICAgICBbc21SZWN0V2QgKyBzbVJlY3RIdCwgMF0sXG4gICAgICAgIFswLCAyICogc21SZWN0SHRdLFxuICAgICAgICBbc21SZWN0V2QgKyBzbVJlY3RIdCwgMiAqIHNtUmVjdEh0XSxcbiAgICAgICAgWzAsIGxvZ29IdCAtIGxnUmVjdEh0XVxuICAgIF07XG4gICAgY29uc3Qgb25lTGluZSA9IHN0ciA9PiBzdHIucmVwbGFjZSgvW1xcbl0vZywgJycpO1xuICAgIGNvbnN0IHJlbmRlclJlY3QgPSAoeCwgeSwgdywgaCwgYz0nIzAwMCcpID0+IG9uZUxpbmUoYFxuICAgICAgPHJlY3QgXG4gICAgICAgIHg9XCIke3h9XCJcbiAgICAgICAgeT1cIiR7eX1cIiBcbiAgICAgICAgd2lkdGg9XCIke3d9XCIgXG4gICAgICAgIGhlaWdodD1cIiR7aH1cIiBcbiAgICAgICAgZmlsbD1cIiR7Y31cIiBcbiAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMFwiXG4gICAgICAvPlxuICAgIGApO1xuICAgIGNvbnN0IHJlbmRlckxvZ28gPSAodywgaCwgY29udGVudCkgPT4gb25lTGluZShgXG4gICAgICA8c3ZnXG4gICAgICAgIHdpZHRoPVwiJHt3fVwiXG4gICAgICAgIGhlaWdodD1cIiR7aH1cIlxuICAgICAgICB2ZXJzaW9uPVwiMS4xXCJcbiAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICA+XG4gICAgICAgICR7Y29udGVudH1cbiAgICAgIDwvc3ZnPlxuICAgIGApO1xuICAgIGNvbnN0IGxvZ29Db250ZW50ID0gcG9zQXJyLm1hcCgoW3gsIHldLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBpc0xhcmdlUmVjdCA9IGluZGV4ID09PSA0O1xuICAgICAgICBjb25zdCB3ID0gaXNMYXJnZVJlY3QgPyBsZ1JlY3RXZCA6IHNtUmVjdFdkO1xuICAgICAgICBjb25zdCBoID0gaXNMYXJnZVJlY3QgPyBsZ1JlY3RIdCA6IHNtUmVjdEh0O1xuXG4gICAgICAgIHJldHVybiByZW5kZXJSZWN0KHgsIHksIHcsIGgpO1xuICAgIH0pLmpvaW4oJycpO1xuXG4gICAgY29uc3QgbG9nb1N0ciA9IHJlbmRlckxvZ28oXG4gICAgICBsZ1JlY3RXZCxcbiAgICAgIGxvZ29IdCxcbiAgICAgIGxvZ29Db250ZW50XG4gICAgKTtcblxuICAgIHJldHVybiByZXR1cm5Eb21FbGVtZW50XG4gICAgICA/IGNyZWF0ZU5vZGVzRnJvbShsb2dvU3RyKVswXVxuICAgICAgOiBsb2dvU3RyO1xufTtcblxuY29uc3QgaW5qZWN0Q1NTID0gKGNzc1N0cikgPT4ge1xuICAgIGxldCAkaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sXG4gICAgICAkc3R5bGUgPSAkaGVhZC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpO1xuXG4gICAgaWYgKCEkc3R5bGUpIHtcbiAgICAgICAgJHN0eWxlID0gJGhlYWQuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICAgICAgICApO1xuICAgICAgICAkc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgfVxuXG4gICAgJHN0eWxlLmFwcGVuZENoaWxkKFxuICAgICAgY3JlYXRlTm9kZXNGcm9tKFRyaW0oY3NzU3RyKSlbMF1cbiAgICApO1xufTtcblxuY29uc3QgdHJpZ2dlciA9ICgkZWxlLCBrZXkpID0+IHtcbiAgICBsZXQgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnRzJyk7XG4gICAgZXYuaW5pdEV2ZW50KCdrZXl1cCcsIHRydWUsIHRydWUpO1xuICAgIGV2LmtleSA9IGtleTtcbiAgICAkZWxlLmRpc3BhdGNoRXZlbnQoZXYpO1xufTtcblxuY29uc3QgY29tcGxldGlvbldpdGggPSAoZmlsbGluZ0NoYXIpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2hvcnQsIGxvbmcpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhmaWxsaW5nQ2hhcikucmVwZWF0KFxuICAgICAgICAgIFN0cmluZyhsb25nKS5sZW5ndGggLSBTdHJpbmcoc2hvcnQpLmxlbmd0aFxuICAgICAgICApICsgc2hvcnQ7XG4gICAgfVxufTtcblxuY29uc3Qgc2Nyb2xsVG9Cb3R0b20gPSAoJGVsZSkgPT4ge1xuICAgIC8vIHRvIGZpeDog5YGH6K6+5q2k5pe25pyJ5b6A5LiK5rua5Yqo55qE5oOv5oCn77yMXG4gICAgLy8g5b2T5rua5Yqo5p2h5rua5Yqo6Iez5bqV6YOo5ZCO5Lya57un57ut5b6A5LiK5rua5YqoXG4gICAgJGVsZS5zY3JvbGxUb3AgPSAkZWxlLnNjcm9sbEhlaWdodDtcbn07XG5cbmV4cG9ydCB7XG4gICAgJCwgJCQsIGdvdG8sIGlzRWxlbWVudEVtcHR5LCBjcmVhdGVOb2Rlc0Zyb20sIGdlblN2Z0xvZ28sIGdldExhc3RFbGUsXG4gICAgaW5qZWN0Q1NTLCB0cmlnZ2VyLCBjb21wbGV0aW9uV2l0aCwgc2Nyb2xsVG9Cb3R0b20sXG59O1xuIiwiY29uc3QgbGluayA9ICh0ZXh0LCBzcmMpID0+IGA8YSBocmVmPSR7c3JjfSB0YXJnZXQ9XCJfYmxhbmtldFwiID4ke3RleHR9PC9hPmA7XG4vKipcbiAqIOaWh+aho+aooeadv1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5ZG95Luk5ZCN56ew6KGM77yM5aaC77yMbHMgLSDliJflh7rljZrmlofliJfooahcbiAqIEBwYXJhbSBzeW5vcHNpcyDor63ms5XooYzvvIzlpoLvvIxibG9nIFstZV1cbiAqIEBwYXJhbSBkZXNjcmlwdGlvbiDmj4/ov7DooYzvvIzmj4/ov7Dlkb3ku6Tlip/og73nrYnnrYlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGRvY1RwbCA9IChuYW1lLCBzeW5vcHNpcywgZGVzY3JpcHRpb24pID0+IChgXG4gICAgTkFNRVxuICAgICAgICAke25hbWV9XG4gICAgICAgIFxuICAgIFNZTk9QU0lTXG4gICAgICAgICR7c3lub3BzaXN9XG4gICAgICAgIFxuICAgIERFU0NSSVBUSU9OXG4gICAgICAgICR7ZGVzY3JpcHRpb259YCkucmVwbGFjZSgvPC9nLCAnJmx0OycpO1xuXG5leHBvcnQge1xuICAgIGxpbmssXG4gICAgZG9jVHBsXG59OyIsImxldCBzdG9yZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCB7c3RvcmV9O1xuXG4iLCJpbXBvcnQge3N0b3JlfSBmcm9tIFwiLi9zdG9yZVwiO1xuaW1wb3J0IGhhc2ggZnJvbSAnb2JqZWN0LWhhc2gnO1xuXG5jb25zdCByZXEgPSBhc3luYyAodXJsLCBtZXRob2QsIGRhdGEsIHRva2VuKSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9KTtcblxuICBpZiAodG9rZW4pIHtcbiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApO1xuICB9XG5cbiAgcmV0dXJuIChhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHk6IGRhdGEgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IG51bGxcbiAgfSkpLmpzb24oKTtcbn07XG5cbmNvbnN0IHJlcUFuZENhY2hlID0gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgY29uc3Qga2V5ID0gaGFzaChhcmdzKTtcbiAgY29uc3QgcmVzdWx0ID0gc3RvcmUuZ2V0KGtleSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5ld1Jlc3VsdCA9IGF3YWl0IHJlcSguLi5hcmdzKTtcbiAgICBzdG9yZS5zZXQoa2V5LCBuZXdSZXN1bHQpO1xuICAgIHJldHVybiBuZXdSZXN1bHRcbiAgfVxufTtcblxuY29uc3QgZ2V0SW1hZ2UgPSAodXJsKSA9PiB7XG4gIGlmIChzdG9yZS5nZXQodXJsKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGxldCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICBpbWFnZS5zcmMgPSB1cmw7XG4gIHJldHVybiBpbWFnZS5kZWNvZGUoKS50aGVuKCgpID0+IHtcbiAgICBzdG9yZS5zZXQodXJsLCB0cnVlKTtcbiAgfSk7XG59O1xuXG5jb25zdCBncmFwaFFsUXVlcnkgPSAoZW5kcG9pbnQsIHF1ZXJ5U3RyKSA9PiByZXEoZW5kcG9pbnQsICdQT1NUJywge3F1ZXJ5OiBxdWVyeVN0cn0pO1xuXG5leHBvcnQge2dyYXBoUWxRdWVyeSwgcmVxLCBnZXRJbWFnZSwgcmVxQW5kQ2FjaGV9OyIsImV4cG9ydCAqIGZyb20gJy4vZG9tdXRpbCc7XG5leHBvcnQgKiBmcm9tICcuL3RwbHV0aWwnO1xuZXhwb3J0ICogZnJvbSAnLi9zdHJ1dGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3JlcXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IFVBIGZyb20gJ3VhLWRldmljZSc7XG5jb25zdCB1YUluZm8gPSBuZXcgVUEobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogZXhlYyBmdW5jIHRoYXQgcmV0dXJuIGEgcHJvbWlzZSBvbmUgYnkgb25lXG4gKiBAcGFyYW0gZnVuY0FyclxuICogQHBhcmFtIGNiRm5cbiAqIEBwYXJhbSBleHRyYVBhcmFtc1xuICogQHJldHVybnMge1Byb21pc2U8Li4uKnwqPn1cbiAqL1xuY29uc3QgcHJvbWlzZU9uZUJ5T25lID0gYXN5bmMgKGZ1bmNBcnIsIGNiRm4sIC4uLmV4dHJhUGFyYW1zKSA9PiB7XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gWy4uLmZ1bmNBcnJdO1xuICByZXR1cm4gcmVzdC5yZWR1Y2UoXG4gICAgYXN5bmMgKGFjYywgZnVuYywgaW5kZXgpID0+IHtcbiAgICAgIGxldCBwcmV2UmVzdWx0ID0gYXdhaXQgYWNjO1xuICAgICAgY2JGbiAmJiB0eXBlb2YgY2JGbiA9PT0gXCJmdW5jdGlvblwiICYmIGNiRm4oaW5kZXggKyAxKTtcbiAgICAgIHJldHVybiBmdW5jKHByZXZSZXN1bHQsIC4uLmV4dHJhUGFyYW1zKTtcbiAgICB9LFxuICAgIGZpcnN0KCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjYkZuICYmIHR5cGVvZiBjYkZuID09PSBcImZ1bmN0aW9uXCIgJiYgY2JGbigwKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSksXG4gICk7XG59O1xuXG5mdW5jdGlvbiBodW1hbml6ZXJEZWxheUNhbGwoZnVuLCBkZWxheSA9IDMwLCB0aW1lcyA9IDEsIGlmSW5jKSB7XG4gIGxldCBodW1hbml6ZXJEZWxheSA9IGRlbGF5ID0+IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGRlbGF5IC8gMikgKyBkZWxheTtcbiAgbGV0IGNvdW50ZXIgPSAwO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IGNhbGwgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZnVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRpbWVzID49IDApIHtcbiAgICAgICAgICAgIGZ1bihpZkluYyA/IGNvdW50ZXIgOiB0aW1lcyk7XG4gICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgICAgICB0aW1lcy0tO1xuICAgICAgICAgICAgc2V0VGltZW91dChjYWxsLCBodW1hbml6ZXJEZWxheShkZWxheSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKCdkb25lJylcbiAgICAgICAgICAgIH0sIGRlbGF5ICogNSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnaW52YWxpZCBwYXJhbScpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2FsbCgpO1xuICAgIH1cbiAgKTtcbn1cblxuXG5mdW5jdGlvbiB0aHJvdHRsZShjYWxsYmFjaywgd2FpdCwgaW1tZWRpYXRlID0gZmFsc2UpIHtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICBsZXQgaW5pdGlhbENhbGwgPSB0cnVlO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjYWxsTm93ID0gaW1tZWRpYXRlICYmIGluaXRpYWxDYWxsO1xuICAgIGNvbnN0IG5leHQgPSAoKSA9PiB7XG4gICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGltZW91dCA9IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgIGluaXRpYWxDYWxsID0gZmFsc2U7XG4gICAgICBuZXh0KClcbiAgICB9XG5cbiAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG5leHQsIHdhaXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBodW1hbml6ZXJJbnB1dChzdHIsIGlucHV0RnVuLCBzcGVlZCkge1xuICByZXR1cm4gaHVtYW5pemVyRGVsYXlDYWxsKChjb3VudGVyKSA9PiBpbnB1dEZ1bihzdHIuc2xpY2UoMCwgY291bnRlcikpLCBzcGVlZCwgc3RyLmxlbmd0aCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7XG59XG5cbmNvbnN0IHVwZGF0ZUFyckVsZSA9IChhcnIsIGluZGV4LCB2YWwpID0+IHtcbiAgY29uc3QgY29weSA9IGFyci5zbGljZSgpO1xuICBjb3B5LnNwbGljZShpbmRleCwgMSwgdmFsKTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5jb25zdCBpc01vYmlsZSA9ICgpID0+IHtcbiAgcmV0dXJuIHVhSW5mby5kZXZpY2UudHlwZSA9PT0gJ21vYmlsZSc7XG59O1xuXG5leHBvcnQge1xuICB1cGRhdGVBcnJFbGUsIHByb21pc2VPbmVCeU9uZSwgaXNNb2JpbGUsIGh1bWFuaXplckRlbGF5Q2FsbCwgaHVtYW5pemVySW5wdXQsIG5vb3AsIHRocm90dGxlLFxufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRpY2F0b3Iuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRpY2F0b3Iuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kaWNhdG9yLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQge2NyZWF0ZU5vZGVzRnJvbX0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnXG5pbXBvcnQgJ3N0eWxlL2luZGljYXRvci5zY3NzJ1xuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICB0b3RhbFN0ZXA6IDAsXG4gIGluZGljYXRvckNvbG9yOiAnIzAwMCcsXG4gIGluZGljYXRvckhpZ2hsaWdodENvbG9yOiAnI2ZmZicsXG4gIHg6IDAsXG4gIHk6IDAsXG59O1xuXG5jb25zdCBzdGVwSW5kaWNhdG9yID0gZnVuY3Rpb24gKHVzZXJDb25maWcpIHtcbiAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q29uZmlnLCB1c2VyQ29uZmlnKTtcbiAgY29uc3QgbW91bnRTZWxmID0gKCkgPT4ge1xuICAgIGNvbnN0IHN1YkluZGljYXRvckhUTUwgPSBgPHNwYW4+Ljwvc3Bhbj5gO1xuICAgIGNvbnN0IGluZGljYXRvclRwbCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICAke3N1YkluZGljYXRvckhUTUwucmVwZWF0KGNvbmZpZy50b3RhbFN0ZXApfVxuICAgICAgICA8L2Rpdj5cbiAgICBgO1xuICAgIGNvbnN0ICRpbmRpY2F0b3IgPSBjcmVhdGVOb2Rlc0Zyb20oaW5kaWNhdG9yVHBsKVswXTtcblxuICAgIGNvbnN0IHN0eWxlU3RyID0gYFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAke2NvbmZpZy55fTtcbiAgICAgIGxlZnQ6ICR7Y29uZmlnLnh9O1xuICAgICAgY29sb3I6ICR7Y29uZmlnLmluZGljYXRvckNvbG9yfVxuICAgICBgO1xuXG4gICAgJGluZGljYXRvci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVTdHIpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKCRpbmRpY2F0b3IpO1xuICAgIGlmIChjb25maWcueCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIGNvbnN0IHsgd2lkdGggfSA9ICRpbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAkaW5kaWNhdG9yLnN0eWxlLmxlZnQgPSBgY2FsYyg1MCUgLSAke3dpZHRoIC8gMn1weClgXG4gICAgfVxuICAgIHJldHVybiAkaW5kaWNhdG9yO1xuICB9O1xuXG4gIGxldCAkaW5kaWNhdG9yID0gbW91bnRTZWxmKCk7XG4gIHJldHVybiB7XG4gICAgaGlnaGxpZ2h0U3RlcChpbmRleCkge1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IGNvbmZpZy50b3RhbFN0ZXAgLSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0ICRzdGVwID0gJGluZGljYXRvci5jaGlsZHJlbltpbmRleF07XG4gICAgICAkc3RlcC5zdHlsZS5jb2xvciA9IGNvbmZpZy5pbmRpY2F0b3JIaWdobGlnaHRDb2xvcjtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAkaW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQoJ2RvbmUnKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkaW5kaWNhdG9yLnJlbW92ZSgpO1xuICAgICAgICAkaW5kaWNhdG9yID0gbnVsbDtcbiAgICAgIH0sIDIwMDApXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdGVwSW5kaWNhdG9yOyIsImltcG9ydCB7IHByb21pc2VPbmVCeU9uZSwgJCB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiXG5pbXBvcnQgc3RlcEluZGljYXRvciBmcm9tICcuLi93aWRnZXRzL3N0ZXBJbmRpY2F0b3IvJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbigpIHtcbiAgaWYoIXdpbmRvdy5UZXJtaW5hbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGluc3RhbGxCYXNpY0NtZCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7ZGVmYXVsdDogY29tbWFuZHN9ID0gYXdhaXQgaW1wb3J0KCdAemhvdWppYWhhby9jb21tYW5kcycpO1xuICAgIHdpbmRvdy5UZXJtaW5hbC5hZGRDb21tYW5kcyhjb21tYW5kcyk7XG4gIH07XG5cbiAgY29uc3QgaW5zdGFsbEVkaXRvciA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7ZGVmYXVsdDogZWRpdH0gPSBhd2FpdCBpbXBvcnQoJ0B6aG91amlhaGFvL2VkaXRvcicpO1xuICAgIHdpbmRvdy5UZXJtaW5hbC5hZGRDb21tYW5kcyh7ZWRpdH0pO1xuICB9O1xuXG4gIGNvbnN0IGluc3RhbGxCbG9nID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHtkZWZhdWx0OiBibG9nfSA9IGF3YWl0IGltcG9ydCgnQHpob3VqaWFoYW8vYmxvZycpO1xuICAgIHdpbmRvdy5UZXJtaW5hbC5hZGRDb21tYW5kcyh7YmxvZ30pO1xuICB9O1xuXG4gIGNvbnN0IHByb21pc2VRdWV1ZSA9IFtcbiAgICBpbnN0YWxsQmFzaWNDbWQsXG4gICAgaW5zdGFsbEVkaXRvcixcbiAgICBpbnN0YWxsQmxvZyxcbiAgXTtcblxuICBjb25zdCBpbmRpY2F0b3IgPSBzdGVwSW5kaWNhdG9yKHtcbiAgICB0b3RhbFN0ZXA6IHByb21pc2VRdWV1ZS5sZW5ndGgsXG4gICAgaW5kaWNhdG9yQ29sb3I6ICcjY2NjJyxcbiAgICB4OiAnY2VudGVyJyxcbiAgICB5OiAnY2FsYyg0MCUgKyA2MnB4KScsXG4gIH0pO1xuXG4gIHJldHVybiBwcm9taXNlT25lQnlPbmUocHJvbWlzZVF1ZXVlLCBpbmRpY2F0b3IuaGlnaGxpZ2h0U3RlcCkudGhlbihpbmRpY2F0b3IuZGVzdHJveSlcbn0iLCJpbXBvcnQgeyQsIGlzTW9iaWxlfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XHJcbmltcG9ydCBpbnN0YWxsQ29tbWFuZHMgZnJvbSAnLi9wcmVJbnN0YWxsJztcclxuXHJcbmltcG9ydCAnc3R5bGUvaW5kZXguc2Nzcyc7XHJcbmNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3Qge2RlZmF1bHQ6IFBzZXVkb1Rlcm1pbmFsfSA9IGF3YWl0IGltcG9ydCgnQHpob3VqaWFoYW8vdGVybWluYWwnKTtcclxuICBjb25zdCBUZXJtaW5hbCA9IFBzZXVkb1Rlcm1pbmFsKCQoJyN0ZXJtaW5hbCcpLCB7XHJcbiAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTMsIDE2NSwgMTQyLCAwLjg3ODQzMTM3MjU0OTAxOTYpJyxcclxuICAgIGNvbG9yOiAnI2ZmZicsXHJcbiAgICBjdXJzb3JDb2xvcjogJyNmZmYnLFxyXG4gIH0pO1xyXG4gIHdpbmRvdy5UZXJtaW5hbCA9IFRlcm1pbmFsO1xyXG5cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgIGxldCBpc0NvbW1hbmQgPSBBcnJheS5mcm9tKGV2dC50YXJnZXQuY2xhc3NMaXN0KS5pbmNsdWRlcygnY29tbWFuZCcpO1xyXG4gICAgaWYgKCFpc0NvbW1hbmQpIHJldHVybjtcclxuXHJcbiAgICBsZXQgY29tbWFuZCA9IGV2dC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNtZCcpO1xyXG4gICAgbGV0IGlzTXVsdGkgPSBldnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnbXVsdGknKTtcclxuICAgIGxldCB0b0V4ZWMgPSBpc011bHRpID8gY29tbWFuZC5zcGxpdCgvXFxzKiYmXFxzKi8pIDogY29tbWFuZDtcclxuICAgIGxldCBleGVjRm4gPSBpc011bHRpXHJcbiAgICAgID8gJ2h1bWFuaXplckV4ZWNDbWRBcnInXHJcbiAgICAgIDogJ2h1bWFuaXplckV4ZWMnO1xyXG5cclxuICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnY29tbWFuZCcpO1xyXG4gICAgVGVybWluYWxbZXhlY0ZuXSh0b0V4ZWMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2NvbW1hbmQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gaW5zdGFsbENvbW1hbmRzKCkudGhlbigoKSA9PiB7XHJcbiAgICBpZiAoaXNNb2JpbGUoKSkge1xyXG4gICAgICByZXR1cm4gVGVybWluYWwuaHVtYW5pemVyRXhlY0NtZEFycihbJ2Jsb2cnLCAnZXhpdCddKTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbmluaXQoKS50aGVuKCk7XHJcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnN0ZXAtaW5kaWNhdG9yIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDJzO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGxldHRlci1zcGFjaW5nOiAtM3B4OyB9XFxuICAuc3RlcC1pbmRpY2F0b3IuZG9uZSB7XFxuICAgIG9wYWNpdHk6IDA7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xcbiAgI3BvaW50ZXIge1xcbiAgICBkaXNwbGF5OiBub25lOyB9IH1cXG5cXG5ib2R5IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmYjsgfVxcblxcbmJvZHkuZnVsbHNjcmVlbiAjdGVybWluYWwge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiA5OHZoO1xcbiAgbWFyZ2luLXRvcDogMDsgfVxcblxcbmh0bWwge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcblxcbiN0ZXJtaW5hbCB7XFxuICAvKnRvcDogMTMxcHg7Ki9cXG4gIGhlaWdodDogOTNweDtcXG4gIHdpZHRoOiAzODNweDtcXG4gIG1hcmdpbi10b3A6IC0xMCU7XFxuICB0cmFuc2l0aW9uOiBhbGwgLjNzO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApOyB9XFxuXFxuI3Rlcm1pbmFsID4gZGl2IHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDIwcHgpICFpbXBvcnRhbnQ7XFxuICBiYWNrZ3JvdW5kOiAjZmVmZWZlO1xcbiAgYm9yZGVyLXJhZGl1czogMTVweDsgfVxcblxcbi5jb21tYW5kIHtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5jb21tYW5kOmhvdmVyIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOyB9XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjcxcHgpIHtcXG4gIGJvZHkge1xcbiAgICBkaXNwbGF5OiB1bnNldDsgfVxcbiAgI3Rlcm1pbmFsIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgcG9zaXRpb246IHN0YXRpYztcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBib3gtc2hhZG93OiB1bnNldDsgfVxcbiAgI3Rlcm1pbmFsIGRpdiB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7IH1cXG4gICNjb3B5cmlnaHQsXFxuICAubGluay10by1ibG9nIHtcXG4gICAgZGlzcGxheTogbm9uZTsgfSB9XFxuXFxuI3Rlcm1pbmFsIGEge1xcbiAgY29sb3I6ICMwMDA7XFxuICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggIzAwMDtcXG4gIHBhZGRpbmctYm90dG9tOiAxcHg7IH1cXG5cXG4ubG92ZSwgYSB7XFxuICBjb2xvcjogI2ZmODg4ODtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcblxcbi5pbnB1dCB7XFxuICBmb250LXdlaWdodDogNzAwOyB9XFxuXFxuLm91dHB1dCA+IHByZSB7XFxuICBtYXJnaW4tdG9wOiA4cHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7IH1cXG5cXG4jY29weXJpZ2h0IHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGNvbG9yOiAjZDhkOGQ4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiA1MHB4O1xcbiAgbGVmdDogNjElO1xcbiAgbWFyZ2luLWxlZnQ6IC03MnB4OyB9XFxuXFxuc3ZnI2xvZ28ge1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogMnB4OyB9XFxuXFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICB3aWR0aDogMCAhaW1wb3J0YW50OyB9XFxuXFxuLmh1bWFuLXNoYWRvdyA+IGltZyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHZlbmRvcl9saWJfMDQyNTkxZmE2OWQ5MzQxMmZkNWM7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyhcInJoa1BcIikpKDIwNCk7Il0sInNvdXJjZVJvb3QiOiIifQ==