(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{LDA1:function(n,e,t){"use strict";t.d(e,"a",function(){return u}),t.d(e,"b",function(){return d}),t.d(e,"d",function(){return f}),t.d(e,"c",function(){return p});var r=t("8RZD");function a(n,e,t,r,a,o,i){try{var c=n[o](i),s=c.value}catch(n){return void t(n)}c.done?e(s):Promise.resolve(s).then(r,a)}function o(n){return function(){var e=this,t=arguments;return new Promise(function(r,o){var i=n.apply(e,t);function c(n){a(i,r,o,c,s,"next",n)}function s(n){a(i,r,o,c,s,"throw",n)}c(void 0)})}}var i="https://api.github.com/repos/zjhou/notes/contents/_posts",c=localStorage.getItem("ghtoken"),s=function(){var n=o(regeneratorRuntime.mark(function n(){var e;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(e=r.x.get("notes")){n.next=6;break}return n.next=4,Object(r.u)(i,"GET");case 4:e=n.sent,r.x.set("notes",e);case 6:return n.abrupt("return",e);case 7:case"end":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}(),u=function(n,e,t){if(!c)return Promise.reject("please set PAT first!");var a="".concat(t||Object(r.z)(),"-").concat(n,".md"),o="".concat(i,"/").concat(a),s={message:"add note: ".concat(a),committer:{name:"zjhou",email:"z@zjh.im"},content:r.d.encode(e)};return Object(r.u)(o,"PUT",s,c)},f=function(){var n=o(regeneratorRuntime.mark(function n(e,t){var a,o,u,f,d,p;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(c){n.next=2;break}return n.abrupt("return",Promise.reject("please set PAT first!"));case 2:return n.next=4,s();case 4:if(a=n.sent,o=a.filter(function(n){return n.name.includes(e)})[0]){n.next=8;break}throw"无法找到笔记";case 8:return u=o.name,f=o.sha,d="".concat(i,"/").concat(u),p={message:"update note: ".concat(u),content:r.d.encode(t),sha:f,committer:{name:"zjhou",email:"z@zjh.im"}},n.abrupt("return",Object(r.u)(d,"PUT",p,c));case 12:case"end":return n.stop()}},n)}));return function(e,t){return n.apply(this,arguments)}}(),d=function(){var n=o(regeneratorRuntime.mark(function n(e){var t,a,o,u;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(c){n.next=2;break}throw"please set PAT first!";case 2:return n.next=4,s();case 4:if(t=n.sent,a=t.filter(function(n){return n.name===e})[0]){n.next=8;break}throw"无法找到笔记";case 8:return o={message:"delete note: ".concat(e),sha:a.sha},u="".concat(i,"/").concat(e),n.abrupt("return",Object(r.u)(u,"DELETE",o,c).then(function(){return"成功删除！"}));case 11:case"end":return n.stop()}},n)}));return function(e){return n.apply(this,arguments)}}(),p=function(){var n=o(regeneratorRuntime.mark(function n(e){var t,a,o,c,u;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(e){n.next=2;break}throw"请指定笔记名称";case 2:return n.next=4,s();case 4:return t=n.sent,a=t.map(function(n){return n.name.toLowerCase()}),o=a.filter(function(n){return n.includes(e.toLowerCase())})[0],c="".concat(i,"/").concat(o),n.next=10,Object(r.u)(c,"GET");case 10:return u=n.sent,n.abrupt("return",r.d.decode(u.content));case 12:case"end":return n.stop()}},n)}));return function(e){return n.apply(this,arguments)}}()},"T79/":function(n,e,t){(n.exports=t("I1BE")(!1)).push([n.i,"@charset \"UTF-8\";\n#gui.editor.on {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  background: #fff;\n  z-index: 2; }\n\n.edit-area textarea {\n  width: 100%;\n  height: 100%;\n  border: none;\n  resize: none;\n  outline: none;\n  padding: 10px; }\n\n.editor-wrapper {\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n  display: flex; }\n\n.edit-area {\n  flex: 1 1 50%;\n  border-right: solid 1px #f1f1f1;\n  /* &:after,\n    &:before {\n        position: absolute;\n        bottom: 0;\n        font-size: 50px;\n        color: #f1f1f1;\n        z-index: -1;\n    }\n\n    &:before {\n        right: 50%;\n        content: 'ctrl + s 保存';\n    }\n\n    &:after{\n        left: 50%;\n        content: 'ctrl + c 退出';\n    } */ }\n\n.preview-area {\n  flex: 1 1 50%;\n  padding: 10px;\n  overflow: auto;\n  background: #f1f1f1; }\n\n.actions {\n  position: absolute;\n  bottom: 0; }\n",""])},gXRL:function(n,e,t){var r=t("T79/");"string"==typeof r&&(r=[[n.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t("aET+")(r,a);r.locals&&(n.exports=r.locals)},zsIg:function(n,e,t){"use strict";t.r(e);t("gXRL");var r=t("8RZD"),a=function(n,e,t){var a=window.converter.makeHtml(n),o=Object(r.a)("#gui"),i=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=Object(r.a)(n);a.innerHTML='\n    <div class="editor-wrapper">\n      <div class="edit-area">\n          <textarea class="editor">'.concat(e,'</textarea>\n      </div>\n      <div class="preview-area"><div class="markdown-body">').concat(t,"</div></div>\n    </div> \n  "),a.classList.add("editor"),a.classList.add("on");var o=Object(r.a)("textarea.editor"),i=Object(r.a)(".preview-area");return o.focus(),{$editor:o,$preview:i}}("#gui",n,a),c=i.$editor,s=i.$preview;c.addEventListener("keydown",function(n){var t=n.key,r=n.ctrlKey,a=r&&"c"===t;if(r&&"s"===t)return e(c.value),o.classList.remove("on"),void(o.innerHTML="");a&&(e(""),o.classList.remove("on"),o.innerHTML="")}),c.addEventListener("input",function(n){s.innerHTML=window.converter.makeHtml(n.target.value)})},o=t("LDA1");e.default={shortopts:"n:u",handler:function(n,e,t,r){var i=r.restParams,c=r.fromPipe;return new Promise(function(e,t){var r=n.n,s=n.u;r?a(s?c:"",function(n){var a=s?o.d:o.a,i=s?"更新":"添加";a(r,n).then(function(){e("笔记".concat(i,"成功！"))}).catch(t)},t):a(i||c,e,t)})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,