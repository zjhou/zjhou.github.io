(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{Rf5Z:function(t,n,r){"use strict";r.r(n);var e=r("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,r,e){return e.fromPipe||e.restParams},man:{handler:function(t,n,r,i){var s=i.restParams;if(!n)return!1;if(!s)return Object(e.c)(n.man.doc);if(s&&n[s.trim()]){var u=n[s.trim()];return"object"===o(u)&&Object(e.c)(u.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var r;return"Available commands: \n"+Object.keys(n).sort().map((r="- ",function(t){return r+t})).join("\n")}},s=(Symbol(),Symbol(),function(t,n){n||(n={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(r.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?r.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach(function(t){r.bools[t]=!0});var e={};Object.keys(n.alias||{}).forEach(function(t){e[t]=[].concat(n.alias[t]),e[t].forEach(function(n){e[n]=[t].concat(e[t].filter(function(t){return n!==t}))})}),[].concat(n.string).filter(Boolean).forEach(function(t){r.strings[t]=!0,e[t]&&(r.strings[e[t]]=!0)});var o=n.default||{},i={_:[]};Object.keys(r.bools).forEach(function(t){c(t,void 0!==o[t]&&o[t])});var s=[];function c(t,n,o){if(!o||!r.unknownFn||function(t,n){return r.allBools&&/^--[^=]+$/.test(n)||r.strings[t]||r.bools[t]||e[t]}(t,o)||!1!==r.unknownFn(o)){var s=!r.strings[t]&&u(n)?Number(n):n;a(i,t.split("."),s),(e[t]||[]).forEach(function(t){a(i,t.split("."),s)})}}function a(t,n,e){var o=t;n.slice(0,-1).forEach(function(t){void 0===o[t]&&(o[t]={}),o=o[t]});var i=n[n.length-1];void 0===o[i]||r.bools[i]||"boolean"==typeof o[i]?o[i]=e:Array.isArray(o[i])?o[i].push(e):o[i]=[o[i],e]}function f(t){return e[t].some(function(t){return r.bools[t]})}-1!==t.indexOf("--")&&(s=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var l=0;l<t.length;l++){var p=t[l];if(/^--.+=/.test(p)){var h=p.match(/^--([^=]+)=([\s\S]*)$/),d=h[1],b=h[2];r.bools[d]&&(b="false"!==b),c(d,b,p)}else if(/^--no-.+/.test(p)){c(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var y=p.match(/^--(.+)/)[1],v=t[l+1];void 0===v||/^-/.test(v)||r.bools[y]||r.allBools||e[y]&&f(y)?/^(true|false)$/.test(v)?(c(y,"true"===v,p),l++):c(y,!r.strings[y]||"",p):(c(y,v,p),l++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),w=!1,g=0;g<m.length;g++){var _=p.slice(g+2);if("-"!==_){if(/[A-Za-z]/.test(m[g])&&/=/.test(_)){c(m[g],_.split("=")[1],p),w=!0;break}if(/[A-Za-z]/.test(m[g])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){c(m[g],_,p),w=!0;break}if(m[g+1]&&m[g+1].match(/\W/)){c(m[g],p.slice(g+2),p),w=!0;break}c(m[g],!r.strings[m[g]]||"",p)}else c(m[g],_,p)}var x=p.slice(-1)[0];w||"-"===x||(!t[l+1]||/^(-|--)[^-]/.test(t[l+1])||r.bools[x]||e[x]&&f(x)?t[l+1]&&/true|false/.test(t[l+1])?(c(x,"true"===t[l+1],p),l++):c(x,!r.strings[x]||"",p):(c(x,t[l+1],p),l++))}else if(r.unknownFn&&!1===r.unknownFn(p)||i._.push(r.strings._||!u(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(l+1));break}}return Object.keys(o).forEach(function(t){var n,r,s;n=i,r=t.split("."),s=n,r.slice(0,-1).forEach(function(t){s=s[t]||{}}),r[r.length-1]in s||(a(i,t.split("."),o[t]),(e[t]||[]).forEach(function(n){a(i,n.split("."),o[t])}))}),n["--"]?(i["--"]=new Array,s.forEach(function(t){i["--"].push(t)})):s.forEach(function(t){i._.push(t)}),i});function u(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var c=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var r=n.trim().split(/\s+/),e=r[0];if(!e)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(e,"").trim();if(!o.includes(e))return{restParams:i,userInput:n,errorInfo:"".concat(e," 不是合法命令")};var u=t[e],c=r.slice(1),a={};try{a=s(c)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:a}};return function(t){if(t.includes("|")){var r=t.split("|");return r.length<2?n(r[0]):{isMultiResult:!0,userInput:t,parsedResults:r.map(function(t){return n(t.trim())})}}return n(t)}},a=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],f={a:"a",enter:"Enter"},l='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',p="12px",h="\n        @keyframes blink {\n          from {\n             background: #000;\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: 1s;\n          animation-name: blink;\n          animation-iteration-count: infinite\n        }\n    ",d=r("mrSG");function b(t){return"function"==typeof t}var y=!1,v={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;y=t},get useDeprecatedSynchronousErrorHandling(){return y}};function m(t){setTimeout(function(){throw t},0)}var w={closed:!0,next:function(t){},error:function(t){if(v.useDeprecatedSynchronousErrorHandling)throw t;m(t)},complete:function(){}},g=Array.isArray||function(t){return t&&"number"==typeof t.length};function _(t){return null!==t&&"object"==typeof t}function x(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}x.prototype=Object.create(Error.prototype);var S=x,E=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var n;if(!this.closed){var r=this._parentOrParents,e=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var i=0;i<r.length;++i){r[i].remove(this)}if(b(e))try{e.call(this)}catch(t){n=t instanceof S?O(t.errors):[t]}if(g(o)){i=-1;for(var s=o.length;++i<s;){var u=o[i];if(_(u))try{u.unsubscribe()}catch(t){n=n||[],t instanceof S?n=n.concat(O(t.errors)):n.push(t)}}}if(n)throw new S(n)}},t.prototype.add=function(n){var r=n;if(!n)return t.EMPTY;switch(typeof n){case"function":r=new t(n);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var e=r;(r=new t)._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function O(t){return t.reduce(function(t,n){return t.concat(n instanceof S?n.errors:n)},[])}var j="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),k=function(t){function n(r,e,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=w;break;case 1:if(!r){i.destination=w;break}if("object"==typeof r){r instanceof n?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new I(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new I(i,r,e,o)}return i}return d.__extends(n,t),n.prototype[j]=function(){return this},n.create=function(t,r,e){var o=new n(t,r,e);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(E),I=function(t){function n(n,r,e,o){var i,s=t.call(this)||this;s._parentSubscriber=n;var u=s;return b(r)?i=r:r&&(i=r.next,e=r.error,o=r.complete,r!==w&&(b((u=Object.create(r)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=e,s._complete=o,s}return d.__extends(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,r=v.useDeprecatedSynchronousErrorHandling;if(this._error)r&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)r?(n.syncErrorValue=t,n.syncErrorThrown=!0):m(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;m(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),v.useDeprecatedSynchronousErrorHandling)throw t;m(t)}},n.prototype.__tryOrSetError=function(t,n,r){if(!v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,r)}catch(n){return v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(m(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(k);var P="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function A(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:T}var R=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e=this.operator,o=function(t,n,r){if(t){if(t instanceof k)return t;if(t[j])return t[j]()}return t||n||r?new k(t,n,r):new k(w)}(t,n,r);if(e?o.add(e.call(o,this.source)):o.add(this.source||v.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),v.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,r=n.closed,e=n.destination,o=n.isStopped;if(r||o)return!1;t=e&&e instanceof k?e:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=N(n))(function(n,e){var o;o=r.subscribe(function(n){try{t(n)}catch(t){e(t),o&&o.unsubscribe()}},e,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[P]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:A(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=N(t))(function(t,r){var e;n.subscribe(function(t){return e=t},function(t){return r(t)},function(){return t(e)})})},t.create=function(n){return new t(n)},t}();function N(t){if(t||(t=v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function $(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}$.prototype=Object.create(Error.prototype);var L=$,M=function(t){function n(n,r){var e=t.call(this)||this;return e.subject=n,e.subscriber=r,e.closed=!1,e}return d.__extends(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var r=n.indexOf(this.subscriber);-1!==r&&n.splice(r,1)}}},n}(E),C=function(t){function n(n){var r=t.call(this,n)||this;return r.destination=n,r}return d.__extends(n,t),n}(k),D=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return d.__extends(n,t),n.prototype[j]=function(){return new C(this)},n.prototype.lift=function(t){var n=new H(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new L;if(!this.isStopped)for(var n=this.observers,r=n.length,e=n.slice(),o=0;o<r;o++)e[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new L;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,r=n.length,e=n.slice(),o=0;o<r;o++)e[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new L;this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),e=0;e<n;e++)r[e].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new L;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new L;return this.hasError?(t.error(this.thrownError),E.EMPTY):this.isStopped?(t.complete(),E.EMPTY):(this.observers.push(t),new M(this,t))},n.prototype.asObservable=function(){var t=new R;return t.source=this,t},n.create=function(t,n){return new H(t,n)},n}(R),H=function(t){function n(n,r){var e=t.call(this)||this;return e.destination=n,e.source=r,e}return d.__extends(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):E.EMPTY},n}(D);function Y(t){return t&&"function"==typeof t.schedule}var F=function(t){return function(n){for(var r=0,e=t.length;r<e&&!n.closed;r++)n.next(t[r]);n.complete()}};function V(t,n){return new R(function(r){var e=new E,o=0;return e.add(n.schedule(function(){o!==t.length?(r.next(t[o++]),r.closed||e.add(this.schedule())):r.complete()})),e})}function z(t,n){return n?V(t,n):new R(F(t))}var B=function(t){function n(n,r,e){var o=t.call(this)||this;return o.parent=n,o.outerValue=r,o.outerIndex=e,o.index=0,o}return d.__extends(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(k);function U(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var q=U(),J=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Z(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var K=function(t){if(t&&"function"==typeof t[P])return e=t,function(t){var n=e[P]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(J(t))return F(t);if(Z(t))return r=t,function(t){return r.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,m),t};if(t&&"function"==typeof t[q])return n=t,function(t){for(var r=n[q]();;){var e=r.next();if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return"function"==typeof r.return&&t.add(function(){r.return&&r.return()}),t};var n,r,e,o=_(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function G(t,n,r,e,o){if(void 0===o&&(o=new B(t,r,e)),!o.closed)return n instanceof R?n.subscribe(o):K(n)(o)}var W=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return d.__extends(n,t),n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(k);function Q(t,n){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new X(t,n))}}var X=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new tt(t,this.project,this.thisArg))},t}(),tt=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.project=r,o.count=0,o.thisArg=e||o,o}return d.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(k);function nt(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[P]}(t))return function(t,n){return new R(function(r){var e=new E;return e.add(n.schedule(function(){var o=t[P]();e.add(o.subscribe({next:function(t){e.add(n.schedule(function(){return r.next(t)}))},error:function(t){e.add(n.schedule(function(){return r.error(t)}))},complete:function(){e.add(n.schedule(function(){return r.complete()}))}}))})),e})}(t,n);if(Z(t))return function(t,n){return new R(function(r){var e=new E;return e.add(n.schedule(function(){return t.then(function(t){e.add(n.schedule(function(){r.next(t),e.add(n.schedule(function(){return r.complete()}))}))},function(t){e.add(n.schedule(function(){return r.error(t)}))})})),e})}(t,n);if(J(t))return V(t,n);if(function(t){return t&&"function"==typeof t[q]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new R(function(r){var e,o=new E;return o.add(function(){e&&"function"==typeof e.return&&e.return()}),o.add(n.schedule(function(){e=t[q](),o.add(n.schedule(function(){if(!r.closed){var t,n;try{var o=e.next();t=o.value,n=o.done}catch(t){return void r.error(t)}n?r.complete():(r.next(t),this.schedule())}}))})),o})}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function rt(t,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(e){return e.pipe(rt(function(r,e){return(o=t(r,e),i?nt(o,i):o instanceof R?o:new R(K(o))).pipe(Q(function(t,o){return n(r,t,e,o)}));var o,i},r))}:("number"==typeof n&&(r=n),function(n){return n.lift(new et(t,r))})}var et=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new ot(t,this.project,this.concurrent))},t}(),ot=function(t){function n(n,r,e){void 0===e&&(e=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=r,o.concurrent=e,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return d.__extends(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,r=this.index++;try{n=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,r)},n.prototype._innerSub=function(t,n,r){var e=new B(this,void 0,void 0);this.destination.add(e),G(this,t,n,r,e)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(W);function it(t){return t}function st(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Number.POSITIVE_INFINITY,e=null,o=t[t.length-1];return Y(o)?(e=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(r=t.pop())):"number"==typeof o&&(r=t.pop()),null===e&&1===t.length&&t[0]instanceof R?t[0]:function(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),rt(it,t)}(r)(z(t,e))}function ut(t,n,r,e,o,i,s){try{var u=t[i](s),c=u.value}catch(t){return void r(t)}u.done?n(c):Promise.resolve(c).then(e,o)}var ct=new D,at=function(t){return function(n){ct.next({input:t,output:n})}},ft=function(t){var n=t.parsedResult,r=t.cmdSet,o=t.$terminal,i=n.userInput;ct.next({input:i,loading:!0,output:""}),Object(e.t)(n.parsedResults.map(function(t){return n=regeneratorRuntime.mark(function n(e){var i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=e,n.abrupt("return",i(t.paramsObj,r,o,t));case 5:case"end":return n.stop()}},n)}),e=function(){var t=this,r=arguments;return new Promise(function(e,o){var i=n.apply(t,r);function s(t){ut(i,e,o,s,u,"next",t)}function u(t){ut(i,e,o,s,u,"throw",t)}s(void 0)})},function(t){return e.apply(this,arguments)};var n,e})).then(function(t){ct.next({output:t,input:i})}).catch(at(i))},lt={in:function(t){var n=t.parsedResult,r=t.cmdSet,e=t.$terminal;if(n)if(n.isMultiResult)ft({parsedResult:n,cmdSet:r,$terminal:e});else{var o=n.userInput;if(n.errorInfo)ct.next({input:o,output:n.errorInfo});else{var i=n.command.handler||n.command,s="";try{s=i(n.paramsObj,r,e,n)}catch(t){return void at(o)(t)}"string"!=typeof s?(ct.next({input:o,loading:!0,output:""}),Promise.resolve(s).then(function(t){ct.next({output:t,input:o})}).catch(at(o))):ct.next({input:o,output:s})}}else ct.next(null)},out$:ct};function pt(t,n){var r=!1;return arguments.length>=2&&(r=!0),function(e){return e.lift(new ht(t,n,r))}}var ht=function(){function t(t,n,r){void 0===r&&(r=!1),this.accumulator=t,this.seed=n,this.hasSeed=r}return t.prototype.call=function(t,n){return n.subscribe(new dt(t,this.accumulator,this.seed,this.hasSeed))},t}(),dt=function(t){function n(n,r,e,o){var i=t.call(this,n)||this;return i.accumulator=r,i._seed=e,i.hasSeed=o,i.index=0,i}return d.__extends(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,r=this.index++;try{n=this.accumulator(this.seed,t,r)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(k);function bt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var r;"function"==typeof t[t.length-1]&&(r=t.pop());var e=t;return n.lift(new yt(e,r))}}var yt=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new vt(t,this.observables,this.project))},t}(),vt=function(t){function n(n,r,e){var o=t.call(this,n)||this;o.observables=r,o.project=e,o.toRespond=[];var i=r.length;o.values=new Array(i);for(var s=0;s<i;s++)o.toRespond.push(s);for(s=0;s<i;s++){var u=r[s];o.add(G(o,u,u,s))}return o}return d.__extends(n,t),n.prototype.notifyNext=function(t,n,r,e,o){this.values[r]=n;var i=this.toRespond;if(i.length>0){var s=i.indexOf(r);-1!==s&&i.splice(s,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(W);function mt(t,n){return function(r){return r.lift(new wt(t,n))}}var wt=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.predicate,this.thisArg))},t}(),gt=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.predicate=r,o.thisArg=e,o.count=0,o}return d.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(k);Object.prototype.toString;function _t(t,n,r,e){return b(r)&&(e=r,r=void 0),e?_t(t,n,r).pipe(Q(function(t){return g(t)?e.apply(void 0,t):e(t)})):new R(function(e){!function t(n,r,e,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var u=n;n.addEventListener(r,e,i),s=function(){return u.removeEventListener(r,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(r,e),s=function(){return c.off(r,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var a=n;n.addListener(r,e),s=function(){return a.removeListener(r,e)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,l=n.length;f<l;f++)t(n[f],r,e,o,i)}o.add(s)}(t,n,function(t){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(t)},e,r)})}var xt=function(t){function n(n){var r=t.call(this)||this;return r._value=n,r}return d.__extends(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var r=t.prototype._subscribe.call(this,n);return r&&!r.closed&&n.next(this._value),r},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new L;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(D),St={};var Et=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new Ot(t,this.resultSelector))},t}(),Ot=function(t){function n(n,r){var e=t.call(this,n)||this;return e.resultSelector=r,e.active=0,e.values=[],e.observables=[],e}return d.__extends(n,t),n.prototype._next=function(t){this.values.push(St),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var r=0;r<n;r++){var e=t[r];this.add(G(this,e,e,r))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,r,e,o){var i=this.values,s=i[r],u=this.toRespond?s===St?--this.toRespond:this.toRespond:0;i[r]=n,0===u&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(W);function jt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length;if(0===r)throw new Error("list of properties cannot be empty.");return function(n){return Q(function(t,n){return function(r){for(var e=r,o=0;o<n;o++){var i=e[t[o]];if(void 0===i)return;e=i}return e}}(t,r))(n)}}var kt=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new It(t,this.compare,this.keySelector))},t}(),It=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.keySelector=e,o.hasKey=!1,"function"==typeof r&&(o.compare=r),o}return d.__extends(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var r=this.keySelector;n=r?r(t):t}catch(t){return this.destination.error(t)}var e=!1;if(this.hasKey)try{e=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;e||(this.key=n,this.destination.next(t))},n}(k),Pt=function(t,n){var r=t.getBoundingClientRect(),e=r.left,o=r.top;n.style.left="".concat(e,"px"),n.style.top="".concat(o,"px")},Tt=function(t,n){return Pt(t,n),function(r){Pt(t,n);var e=r.start!==r.end,o=""===r.inputStr,i=r.inputStr.split("").map(function(t){return" "===t?"&nbsp;":t});e&&!o||i.push("&nbsp;"),t.innerHTML=i.map(function(t,n){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),e=1;e<n;e++)r[e-1]=arguments[e];return'<span class="'.concat(r.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":e&&i>=r.start&&i<=r.end?"highlight":i===r.start?"blink":""));var i}).join("")}};function At(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function Rt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=[],e=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(e=(s=u.next()).done)&&(r.push(s.value),!n||r.length!==n);e=!0);}catch(t){o=!0,i=t}finally{try{e||null==u.return||u.return()}finally{if(o)throw i}}return r}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Nt=function(t){if(!t)throw"Input wrapper element missing.";var n,r=((n=document.createElement("input")).style.height="20px",n.style.position="fixed",n.style.zIndex="-1",n.style.outline="none",n.style.border="none",n.style.top="0",n.style.left="0",n.style.opacity="0",screen.width<500&&(n.style.transform="scale(0)"),n.style.color="transparent",n.setAttribute("autocomplete","off"),n.onblur=function(){setTimeout(function(){n.focus()})},n);document.body.appendChild(r),r.focus(),function(t,n){Object(e.n)(h),t.style.fontFamily=l,t.style.fontSize=p,t.style.wordBreak="break-all",Tt(t,n)({inputStr:"",start:0,end:0})}(t,r);var o=_t(r,"input"),i=_t(r,"select"),s=_t(r,"keyup"),u=new xt("");o.pipe(jt("target","value")).subscribe(function(t){return u.next(t)});var c,d,b=s.pipe(mt(function(t){return a.includes(t.key)})),y=s.pipe(mt(function(t){return t.key===f.enter}),mt(function(t){return!t.target.disabled}),bt(u),Q(function(t){var n=Rt(t,2);n[0];return n[1]}),mt(function(t){return!!t})),v=st(o,b,i).pipe(Q(function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}})),m=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=null,e=null;return Y(t[t.length-1])&&(e=t.pop()),"function"==typeof t[t.length-1]&&(r=t.pop()),1===t.length&&g(t[0])&&(t=t[0]),z(t,e).lift(new Et(r))}(u,v).pipe(Q(function(t){var n=Rt(t,2);return function(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(n){At(t,n,r[n])})}return t}({inputStr:n[0]},n[1])}),(c=function(t,n){return JSON.stringify(t)===JSON.stringify(n)},function(t){return t.lift(new kt(c,d))})),w=Tt(t,r);return m.subscribe(w),{enter$:y,input$:o,get target(){return r},set value(n){r.value=n,u.next(n),""===n&&Pt(t,r),Object(e.A)(r,a[0])},set disabled(t){var n=document.querySelector(".blink");t?(r.setAttribute("disabled",!0),n.classList.add("disabled")):(n.classList.remove("disabled"),r.removeAttribute("disabled"),r.focus())}}};function $t(t){return($t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Lt=Object(e.r)(),Mt=function(t){var n,r,e=t.input,o=t.output;if("string"==typeof o)n=o;else if("object"===$t(o))try{n=o.html||JSON.stringify(o),o.html&&(r=!0)}catch(t){r=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var i=o.message,s=o.stack;n="".concat(i,"\n\n").concat(s)}var u=r?n:"<pre>".concat(n||"","</pre>");return'<div class="session">\n            <div class="input">\n                <span class="prompt">$</span>\n                <span class="cmd">\n                    '.concat(e||"",'\n                </span>\n            </div>\n            <div class="output">\n                ').concat(u,"\n            </div>\n        </div>")},Ct=function(t){var n=document.querySelector("#hist-sess"),r=document.querySelector("#curr-sess"),o=Object(e.k)(t),i=o&&o.loading;if(t.length<1)n.innerHTML="";else{n.innerHTML=t.map(Mt).join("");var s=n.querySelector(".session:last-child > .output");i?(Lt(!0,s),r.style.display="none"):(Lt(!1),r.style.display="block")}},Dt=function(t){Object(e.n)("\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n"),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var n=t.firstElementChild,r=document.querySelector("#input"),o=Nt(r);return n.style.height="calc(100% - 10px)",n.style.overflow="auto",n.style.fontFamily=l,n.style.fontSize=p,n.addEventListener("click",function(t){var n=o.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<14)&&o.target.focus()},{capture:!1}),{$terminal:n,input:o}};function Ht(t){return function(t){if(Array.isArray(t)){for(var n=0,r=new Array(t.length);n<t.length;n++)r[n]=t[n];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Yt=[],Ft=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,r=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return Yt=[].concat(Ht(Yt),Ht(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(Ht(Yt),Ht(t)),i=o.map(function(t,n){return Object(e.e)(" ")(n+1,o.length+1)+". "+t.input}).join("\n");return t.push({input:r,output:i}),t;default:return t}};function Vt(t,n,r,e,o,i,s){try{var u=t[i](s),c=u.value}catch(t){return void r(t)}u.done?n(c):Promise.resolve(c).then(e,o)}function zt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=[],e=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(e=(s=u.next()).done)&&(r.push(s.value),!n||r.length!==n);e=!0);}catch(t){o=!0,i=t}finally{try{e||null==u.return||u.return()}finally{if(o)throw i}}return r}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Bt(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(n){Ut(t,n,r[n])})}return t}function Ut(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function qt(t){if(!t)throw"wrapper element not found";var n=Dt(t),r=n.$terminal,o=n.input,s=new D,u=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[t.length-1];return Y(r)?(t.pop(),V(t,r)):z(t)}(i),a=st(s,u).pipe(pt(function(t,n){return Bt({},n,t)},{}),Q(function(t){return Bt({},t,i)})),l=o.enter$.pipe(bt(a),Q(function(t){var n=zt(t,2),e=n[0],o=n[1];return{parsedResult:c(o)(e),cmdSet:o,$terminal:r}}),Q(lt.in)).subscribe(function(){o.target.blur()}),p=lt.out$.pipe(mt(function(t){return t}),pt(function(t,n){var r=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var r=i[t].handler||i[t];try{return n=""===r()}catch(t){return!1}}(r))return Ft(t&&t.slice(),r,n.input);var e=t.slice().pop();return e&&e.loading&&t.pop(),t.push(n),t},[])).subscribe(function(t){var n=Object(e.k)(t);Ct(t),Object(e.w)(r),o.disabled=n&&n.loading,o.value=""});o.input$.subscribe(function(){Object(e.w)(r)});var h=function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return Object(e.w)(r),t.next=3,Object(e.m)(n,function(t){return o.value=t},50);case 3:return t.abrupt("return",new Promise(function(t,r){lt.out$.pipe(mt(function(t){return t}),mt(function(t){return!0!==t.loading})).subscribe(function(r){r.input===n&&t()}),Object(e.A)(o.target,f.enter)}));case 4:case"end":return t.stop()}},t)}),function(){var n=this,r=arguments;return new Promise(function(e,o){var i=t.apply(n,r);function s(t){Vt(i,e,o,s,u,"next",t)}function u(t){Vt(i,e,o,s,u,"throw",t)}s(void 0)})});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){o.disabled=t},set commands(t){s.next(t)},set currentInput(t){o.value=t},destroy:function(){p.unsubscribe(),l.unsubscribe(),r.remove(),o.target.remove()},addCommands:function(t){s.next(t)},input:function(t,n){if(n)return Object(e.m)(t,function(t){o.value=t});o.value=t},humanizerExec:h,humanizerExecCmdArr:function(t){var n=t.map(function(t){return function(){return h(t)}});return Object(e.t)(n)},exec:function(t){o.value=t,Object(e.A)(o.target,f.enter)}}}r.d(n,"default",function(){return qt})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,