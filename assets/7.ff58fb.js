(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Rf5Z:function(t,n,e){"use strict";e.r(n);var r=e("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,e,r){return r.fromPipe||r.restParams},man:{handler:function(t,n,e,i){var u=i.restParams;if(!n)return!1;if(!u)return Object(r.c)(n.man.doc);if(u&&n[u.trim()]){var c=n[u.trim()];return"object"===o(c)&&Object(r.c)(c.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var e;return"Available commands: \n"+Object.keys(n).sort().map((e="- ",function(t){return e+t})).join("\n")}},u="\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n",c=(Symbol(),Symbol(),function(t,n){n||(n={});var e={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(e.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?e.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach((function(t){e.bools[t]=!0}));var r={};Object.keys(n.alias||{}).forEach((function(t){r[t]=[].concat(n.alias[t]),r[t].forEach((function(n){r[n]=[t].concat(r[t].filter((function(t){return n!==t})))}))})),[].concat(n.string).filter(Boolean).forEach((function(t){e.strings[t]=!0,r[t]&&(e.strings[r[t]]=!0)}));var o=n.default||{},i={_:[]};Object.keys(e.bools).forEach((function(t){c(t,void 0!==o[t]&&o[t])}));var u=[];function c(t,n,o){if(!o||!e.unknownFn||function(t,n){return e.allBools&&/^--[^=]+$/.test(n)||e.strings[t]||e.bools[t]||r[t]}(t,o)||!1!==e.unknownFn(o)){var u=!e.strings[t]&&a(n)?Number(n):n;s(i,t.split("."),u),(r[t]||[]).forEach((function(t){s(i,t.split("."),u)}))}}function s(t,n,r){var o=t;n.slice(0,-1).forEach((function(t){void 0===o[t]&&(o[t]={}),o=o[t]}));var i=n[n.length-1];void 0===o[i]||e.bools[i]||"boolean"==typeof o[i]?o[i]=r:Array.isArray(o[i])?o[i].push(r):o[i]=[o[i],r]}function l(t){return r[t].some((function(t){return e.bools[t]}))}-1!==t.indexOf("--")&&(u=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var f=0;f<t.length;f++){var p=t[f];if(/^--.+=/.test(p)){var b=p.match(/^--([^=]+)=([\s\S]*)$/),d=b[1],h=b[2];e.bools[d]&&(h="false"!==h),c(d,h,p)}else if(/^--no-.+/.test(p)){c(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var v=p.match(/^--(.+)/)[1],y=t[f+1];void 0===y||/^-/.test(y)||e.bools[v]||e.allBools||r[v]&&l(v)?/^(true|false)$/.test(y)?(c(v,"true"===y,p),f++):c(v,!e.strings[v]||"",p):(c(v,y,p),f++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),g=!1,O=0;O<m.length;O++){var j=p.slice(O+2);if("-"!==j){if(/[A-Za-z]/.test(m[O])&&/=/.test(j)){c(m[O],j.split("=")[1],p),g=!0;break}if(/[A-Za-z]/.test(m[O])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(j)){c(m[O],j,p),g=!0;break}if(m[O+1]&&m[O+1].match(/\W/)){c(m[O],p.slice(O+2),p),g=!0;break}c(m[O],!e.strings[m[O]]||"",p)}else c(m[O],j,p)}var w=p.slice(-1)[0];g||"-"===w||(!t[f+1]||/^(-|--)[^-]/.test(t[f+1])||e.bools[w]||r[w]&&l(w)?t[f+1]&&/true|false/.test(t[f+1])?(c(w,"true"===t[f+1],p),f++):c(w,!e.strings[w]||"",p):(c(w,t[f+1],p),f++))}else if(e.unknownFn&&!1===e.unknownFn(p)||i._.push(e.strings._||!a(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(f+1));break}}return Object.keys(o).forEach((function(t){var n,e,u;n=i,e=t.split("."),u=n,e.slice(0,-1).forEach((function(t){u=u[t]||{}})),e[e.length-1]in u||(s(i,t.split("."),o[t]),(r[t]||[]).forEach((function(n){s(i,n.split("."),o[t])})))})),n["--"]?(i["--"]=new Array,u.forEach((function(t){i["--"].push(t)}))):u.forEach((function(t){i._.push(t)})),i});function a(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var s=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var e=n.trim().split(/\s+/),r=e[0];if(!r)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(r,"").trim();if(!o.includes(r))return{restParams:i,userInput:n,errorInfo:"".concat(r," 不是合法命令")};var u=t[r],a=e.slice(1),s={};try{s=c(a)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:s}};return function(t){if(t.includes("|")){var e=t.split("|");return e.length<2?n(e[0]):{isMultiResult:!0,userInput:t,parsedResults:e.map((function(t){return n(t.trim())}))}}return n(t)}},l=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],f={a:"a",enter:"Enter"},p='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',b="12px",d=function(t){var n=t.cursorColor,e=void 0===n?"#000":n,r=t.blinkSpeed,o=void 0===r?"1s":r;return"\n        @keyframes blink {\n          from {\n             background: ".concat(e,";\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: ").concat(o,";\n          animation-name: blink;\n          animation-iteration-count: infinite\n        }\n    ")},h=e("K9Ia"),v=e("nkY7"),y=e("IUTb"),m=e("JF+6");var g=e("p0ib");function O(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}var j=new h.a,w=function(t){return function(n){j.next({input:t,output:n})}},S=function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal,i=n.userInput;j.next({input:i,loading:!0,output:""}),Object(r.u)(n.parsedResults.map((function(t){return function(){var n,r=(n=regeneratorRuntime.mark((function n(r){var i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=r,n.abrupt("return",i(t.paramsObj,e,o,t));case 5:case"end":return n.stop()}}),n)})),function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function u(t){O(i,r,o,u,c,"next",t)}function c(t){O(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return r.apply(this,arguments)}}()}))).then((function(t){j.next({output:t,input:i})})).catch(w(i))},x={in:function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal;if(n)if(n.isMultiResult)S({parsedResult:n,cmdSet:e,$terminal:o});else{var i=n.userInput;if(n.errorInfo)j.next({input:i,output:n.errorInfo});else{var u=n.command.handler||n.command,c="";try{c=u(n.paramsObj,e,o,n,function(t){return function(n,e){j.next({loading:!0,print:!0,input:t,output:e?Object(r.t)()+" "+n:n})}}(i))}catch(t){return void w(i)(t)}"string"!=typeof c?(j.next({input:i,loading:!0,output:""}),Promise.resolve(c).then((function(t){j.next({output:t,input:i})})).catch(w(i))):j.next({input:i,output:c})}}else j.next(null)},out$:j},k=e("mrSG"),P=e("FFOo");function E(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new R(t,n,e))}}var R=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new _(t,this.accumulator,this.seed,this.hasSeed))},t}(),_=function(t){function n(n,e,r,o){var i=t.call(this,n)||this;return i.accumulator=e,i._seed=r,i.hasSeed=o,i.index=0,i}return k.__extends(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(P.a),A=e("67Y/"),I=e("MGBS"),$=e("zotm");function D(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new C(r,e))}}var C=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new F(t,this.observables,this.project))},t}(),F=function(t){function n(n,e,r){var o=t.call(this,n)||this;o.observables=e,o.project=r,o.toRespond=[];var i=e.length;o.values=new Array(i);for(var u=0;u<i;u++)o.toRespond.push(u);for(u=0;u<i;u++){var c=e[u];o.add(Object($.a)(o,c,c,u))}return o}return k.__extends(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.values[e]=n;var i=this.toRespond;if(i.length>0){var u=i.indexOf(e);-1!==u&&i.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(I.a),M=e("VnD/"),N=e("bne5"),z=e("8g8A"),B=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return k.__extends(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new z.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(h.a),L=e("isby"),T={};function H(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Object(v.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(L.a)(t[0])&&(t=t[0]),Object(y.a)(t,r).lift(new J(e))}var J=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new q(t,this.resultSelector))},t}(),q=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return k.__extends(n,t),n.prototype._next=function(t){this.values.push(T),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object($.a)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,o){var i=this.values,u=i[e],c=this.toRespond?u===T?--this.toRespond:this.toRespond:0;i[e]=n,0===c&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(I.a);function Y(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(A.a)(function(t,n){return function(e){for(var r=e,o=0;o<n;o++){var i=r[t[o]];if(void 0===i)return;r=i}return r}}(t,e))(n)}}var Z=e("ad02"),V=function(){var t=document.createElement("input");return t.style.height="20px",t.style.position="fixed",t.style.zIndex="-1",t.style.outline="none",t.style.border="none",t.style.top="0",t.style.left="0",t.style.opacity="0",screen.width<500&&(t.style.transform="scale(0)"),t.style.color="transparent",t.setAttribute("autocomplete","off"),t.onblur=function(){setTimeout((function(){t.focus()}))},t},G=function(t,n){var e=t.getBoundingClientRect(),r=e.left,o=e.top;n.style.left="".concat(r,"px"),n.style.top="".concat(o,"px")},U=function(t,n){return G(t,n),function(e){G(t,n);var r=e.start!==e.end,o=""===e.inputStr,i=e.inputStr.split("").map((function(t){return" "===t?"&nbsp;":t}));r&&!o||i.push("&nbsp;"),t.innerHTML=i.map((function(t,n){return function(t){for(var n=arguments.length,e=new Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return'<span class="'.concat(e.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":r&&i>=e.start&&i<=e.end?"highlight":i===e.start?"blink":""));var i})).join("")}},K=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(r.n)(d(e)),t.style.fontFamily=p,t.style.fontSize=b,t.style.wordBreak="break-all",U(t,n)({inputStr:"",start:0,end:0})};function W(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Q(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?W(e,!0).forEach((function(n){X(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):W(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function X(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function tt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var nt=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"Input wrapper element missing.";var e=V();document.body.appendChild(e),e.focus(),K(t,e,n);var o=Object(N.a)(e,"input"),i=Object(N.a)(e,"select"),u=Object(N.a)(e,"keyup"),c=new B("");o.pipe(Y("target","value")).subscribe((function(t){return c.next(t)}));var a=u.pipe(Object(M.a)((function(t){return l.includes(t.key)}))),s=u.pipe(Object(M.a)((function(t){return t.key===f.enter})),Object(M.a)((function(t){return!t.target.disabled})),D(c),Object(A.a)((function(t){var n=tt(t,2);n[0];return n[1]})),Object(M.a)((function(t){return!!t}))),p=Object(g.a)(o,a,i),b=p.pipe(Object(A.a)((function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}}))),d=H(c,b).pipe(Object(A.a)((function(t){var n=tt(t,2);return Q({inputStr:n[0]},n[1])})),Object(Z.a)((function(t,n){return JSON.stringify(t)===JSON.stringify(n)}))),h=U(t,e);return d.subscribe(h),{enter$:s,input$:o,get target(){return e},set value(n){e.value=n,c.next(n),""===n&&G(t,e),Object(r.C)(e,l[0])},set disabled(n){var r=t.querySelector(".blink");n?(e.setAttribute("disabled",!0),r.classList.add("disabled")):(r.classList.remove("disabled"),e.removeAttribute("disabled"),e.focus())}}};function et(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function rt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function ot(t){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var it=Object(r.r)(),ut=function(t){var n=document.querySelector("#hist-sess"),e=document.querySelector("#curr-sess"),o=(document.querySelector("#curr-sess .input .prompt"),Object(r.k)(t)),i=o&&o.loading,u=function(n,e){var r=t[n-1];return r&&r.print&&r.input===e.input},c=i?'<span class="blink">&nbsp;</span>':"";t.length<1?n.innerHTML="":(n.innerHTML=t.map((function(t,n){return function(t){var n,e,r=t.input,o=t.output,i=t.shouldHideInput,u=t.print;if("string"==typeof o)n=o;else if("object"===ot(o))try{n=o.html||JSON.stringify(o),o.html&&(e=!0)}catch(t){e=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var c=o.message,a=o.stack;n="".concat(c,"\n\n").concat(a)}var s=e?n:'<pre style="'.concat(u?"margin: 0":"",'">').concat(n||"","</pre>"),l='\n      <div class="input">\n          <span class="prompt">$</span>\n          <span class="cmd">\n            '.concat(r||"","\n          </span>\n      </div>\n    ");return'<div class="session">\n            '.concat(i?"":l,'\n            <div class="output">\n                ').concat(s,"\n            </div>\n        </div>")}(function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?et(e,!0).forEach((function(n){rt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):et(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({},t,{shouldHideInput:u(n,t)}))})).join("")+c,i?e.style.display="none":(it(!1),e.style.display="block"))},ct=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(r.n)(u),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var e=t.firstElementChild,o=document.querySelector("#input"),i=nt(o,n),c=14;return e.style.height="calc(100% - 10px)",e.style.overflow="auto",e.style.fontFamily=p,e.style.background=n.background||"unset",e.style.color=n.color||"#000",e.style.fontSize=b,e.addEventListener("click",(function(t){var n=i.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<c)&&i.target.focus()}),{capture:!1}),{$terminal:e,input:i}};function at(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var st=[],lt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return st=[].concat(at(st),at(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(at(st),at(t)),i=o.map((function(t,n){return Object(r.e)(" ")(n+1,o.length+1)+". "+t.input})).join("\n");return t.push({input:e,output:i}),t;default:return t}};function ft(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function pt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function bt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function dt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?bt(e,!0).forEach((function(n){ht(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):bt(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function ht(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function vt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"wrapper element not found";var e=ct(t,n),o=e.$terminal,u=e.input,c=new h.a,a=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(v.a)(e)?(t.pop(),Object(m.a)(t,e)):Object(y.a)(t)}(i),l=Object(g.a)(c,a).pipe(E((function(t,n){return dt({},n,{},t)}),{}),Object(A.a)((function(t){return dt({},t,{},i)}))),p=u.enter$.pipe(D(l),Object(A.a)((function(t){var n=pt(t,2),e=n[0],r=n[1];return{parsedResult:s(r)(e),cmdSet:r,$terminal:o}})),Object(A.a)(x.in)).subscribe((function(){u.target.blur()})),b=x.out$.pipe(Object(M.a)((function(t){return t})),E((function(t,n){var e=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var e=i[t].handler||i[t];try{return n=""===e()}catch(t){return!1}}(e))return lt(t&&t.slice(),e,n.input);var r=t.slice().pop();return r&&r.loading&&!r.print&&t.pop(),t.push(n),t}),[])).subscribe((function(t){var n=Object(r.k)(t);ut(t),Object(r.x)(o),u.disabled=n&&n.loading,u.value=""}));u.input$.subscribe((function(){Object(r.x)(o)}));var d=function(){var t,n=(t=regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(r.x)(o),t.next=3,Object(r.m)(n,(function(t){return u.value=t}),50);case 3:return t.abrupt("return",new Promise((function(t,e){x.out$.pipe(Object(M.a)((function(t){return t})),Object(M.a)((function(t){return!0!==t.loading}))).subscribe((function(e){e.input===n&&t()})),Object(r.C)(u.target,f.enter)})));case 4:case"end":return t.stop()}}),t)})),function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function u(t){ft(i,r,o,u,c,"next",t)}function c(t){ft(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){u.disabled=t},set commands(t){c.next(t)},set currentInput(t){u.value=t},destroy:function(){b.unsubscribe(),p.unsubscribe(),o.remove(),u.target.remove()},addCommands:function(t){c.next(t)},input:function(t,n){if(n)return Object(r.m)(t,(function(t){u.value=t}));u.value=t},humanizerExec:d,humanizerExecCmdArr:function(t){var n=t.map((function(t){return function(){return d(t)}}));return Object(r.u)(n)},exec:function(t){u.value=t,Object(r.C)(u.target,f.enter)}}}e.d(n,"default",(function(){return vt}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vdGVybWluYWwvbGliL3BzZXVkb1Rlcm1pbmFsL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcHNldWRvVGVybWluYWwvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcHNldWRvSW5wdXQvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3Rlcm1pbmFsL2xpYi9wc2V1ZG9UZXJtaW5hbC9leGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3dpdGhMYXRlc3RGcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcHNldWRvSW5wdXQvaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3Rlcm1pbmFsL2xpYi9wc2V1ZG9JbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vdGVybWluYWwvbGliL3BzZXVkb1Rlcm1pbmFsL3Rlcm1pbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcHNldWRvVGVybWluYWwvaGlzdEludGVyY2VwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby90ZXJtaW5hbC9saWIvcHNldWRvVGVybWluYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9vZi5qcyJdLCJuYW1lcyI6WyJCVUlMVF9JTl9DTURTIiwiY2xlYXIiLCJoaXN0b3J5IiwiZWNobyIsImEiLCJiIiwiYyIsInBhcnNlZFBhcmFtcyIsImZyb21QaXBlIiwicmVzdFBhcmFtcyIsIm1hbiIsImhhbmRsZXIiLCJwYXJhbXMiLCJjbWRTZXQiLCIkdGVybWluYWwiLCJUcmltIiwiZG9jIiwidHJpbSIsImNtZCIsImhlbHAiLCJwcmVmaXgiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsIm1hcCIsInN0ciIsImpvaW4iLCJERUZBVUxUX1NUWUxFIiwiU3ltYm9sIiwiYXJncyIsIm9wdHMiLCJmbGFncyIsImJvb2xzIiwic3RyaW5ncyIsInVua25vd25GbiIsImFsbEJvb2xzIiwiY29uY2F0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImZvckVhY2giLCJrZXkiLCJhbGlhc2VzIiwiYWxpYXMiLCJ4IiwieSIsInN0cmluZyIsImRlZmF1bHRzIiwiYXJndiIsIl8iLCJzZXRBcmciLCJ1bmRlZmluZWQiLCJub3RGbGFncyIsInZhbCIsImFyZyIsInRlc3QiLCJhcmdEZWZpbmVkIiwidmFsdWUiLCJpc051bWJlciIsIk51bWJlciIsInNldEtleSIsInNwbGl0Iiwib2JqIiwibyIsInNsaWNlIiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsImFsaWFzSXNCb29sZWFuIiwic29tZSIsImluZGV4T2YiLCJpIiwibSIsIm1hdGNoIiwibmV4dCIsImxldHRlcnMiLCJicm9rZW4iLCJqIiwic3RvcEVhcmx5IiwiYXBwbHkiLCJwYXJzZSIsInBhcnNlSW5wdXQiLCJ1c2VySW5wdXQiLCJlcnJvckluZm8iLCJpbnB1dEFyciIsImNtZE5hbWUiLCJ2YWxpZENvbW1hbmRzIiwicmVwbGFjZSIsImluY2x1ZGVzIiwidGFyZ2V0Q29tbWFuZCIsInBhcnNlZE9wdHMiLCJnZXRPcHRzIiwiZSIsImNvbW1hbmQiLCJwYXJhbXNPYmoiLCJ1c2VySW5wdXRBcnIiLCJpc011bHRpUmVzdWx0IiwicGFyc2VkUmVzdWx0cyIsImlucHV0IiwiTU9WRV9LRVkiLCJLRVlTIiwiZW50ZXIiLCJCQVNFX0NTUyIsImN1cnNvckNvbG9yIiwiYmxpbmtTcGVlZCIsImV4ZWNSZXN1bHQkIiwiU3ViamVjdCIsImVycm9yIiwib3V0cHV0IiwiaGFuZGxlTXVsdGlSZXN1bHQiLCJwYXJzZWRSZXN1bHQiLCJsb2FkaW5nIiwicHJvbWlzZU9uZUJ5T25lIiwicHJldlJlc3VsdCIsInRoZW4iLCJyZXN1bHQiLCJleGUiLCJpbiIsImV4ZWNSZXN1bHQiLCJ3aXRoVGltZXN0YW1wIiwicHJpbnQiLCJub3ciLCJQcm9taXNlIiwicmVzb2x2ZSIsIm91dCQiLCJzY2FuIiwiYWNjdW11bGF0b3IiLCJzZWVkIiwiaGFzU2VlZCIsImFyZ3VtZW50cyIsInNvdXJjZSIsImxpZnQiLCJTY2FuT3BlcmF0b3IiLCJ0aGlzIiwicHJvdG90eXBlIiwiY2FsbCIsInN1YnNjcmliZXIiLCJzdWJzY3JpYmUiLCJfc3VwZXIiLCJTY2FuU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3NlZWQiLCJfdGhpcyIsImluZGV4IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJzZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX25leHQiLCJfdHJ5TmV4dCIsImVyciIsIlN1YnNjcmliZXIiLCJ3aXRoTGF0ZXN0RnJvbSIsIl9pIiwicHJvamVjdCIsInBvcCIsIm9ic2VydmFibGVzIiwiV2l0aExhdGVzdEZyb21PcGVyYXRvciIsIldpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciIsInRvUmVzcG9uZCIsImxlbiIsInZhbHVlcyIsIm9ic2VydmFibGUiLCJhZGQiLCJzdWJzY3JpYmVUb1Jlc3VsdCIsIm5vdGlmeU5leHQiLCJvdXRlclZhbHVlIiwiaW5uZXJWYWx1ZSIsIm91dGVySW5kZXgiLCJpbm5lckluZGV4IiwiaW5uZXJTdWIiLCJmb3VuZCIsInNwbGljZSIsIm5vdGlmeUNvbXBsZXRlIiwiX3RyeVByb2plY3QiLCJPdXRlclN1YnNjcmliZXIiLCJCZWhhdmlvclN1YmplY3QiLCJfdmFsdWUiLCJnZXRWYWx1ZSIsIl9zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJjbG9zZWQiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJOT05FIiwiY29tYmluZUxhdGVzdCIsInJlc3VsdFNlbGVjdG9yIiwic2NoZWR1bGVyIiwiaXNTY2hlZHVsZXIiLCJmcm9tQXJyYXkiLCJDb21iaW5lTGF0ZXN0T3BlcmF0b3IiLCJDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciIsImFjdGl2ZSIsIl9jb21wbGV0ZSIsImNvbXBsZXRlIiwidW51c2VkIiwib2xkVmFsIiwiX3RyeVJlc3VsdFNlbGVjdG9yIiwicGx1Y2siLCJwcm9wZXJ0aWVzIiwiRXJyb3IiLCJwcm9wcyIsImN1cnJlbnRQcm9wIiwicCIsInBsdWNrZXIiLCJjcmVhdGVJbnB1dCIsIiRSZWFsSW5wdXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImhlaWdodCIsInBvc2l0aW9uIiwiekluZGV4Iiwib3V0bGluZSIsImJvcmRlciIsInRvcCIsImxlZnQiLCJvcGFjaXR5Iiwic2NyZWVuIiwid2lkdGgiLCJ0cmFuc2Zvcm0iLCJjb2xvciIsInNldEF0dHJpYnV0ZSIsIm9uYmx1ciIsInNldFRpbWVvdXQiLCJmb2N1cyIsInVwZGF0ZVBvcyIsIiR3cmFwcGVyIiwiJGlucHV0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVuZGVyUHNldWRvSW5wdXQiLCJpbnB1dFN0YXRlIiwiaGFzU2VsZWN0aW9uIiwic3RhcnQiLCJlbmQiLCJpc0VtcHR5IiwiaW5wdXRTdHIiLCJ0b1JlbmRlciIsImNoIiwiaW5uZXJIVE1MIiwiaWR4IiwiY2hhciIsImNsYXNzTmFtZSIsImNoYXJUcGwiLCJjaGFySWR4IiwiaW5pdCIsInRoZW1lIiwiaW5qZWN0Q1NTIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwid29yZEJyZWFrIiwiJGlucHV0V3JhcHBlciIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImlucHV0JCIsImZyb21FdmVudCIsInNlbGVjdCQiLCJrZXl1cCQiLCJpbnB1dFN0ciQiLCJwaXBlIiwibW92ZUN1cnNvciQiLCJldnQiLCJlbnRlciQiLCJ0YXJnZXQiLCJkaXNhYmxlZCIsImN1cnNvclBvc0NoYW5nZSQiLCJtZXJnZSIsImN1cnNvclBvcyQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImlucHV0U3RhdGUkIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJwcmV2U3RhdGUiLCJuZXh0U3RhdGUiLCJKU09OIiwic3RyaW5naWZ5IiwicmVuZGVyIiwidHJpZ2dlciIsIiRjdXJzb3IiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwic3Bpbm5lciIsIm1ha2VUZXh0U3Bpbm5lciIsInJlbmRlclRlcm1pbmFsIiwic2Vzc2lvbkRhdGEiLCIkaGlzdFNlc3Npb24iLCIkY3VycmVudFNlc3MiLCJsYXN0U2Vzc0RhdGEiLCJnZXRMYXN0RWxlIiwiaXNMb2FkaW5nIiwic2hvdWxkSGlkZUlucHV0IiwiY3VycmVudERhdGEiLCJwcmV2U2Vzc0RhdGEiLCJ0bXBDdXJzb3IiLCJkYXRhIiwiaXNSaWNoVGV4dCIsImh0bWwiLCJtZXNzYWdlIiwic3RhY2siLCJyZXN1bHRTdHIiLCJzZXNzaW9uVHBsIiwiZGlzcGxheSIsImZpcnN0RWxlbWVudENoaWxkIiwiJGlucHV0Rm9yVGVybWluYWwiLCJJbnB1dCIsImlucHV0SGVpZ2h0Iiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiaW5wdXRZIiwiY2xpZW50WSIsIk1hdGgiLCJhYnMiLCJjYXB0dXJlIiwiSElTVCIsImhpc3QiLCJhbGxIaXN0IiwiaGlzdFN0ciIsImNvbXBsZXRpb25XaXRoIiwicHNldWRvVGVybWluYWwiLCIkdGVybWluYWxXcmFwcGVyIiwidXNlckNtZHMkIiwic3lzQ21kcyQiLCJzY2hlZHVsZUFycmF5Iiwib2YiLCJjbWRTZXQkIiwibmV3Q21kIiwib2xkQ21kIiwiZW50U3ViIiwicGFyc2VXaXRoIiwiYmx1ciIsInNlc3NTdWIiLCJpc1NwZWNpYWwiLCJpc1NwZWNpYWxDbWQiLCJoaXN0SW50ZXJjZXB0b3IiLCJsYXN0UmVzdWx0IiwibGFzdERhdGEiLCJzY3JvbGxUb0JvdHRvbSIsImh1bWFuaXplckV4ZWMiLCJjbWRTdHIiLCJodW1hbml6ZXJJbnB1dCIsInYiLCJyZWplY3QiLCJkZXN0cm95IiwidW5zdWJzY3JpYmUiLCJhZGRDb21tYW5kcyIsImVuYWJsZUh1bWFuaXplcklucHV0RWZmZWN0IiwiY3VycmVudCIsImh1bWFuaXplckV4ZWNDbWRBcnIiLCJjbWRBcnIiLCJleGVjRnVuQXJyIiwiZXhlYyJdLCJtYXBwaW5ncyI6InVWQUVBLElBQU1BLEVBQWdCLENBQ2xCQyxNQUFPLGlCQUFNLElBQ2JDLFFBQVMsaUJBQU0sSUFDZkMsS0FBTSxTQUFVQyxFQUFHQyxFQUFHQyxFQUFHQyxHQUNyQixPQUFPQSxFQUFhQyxVQUFZRCxFQUFhRSxZQUVqREMsSUFBSyxDQUNEQyxRQUFTLFNBQVVDLEVBQVFDLEVBQVFDLEVBQTFCLEdBQW1ELElBQWJMLEVBQWEsRUFBYkEsV0FDM0MsSUFBS0ksRUFDRCxPQUFPLEVBR1gsSUFBS0osRUFDRCxPQUFPTSxZQUFLRixF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T0FBUXJLLEVBQUtDLFMiLCJmaWxlIjoiNy5mZjU4ZmIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RyaW19IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5jb25zdCBCVUlMVF9JTl9DTURTID0ge1xuICAgIGNsZWFyOiAoKSA9PiBcIlwiLFxuICAgIGhpc3Rvcnk6ICgpID0+IFwiXCIsXG4gICAgZWNobzogZnVuY3Rpb24gKGEsIGIsIGMsIHBhcnNlZFBhcmFtcykge1xuICAgICAgICByZXR1cm4gcGFyc2VkUGFyYW1zLmZyb21QaXBlIHx8IHBhcnNlZFBhcmFtcy5yZXN0UGFyYW1zO1xuICAgIH0sXG4gICAgbWFuOiB7XG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIChwYXJhbXMsIGNtZFNldCwgJHRlcm1pbmFsLCB7cmVzdFBhcmFtc30pIHtcbiAgICAgICAgICAgIGlmICghY21kU2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXJlc3RQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJpbShjbWRTZXQubWFuLmRvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXN0UGFyYW1zICYmIGNtZFNldFtyZXN0UGFyYW1zLnRyaW0oKV0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY21kID0gY21kU2V0W3Jlc3RQYXJhbXMudHJpbSgpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNtZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRyaW0oY21kLmRvYykgfHwgJ+ayoeacieW4ruWKqeS/oeaBryc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfmsqHmnInluK7liqnkv6Hmga8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZG9jOiBgXG4gICAgICAgICAgICBOQU1FXG4gICAgICAgICAgICAgICAgbWFuIC0tIGRpc3BsYXkgY29tbWFuZCdzIG1hbnVhbCBpbmZvLlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgU1lOT1BTSVNcbiAgICAgICAgICAgICAgICBtYW4gWyBjb21tYW5kIG5hbWUgXWBcbiAgICB9LFxuICAgIGhlbHA6IGZ1bmN0aW9uIChwYXJhbXMsIGNtZFNldCkge1xuICAgICAgICBpZighY21kU2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluc2VydCA9IChwcmVmaXgpID0+IChzdHIpID0+IHByZWZpeCArIHN0cjtcbiAgICAgICAgcmV0dXJuIFwiQXZhaWxhYmxlIGNvbW1hbmRzOiBcXG5cIiArIE9iamVjdC5rZXlzKGNtZFNldCkuc29ydCgpLm1hcChpbnNlcnQoJy0gJykpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxufTtcblxuY29uc3QgREVGQVVMVF9TVFlMRSA9IGBcbiAgICAuc2Vzc2lvbiA+IC5pbnB1dCB7bGluZS1oZWlnaHQ6IDEuMn1cbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgd2lkdGg6IDJwdFxuICAgIH1cbiAgICBcbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyOmhvcml6b250YWwge1xuICAgICAgICBoZWlnaHQ6IDBcbiAgICB9XG5cbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLWJ1dHRvbiB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmVcbiAgICB9XG5cbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2QwZDBkMFxuICAgIH1cbmA7XG5cbmNvbnN0IFNUQVRVUyA9IHtcbiAgICBMT0FESU5HOiBTeW1ib2woKSxcbiAgICBFUlJPUjogU3ltYm9sKCksXG59O1xuXG5jb25zdCBQSVBFID0gJ3wnO1xuXG5leHBvcnQge0JVSUxUX0lOX0NNRFMsIFNUQVRVUywgREVGQVVMVF9TVFlMRSwgUElQRX1cbiIsIi8vIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdWJzdGFjay9taW5pbWlzdC9tYXN0ZXIvaW5kZXguanNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChhcmdzLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuXG4gIGxldCBmbGFncyA9IHsgYm9vbHMgOiB7fSwgc3RyaW5ncyA6IHt9LCB1bmtub3duRm46IG51bGwgfTtcblxuICBpZiAodHlwZW9mIG9wdHNbJ3Vua25vd24nXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZsYWdzLnVua25vd25GbiA9IG9wdHNbJ3Vua25vd24nXTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0c1snYm9vbGVhbiddID09PSAnYm9vbGVhbicgJiYgb3B0c1snYm9vbGVhbiddKSB7XG4gICAgZmxhZ3MuYWxsQm9vbHMgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIFtdLmNvbmNhdChvcHRzWydib29sZWFuJ10pLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGZsYWdzLmJvb2xzW2tleV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgbGV0IGFsaWFzZXMgPSB7fTtcbiAgT2JqZWN0LmtleXMob3B0cy5hbGlhcyB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgYWxpYXNlc1trZXldID0gW10uY29uY2F0KG9wdHMuYWxpYXNba2V5XSk7XG4gICAgYWxpYXNlc1trZXldLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgIGFsaWFzZXNbeF0gPSBba2V5XS5jb25jYXQoYWxpYXNlc1trZXldLmZpbHRlcihmdW5jdGlvbiAoeSkge1xuICAgICAgICByZXR1cm4geCAhPT0geTtcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgW10uY29uY2F0KG9wdHMuc3RyaW5nKS5maWx0ZXIoQm9vbGVhbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZmxhZ3Muc3RyaW5nc1trZXldID0gdHJ1ZTtcbiAgICBpZiAoYWxpYXNlc1trZXldKSB7XG4gICAgICBmbGFncy5zdHJpbmdzW2FsaWFzZXNba2V5XV0gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGRlZmF1bHRzID0gb3B0c1snZGVmYXVsdCddIHx8IHt9O1xuXG4gIGxldCBhcmd2ID0geyBfIDogW10gfTtcbiAgT2JqZWN0LmtleXMoZmxhZ3MuYm9vbHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHNldEFyZyhrZXksIGRlZmF1bHRzW2tleV0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogZGVmYXVsdHNba2V5XSk7XG4gIH0pO1xuXG4gIGxldCBub3RGbGFncyA9IFtdO1xuXG4gIGlmIChhcmdzLmluZGV4T2YoJy0tJykgIT09IC0xKSB7XG4gICAgbm90RmxhZ3MgPSBhcmdzLnNsaWNlKGFyZ3MuaW5kZXhPZignLS0nKSsxKTtcbiAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmluZGV4T2YoJy0tJykpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJnRGVmaW5lZChrZXksIGFyZykge1xuICAgIHJldHVybiAoZmxhZ3MuYWxsQm9vbHMgJiYgL14tLVtePV0rJC8udGVzdChhcmcpKSB8fFxuICAgICAgZmxhZ3Muc3RyaW5nc1trZXldIHx8IGZsYWdzLmJvb2xzW2tleV0gfHwgYWxpYXNlc1trZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXJnIChrZXksIHZhbCwgYXJnKSB7XG4gICAgaWYgKGFyZyAmJiBmbGFncy51bmtub3duRm4gJiYgIWFyZ0RlZmluZWQoa2V5LCBhcmcpKSB7XG4gICAgICBpZiAoZmxhZ3MudW5rbm93bkZuKGFyZykgPT09IGZhbHNlKSByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHZhbHVlID0gIWZsYWdzLnN0cmluZ3Nba2V5XSAmJiBpc051bWJlcih2YWwpXG4gICAgICA/IE51bWJlcih2YWwpIDogdmFsXG4gICAgO1xuICAgIHNldEtleShhcmd2LCBrZXkuc3BsaXQoJy4nKSwgdmFsdWUpO1xuXG4gICAgKGFsaWFzZXNba2V5XSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgc2V0S2V5KGFyZ3YsIHguc3BsaXQoJy4nKSwgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0S2V5IChvYmosIGtleXMsIHZhbHVlKSB7XG4gICAgbGV0IG8gPSBvYmo7XG4gICAga2V5cy5zbGljZSgwLC0xKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChvW2tleV0gPT09IHVuZGVmaW5lZCkgb1trZXldID0ge307XG4gICAgICBvID0gb1trZXldO1xuICAgIH0pO1xuXG4gICAgbGV0IGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXTtcbiAgICBpZiAob1trZXldID09PSB1bmRlZmluZWQgfHwgZmxhZ3MuYm9vbHNba2V5XSB8fCB0eXBlb2Ygb1trZXldID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG9ba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ba2V5XSkpIHtcbiAgICAgIG9ba2V5XS5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvW2tleV0gPSBbIG9ba2V5XSwgdmFsdWUgXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbGlhc0lzQm9vbGVhbihrZXkpIHtcbiAgICByZXR1cm4gYWxpYXNlc1trZXldLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBmbGFncy5ib29sc1t4XTtcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhcmcgPSBhcmdzW2ldO1xuXG4gICAgaWYgKC9eLS0uKz0vLnRlc3QoYXJnKSkge1xuICAgICAgLy8gVXNpbmcgW1xcc1xcU10gaW5zdGVhZCBvZiAuIGJlY2F1c2UganMgZG9lc24ndCBzdXBwb3J0IHRoZVxuICAgICAgLy8gJ2RvdGFsbCcgcmVnZXggbW9kaWZpZXIuIFNlZTpcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNjgzMDgvMTMyMTZcbiAgICAgIGxldCBtID0gYXJnLm1hdGNoKC9eLS0oW149XSspPShbXFxzXFxTXSopJC8pO1xuICAgICAgbGV0IGtleSA9IG1bMV07XG4gICAgICBsZXQgdmFsdWUgPSBtWzJdO1xuICAgICAgaWYgKGZsYWdzLmJvb2xzW2tleV0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPT0gJ2ZhbHNlJztcbiAgICAgIH1cbiAgICAgIHNldEFyZyhrZXksIHZhbHVlLCBhcmcpO1xuICAgIH1cbiAgICBlbHNlIGlmICgvXi0tbm8tLisvLnRlc3QoYXJnKSkge1xuICAgICAgbGV0IGtleSA9IGFyZy5tYXRjaCgvXi0tbm8tKC4rKS8pWzFdO1xuICAgICAgc2V0QXJnKGtleSwgZmFsc2UsIGFyZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKC9eLS0uKy8udGVzdChhcmcpKSB7XG4gICAgICBsZXQga2V5ID0gYXJnLm1hdGNoKC9eLS0oLispLylbMV07XG4gICAgICBsZXQgbmV4dCA9IGFyZ3NbaSArIDFdO1xuICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiAhL14tLy50ZXN0KG5leHQpXG4gICAgICAgICYmICFmbGFncy5ib29sc1trZXldXG4gICAgICAgICYmICFmbGFncy5hbGxCb29sc1xuICAgICAgICAmJiAoYWxpYXNlc1trZXldID8gIWFsaWFzSXNCb29sZWFuKGtleSkgOiB0cnVlKSkge1xuICAgICAgICBzZXRBcmcoa2V5LCBuZXh0LCBhcmcpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgvXih0cnVlfGZhbHNlKSQvLnRlc3QobmV4dCkpIHtcbiAgICAgICAgc2V0QXJnKGtleSwgbmV4dCA9PT0gJ3RydWUnLCBhcmcpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2V0QXJnKGtleSwgZmxhZ3Muc3RyaW5nc1trZXldID8gJycgOiB0cnVlLCBhcmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvXi1bXi1dKy8udGVzdChhcmcpKSB7XG4gICAgICBsZXQgbGV0dGVycyA9IGFyZy5zbGljZSgxLC0xKS5zcGxpdCgnJyk7XG5cbiAgICAgIGxldCBicm9rZW4gPSBmYWxzZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGV0dGVycy5sZW5ndGg7IGorKykge1xuICAgICAgICBsZXQgbmV4dCA9IGFyZy5zbGljZShqKzIpO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSAnLScpIHtcbiAgICAgICAgICBzZXRBcmcobGV0dGVyc1tqXSwgbmV4dCwgYXJnKVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKC9bQS1aYS16XS8udGVzdChsZXR0ZXJzW2pdKSAmJiAvPS8udGVzdChuZXh0KSkge1xuICAgICAgICAgIHNldEFyZyhsZXR0ZXJzW2pdLCBuZXh0LnNwbGl0KCc9JylbMV0sIGFyZyk7XG4gICAgICAgICAgYnJva2VuID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvW0EtWmEtel0vLnRlc3QobGV0dGVyc1tqXSlcbiAgICAgICAgICAmJiAvLT9cXGQrKFxcLlxcZCopPyhlLT9cXGQrKT8kLy50ZXN0KG5leHQpKSB7XG4gICAgICAgICAgc2V0QXJnKGxldHRlcnNbal0sIG5leHQsIGFyZyk7XG4gICAgICAgICAgYnJva2VuID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXR0ZXJzW2orMV0gJiYgbGV0dGVyc1tqKzFdLm1hdGNoKC9cXFcvKSkge1xuICAgICAgICAgIHNldEFyZyhsZXR0ZXJzW2pdLCBhcmcuc2xpY2UoaisyKSwgYXJnKTtcbiAgICAgICAgICBicm9rZW4gPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNldEFyZyhsZXR0ZXJzW2pdLCBmbGFncy5zdHJpbmdzW2xldHRlcnNbal1dID8gJycgOiB0cnVlLCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBrZXkgPSBhcmcuc2xpY2UoLTEpWzBdO1xuICAgICAgaWYgKCFicm9rZW4gJiYga2V5ICE9PSAnLScpIHtcbiAgICAgICAgaWYgKGFyZ3NbaSsxXSAmJiAhL14oLXwtLSlbXi1dLy50ZXN0KGFyZ3NbaSsxXSlcbiAgICAgICAgICAmJiAhZmxhZ3MuYm9vbHNba2V5XVxuICAgICAgICAgICYmIChhbGlhc2VzW2tleV0gPyAhYWxpYXNJc0Jvb2xlYW4oa2V5KSA6IHRydWUpKSB7XG4gICAgICAgICAgc2V0QXJnKGtleSwgYXJnc1tpKzFdLCBhcmcpO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmdzW2krMV0gJiYgL3RydWV8ZmFsc2UvLnRlc3QoYXJnc1tpKzFdKSkge1xuICAgICAgICAgIHNldEFyZyhrZXksIGFyZ3NbaSsxXSA9PT0gJ3RydWUnLCBhcmcpO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzZXRBcmcoa2V5LCBmbGFncy5zdHJpbmdzW2tleV0gPyAnJyA6IHRydWUsIGFyZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoIWZsYWdzLnVua25vd25GbiB8fCBmbGFncy51bmtub3duRm4oYXJnKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgYXJndi5fLnB1c2goXG4gICAgICAgICAgZmxhZ3Muc3RyaW5nc1snXyddIHx8ICFpc051bWJlcihhcmcpID8gYXJnIDogTnVtYmVyKGFyZylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLnN0b3BFYXJseSkge1xuICAgICAgICBhcmd2Ll8ucHVzaC5hcHBseShhcmd2Ll8sIGFyZ3Muc2xpY2UoaSArIDEpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzS2V5KGFyZ3YsIGtleS5zcGxpdCgnLicpKSkge1xuICAgICAgc2V0S2V5KGFyZ3YsIGtleS5zcGxpdCgnLicpLCBkZWZhdWx0c1trZXldKTtcblxuICAgICAgKGFsaWFzZXNba2V5XSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICBzZXRLZXkoYXJndiwgeC5zcGxpdCgnLicpLCBkZWZhdWx0c1trZXldKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKG9wdHNbJy0tJ10pIHtcbiAgICBhcmd2WyctLSddID0gbmV3IEFycmF5KCk7XG4gICAgbm90RmxhZ3MuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIGFyZ3ZbJy0tJ10ucHVzaChrZXkpO1xuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIG5vdEZsYWdzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBhcmd2Ll8ucHVzaChrZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3Y7XG59O1xuXG5mdW5jdGlvbiBoYXNLZXkgKG9iaiwga2V5cykge1xuICBsZXQgbyA9IG9iajtcbiAga2V5cy5zbGljZSgwLC0xKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBvID0gKG9ba2V5XSB8fCB7fSk7XG4gIH0pO1xuXG4gIGxldCBrZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiBrZXkgaW4gbztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIgKHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykgcmV0dXJuIHRydWU7XG4gIGlmICgvXjB4WzAtOWEtZl0rJC9pLnRlc3QoeCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gL15bLStdPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoZVstK10/XFxkKyk/JC8udGVzdCh4KTtcbn1cbiIsImltcG9ydCB7UElQRX0gZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBnZXRPcHRzIGZyb20gJy4uL3BhcnNlcidcblxuLy8g56e75qSN5LqOIGh0dHBzOi8vZ2l0aHViLmNvbS9weXRob24vY3B5dGhvbi9ibG9iLzIuNy9MaWIvZ2V0b3B0LnB5XG5mdW5jdGlvbiBnZXRPcHQoc2hvcnRvcHRzLCBhcmdzQXJyKSB7XG4gICAgbGV0IG9wdHMgPSB7fTtcbiAgICB3aGlsZSAoYXJnc0Fyci5sZW5ndGggPiAwICYmIGFyZ3NBcnJbMF0uc3RhcnRzV2l0aCgnLScpICYmIGFyZ3NBcnJbMF0gIT09ICctJykge1xuICAgICAgICBpZiAoYXJnc0FyclswXSA9PT0gJy0tJykge1xuICAgICAgICAgICAgYXJnc0FyciA9IGFyZ3NBcnIuc2xpY2UoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnc0FyclswXS5zdGFydHNXaXRoKCctLScpKSB7XG4gICAgICAgICAgICB0aHJvdyBgY2FuJ3QgcmVjb2duaXplIGxvbmcgb3B0aW9uYFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgW29wdHMsIGFyZ3NBcnJdID0gZG9TaG9ydHMob3B0cywgYXJnc0FyclswXS5zbGljZSgxKSwgc2hvcnRvcHRzLCBhcmdzQXJyLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvU2hvcnRzKG9wdHMsIG9wdHN0cmluZywgc2hvcnRvcHRzLCBhcmdzKSB7XG4gICAgICAgIHdoaWxlIChvcHRzdHJpbmcgIT09ICcnKSB7XG4gICAgICAgICAgICBsZXQgb3B0ID0gb3B0c3RyaW5nWzBdO1xuICAgICAgICAgICAgb3B0c3RyaW5nID0gb3B0c3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgICAgICBpZiAoaGFzQXJnKG9wdCwgc2hvcnRvcHRzKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzdHJpbmcgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgYG9wdGlvbiAnLSR7b3B0fScgcmVxdWlyZXMgYXJndW1lbnRgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0c3RyaW5nID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gPyDlj6/og73kvJrmiorlkI7nu63nmoQgb3B0IOWQg+aOiVxuICAgICAgICAgICAgICAgIG9wdHNbb3B0XSA9IG9wdHN0cmluZztcbiAgICAgICAgICAgICAgICBvcHRzdHJpbmcgPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0c1tvcHRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW29wdHMsIGFyZ3NdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FyZyhvcHQsIHNob3J0b3B0cykge1xuICAgICAgICBsZXQgc2hvcnRvcHRzQXJyID0gc2hvcnRvcHRzLnNwbGl0KFwiXCIpLFxuICAgICAgICAgICAgb3B0SWR4ID0gc2hvcnRvcHRzQXJyLmluZGV4T2Yob3B0KTtcbiAgICAgICAgaWYgKG9wdElkeCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IGBvcHRpb24gJy0ke29wdH0nIG5vdCByZWNvZ25pemVkYFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRJZHggPj0gMCAmJiBzaG9ydG9wdHNBcnJbb3B0SWR4ICsgMV0gPT09ICc6JztcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0cztcbn1cblxuY29uc3QgcGFyc2UgPSAoY21kU2V0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VJbnB1dCA9ICh1c2VySW5wdXQpID0+IHtcbiAgICAgICAgaWYgKCF1c2VySW5wdXQudHJpbSgpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVzZXJJbnB1dCxcbiAgICAgICAgICAgICAgICBlcnJvckluZm86ICfnqbrlkb3ku6QnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbnB1dEFyciA9IHVzZXJJbnB1dC50cmltKCkuc3BsaXQoL1xccysvKVxuICAgICAgICAgICAgLCBjbWROYW1lID0gaW5wdXRBcnJbMF07XG5cbiAgICAgICAgaWYgKCFjbWROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVzZXJJbnB1dCxcbiAgICAgICAgICAgICAgICBlcnJvckluZm86ICfnqbrlkb3ku6QnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWxpZENvbW1hbmRzID0gT2JqZWN0LmtleXMoY21kU2V0KVxuICAgICAgICAgICAgLCByZXN0UGFyYW1zID0gdXNlcklucHV0LnJlcGxhY2UoY21kTmFtZSwgJycpLnRyaW0oKVxuICAgICAgICAgICAgLCBpc1ZhbGlkQ29tbWFuZCA9IHZhbGlkQ29tbWFuZHMuaW5jbHVkZXMoY21kTmFtZSk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkQ29tbWFuZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXN0UGFyYW1zLFxuICAgICAgICAgICAgICAgIHVzZXJJbnB1dCxcbiAgICAgICAgICAgICAgICBlcnJvckluZm86IGAke2NtZE5hbWV9IOS4jeaYr+WQiOazleWRveS7pGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhcmdldENvbW1hbmQgPSBjbWRTZXRbY21kTmFtZV1cbiAgICAgICAgICAgICwgcGFyYW1zID0gaW5wdXRBcnIuc2xpY2UoMSk7XG5cbiAgICAgICAgbGV0IHBhcnNlZE9wdHMgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhcnNlZE9wdHMgPSBnZXRPcHRzKHBhcmFtcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzdFBhcmFtcyxcbiAgICAgICAgICAgICAgICB1c2VySW5wdXQsXG4gICAgICAgICAgICAgICAgZXJyb3JJbmZvOiBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdFBhcmFtcyxcbiAgICAgICAgICAgIHVzZXJJbnB1dCxcbiAgICAgICAgICAgIGVycm9ySW5mbzogbnVsbCxcbiAgICAgICAgICAgIGNvbW1hbmQ6IHRhcmdldENvbW1hbmQsXG4gICAgICAgICAgICBwYXJhbXNPYmo6IHBhcnNlZE9wdHMvLyAhIXNob3J0b3B0cyA/IHBhcnNlZE9wdHMgOiB7fVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKHVzZXJJbnB1dCkgPT4ge1xuICAgICAgICBsZXQgaGFzUGlwZSA9IHVzZXJJbnB1dC5pbmNsdWRlcyhQSVBFKTtcbiAgICAgICAgaWYoaGFzUGlwZSkge1xuICAgICAgICAgICAgbGV0IHVzZXJJbnB1dEFyciA9IHVzZXJJbnB1dC5zcGxpdChQSVBFKTtcblxuICAgICAgICAgICAgaWYodXNlcklucHV0QXJyLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnB1dCh1c2VySW5wdXRBcnJbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcGFyc2VkUmVzdWx0cyA9IHVzZXJJbnB1dEFyci5tYXAoaW5wdXQgPT5cbiAgICAgICAgICAgICAgICBwYXJzZUlucHV0KGlucHV0LnRyaW0oKSkpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzTXVsdGlSZXN1bHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlcklucHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZFJlc3VsdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnB1dCh1c2VySW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7XG4iLCJjb25zdCBNT1ZFX0tFWSA9IFtcIkFycm93TGVmdFwiLCBcIkFycm93UmlnaHRcIiwgXCJBcnJvd1VwXCIsIFwiQXJyb3dEb3duXCJdO1xuY29uc3QgSU5QVVRfQ09ORiA9IHtcbiAgICBtYXhsZW46IDUwLFxuICAgIHRoZW1lOiB7XG4gICAgICAgIGNvbG9yOiAnIzAwMCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICB9XG59O1xuY29uc3QgS0VZUyA9IHtcbiAgICBhOiAnYScsXG4gICAgZW50ZXI6ICdFbnRlcidcbn07XG4vLyB0b2RvOiDpg6jliIbluLjph48gdGVybWluYWwg5Lmf5Lya55So5Yiw77yM5Y+v5Lul5o+Q5Y+W5oiQ5YWs55So55qEXG5jb25zdCBCQVNFX0NTUyA9IHtcbiAgICBmb250RmFtaWx5OiAnXCJTRk1vbm8tUmVndWxhclwiLCBDb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgTWVubG8sIENvdXJpZXIsIG1vbm9zcGFjZScsXG4gICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICBjdXJzb3I6ICh7Y3Vyc29yQ29sb3I9JyMwMDAnLCBibGlua1NwZWVkPScxcyd9KSA9PiBgXG4gICAgICAgIEBrZXlmcmFtZXMgYmxpbmsge1xuICAgICAgICAgIGZyb20ge1xuICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3Vyc29yQ29sb3J9O1xuICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRvIHtcbiAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgIGNvbG9yOiAjMDAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLmhpZ2hsaWdodCB7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5ibGluazpub3QoLmRpc2FibGVkKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAke2JsaW5rU3BlZWR9O1xuICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBibGluaztcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZVxuICAgICAgICB9XG4gICAgYFxufTtcblxuZXhwb3J0IHtcbiAgICBNT1ZFX0tFWSwgS0VZUywgQkFTRV9DU1Ncbn0iLCJpbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnXG5pbXBvcnQge3Byb21pc2VPbmVCeU9uZSwgbm93fSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxubGV0IGV4ZWNSZXN1bHQkID0gbmV3IFN1YmplY3QoKTtcblxuY29uc3QgZXJyb3IgPSAoaW5wdXQpID0+IChlKSA9PiB7XG4gICAgZXhlY1Jlc3VsdCQubmV4dCh7XG4gICAgICAgIGlucHV0LFxuICAgICAgICBvdXRwdXQ6IGVcbiAgICB9KVxufTtcblxuY29uc3QgcHJpbnQgPSAoaW5wdXQpID0+IChvdXRwdXQsIHdpdGhUaW1lc3RhbXApID0+IHtcbiAgICBleGVjUmVzdWx0JC5uZXh0KHtcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgcHJpbnQ6IHRydWUsXG4gICAgICAgIGlucHV0LFxuICAgICAgICBvdXRwdXQ6IHdpdGhUaW1lc3RhbXAgPyBub3coKSArICcgJyArIG91dHB1dCA6IG91dHB1dCxcbiAgICB9KVxufTtcblxuXG5cbmNvbnN0IGhhbmRsZU11bHRpUmVzdWx0ID0gKHtwYXJzZWRSZXN1bHQsIGNtZFNldCwgJHRlcm1pbmFsfSkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gcGFyc2VkUmVzdWx0LnVzZXJJbnB1dDtcbiAgICBjb25zdCBnZW5FeGVjRnVuYyA9IChwYXJzZWRSZXN1bHQpID0+IGFzeW5jIChwcmV2UmVzdWx0KSA9PiB7XG4gICAgICAgIGlmKHBhcnNlZFJlc3VsdC5lcnJvckluZm8pIHtcbiAgICAgICAgICAgIHRocm93IHBhcnNlZFJlc3VsdC5lcnJvckluZm87XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhhbmRsZXIgPSBwYXJzZWRSZXN1bHQuY29tbWFuZC5oYW5kbGVyIHx8IHBhcnNlZFJlc3VsdC5jb21tYW5kO1xuICAgICAgICBwYXJzZWRSZXN1bHQuZnJvbVBpcGUgPSBwcmV2UmVzdWx0O1xuICAgICAgICByZXR1cm4gaGFuZGxlcihwYXJzZWRSZXN1bHQucGFyYW1zT2JqLCBjbWRTZXQsICR0ZXJtaW5hbCwgcGFyc2VkUmVzdWx0KVxuICAgIH07XG5cbiAgICBleGVjUmVzdWx0JC5uZXh0KHtcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgIG91dHB1dDogXCJcIlxuICAgIH0pO1xuICAgIHByb21pc2VPbmVCeU9uZShwYXJzZWRSZXN1bHQucGFyc2VkUmVzdWx0cy5tYXAoZ2VuRXhlY0Z1bmMpKVxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgZXhlY1Jlc3VsdCQubmV4dCh7XG4gICAgICAgICAgICAgICAgb3V0cHV0OiByZXN1bHQsXG4gICAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvcihpbnB1dCkpXG59O1xuXG5jb25zdCBoYW5kbGVSZXN1bHQgPSAoe3BhcnNlZFJlc3VsdCwgY21kU2V0LCAkdGVybWluYWx9KSA9PiB7XG4gICAgaWYgKCFwYXJzZWRSZXN1bHQpIHtcbiAgICAgICAgZXhlY1Jlc3VsdCQubmV4dChudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJzZWRSZXN1bHQuaXNNdWx0aVJlc3VsdCkge1xuICAgICAgICBoYW5kbGVNdWx0aVJlc3VsdCh7cGFyc2VkUmVzdWx0LCBjbWRTZXQsICR0ZXJtaW5hbH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGlucHV0ID0gcGFyc2VkUmVzdWx0LnVzZXJJbnB1dDtcbiAgICBpZiAocGFyc2VkUmVzdWx0LmVycm9ySW5mbykge1xuICAgICAgICBleGVjUmVzdWx0JC5uZXh0KHtcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgb3V0cHV0OiBwYXJzZWRSZXN1bHQuZXJyb3JJbmZvXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZXIgPSBwYXJzZWRSZXN1bHQuY29tbWFuZC5oYW5kbGVyIHx8IHBhcnNlZFJlc3VsdC5jb21tYW5kO1xuICAgIGxldCBleGVjUmVzdWx0ID0gXCJcIjtcbiAgICB0cnkge1xuICAgICAgICBleGVjUmVzdWx0ID0gaGFuZGxlcihcbiAgICAgICAgICBwYXJzZWRSZXN1bHQucGFyYW1zT2JqLCAvLyAxXG4gICAgICAgICAgY21kU2V0LCAvLyAyXG4gICAgICAgICAgJHRlcm1pbmFsLCAvLyAzXG4gICAgICAgICAgcGFyc2VkUmVzdWx0LCAvLyA0XG4gICAgICAgICAgcHJpbnQoaW5wdXQpLCAvLyA1XG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvcihpbnB1dCkoZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGV4ZWNSZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXhlY1Jlc3VsdCQubmV4dCh7XG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIG91dHB1dDogZXhlY1Jlc3VsdFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV4ZWNSZXN1bHQkLm5leHQoe1xuICAgICAgICBpbnB1dCxcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgb3V0cHV0OiBcIlwiXG4gICAgfSk7XG5cbiAgICBQcm9taXNlLnJlc29sdmUoZXhlY1Jlc3VsdClcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGV4ZWNSZXN1bHQkLm5leHQoe1xuICAgICAgICAgICAgICAgIG91dHB1dDogcmVzdWx0LFxuICAgICAgICAgICAgICAgIGlucHV0XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IoaW5wdXQpKVxufTtcblxubGV0IGV4ZSA9IHtcbiAgICBpbjogaGFuZGxlUmVzdWx0LFxuICAgIG91dCQ6IGV4ZWNSZXN1bHQkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBleGU7XG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc2NhbihhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHZhciBoYXNTZWVkID0gZmFsc2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICBoYXNTZWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNjYW5PcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCkpO1xuICAgIH07XG59XG52YXIgU2Nhbk9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYW5PcGVyYXRvcihhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCkge1xuICAgICAgICBpZiAoaGFzU2VlZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBoYXNTZWVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xuICAgICAgICB0aGlzLmhhc1NlZWQgPSBoYXNTZWVkO1xuICAgIH1cbiAgICBTY2FuT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBTY2FuU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLmFjY3VtdWxhdG9yLCB0aGlzLnNlZWQsIHRoaXMuaGFzU2VlZCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFNjYW5PcGVyYXRvcjtcbn0oKSk7XG52YXIgU2NhblN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2NhblN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2NhblN1YnNjcmliZXIoZGVzdGluYXRpb24sIGFjY3VtdWxhdG9yLCBfc2VlZCwgaGFzU2VlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcjtcbiAgICAgICAgX3RoaXMuX3NlZWQgPSBfc2VlZDtcbiAgICAgICAgX3RoaXMuaGFzU2VlZCA9IGhhc1NlZWQ7XG4gICAgICAgIF90aGlzLmluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NhblN1YnNjcmliZXIucHJvdG90eXBlLCBcInNlZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5oYXNTZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NlZWQgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2NhblN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNTZWVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYW5TdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmFjY3VtdWxhdG9yKHRoaXMuc2VlZCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWVkID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBTY2FuU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nhbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX091dGVyU3Vic2NyaWJlcixfdXRpbF9zdWJzY3JpYmVUb1Jlc3VsdCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBwcm9qZWN0O1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcHJvamVjdCA9IGFyZ3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9ic2VydmFibGVzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yKG9ic2VydmFibGVzLCBwcm9qZWN0KSk7XG4gICAgfTtcbn1cbnZhciBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3Iob2JzZXJ2YWJsZXMsIHByb2plY3QpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlcyA9IG9ic2VydmFibGVzO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBXaXRoTGF0ZXN0RnJvbU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMub2JzZXJ2YWJsZXMsIHRoaXMucHJvamVjdCkpO1xuICAgIH07XG4gICAgcmV0dXJuIFdpdGhMYXRlc3RGcm9tT3BlcmF0b3I7XG59KCkpO1xudmFyIFdpdGhMYXRlc3RGcm9tU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvYnNlcnZhYmxlcywgcHJvamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLnRvUmVzcG9uZCA9IFtdO1xuICAgICAgICB2YXIgbGVuID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICBfdGhpcy52YWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgX3RoaXMudG9SZXNwb25kLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgIF90aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdChfdGhpcywgb2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMudmFsdWVzW291dGVySW5kZXhdID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgdmFyIHRvUmVzcG9uZCA9IHRoaXMudG9SZXNwb25kO1xuICAgICAgICBpZiAodG9SZXNwb25kLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRvUmVzcG9uZC5pbmRleE9mKG91dGVySW5kZXgpO1xuICAgICAgICAgICAgaWYgKGZvdW5kICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHRvUmVzcG9uZC5zcGxpY2UoZm91bmQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy50b1Jlc3BvbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFt2YWx1ZV0uY29uY2F0KHRoaXMudmFsdWVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlQcm9qZWN0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBXaXRoTGF0ZXN0RnJvbVN1YnNjcmliZXIucHJvdG90eXBlLl90cnlQcm9qZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgICByZXR1cm4gV2l0aExhdGVzdEZyb21TdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3ViamVjdCxfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdCc7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFzdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy50aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCB0aGlzLl92YWx1ZSA9IHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc1NjaGVkdWxlcixfdXRpbF9pc0FycmF5LF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQsX2Zyb21BcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgT3V0ZXJTdWJzY3JpYmVyIH0gZnJvbSAnLi4vT3V0ZXJTdWJzY3JpYmVyJztcbmltcG9ydCB7IHN1YnNjcmliZVRvUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdCc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG52YXIgTk9ORSA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gbnVsbDtcbiAgICB2YXIgc2NoZWR1bGVyID0gbnVsbDtcbiAgICBpZiAoaXNTY2hlZHVsZXIob2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9ic2VydmFibGVzW29ic2VydmFibGVzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShvYnNlcnZhYmxlc1swXSkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKS5saWZ0KG5ldyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IocmVzdWx0U2VsZWN0b3IpKTtcbn1cbnZhciBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxhdGVzdE9wZXJhdG9yKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgQ29tYmluZUxhdGVzdE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQ29tYmluZUxhdGVzdFN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5yZXN1bHRTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RPcGVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBDb21iaW5lTGF0ZXN0T3BlcmF0b3IgfTtcbnZhciBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb21iaW5lTGF0ZXN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIF90aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICBfdGhpcy5vYnNlcnZhYmxlcyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMudmFsdWVzLnB1c2goTk9ORSk7XG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlcyA9IHRoaXMub2JzZXJ2YWJsZXM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZhYmxlcy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gbGVuO1xuICAgICAgICAgICAgdGhpcy50b1Jlc3BvbmQgPSBsZW47XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChzdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBvYnNlcnZhYmxlLCBvYnNlcnZhYmxlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICh1bnVzZWQpIHtcbiAgICAgICAgaWYgKCh0aGlzLmFjdGl2ZSAtPSAxKSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lTGF0ZXN0U3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG4gICAgICAgIHZhciBvbGRWYWwgPSB2YWx1ZXNbb3V0ZXJJbmRleF07XG4gICAgICAgIHZhciB0b1Jlc3BvbmQgPSAhdGhpcy50b1Jlc3BvbmRcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBvbGRWYWwgPT09IE5PTkUgPyAtLXRoaXMudG9SZXNwb25kIDogdGhpcy50b1Jlc3BvbmQ7XG4gICAgICAgIHZhbHVlc1tvdXRlckluZGV4XSA9IGlubmVyVmFsdWU7XG4gICAgICAgIGlmICh0b1Jlc3BvbmQgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJ5UmVzdWx0U2VsZWN0b3IodmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZXMuc2xpY2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5UmVzdWx0U2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yLmFwcGx5KHRoaXMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyO1xufShPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IENvbWJpbmVMYXRlc3RTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCBmdW5jdGlvbiBwbHVjaygpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHByb3BlcnRpZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaXN0IG9mIHByb3BlcnRpZXMgY2Fubm90IGJlIGVtcHR5LicpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbWFwKHBsdWNrZXIocHJvcGVydGllcywgbGVuZ3RoKSkoc291cmNlKTsgfTtcbn1cbmZ1bmN0aW9uIHBsdWNrZXIocHJvcHMsIGxlbmd0aCkge1xuICAgIHZhciBtYXBwZXIgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgY3VycmVudFByb3AgPSB4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGN1cnJlbnRQcm9wW3Byb3BzW2ldXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvcCA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgICB9O1xuICAgIHJldHVybiBtYXBwZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbHVjay5qcy5tYXBcbiIsImltcG9ydCB7IGluamVjdENTUyB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuaW1wb3J0IHtCQVNFX0NTU30gZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuY29uc3QgY3JlYXRlSW5wdXQgPSAoKSA9PiB7XG4gICAgbGV0ICRSZWFsSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuXG4gICAgJFJlYWxJbnB1dC5zdHlsZS5oZWlnaHQgPSAnMjBweCc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS56SW5kZXg9ICctMSc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS5vdXRsaW5lID0gJ25vbmUnO1xuICAgICRSZWFsSW5wdXQuc3R5bGUuYm9yZGVyPSAnbm9uZSc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS50b3AgPSAnMCc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS5sZWZ0PSAnMCc7XG4gICAgJFJlYWxJbnB1dC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIGlmKHNjcmVlbi53aWR0aCA8IDUwMCkge1xuICAgICAgICAkUmVhbElucHV0LnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgwKSc7XG4gICAgfVxuICAgICRSZWFsSW5wdXQuc3R5bGUuY29sb3I9ICd0cmFuc3BhcmVudCc7XG4gICAgJFJlYWxJbnB1dC5zZXRBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG5cbiAgICAkUmVhbElucHV0Lm9uYmx1cj1mdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgJFJlYWxJbnB1dC5mb2N1cygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuICRSZWFsSW5wdXQ7XG59O1xuXG5jb25zdCB1cGRhdGVQb3MgPSAoJHdyYXBwZXIsICRpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHtsZWZ0LCB0b3B9ID0gJHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgJGlucHV0LnN0eWxlLmxlZnQgPSBgJHtsZWZ0fXB4YDtcbiAgICAkaW5wdXQuc3R5bGUudG9wID0gYCR7dG9wfXB4YDtcbn07XG5cbmNvbnN0IHJlbmRlclBzZXVkb0lucHV0ID0gKCR3cmFwcGVyLCAkaW5wdXQpID0+IHtcbiAgICB1cGRhdGVQb3MoJHdyYXBwZXIsICRpbnB1dCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0U3RhdGUpIHtcbiAgICAgICAgdXBkYXRlUG9zKCR3cmFwcGVyLCAkaW5wdXQpO1xuICAgICAgICBjb25zdCBjaGFyVHBsID0gKGNoYXIsIC4uLmNsYXNzTmFtZSkgPT5cbiAgICAgICAgICAgIGA8c3BhbiBjbGFzcz1cIiR7Y2xhc3NOYW1lLmpvaW4oJyAnKX1cIj4ke2NoYXJ9PC9zcGFuPmA7XG5cbiAgICAgICAgbGV0IGhhc1NlbGVjdGlvbiA9IGlucHV0U3RhdGUuc3RhcnQgIT09IGlucHV0U3RhdGUuZW5kLFxuICAgICAgICAgICAgaXNFbXB0eSA9IGlucHV0U3RhdGUuaW5wdXRTdHIgPT09IFwiXCI7XG4gICAgICAgIGNvbnN0IGRldGVybWluZUNsYXNzTmFtZSA9IChjaGFySWR4KSA9PiB7XG4gICAgICAgICAgICBpZihpc0VtcHR5KSByZXR1cm4gJ2JsaW5rJztcbiAgICAgICAgICAgIGlmKCBoYXNTZWxlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICBjaGFySWR4ID49IGlucHV0U3RhdGUuc3RhcnQgJiZcbiAgICAgICAgICAgICAgICBjaGFySWR4IDw9IGlucHV0U3RhdGUuZW5kXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpZ2hsaWdodCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaGFySWR4ID09PSBpbnB1dFN0YXRlLnN0YXJ0ID8gJ2JsaW5rJyA6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGlucHV0Q2hhckFyciA9IGlucHV0U3RhdGUuaW5wdXRTdHIuc3BsaXQoJycpO1xuICAgICAgICBsZXQgdG9SZW5kZXIgPSBpbnB1dENoYXJBcnIubWFwKGNoID0+IGNoID09PSAnICcgPyAnJm5ic3A7JyA6IGNoKTtcbiAgICAgICAgaWYoIWhhc1NlbGVjdGlvbiB8fCBpc0VtcHR5KXtcbiAgICAgICAgICAgIHRvUmVuZGVyLnB1c2goXCImbmJzcDtcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0b2RvOiDlupTor6Xlj6rmuLLmn5PmnInlj5jliqjnmoQgZG9tXG4gICAgICAgICR3cmFwcGVyLmlubmVySFRNTCA9IHRvUmVuZGVyLm1hcChcbiAgICAgICAgICAgIChjaCwgaWR4KSA9PiBjaGFyVHBsKGNoLCBkZXRlcm1pbmVDbGFzc05hbWUoaWR4KSlcbiAgICAgICAgKS5qb2luKCcnKTtcbiAgICB9XG59O1xuXG5jb25zdCBpbml0ID0gKCR3cmFwcGVyLCAkaW5wdXQsIHRoZW1lPXt9KSA9PiB7XG4gICAgaW5qZWN0Q1NTKEJBU0VfQ1NTLmN1cnNvcih0aGVtZSkpO1xuICAgICR3cmFwcGVyLnN0eWxlLmZvbnRGYW1pbHkgPSBCQVNFX0NTUy5mb250RmFtaWx5O1xuICAgICR3cmFwcGVyLnN0eWxlLmZvbnRTaXplID0gQkFTRV9DU1MuZm9udFNpemU7XG4gICAgJHdyYXBwZXIuc3R5bGUud29yZEJyZWFrID0gJ2JyZWFrLWFsbCc7XG4gICAgcmVuZGVyUHNldWRvSW5wdXQoJHdyYXBwZXIsICRpbnB1dCkoe1xuICAgICAgICBpbnB1dFN0cjogXCJcIixcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgIH0pO1xufTtcblxuXG5leHBvcnQge2luaXQsIGNyZWF0ZUlucHV0LCByZW5kZXJQc2V1ZG9JbnB1dCwgdXBkYXRlUG9zfSIsImltcG9ydCB7XG4gICAgZnJvbUV2ZW50LFxuICAgIG1lcmdlLFxuICAgIGNvbWJpbmVMYXRlc3QsXG4gICAgQmVoYXZpb3JTdWJqZWN0XG59IGZyb20gJ3J4anMnXG5cbmltcG9ydCB7XG4gICAgbWFwLFxuICAgIHBsdWNrLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIHdpdGhMYXRlc3RGcm9tLFxuICAgIGZpbHRlcixcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICAgIE1PVkVfS0VZLFxuICAgIEtFWVNcbn0gZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuaW1wb3J0IHt0cmlnZ2VyfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxuaW1wb3J0IHtcbiAgICBpbml0LFxuICAgIGNyZWF0ZUlucHV0LFxuICAgIHJlbmRlclBzZXVkb0lucHV0XG59IGZyb20gJy4vaW5wdXQuanMnXG5pbXBvcnQge3VwZGF0ZVBvc30gZnJvbSBcIi4vaW5wdXRcIjtcblxuLyoqXG4gKiBAcGFyYW0gJGlucHV0V3JhcHBlclxuICogQHBhcmFtIHtvYmplY3R9IHRoZW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhlbWUuY3Vyc29yQ29sb3JcbiAqIEByZXR1cm5zIHt7ZW50ZXIkOiBPYnNlcnZhYmxlPHN0cmluZz4sIGlucHV0JDogT2JzZXJ2YWJsZTxhbnk+LCBkaXNhYmxlZCwgdmFsdWUsIHRhcmdldDogKn19XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgkaW5wdXRXcmFwcGVyLCB0aGVtZT17fSkge1xuICAgIGlmKCEkaW5wdXRXcmFwcGVyKSB7XG4gICAgICAgIHRocm93ICdJbnB1dCB3cmFwcGVyIGVsZW1lbnQgbWlzc2luZy4nXG4gICAgfVxuICAgIC8vIHVpXG4gICAgbGV0ICRpbnB1dCA9IGNyZWF0ZUlucHV0KCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCgkaW5wdXQpO1xuICAgICRpbnB1dC5mb2N1cygpO1xuXG4gICAgaW5pdCgkaW5wdXRXcmFwcGVyLCAkaW5wdXQsIHRoZW1lKTtcblxuICAgIC8vIHN0cmVhbVxuICAgIGxldCBpbnB1dCQgPSBmcm9tRXZlbnQoJGlucHV0LCAnaW5wdXQnKSxcbiAgICAgICAgc2VsZWN0JCA9IGZyb21FdmVudCgkaW5wdXQsICdzZWxlY3QnKSxcbiAgICAgICAga2V5dXAkID0gZnJvbUV2ZW50KCRpbnB1dCwgJ2tleXVwJyk7XG5cbiAgICBsZXQgaW5wdXRTdHIkID0gbmV3IEJlaGF2aW9yU3ViamVjdChcIlwiKTtcblxuICAgIGlucHV0JC5waXBlKFxuICAgICAgICBwbHVjaygndGFyZ2V0JywgJ3ZhbHVlJylcbiAgICApLnN1YnNjcmliZShzdHIgPT4gaW5wdXRTdHIkLm5leHQoc3RyKSk7XG5cbiAgICBsZXQgbW92ZUN1cnNvciQgPSBrZXl1cCQucGlwZShcbiAgICAgICAgICAgIGZpbHRlcihldnQgPT4gTU9WRV9LRVkuaW5jbHVkZXMoZXZ0LmtleSkpLFxuICAgICAgICApO1xuXG4gICAgbGV0IGVudGVyJCA9IGtleXVwJC5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKGV2dCA9PiBldnQua2V5ID09PSBLRVlTLmVudGVyKSxcbiAgICAgICAgICAgIGZpbHRlcigoe3RhcmdldH0pID0+ICF0YXJnZXQuZGlzYWJsZWQpLFxuICAgICAgICAgICAgd2l0aExhdGVzdEZyb20oaW5wdXRTdHIkKSxcbiAgICAgICAgICAgIG1hcCgoW2V2dCwgaW5wdXRTdHJdKSA9PiBpbnB1dFN0ciksXG4gICAgICAgICAgICBmaWx0ZXIoc3RyID0+ICEhc3RyKVxuICAgICAgICApO1xuXG4gICAgbGV0IGN1cnNvclBvc0NoYW5nZSQgPSBtZXJnZShpbnB1dCQsIG1vdmVDdXJzb3IkLCBzZWxlY3QkKSxcbiAgICAgICAgY3Vyc29yUG9zJCA9IGN1cnNvclBvc0NoYW5nZSQucGlwZShcbiAgICAgICAgICAgIG1hcChldnQgPT4gKHtcbiAgICAgICAgICAgICAgICBzdGFydDogZXZ0LnRhcmdldC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGV2dC50YXJnZXQuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgKTtcblxuICAgIGxldCBpbnB1dFN0YXRlJCA9IGNvbWJpbmVMYXRlc3QoaW5wdXRTdHIkLCBjdXJzb3JQb3MkKS5waXBlKFxuICAgICAgICAgICAgbWFwKChbaW5wdXRTdHIsIHBvc10pID0+ICh7aW5wdXRTdHIsIC4uLnBvc30pKSxcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKChwcmV2U3RhdGUsIG5leHRTdGF0ZSkgPT5cbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcmV2U3RhdGUpID09PSBKU09OLnN0cmluZ2lmeShuZXh0U3RhdGUpKVxuICAgICAgICApO1xuXG4gICAgLy8gcmVuZGVyXG4gICAgY29uc3QgcmVuZGVyID0gcmVuZGVyUHNldWRvSW5wdXQoJGlucHV0V3JhcHBlciwgJGlucHV0KTtcbiAgICBpbnB1dFN0YXRlJC5zdWJzY3JpYmUocmVuZGVyKTtcblxuICAgIC8vIGFwaVxuICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyJCxcbiAgICAgICAgaW5wdXQkLFxuICAgICAgICBnZXQgdGFyZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuICRpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHZhbHVlKHZhbCkge1xuICAgICAgICAgICAgJGlucHV0LnZhbHVlID0gdmFsO1xuICAgICAgICAgICAgaW5wdXRTdHIkLm5leHQodmFsKTtcbiAgICAgICAgICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlUG9zKCRpbnB1dFdyYXBwZXIsICRpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmlnZ2VyKCRpbnB1dCwgTU9WRV9LRVlbMF0pXG4gICAgICAgIH0sXG4gICAgICAgIHNldCBkaXNhYmxlZChkaXNhYmxlZCkge1xuICAgICAgICAgICAgbGV0ICRjdXJzb3IgPSAkaW5wdXRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5ibGluaycpO1xuICAgICAgICAgICAgaWYoZGlzYWJsZWQpe1xuICAgICAgICAgICAgICAgICRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgJGN1cnNvci5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAkY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgJGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAkaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iLCJpbXBvcnQge1xuICAgIEJBU0VfQ1NTLFxufSBmcm9tIFwiLi4vcHNldWRvSW5wdXQvY29uc3RhbnRcIjtcblxuaW1wb3J0IHtERUZBVUxUX1NUWUxFfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5pbXBvcnQge1xuICAgIGluamVjdENTUyxcbiAgICBnZXRMYXN0RWxlLFxuICAgIG1ha2VUZXh0U3Bpbm5lclxufSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9wc2V1ZG9JbnB1dC8nXG5cbmNvbnN0IHNwaW5uZXIgPSBtYWtlVGV4dFNwaW5uZXIoKTtcblxuY29uc3QgdGVybWluYWxUcGwgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGBcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJoaXN0LXNlc3NcIj48L2Rpdj4gXG4gICAgICAgICAgICA8ZGl2IGlkPVwiY3Vyci1zZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlc3Npb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb21wdFwiPiQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNtZFwiIGlkPVwiaW5wdXRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L2Rpdj5gXG59O1xuXG5jb25zdCBzZXNzaW9uVHBsID0gKHtpbnB1dCwgb3V0cHV0LCBzaG91bGRIaWRlSW5wdXQsIHByaW50fSkgPT4ge1xuICAgIGxldCByZXN1bHQsIGlzUmljaFRleHQ7XG5cbiAgICBpZih0eXBlb2Ygb3V0cHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJlc3VsdCA9IG91dHB1dDtcbiAgICB9IGVsc2UgaWYodHlwZW9mIG91dHB1dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG91dHB1dC5odG1sIHx8IEpTT04uc3RyaW5naWZ5KG91dHB1dCk7XG4gICAgICAgICAgICBpZihvdXRwdXQuaHRtbCkge1xuICAgICAgICAgICAgICAgIGlzUmljaFRleHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpc1JpY2hUZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICByZXN1bHQgPSAnRVJST1I6IOS4jeaUr+aMgeeahOaYvuekuuexu+WeiydcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZihvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSAnRVJST1I6IOS4jeaUr+aMgeeahOaYvuekuuexu+WeiydcbiAgICB9XG5cbiAgICBpZiAob3V0cHV0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgY29uc3Qge21lc3NhZ2UsIHN0YWNrfSA9IG91dHB1dDtcbiAgICAgICAgcmVzdWx0ID0gYCR7bWVzc2FnZX1cXG5cXG4ke3N0YWNrfWBcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0U3RyID0gaXNSaWNoVGV4dFxuICAgICAgICA/IHJlc3VsdFxuICAgICAgICA6IGA8cHJlIHN0eWxlPVwiJHtwcmludCA/ICdtYXJnaW46IDAnIDogJyd9XCI+JHtyZXN1bHQgfHwgJyd9PC9wcmU+YDtcblxuICAgIGNvbnN0IGlucHV0U3RyID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9tcHRcIj4kPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY21kXCI+XG4gICAgICAgICAgICAke2lucHV0IHx8ICcnfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG5cbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJzZXNzaW9uXCI+XG4gICAgICAgICAgICAke3Nob3VsZEhpZGVJbnB1dCA/ICcnIDogaW5wdXRTdHJ9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3V0cHV0XCI+XG4gICAgICAgICAgICAgICAgJHtyZXN1bHRTdHJ9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+YFxufTtcblxuY29uc3QgcmVuZGVyVGVybWluYWwgPSAoc2Vzc2lvbkRhdGEpID0+IHtcbiAgICBsZXQgJGhpc3RTZXNzaW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hpc3Qtc2VzcycpLFxuICAgICAgICAkY3VycmVudFNlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3Vyci1zZXNzJyksXG4gICAgICAgICRjdXJyZW50U2Vzc1Byb21wdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjdXJyLXNlc3MgLmlucHV0IC5wcm9tcHQnKTtcblxuICAgIGxldCBsYXN0U2Vzc0RhdGEgPSBnZXRMYXN0RWxlKHNlc3Npb25EYXRhKSxcbiAgICAgICAgaXNMb2FkaW5nID0gbGFzdFNlc3NEYXRhICYmIGxhc3RTZXNzRGF0YS5sb2FkaW5nO1xuXG4gICAgY29uc3Qgc2hvdWxkSGlkZUlucHV0ID0gKGlkeCwgY3VycmVudERhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcHJldlNlc3NEYXRhID0gc2Vzc2lvbkRhdGFbaWR4IC0gMV07XG4gICAgICAgIHJldHVybiBwcmV2U2Vzc0RhdGFcbiAgICAgICAgICAgICYmIHByZXZTZXNzRGF0YS5wcmludFxuICAgICAgICAgICAgJiYgcHJldlNlc3NEYXRhLmlucHV0ID09PSBjdXJyZW50RGF0YS5pbnB1dFxuICAgIH07XG5cbiAgICBjb25zdCB0bXBDdXJzb3IgPSBpc0xvYWRpbmcgPyBgPHNwYW4gY2xhc3M9XCJibGlua1wiPiZuYnNwOzwvc3Bhbj5gIDogJyc7XG4gICAgaWYoc2Vzc2lvbkRhdGEubGVuZ3RoIDwgMSkge1xuICAgICAgICAkaGlzdFNlc3Npb24uaW5uZXJIVE1MID0gXCJcIjtcbiAgICB9ZWxzZXtcbiAgICAgICAgJGhpc3RTZXNzaW9uLmlubmVySFRNTCA9IHNlc3Npb25EYXRhLm1hcCgoZGF0YSwgaWR4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2Vzc2lvblRwbCh7IC4uLmRhdGEsIHNob3VsZEhpZGVJbnB1dDogc2hvdWxkSGlkZUlucHV0KGlkeCwgZGF0YSl9KTtcbiAgICAgICAgfSkuam9pbignJykgKyB0bXBDdXJzb3I7XG4gICAgICAgIC8vIGxldCAkb3V0cHV0ID0gJGhpc3RTZXNzaW9uLnF1ZXJ5U2VsZWN0b3IoJyNoaXN0LXNlc3MgLnNlc3Npb246bGFzdC1jaGlsZCA+IC5vdXRwdXQnKTtcbiAgICAgICAgaWYoaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAvLyBzcGlubmVyKHRydWUsICRvdXRwdXQpO1xuICAgICAgICAgICAgJGN1cnJlbnRTZXNzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHNwaW5uZXIoZmFsc2UpO1xuICAgICAgICAgICAgJGN1cnJlbnRTZXNzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5jb25zdCBpbml0ID0gKCR3cmFwcGVyLCB0aGVtZT17fSkgPT4ge1xuICAgIGluamVjdENTUyhERUZBVUxUX1NUWUxFKTtcbiAgICAkd3JhcHBlci5pbm5lckhUTUwgPSB0ZXJtaW5hbFRwbCgpO1xuICAgIGNvbnN0ICR0ZXJtaW5hbCA9ICR3cmFwcGVyLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIGNvbnN0ICRpbnB1dEZvclRlcm1pbmFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0Jyk7XG4gICAgY29uc3QgaW5wdXQgPSBJbnB1dCgkaW5wdXRGb3JUZXJtaW5hbCwgdGhlbWUpO1xuICAgIGNvbnN0IGlucHV0SGVpZ2h0ID0gMTQ7XG4gICAgJHRlcm1pbmFsLnN0eWxlLmhlaWdodCA9ICdjYWxjKDEwMCUgLSAxMHB4KSc7XG4gICAgJHRlcm1pbmFsLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xuICAgICR0ZXJtaW5hbC5zdHlsZS5mb250RmFtaWx5ID0gQkFTRV9DU1MuZm9udEZhbWlseTtcbiAgICAkdGVybWluYWwuc3R5bGUuYmFja2dyb3VuZCA9IHRoZW1lLmJhY2tncm91bmQgfHwgJ3Vuc2V0JztcbiAgICAkdGVybWluYWwuc3R5bGUuY29sb3IgPSB0aGVtZS5jb2xvciB8fCAnIzAwMCc7XG4gICAgJHRlcm1pbmFsLnN0eWxlLmZvbnRTaXplID0gQkFTRV9DU1MuZm9udFNpemU7XG4gICAgJHRlcm1pbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHt0b3A6IGlucHV0WX0gPSBpbnB1dC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmICggZXZlbnQuY2xpZW50WSA+IGlucHV0WVxuICAgICAgICAgICAgfHwgTWF0aC5hYnMoZXZlbnQuY2xpZW50WSAtIGlucHV0WSkgPCBpbnB1dEhlaWdodFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0LnRhcmdldC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgICR0ZXJtaW5hbCxcbiAgICAgICAgaW5wdXRcbiAgICB9O1xufTtcblxuZXhwb3J0IHtyZW5kZXJUZXJtaW5hbCwgaW5pdH1cbiIsImltcG9ydCB7Y29tcGxldGlvbldpdGh9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiXG5cbmxldCBISVNUID0gW107XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoaGlzdCA9IFtdLCBjbWQsIGlucHV0KSB7XG4gICAgc3dpdGNoIChjbWQpIHtcbiAgICAgICAgY2FzZSAnY2xlYXInOlxuICAgICAgICAgICAgSElTVCA9IFsuLi5ISVNULCAuLi5oaXN0LCB7aW5wdXQ6ICdjbGVhcicsIG91dHB1dDogJyd9XTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICAgICAgICBsZXQgYWxsSGlzdCA9IFsuLi5ISVNULCAuLi5oaXN0XTtcbiAgICAgICAgICAgIGxldCBoaXN0U3RyID0gYWxsSGlzdC5tYXAoKGNvbW1hbmQsIGlkeCkgPT57XG4gICAgICAgICAgICAgICAgbGV0IG51bSA9IGNvbXBsZXRpb25XaXRoKCcgJykoaWR4ICsgMSwgYWxsSGlzdC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgJy4gJyArIGNvbW1hbmQuaW5wdXQ7XG4gICAgICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xuXG4gICAgICAgICAgICBoaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIG91dHB1dDogaGlzdFN0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaGlzdDtcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIGhpc3Q7XG4gICAgfVxufSIsImltcG9ydCBwYXJzZVdpdGggZnJvbSBcIi4vcGFyc2VyXCI7XG5pbXBvcnQge0tFWVN9IGZyb20gXCIuLi9wc2V1ZG9JbnB1dC9jb25zdGFudFwiO1xuaW1wb3J0IHtnZXRMYXN0RWxlLCBwcm9taXNlT25lQnlPbmUsIHRyaWdnZXIsIHNjcm9sbFRvQm90dG9tLCBodW1hbml6ZXJJbnB1dH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5pbXBvcnQge1xuICAgIEJVSUxUX0lOX0NNRFMsXG59IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge1xuICAgIFN1YmplY3QsXG4gICAgb2YsXG4gICAgbWVyZ2UsXG59IGZyb20gJ3J4anMnXG5pbXBvcnQgZXhlIGZyb20gXCIuL2V4ZVwiO1xuaW1wb3J0IHtcbiAgICBtYXAsXG4gICAgc2NhbixcbiAgICBmaWx0ZXIsXG4gICAgd2l0aExhdGVzdEZyb21cbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQge1xuICAgIHJlbmRlclRlcm1pbmFsLFxuICAgIGluaXQsXG59IGZyb20gXCIuL3Rlcm1pbmFsXCI7XG5pbXBvcnQgaGlzdEludGVyY2VwdG9yIGZyb20gJy4vaGlzdEludGVyY2VwdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwc2V1ZG9UZXJtaW5hbCgkdGVybWluYWxXcmFwcGVyLCB0aGVtZT17fSkge1xuICAgIGlmICghJHRlcm1pbmFsV3JhcHBlcikge1xuICAgICAgICB0aHJvdyAnd3JhcHBlciBlbGVtZW50IG5vdCBmb3VuZCdcbiAgICB9XG4gICAgY29uc3QgeyR0ZXJtaW5hbCwgaW5wdXR9ID0gaW5pdCgkdGVybWluYWxXcmFwcGVyLCB0aGVtZSk7XG4gICAgbGV0IHVzZXJDbWRzJCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgbGV0IHN5c0NtZHMkID0gb2YoQlVJTFRfSU5fQ01EUyk7XG4gICAgbGV0IGNtZFNldCQgPSBtZXJnZSh1c2VyQ21kcyQsIHN5c0NtZHMkKS5waXBlKFxuICAgICAgICBzY2FuKChuZXdDbWQsIG9sZENtZCkgPT4gKHtcbiAgICAgICAgICAgIC4uLm9sZENtZCxcbiAgICAgICAgICAgIC4uLm5ld0NtZCxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgbWFwKChjbWQpID0+ICh7XG4gICAgICAgICAgICAuLi5jbWQsXG4gICAgICAgICAgICAuLi5CVUlMVF9JTl9DTURTXG4gICAgICAgIH0pKVxuICAgICk7XG5cbiAgICBjb25zdCBlbnRTdWIgPSBpbnB1dC5lbnRlciQucGlwZShcbiAgICAgICAgd2l0aExhdGVzdEZyb20oY21kU2V0JCksXG4gICAgICAgIG1hcCgoW2lucHV0LCBjbWRTZXRdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhcnNlZFJlc3VsdDogcGFyc2VXaXRoKGNtZFNldCkoaW5wdXQpLFxuICAgICAgICAgICAgICAgIGNtZFNldCxcbiAgICAgICAgICAgICAgICAkdGVybWluYWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIG1hcChleGUuaW4pXG4gICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBpbnB1dC50YXJnZXQuYmx1cigpO1xuICAgIH0pO1xuXG4gICAgbGV0IHNlc3Npb25EYXRhJCA9IGV4ZS5vdXQkLnBpcGUoXG4gICAgICAgIGZpbHRlcih4ID0+IHgpLFxuICAgICAgICBzY2FuKChoaXN0LCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGxldCBpc1NwZWNpYWxDbWQgPSBjbWQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpc1NwZWNpYWwgPSBPYmplY3Qua2V5cyhCVUlMVF9JTl9DTURTKS5pbmNsdWRlcyhjbWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc1NwZWNpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBCVUlMVF9JTl9DTURTW2NtZF0uaGFuZGxlciB8fCBCVUlMVF9JTl9DTURTW2NtZF07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaXNTcGVjaWFsID0gaGFuZGxlcigpID09PSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTcGVjaWFsO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IGNtZCA9IHJlc3VsdFxuICAgICAgICAgICAgICAgID8gcmVzdWx0LmlucHV0LnRyaW0oKS5zcGxpdCgvXFxzKy8pWzBdXG4gICAgICAgICAgICAgICAgOiAnJztcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1NwZWNpYWxDbWQoY21kKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoaXN0SW50ZXJjZXB0b3IoaGlzdCAmJiBoaXN0LnNsaWNlKCksIGNtZCwgcmVzdWx0LmlucHV0KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbGFzdFJlc3VsdCA9IGhpc3Quc2xpY2UoKS5wb3AoKTtcbiAgICAgICAgICAgIGlmIChsYXN0UmVzdWx0ICYmIGxhc3RSZXN1bHQubG9hZGluZyAmJiAhbGFzdFJlc3VsdC5wcmludCkge1xuICAgICAgICAgICAgICAgIGhpc3QucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXN0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBoaXN0XG4gICAgICAgIH0sIFtdKVxuICAgICk7XG5cbiAgICBjb25zdCBzZXNzU3ViID0gc2Vzc2lvbkRhdGEkLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICBsZXQgbGFzdERhdGEgPSBnZXRMYXN0RWxlKGRhdGEpO1xuICAgICAgICByZW5kZXJUZXJtaW5hbChkYXRhKTtcbiAgICAgICAgc2Nyb2xsVG9Cb3R0b20oJHRlcm1pbmFsKTtcblxuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IGxhc3REYXRhICYmIGxhc3REYXRhLmxvYWRpbmc7XG4gICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICB9KTtcblxuICAgIGlucHV0LmlucHV0JC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBzY3JvbGxUb0JvdHRvbSgkdGVybWluYWwpXG4gICAgfSk7XG5cbiAgICBjb25zdCBodW1hbml6ZXJFeGVjID0gYXN5bmMgKGNtZFN0cikgPT4ge1xuICAgICAgICBzY3JvbGxUb0JvdHRvbSgkdGVybWluYWwpO1xuICAgICAgICBhd2FpdCBodW1hbml6ZXJJbnB1dChjbWRTdHIsIHYgPT4gaW5wdXQudmFsdWUgPSB2LCA1MCk7XG4gICAgICAgIC8vIGhhY2suXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBleGUub3V0JC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcih4ID0+IHgpLFxuICAgICAgICAgICAgICAgIGZpbHRlcigoe2xvYWRpbmd9KSA9PiBsb2FkaW5nICE9PSB0cnVlKVxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKHtpbnB1dH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZihpbnB1dCA9PT0gY21kU3RyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJpZ2dlcihpbnB1dC50YXJnZXQsIEtFWVMuZW50ZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0IGRpc2FibGVkKHZhbCkge1xuICAgICAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjb21tYW5kcyhjbWRTZXQpIHtcbiAgICAgICAgICAgIHVzZXJDbWRzJC5uZXh0KGNtZFNldCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCBjdXJyZW50SW5wdXQodmFsdWUpIHtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBzZXNzU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBlbnRTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICR0ZXJtaW5hbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlucHV0LnRhcmdldC5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkQ29tbWFuZHMoY21kU2V0KSB7XG4gICAgICAgICAgICB1c2VyQ21kcyQubmV4dChjbWRTZXQpO1xuICAgICAgICB9LFxuICAgICAgICBpbnB1dCh2YWx1ZSwgZW5hYmxlSHVtYW5pemVySW5wdXRFZmZlY3QpIHtcbiAgICAgICAgICAgIGlmIChlbmFibGVIdW1hbml6ZXJJbnB1dEVmZmVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBodW1hbml6ZXJJbnB1dCh2YWx1ZSwgKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGh1bWFuaXplckV4ZWMsXG4gICAgICAgIGh1bWFuaXplckV4ZWNDbWRBcnI6IChjbWRBcnIpID0+IHtcbiAgICAgICAgICAgIGxldCBleGVjRnVuQXJyID0gY21kQXJyLm1hcChjbWQgPT4gKCkgPT4gaHVtYW5pemVyRXhlYyhjbWQpKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlT25lQnlPbmUoZXhlY0Z1bkFycik7XG4gICAgICAgIH0sXG4gICAgICAgIGV4ZWM6IChjbWQpID0+IHtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gY21kO1xuICAgICAgICAgICAgdHJpZ2dlcihpbnB1dC50YXJnZXQsIEtFWVMuZW50ZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc1NjaGVkdWxlcixfZnJvbUFycmF5LF9zY2hlZHVsZWRfc2NoZWR1bGVBcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvaXNTY2hlZHVsZXInO1xuaW1wb3J0IHsgZnJvbUFycmF5IH0gZnJvbSAnLi9mcm9tQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgICBhcmdzLnBvcCgpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheShhcmdzLCBzY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheShhcmdzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vZi5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=