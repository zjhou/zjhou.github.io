(this.webpackJsonp=this.webpackJsonp||[]).push([[5],{"8oxB":function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&d())}function d(){if(!f){var e=c(p);f=!0;for(var t=s.length;t;){for(u=s,s=[];++l<t;)u&&u[l].run();l=-1,t=s.length}u=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||f||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},N0Pr:function(e){e.exports={_from:"@zhoujiahao/pm@^1.0.10",_id:"@zhoujiahao/pm@1.0.23",_inBundle:!1,_integrity:"sha512-16Ayz7jRywaf0Dabb1VDi6My6CPIHOtsng4KaRV7WxWvYIV8WiBa4o6Qm0j0yuZPZrY5YJliWfeQ5zFR/pVAgg==",_location:"/@zhoujiahao/pm",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"@zhoujiahao/pm@^1.0.10",name:"@zhoujiahao/pm",escapedName:"@zhoujiahao%2fpm",scope:"@zhoujiahao",rawSpec:"^1.0.10",saveSpec:null,fetchSpec:"^1.0.10"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/pm/-/pm-1.0.23.tgz",_shasum:"f48e723013a3708b5cbceec1f7d9ee994e93c377",_spec:"@zhoujiahao/pm@^1.0.10",_where:"/home/travis/build/zjhou/zjh.im/src",author:{name:"ZjHOU",email:"z@zjh.im"},bugs:{url:"https://github.com/zjhou/toyBox/issues"},bundleDependencies:!1,dependencies:{"@zhoujiahao/editor":"^1.1.11",imer:"^0.0.1","strapi-sdk-javascript":"^0.3.3"},deprecated:!1,description:"zjh.im - post manager",directories:{lib:"lib",test:"__tests__"},files:["lib"],gitHead:"e737866154627751747f5c8310bffe8bd72bd7a4",homepage:"https://github.com/zjhou/toyBox#readme",keywords:["post","manager","pane.","editor.","code","mirror"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/pm",peerDependencies:{"@zhoujiahao/utils":"^1.0.14","@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},repository:{type:"git",url:"git+https://github.com/zjhou/toyBox.git"},scripts:{test:'echo "Error: run tests from root" && exit 1'},version:"1.0.23"}},"V/h/":function(e,t,n){"use strict";(function(e){var n,r,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u="undefined"!=typeof Symbol?Symbol("immer-nothing"):(o=!0,(r="immer-nothing")in(n={})?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,n),s="undefined"!=typeof Symbol?Symbol("immer-state"):"__$immer_state";function f(e){return!!e&&!!e[s]}function l(e){if(!e)return!1;if("object"!==(void 0===e?"undefined":i(e)))return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=Object.assign||function(e,t){for(var n in t)y(t,n)&&(e[n]=t[n]);return e};function d(e){if(Array.isArray(e))return e.slice();var t=void 0===e.__proto__?Object.create(null):{};return p(t,e)}function h(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++)t(n,e[n],e);else for(var r in e)t(r,e[r],e)}function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function v(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function m(e,t,n,r){Array.isArray(e.base)?function(e,t,n,r){for(var o=e.base,i=e.copy,a=e.assigned,c=Math.min(o.length,i.length),u=0;u<c;u++)if(a[u]&&o[u]!==i[u]){var s=t.concat(u);n.push({op:"replace",path:s,value:i[u]}),r.push({op:"replace",path:s,value:o[u]})}if(c<i.length){for(var f=c;f<i.length;f++)n.push({op:"add",path:t.concat(f),value:i[f]});r.push({op:"replace",path:t.concat("length"),value:o.length})}else if(c<o.length){n.push({op:"replace",path:t.concat("length"),value:i.length});for(var l=c;l<o.length;l++)r.push({op:"add",path:t.concat(l),value:o[l]})}}(e,t,n,r):function(e,t,n,r){var o=e.base,i=e.copy;h(e.assigned,(function(e,a){var c=o[e],u=i[e],s=a?e in o?"replace":"add":"remove";if(c!==o||"replace"!==s){var f=t.concat(e);n.push("remove"===s?{op:s,path:f}:{op:s,path:f,value:u}),r.push("add"===s?{op:"remove",path:f}:"remove"===s?{op:"add",path:f,value:c}:{op:"replace",path:f,value:c})}}))}(e,t,n,r)}var b={},g=[],w=function(){return g[g.length-1]};function O(e,t){var n=void 0;if(f(e)){var r=e[s];r.finalizing=!0,n=d(r.draft),r.finalizing=!1}else n=d(e);h(e,(function(e){Object.defineProperty(n,""+e,function(e){return b[e]||(b[e]={configurable:!0,enumerable:!0,get:function(){return function(e,t){z(e);var n=P(e)[t];if(!e.finalizing&&n===e.base[t]&&l(n))return E(e),e.copy[t]=O(n,e);return n}(this[s],e)},set:function(t){!function(e,t,n){if(z(e),e.assigned[t]=!0,!e.modified){if(v(P(e)[t],n))return;S(e),E(e)}e.copy[t]=n}(this[s],e,t)}})}(""+e))}));var o={scope:t?t.scope:w(),modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:n,copy:null,revoke:j,revoked:!1};return function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})}(n,s,o),o.scope.push(o),n}function j(){this.revoked=!0}function P(e){return e.copy||e.base}function S(e){e.modified||(e.modified=!0,e.parent&&S(e.parent))}function E(e){e.copy||(e.copy=d(e.base))}function z(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(e.copy||e.base))}function T(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--)if(void 0===t[r[o]]&&!y(t,r[o]))return!0;return r.length!==Object.keys(t).length}function x(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var k=Object.freeze({scopes:g,currentScope:w,willFinalize:function(e,t,n){var r=w();r.forEach((function(e){return e.finalizing=!0})),void 0!==e&&e!==t||(n&&function e(t){if(!t||"object"!==(void 0===t?"undefined":i(t)))return;var n=t[s];if(!n)return;var r=n.base,o=n.draft,a=n.assigned;if(Array.isArray(t)){if(x(n)){if(S(n),a.length=!0,o.length<r.length)for(var c=o.length;c<r.length;c++)a[c]=!1;else for(var u=r.length;u<o.length;u++)a[u]=!0;for(var f=0;f<o.length;f++)void 0===a[f]&&e(o[f])}}else Object.keys(o).forEach((function(t){void 0!==r[t]||y(r,t)?a[t]||e(o[t]):(a[t]=!0,S(n))})),Object.keys(r).forEach((function(e){void 0!==o[e]||y(o,e)||(a[e]=!1,S(n))}))}(t),function(e){for(var t=e.length-1;t>=0;t--){var n=e[t];!1===n.modified&&(Array.isArray(n.base)?x(n)&&S(n):T(n)&&S(n))}}(r))},createDraft:O}),_=[],A=function(){return _[_.length-1]};function I(e,t){var n={scope:t?t.scope:A(),modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},r=Array.isArray(e)?Proxy.revocable([n],L):Proxy.revocable(n,C),o=r.revoke,i=r.proxy;return n.draft=i,n.revoke=o,n.scope.push(n),i}var C={get:function(e,t){if(t===s)return e;var n=e.drafts;if(!e.modified&&y(n,t))return n[t];var r=D(e)[t];if(e.finalized||!l(r))return r;if(e.modified){if(r!==e.base[t])return r;n=e.copy}return n[t]=I(r,e)},has:function(e,t){return t in D(e)},ownKeys:function(e){return Reflect.ownKeys(D(e))},set:function(e,t,n){if(!e.modified){if(n?v(e.base[t],n)||n===e.drafts[t]:v(e.base[t],n)&&t in e.base)return!0;N(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){(void 0!==e.base[t]||t in e.base)&&(e.assigned[t]=!1,N(e));e.copy&&delete e.copy[t];return!0},getOwnPropertyDescriptor:function(e,t){var n=e.modified?e.copy:y(e.drafts,t)?e.drafts:e.base,r=Reflect.getOwnPropertyDescriptor(n,t);!r||Array.isArray(n)&&"length"===t||(r.configurable=!0);return r},defineProperty:function(){throw new Error("Immer does not support defining properties on draft objects.")},setPrototypeOf:function(){throw new Error("Immer does not support `setPrototypeOf()`.")}},L={};function D(e){return e.copy||e.base}function N(e){e.modified||(e.modified=!0,e.copy=p(d(e.base),e.drafts),e.drafts=null,e.parent&&N(e.parent))}h(C,(function(e,t){L[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),L.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer does not support deleting properties from arrays: "+t);return C.deleteProperty.call(this,e[0],t)},L.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer does not support setting non-numeric properties on arrays: "+t);return C.set.call(this,e[0],t,n)};var F=Object.freeze({scopes:_,currentScope:A,willFinalize:function(){},createDraft:I});var R={useProxies:"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},B=new(function(){function e(t){a(this,e),p(this,R,t),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this)}return c(e,[{key:"produce",value:function(e,t,n){var r=this;if("function"==typeof e&&"function"!=typeof t){var o=t;return t=e,function(){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o;return r.produce(a,(function(e){var r;return(r=t).call.apply(r,[e,e].concat(n))}))}}if("function"!=typeof t)throw new Error("if first argument is not a function, the second argument to produce should be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("the third argument of a producer should not be set or a function");var i=void 0;if(l(e))if(f(e)){if(void 0===(i=t.call(e,e)))return e}else{this.scopes.push([]);var a=this.createDraft(e);try{i=t.call(a,a),this.willFinalize(i,a,!!n);var c=n&&[],p=n&&[];if(void 0===i||i===a)i=this.finalize(a,[],c,p);else{if(a[s].modified)throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");l(i)&&(i=this.finalize(i)),n&&(c.push({op:"replace",path:[],value:i}),p.push({op:"replace",path:[],value:e}))}}finally{this.currentScope().forEach((function(e){return e.revoke()})),this.scopes.pop()}n&&n(c,p)}else if(void 0===(i=t(e)))return e;return i===u?void 0:i}},{key:"setAutoFreeze",value:function(e){this.autoFreeze=e}},{key:"setUseProxies",value:function(e){this.useProxies=e,p(this,e?F:k)}},{key:"finalize",value:function(e,t,n,r){var o=e[s];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e);if(o.scope!==this.currentScope())return e;if(!o.modified)return o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,n,r),this.onDelete){var i=o.assigned;for(var a in i)i[a]||this.onDelete(o,a)}this.onCopy&&this.onCopy(o),this.autoFreeze&&1===this.scopes.length&&Object.freeze(o.copy),n&&m(o,t,n,r)}return o.copy}},{key:"finalizeTree",value:function(e,t,n,r){var o=this,i=e[s];i&&(e=this.useProxies?i.copy:i.copy=d(i.draft));var a=this.onAssign;return h(e,(function c(u,s,p){var d=!!i&&p===e;if(f(s)){if(p[u]=s=n&&d&&!i.assigned[u]?o.finalize(s,t.concat(u),n,r):o.finalize(s),d&&s===i.base[u])return}else{if(d&&v(s,i.base[u]))return;l(s)&&!Object.isFrozen(s)&&h(s,c)}d&&a&&a(i,u,s)})),e}}]),e}()),U=B.produce;U((function(e,t){for(var n=0;n<t.length;n++){var r=t[n],o=r.path;if(0===o.length&&"replace"===r.op)e=r.value;else{for(var a=e,c=0;c<o.length-1;c++)if(!(a=a[o[c]])||"object"!==(void 0===a?"undefined":i(a)))throw new Error("Cannot apply patch, path doesn't resolve: "+o.join("/"));var u=o[o.length-1];switch(r.op){case"replace":case"add":a[u]=r.value;break;case"remove":if(Array.isArray(a)){if(u!==a.length-1)throw new Error("Only the last index of an array can be removed, index: "+u+", length: "+a.length);a.length-=1}else delete a[u];break;default:throw new Error("Unsupported patch operation: "+r.op)}}}return e}));t.a=U}).call(this,n("8oxB"))},XXAI:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"set",(function(){return J})),n.d(r,"get",(function(){return M})),n.d(r,"remove",(function(){return W})),n.d(r,"list",(function(){return q})),n.d(r,"destroy",(function(){return Q})),n.d(r,"withLocalList",(function(){return H}));var o=n("8RZD"),i=n("q1tI"),a=n.n(i),c=n("i8i4"),u=n.n(c),s=n("V/h/");function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),e}function h(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?v(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return function(n){function r(){var e,t;l(this,r);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return g(v(t=h(this,(e=y(r)).call.apply(e,[this].concat(o)))),"state",{component:null}),t}return m(r,n),d(r,[{key:"componentDidMount",value:function(){var t=this;e().then((function(e){t.setState({component:e.default})}))}},{key:"render",value:function(){var e=this.state.component;return e?a.a.createElement(e,this.props):t}}]),r}(i.Component)};n("isNF");function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var T=function(e){function t(){var e,n,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,c=new Array(a),u=0;u<a;u++)c[u]=arguments[u];return r=this,i=(e=P(t)).call.apply(e,[this].concat(c)),n=!i||"object"!==O(i)&&"function"!=typeof i?S(r):i,z(S(n),"state",{file:null}),z(S(n),"uploadFile",(function(e){var t="".concat(n.props.fileId,"-").concat(e.name);Object(o.z)("https://api-grocery.zjh-im.now.sh/upload",e,"file",{id:t}).then((function(){(n.props.onSuccess||function(){})("https://images-repo.sgp1.digitaloceanspaces.com/".concat(t))}))})),z(S(n),"handleOnChooseFile",(function(){n.fileInput&&n.fileInput.click()})),z(S(n),"handleFileSelect",(function(e){var t=e.target.files[0];t&&n.uploadFile(t)})),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this;return[a.a.createElement("input",{ref:function(t){return e.fileInput=t},type:"file",accept:this.props.accept,className:"file-input",onChange:this.handleFileSelect,onClick:function(e){e.target.value=null}}),this.props.children({select:this.handleOnChooseFile})]}}])&&j(n.prototype,r),i&&j(n,i),t}(a.a.PureComponent),x=function(e){return a.a.createElement("svg",e,a.a.createElement("path",{d:"M3 6.5V3.584c0-.51.022-1.062.363-1.44.157-.174.355-.288.59-.26C4.889 1.996 5 3.316 5 4.26v2.806c0 .788-.143 1.602-.673 2.184-.694.763-1.682 1.205-2.68.022C1.137 8.669 1 7.85 1 7.064V.5"}))};x.defaultProps={width:"6",height:"11",viewBox:"0 0 6 11",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var k=function(e){e.titles;var t=e.posts,n=e.activePostIdx,r=e.onTitleClick;return a.a.createElement("ul",null,t.map((function(e,t){var o=e.title,i=e.id,c=n===t;return a.a.createElement("li",{onClick:function(){r(t)},className:"".concat(c?"active":"")},a.a.createElement("span",{className:"title"},o),a.a.createElement(T,{fileId:i,onSuccess:console.log},(function(e){var t=e.select;return a.a.createElement("span",{className:"actions",onClick:function(e){e.stopPropagation(),t()}},a.a.createElement(x,null))})))})))},_=function(e){var t=e.api,n=e.postListUpdater,r=e.Persistor,o=e.editingPost,i=e.refresh;return function(e,a){var c=e.error,u=e.success;e.warn;t.update(a.getOption("contentId"),a.doc.getValue(),o.title).then((function(e){r.remove(e.id),i(),e.postType="published",n((function(t){return t.map((function(t){return t.id===e.id?e:t}))})),u("博文已更新")})).catch((function(){c("博文更新失败")}))}},A=function(e,t){var n=e.Persistor,r=e.postListUpdater,o=e.api,i=e.active;return function(e,a){var c=e.error,u=e.success,s=(e.warn,a.getOption("contentId"));n.remove(s),r((function(e){return e.filter((function(e){return e.id!==s}))})),"draft"!==t?o.delete(s).then((function(){i(0),u("博文永久删除")})).catch((function(e){c("博文删除失败")})):u("博文已经删除")}},I=function(e){var t=e.Persistor,n=e.api,r=e.postListUpdater;return function(e,o){var i=e.error,a=e.success,c=(e.warn,o.getOption("newPostTitle")),u=o.getOption("contentId"),s=t.get(u).title,f=o.doc.getValue();c||s?f?n.create(c||s,f).then((function(e){t.remove(u),r((function(t){t[0]=e,t[0].postType="published"})),a("博文创建成功")})).catch((function(e){i("博文创建失败")})):i("内容不能为空!"):i("标题不能为空!")}},C=n("1EKS"),L=n.n(C),D=function(e){var t=e.Persistor,n=e.postListUpdater,r=e.active;return function(e,o,i){var a=e.error,c=(e.success,e.warn,i.argString&&i.argString.trim());if(c){o.setOption("newPostTitle",c);var u=L()(Date.now()).slice(16),s={title:c,id:u,postType:"draft",content:""};t.set(u,s),n((function(e){e.unshift(s)}),(function(){r(0)}))}else a("标题不能为空: new &lt;title&gt;")}},N=function(e,t){e.api,e.postListUpdater,e.active;var n=e.exit,r=(e.Persistor,function(e,n){return{draft:["publish"],published:["update"]}[t].includes(n)?e:function(e){(0,e.error)("非法命令")}});return[{name:"update",fn:r(_(e),"update")},{name:"deleteThisPostForever",fn:A(e,t)},{name:"publish",fn:r(I(e),"publish")},{name:"exit",fn:function(){n()}},{name:"new",fn:D(e)}]};function F(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var V=new RegExp("^pm-persistor-"),J=function(e,t){localStorage.setItem("pm-persistor-"+e,JSON.stringify(t)),localStorage.setItem("pm-time-stamp",Date.now())},M=function(e){if(e)return JSON.parse(localStorage.getItem("pm-persistor-"+e))},Z=function(e){if(e)return JSON.parse(localStorage.getItem(e))},K=function(){return Object.keys(localStorage).filter((function(e){return V.test(e)}))},W=function(e){localStorage.removeItem("pm-persistor-"+e)},q=function(){return K().map(Z)},H=function(e){var t=q(),n={};if(e.forEach((function(e){var t=e.id;n[t]=!0})),!e.length)return t.map((function(e){return B({postType:"draft"},e)}));var r=t.filter((function(e){var t=e.id;return!n[t]}));return[].concat(F(r.map((function(e){return B({postType:"draft"},e)}))),F(e.map((function(e){return B({postType:"published"},e)}))))},Q=function(){K().forEach((function(e){localStorage.removeItem(e)}))};function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e,t){return(ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ne=n("N0Pr").version,re=w((function(){return Promise.all([n.e(1),n.e(11)]).then(n.bind(null,"0BQj"))}),a.a.createElement("div",{style:{width:"calc(50% - 15px)",height:"100%",border:"dotted 1px #000",background:"#f0f0f0"}})),oe=function(e){function t(e){var n,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,i=G(t).call(this,e),n=!i||"object"!==Y(i)&&"function"!=typeof i?$(o):i,te($(n),"active",(function(e){n.setState({activePostIdx:e})})),te($(n),"updatePostList",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return null};Array.isArray(e)?n.setState({postList:e}):n.setState((function(t){return{postList:Object(s.a)(t.postList,e)}}),t)})),te($(n),"buildEdtCls",(function(){var e=n.state.postList[n.state.activePostIdx]||n.state.postList[0],t=!!M(e.id),r="normal-file";return"draft"===e.postType&&t&&(r="new-file"),"published"===e.postType&&t&&(r="changed-file"),"editor-wrapper "+r})),te($(n),"titleFormatter",(function(e){return"".concat(e.title)})),te($(n),"refresh",(function(){n.setState({updateStamp:Date.now()})})),te($(n),"getEditingPostTitle",(function(){return(n.state.postList[n.state.activePostIdx]||n.state.postList[0]).title})),te($(n),"handleEditorContentChange",(function(e,t){var r=n.state.postList[n.state.activePostIdx]||n.state.postList[0];J(e,{title:n.getEditingPostTitle(),postType:r.type,id:e,content:t})})),te($(n),"renderTitleList",(function(){return a.a.createElement("div",{className:"side-list-col"},a.a.createElement(k,{titles:n.state.postList.map(n.titleFormatter),posts:n.state.postList,onTitleClick:n.active,activePostIdx:n.state.activePostIdx}))})),te($(n),"renderEditor",(function(){var e=n.state.postList[n.state.activePostIdx]||n.state.postList[0],t=M(e.id),o=t&&void 0!==t.content?t.content:e.content||"";return a.a.createElement("div",{className:n.buildEdtCls(),"data-v":ne},a.a.createElement(re,{value:o,contentId:e.id,backgroundColor:"#f2f2f2",onSave:n.handleEditorContentChange,exArr:N({api:n.props.api,postListUpdater:n.updatePostList,editingPost:e,refresh:n.refresh,active:n.active,exit:n.props.exit,Persistor:r},e.postType)}))})),n.state={activePostIdx:0,updateStamp:Date.now(),postList:n.props.posts},n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ee(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return a.a.createElement("div",{className:"pane"},this.renderTitleList(),this.renderEditor())}}])&&X(n.prototype,o),i&&X(n,i),t}(a.a.PureComponent),ie=(n("Zse/"),function(e,t,n){var r=Object(o.a)("#gui");r.classList.add("fullscreen"),u.a.render(a.a.createElement(oe,{posts:e,api:t,exit:n}),r)});function ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ce(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ae(Object(n),!0).forEach((function(t){ue(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ue(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var se="https://api-grocery.zjh-im.now.sh/z",fe={create:"".concat(se,"/post/create"),update:"".concat(se,"/post/update"),delete:"".concat(se,"/post/delete"),list:"".concat(se,"/posts")},le=function(e){var t=e?{create:function(t,n){return Object(o.t)(fe.create,"POST",ce({title:t,content:n},e))},update:function(t,n,r){return Object(o.t)(fe.update,"POST",ce({id:t,title:r,content:n},e))},delete:function(t){return Object(o.t)(fe.delete,"POST",ce({id:t},e))}}:{create:function(){return Promise.resolve()},update:function(){return Promise.resolve()},delete:function(){return Promise.resolve()}};return ce({list:function(){return Object(o.u)(fe.list)}},t)};function pe(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}var de,he,ye=Object(o.e)("pm","pm [access token]","posts manager for my blog."),ve=function(e){localStorage.setItem("p-c-key",JSON.stringify(e))};t.default={doc:ye,shortopts:"e",handler:(de=regeneratorRuntime.mark((function e(t,n,r,i){var a,c,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i.restParams,!t.e){e.next=4;break}return u.a.unmountComponentAtNode(Object(o.a)("#gui")),e.abrupt("return","Goodbye");case 4:return a=t.user&&t.password?{user:t.user,password:t.password}:JSON.parse(localStorage.getItem("p-c-key"))||null,ve(a),c=le(a),e.next=10,c.list();case 10:return s=e.sent,e.abrupt("return",new Promise((function(e,t){try{ie(H(s),c,(function(){e(),Object(o.a)("#gui").classList.remove("fullscreen"),setTimeout((function(){Terminal&&Terminal.exec("pm -e")}))}))}catch(e){return"Fail to fetch posts"}})));case 12:case"end":return e.stop()}}),e)})),he=function(){var e=this,t=arguments;return new Promise((function(n,r){var o=de.apply(e,t);function i(e){pe(o,n,r,i,a,"next",e)}function a(e){pe(o,n,r,i,a,"throw",e)}i(void 0)}))},function(e,t,n,r){return he.apply(this,arguments)})}},"Zse/":function(e,t,n){},isNF:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,