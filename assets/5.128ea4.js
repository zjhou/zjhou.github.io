(this.webpackJsonp=this.webpackJsonp||[]).push([[5],{"8oxB":function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&d())}function d(){if(!f){var e=c(p);f=!0;for(var t=s.length;t;){for(u=s,s=[];++l<t;)u&&u[l].run();l=-1,t=s.length}u=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||f||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},N0Pr:function(e){e.exports={_from:"@zhoujiahao/pm@^1.0.10",_id:"@zhoujiahao/pm@1.0.28",_inBundle:!1,_integrity:"sha512-7JlldbjgEl9gcOsnT8vle8w8QMJIYEPEoBIOx90vP7zY5/84lpHYIP6LlkiQ53Hqi381zxdQ77MTQAoRrac/mA==",_location:"/@zhoujiahao/pm",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"@zhoujiahao/pm@^1.0.10",name:"@zhoujiahao/pm",escapedName:"@zhoujiahao%2fpm",scope:"@zhoujiahao",rawSpec:"^1.0.10",saveSpec:null,fetchSpec:"^1.0.10"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/pm/-/pm-1.0.28.tgz",_shasum:"f25d931cfe86d73437f424cf70f79d321cb1404d",_spec:"@zhoujiahao/pm@^1.0.10",_where:"/home/travis/build/zjhou/zjh.im/src",author:{name:"ZjHOU",email:"z@zjh.im"},bugs:{url:"https://github.com/zjhou/toyBox/issues"},bundleDependencies:!1,dependencies:{"@zhoujiahao/editor":"^1.1.11",imer:"^0.0.1","strapi-sdk-javascript":"^0.3.3"},deprecated:!1,description:"zjh.im - post manager",directories:{lib:"lib",test:"__tests__"},files:["lib"],gitHead:"10ce6babe2aefc7dd7d910bfceb5237c3fcfdcae",homepage:"https://github.com/zjhou/toyBox#readme",keywords:["post","manager","pane.","editor.","code","mirror"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/pm",peerDependencies:{"@zhoujiahao/utils":"^1.0.14","@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},repository:{type:"git",url:"git+https://github.com/zjhou/toyBox.git"},scripts:{test:'echo "Error: run tests from root" && exit 1'},version:"1.0.28"}},"V/h/":function(e,t,n){"use strict";(function(e){var n,r,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u="undefined"!=typeof Symbol?Symbol("immer-nothing"):(o=!0,(r="immer-nothing")in(n={})?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,n),s="undefined"!=typeof Symbol?Symbol("immer-state"):"__$immer_state";function f(e){return!!e&&!!e[s]}function l(e){if(!e)return!1;if("object"!==(void 0===e?"undefined":i(e)))return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=Object.assign||function(e,t){for(var n in t)y(t,n)&&(e[n]=t[n]);return e};function d(e){if(Array.isArray(e))return e.slice();var t=void 0===e.__proto__?Object.create(null):{};return p(t,e)}function h(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++)t(n,e[n],e);else for(var r in e)t(r,e[r],e)}function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function v(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function m(e,t,n,r){Array.isArray(e.base)?function(e,t,n,r){for(var o=e.base,i=e.copy,a=e.assigned,c=Math.min(o.length,i.length),u=0;u<c;u++)if(a[u]&&o[u]!==i[u]){var s=t.concat(u);n.push({op:"replace",path:s,value:i[u]}),r.push({op:"replace",path:s,value:o[u]})}if(c<i.length){for(var f=c;f<i.length;f++)n.push({op:"add",path:t.concat(f),value:i[f]});r.push({op:"replace",path:t.concat("length"),value:o.length})}else if(c<o.length){n.push({op:"replace",path:t.concat("length"),value:i.length});for(var l=c;l<o.length;l++)r.push({op:"add",path:t.concat(l),value:o[l]})}}(e,t,n,r):function(e,t,n,r){var o=e.base,i=e.copy;h(e.assigned,(function(e,a){var c=o[e],u=i[e],s=a?e in o?"replace":"add":"remove";if(c!==o||"replace"!==s){var f=t.concat(e);n.push("remove"===s?{op:s,path:f}:{op:s,path:f,value:u}),r.push("add"===s?{op:"remove",path:f}:"remove"===s?{op:"add",path:f,value:c}:{op:"replace",path:f,value:c})}}))}(e,t,n,r)}var b={},g=[],w=function(){return g[g.length-1]};function O(e,t){var n=void 0;if(f(e)){var r=e[s];r.finalizing=!0,n=d(r.draft),r.finalizing=!1}else n=d(e);h(e,(function(e){Object.defineProperty(n,""+e,function(e){return b[e]||(b[e]={configurable:!0,enumerable:!0,get:function(){return function(e,t){z(e);var n=P(e)[t];if(!e.finalizing&&n===e.base[t]&&l(n))return E(e),e.copy[t]=O(n,e);return n}(this[s],e)},set:function(t){!function(e,t,n){if(z(e),e.assigned[t]=!0,!e.modified){if(v(P(e)[t],n))return;S(e),E(e)}e.copy[t]=n}(this[s],e,t)}})}(""+e))}));var o={scope:t?t.scope:w(),modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:n,copy:null,revoke:j,revoked:!1};return function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})}(n,s,o),o.scope.push(o),n}function j(){this.revoked=!0}function P(e){return e.copy||e.base}function S(e){e.modified||(e.modified=!0,e.parent&&S(e.parent))}function E(e){e.copy||(e.copy=d(e.base))}function z(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(e.copy||e.base))}function T(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--)if(void 0===t[r[o]]&&!y(t,r[o]))return!0;return r.length!==Object.keys(t).length}function x(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var k=Object.freeze({scopes:g,currentScope:w,willFinalize:function(e,t,n){var r=w();r.forEach((function(e){return e.finalizing=!0})),void 0!==e&&e!==t||(n&&function e(t){if(!t||"object"!==(void 0===t?"undefined":i(t)))return;var n=t[s];if(!n)return;var r=n.base,o=n.draft,a=n.assigned;if(Array.isArray(t)){if(x(n)){if(S(n),a.length=!0,o.length<r.length)for(var c=o.length;c<r.length;c++)a[c]=!1;else for(var u=r.length;u<o.length;u++)a[u]=!0;for(var f=0;f<o.length;f++)void 0===a[f]&&e(o[f])}}else Object.keys(o).forEach((function(t){void 0!==r[t]||y(r,t)?a[t]||e(o[t]):(a[t]=!0,S(n))})),Object.keys(r).forEach((function(e){void 0!==o[e]||y(o,e)||(a[e]=!1,S(n))}))}(t),function(e){for(var t=e.length-1;t>=0;t--){var n=e[t];!1===n.modified&&(Array.isArray(n.base)?x(n)&&S(n):T(n)&&S(n))}}(r))},createDraft:O}),_=[],A=function(){return _[_.length-1]};function I(e,t){var n={scope:t?t.scope:A(),modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},r=Array.isArray(e)?Proxy.revocable([n],C):Proxy.revocable(n,L),o=r.revoke,i=r.proxy;return n.draft=i,n.revoke=o,n.scope.push(n),i}var L={get:function(e,t){if(t===s)return e;var n=e.drafts;if(!e.modified&&y(n,t))return n[t];var r=D(e)[t];if(e.finalized||!l(r))return r;if(e.modified){if(r!==e.base[t])return r;n=e.copy}return n[t]=I(r,e)},has:function(e,t){return t in D(e)},ownKeys:function(e){return Reflect.ownKeys(D(e))},set:function(e,t,n){if(!e.modified){if(n?v(e.base[t],n)||n===e.drafts[t]:v(e.base[t],n)&&t in e.base)return!0;N(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){(void 0!==e.base[t]||t in e.base)&&(e.assigned[t]=!1,N(e));e.copy&&delete e.copy[t];return!0},getOwnPropertyDescriptor:function(e,t){var n=e.modified?e.copy:y(e.drafts,t)?e.drafts:e.base,r=Reflect.getOwnPropertyDescriptor(n,t);!r||Array.isArray(n)&&"length"===t||(r.configurable=!0);return r},defineProperty:function(){throw new Error("Immer does not support defining properties on draft objects.")},setPrototypeOf:function(){throw new Error("Immer does not support `setPrototypeOf()`.")}},C={};function D(e){return e.copy||e.base}function N(e){e.modified||(e.modified=!0,e.copy=p(d(e.base),e.drafts),e.drafts=null,e.parent&&N(e.parent))}h(L,(function(e,t){C[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),C.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer does not support deleting properties from arrays: "+t);return L.deleteProperty.call(this,e[0],t)},C.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer does not support setting non-numeric properties on arrays: "+t);return L.set.call(this,e[0],t,n)};var F=Object.freeze({scopes:_,currentScope:A,willFinalize:function(){},createDraft:I});var U={useProxies:"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},B=new(function(){function e(t){a(this,e),p(this,U,t),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this)}return c(e,[{key:"produce",value:function(e,t,n){var r=this;if("function"==typeof e&&"function"!=typeof t){var o=t;return t=e,function(){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o;return r.produce(a,(function(e){var r;return(r=t).call.apply(r,[e,e].concat(n))}))}}if("function"!=typeof t)throw new Error("if first argument is not a function, the second argument to produce should be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("the third argument of a producer should not be set or a function");var i=void 0;if(l(e))if(f(e)){if(void 0===(i=t.call(e,e)))return e}else{this.scopes.push([]);var a=this.createDraft(e);try{i=t.call(a,a),this.willFinalize(i,a,!!n);var c=n&&[],p=n&&[];if(void 0===i||i===a)i=this.finalize(a,[],c,p);else{if(a[s].modified)throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");l(i)&&(i=this.finalize(i)),n&&(c.push({op:"replace",path:[],value:i}),p.push({op:"replace",path:[],value:e}))}}finally{this.currentScope().forEach((function(e){return e.revoke()})),this.scopes.pop()}n&&n(c,p)}else if(void 0===(i=t(e)))return e;return i===u?void 0:i}},{key:"setAutoFreeze",value:function(e){this.autoFreeze=e}},{key:"setUseProxies",value:function(e){this.useProxies=e,p(this,e?F:k)}},{key:"finalize",value:function(e,t,n,r){var o=e[s];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e);if(o.scope!==this.currentScope())return e;if(!o.modified)return o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,n,r),this.onDelete){var i=o.assigned;for(var a in i)i[a]||this.onDelete(o,a)}this.onCopy&&this.onCopy(o),this.autoFreeze&&1===this.scopes.length&&Object.freeze(o.copy),n&&m(o,t,n,r)}return o.copy}},{key:"finalizeTree",value:function(e,t,n,r){var o=this,i=e[s];i&&(e=this.useProxies?i.copy:i.copy=d(i.draft));var a=this.onAssign;return h(e,(function c(u,s,p){var d=!!i&&p===e;if(f(s)){if(p[u]=s=n&&d&&!i.assigned[u]?o.finalize(s,t.concat(u),n,r):o.finalize(s),d&&s===i.base[u])return}else{if(d&&v(s,i.base[u]))return;l(s)&&!Object.isFrozen(s)&&h(s,c)}d&&a&&a(i,u,s)})),e}}]),e}()),J=B.produce;J((function(e,t){for(var n=0;n<t.length;n++){var r=t[n],o=r.path;if(0===o.length&&"replace"===r.op)e=r.value;else{for(var a=e,c=0;c<o.length-1;c++)if(!(a=a[o[c]])||"object"!==(void 0===a?"undefined":i(a)))throw new Error("Cannot apply patch, path doesn't resolve: "+o.join("/"));var u=o[o.length-1];switch(r.op){case"replace":case"add":a[u]=r.value;break;case"remove":if(Array.isArray(a)){if(u!==a.length-1)throw new Error("Only the last index of an array can be removed, index: "+u+", length: "+a.length);a.length-=1}else delete a[u];break;default:throw new Error("Unsupported patch operation: "+r.op)}}}return e}));t.a=J}).call(this,n("8oxB"))},XXAI:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"set",(function(){return C})),n.d(r,"get",(function(){return D})),n.d(r,"remove",(function(){return U})),n.d(r,"list",(function(){return B})),n.d(r,"destroy",(function(){return R})),n.d(r,"withLocalList",(function(){return J}));var o=n("8RZD"),i=n("q1tI"),a=n.n(i),c=n("i8i4"),u=n.n(c),s=n("V/h/");function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),e}function h(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?v(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return function(n){function r(){var e,t;l(this,r);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return g(v(t=h(this,(e=y(r)).call.apply(e,[this].concat(o)))),"state",{component:null}),t}return m(r,n),d(r,[{key:"componentDidMount",value:function(){var t=this;e().then((function(e){t.setState({component:e.default})}))}},{key:"render",value:function(){var e=this.state.component;return e?a.a.createElement(e,this.props):t}}]),r}(i.Component)},O=function(e){var t=e.posts,n=e.activePostIdx,r=e.onTitleClick;return a.a.createElement("ul",null,t.map((function(e,t){var o=e.title,i=(e.id,e.postType,e.attachment_url,n===t);return a.a.createElement("li",{onClick:function(){r(t)},className:"".concat(i?"active":"")},a.a.createElement("span",{className:"title"},o))})))},j=function(e){var t=e.api,n=e.postListUpdater,r=e.Persistor,o=e.editingPost,i=e.refresh;return function(e,a){var c=e.error,u=e.success;e.warn;t.update(a.getOption("contentId"),a.doc.getValue(),o.title).then((function(e){r.remove(e.id),i(),e.postType="published",n((function(t){t.find((function(t){return t.id===e.id})).content=e.content})),u("博文已更新")})).catch((function(){c("博文更新失败")}))}},P=function(e,t){var n=e.Persistor,r=e.postListUpdater,o=e.api,i=e.active;return function(e,a){var c=e.error,u=e.success,s=(e.warn,a.getOption("contentId"));n.remove(s),r((function(e){return e.filter((function(e){return e.id!==s}))})),"draft"!==t?o.delete(s).then((function(){i(0),u("博文永久删除")})).catch((function(e){c("博文删除失败")})):u("博文已经删除")}},S=function(e){var t=e.Persistor,n=e.api,r=e.postListUpdater;return function(e,o){var i=e.error,a=e.success,c=(e.warn,o.getOption("newPostTitle")),u=o.getOption("contentId"),s=t.get(u).title,f=o.doc.getValue();c||s?f?n.create(c||s,f).then((function(e){t.remove(u),r((function(t){t[0]=e,t[0].postType="published"})),a("博文创建成功")})).catch((function(e){i("博文创建失败")})):i("内容不能为空!"):i("标题不能为空!")}},E=n("1EKS"),z=n.n(E),T=function(e){var t=e.Persistor,n=e.postListUpdater,r=e.active;return function(e,o,i){var a=e.error,c=(e.success,e.warn,i.argString&&i.argString.trim());if(c){o.setOption("newPostTitle",c);var u=z()(Date.now()).slice(16),s={title:c,id:u,postType:"draft",content:""};t.set(u,s),n((function(e){e.unshift(s)}),(function(){r(0)}))}else a("标题不能为空: new &lt;title&gt;")}},x=function(e,t){e.api,e.postListUpdater,e.active;var n=e.exit,r=(e.Persistor,function(e,n){return{draft:["publish"],published:["update"]}[t].includes(n)?e:function(e){(0,e.error)("非法命令")}});return[{name:"update",fn:r(j(e),"update")},{name:"deleteThisPostForever",fn:P(e,t)},{name:"publish",fn:r(S(e),"publish")},{name:"exit",fn:function(){n()}},{name:"new",fn:T(e)}]};function k(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L=new RegExp("^pm-persistor-"),C=function(e,t){localStorage.setItem("pm-persistor-"+e,JSON.stringify(t)),localStorage.setItem("pm-time-stamp",Date.now())},D=function(e){if(e)return JSON.parse(localStorage.getItem("pm-persistor-"+e))},N=function(e){if(e)return JSON.parse(localStorage.getItem(e))},F=function(){return Object.keys(localStorage).filter((function(e){return L.test(e)}))},U=function(e){localStorage.removeItem("pm-persistor-"+e)},B=function(){return F().map(N)},J=function(e){var t=B(),n={};if(e.forEach((function(e){var t=e.id;n[t]=!0})),!e.length)return t.map((function(e){return A({postType:"draft"},e)}));var r=t.filter((function(e){var t=e.id;return!n[t]}));return[].concat(k(r.map((function(e){return A({postType:"draft"},e)}))),k(e.map((function(e){return A({postType:"published"},e)}))))},R=function(){F().forEach((function(e){localStorage.removeItem(e)}))};n("isNF");function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e){return(Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function H(e,t){return(H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var K=function(e){function t(){var e,n,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,c=new Array(a),u=0;u<a;u++)c[u]=arguments[u];return r=this,i=(e=Q(t)).call.apply(e,[this].concat(c)),n=!i||"object"!==M(i)&&"function"!=typeof i?q(r):i,Z(q(n),"state",{file:null,uploading:!1}),Z(q(n),"uploadFile",(function(e){var t="".concat(n.props.fileId,"-").concat(e.name);n.setState({uploading:!0}),Object(o.z)("https://api-grocery.zjh-im.now.sh/upload",e,"file",{id:t}).then((function(){n.setState({uploading:!1}),(n.props.onSuccess||function(){})("https://images-repo.sgp1.digitaloceanspaces.com/".concat(t))})).catch((function(){n.setState({uploading:!1})}))})),Z(q(n),"handleOnChooseFile",(function(){n.fileInput&&n.fileInput.click()})),Z(q(n),"handleFileSelect",(function(e){var t=e.target.files[0];t&&n.uploadFile(t)})),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&H(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this;return[a.a.createElement("input",{ref:function(t){return e.fileInput=t},type:"file",accept:this.props.accept,className:"file-input",onChange:this.handleFileSelect,onClick:function(e){e.target.value=null}}),this.props.children({select:this.handleOnChooseFile,uploading:this.state.uploading})]}}])&&V(n.prototype,r),i&&V(n,i),t}(a.a.PureComponent),Y=(n("o5JI"),function(e){var t=e.size,n=void 0===t?3:t;return a.a.createElement("div",{className:"bg-blink-dot",style:{width:n,height:n}})}),X=function(e){return a.a.createElement("svg",e,a.a.createElement("path",{d:"M3 6.5V3.584c0-.51.022-1.062.363-1.44.157-.174.355-.288.59-.26C4.889 1.996 5 3.316 5 4.26v2.806c0 .788-.143 1.602-.673 2.184-.694.763-1.682 1.205-2.68.022C1.137 8.669 1 7.85 1 7.064V.5"}))};X.defaultProps={width:"6",height:"11",viewBox:"0 0 6 11",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var G=function(e){var t=e.onSuccess,n=e.fileId,r=e.hasAttachAlready;return a.a.createElement(K,{fileId:n,onSuccess:t},(function(e){var t=e.select,n=e.uploading;return a.a.createElement("span",{className:"actions ".concat(r?"hasAttach":""),onClick:t},n?a.a.createElement(Y,null):a.a.createElement(X,null))}))};function $(e){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ee(e){return(ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function te(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var oe=n("N0Pr").version,ie=w((function(){return Promise.all([n.e(1),n.e(11)]).then(n.bind(null,"0BQj"))}),a.a.createElement("div",{style:{width:"calc(50% - 15px)",height:"100%",border:"dotted 1px #000",background:"#f0f0f0"}})),ae=function(e){function t(e){var n,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,i=ee(t).call(this,e),n=!i||"object"!==$(i)&&"function"!=typeof i?te(o):i,re(te(n),"active",(function(e){n.setState({activePostIdx:e})})),re(te(n),"updatePostList",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return null};Array.isArray(e)?n.setState({postList:e}):n.setState((function(t){return{postList:Object(s.a)(t.postList,e)}}),t)})),re(te(n),"buildEdtCls",(function(){var e=n.state.postList[n.state.activePostIdx]||n.state.postList[0],t=!!D(e.id),r="normal-file";return"draft"===e.postType&&t&&(r="new-file"),"published"===e.postType&&t&&(r="changed-file"),"editor-wrapper "+r})),re(te(n),"titleFormatter",(function(e){return"".concat(e.title)})),re(te(n),"refresh",(function(){n.setState({updateStamp:Date.now()})})),re(te(n),"getEditingPostTitle",(function(){return(n.state.postList[n.state.activePostIdx]||n.state.postList[0]).title})),re(te(n),"handleEditorContentChange",(function(e,t){var r=n.state.postList[n.state.activePostIdx]||n.state.postList[0];C(e,{title:n.getEditingPostTitle(),postType:r.type,id:e,content:t})})),re(te(n),"handleUploadFile",(function(e){return function(t){n.props.api.update(e,"","",t).then((function(){n.updatePostList((function(n){n.find((function(t){var n=t.id;return e===n})).attachment_url=t})),n.refresh()}))}})),re(te(n),"renderTitleList",(function(){return a.a.createElement("div",{className:"side-list-col"},a.a.createElement(O,{titles:n.state.postList.map(n.titleFormatter),update:n.props.api.update,postListUpdater:n.updatePostList,refresh:n.refresh,posts:n.state.postList,onTitleClick:n.active,activePostIdx:n.state.activePostIdx}))})),re(te(n),"renderAttachmentBtn",(function(){var e=n.state.postList[n.state.activePostIdx]||n.state.postList[0],t=e.id,r=e.postType,o=e.attachment_url;return"published"===r?a.a.createElement(G,{fileId:t,hasAttachAlready:!!o,onSuccess:n.handleUploadFile(t)}):null})),re(te(n),"renderEditor",(function(){var e=n.state.postList[n.state.activePostIdx]||n.state.postList[0],t=D(e.id),o=t&&void 0!==t.content?t.content:e.content||"";return a.a.createElement("div",{className:n.buildEdtCls(),"data-v":oe},a.a.createElement(ie,{value:o,contentId:e.id,backgroundColor:"#f2f2f2",onSave:n.handleEditorContentChange,exArr:x({api:n.props.api,postListUpdater:n.updatePostList,editingPost:e,refresh:n.refresh,active:n.active,exit:n.props.exit,Persistor:r},e.postType)}),n.renderAttachmentBtn(),e.attachment_url&&a.a.createElement("img",{src:e.attachment_url}))})),n.state={activePostIdx:0,updateStamp:Date.now(),postList:n.props.posts},n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return a.a.createElement("div",{className:"pane"},this.renderTitleList(),this.renderEditor())}}])&&W(n.prototype,o),i&&W(n,i),t}(a.a.PureComponent),ce=(n("Zse/"),function(e,t,n){var r=Object(o.a)("#gui");r.classList.add("fullscreen"),u.a.render(a.a.createElement(ae,{posts:e,api:t,exit:n}),r)});function ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ue(Object(n),!0).forEach((function(t){fe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var le="https://api-grocery.zjh-im.now.sh/z",pe={create:"".concat(le,"/post/create"),update:"".concat(le,"/post/update"),delete:"".concat(le,"/post/delete"),list:"".concat(le,"/posts")},de=function(e){var t=e?{create:function(t,n){return Object(o.t)(pe.create,"POST",se({title:t,content:n},e))},update:function(t,n,r,i){return Object(o.t)(pe.update,"POST",se({id:t,title:r,content:n,attachment_url:i},e))},delete:function(t){return Object(o.t)(pe.delete,"POST",se({id:t},e))}}:{create:function(){return Promise.resolve()},update:function(){return Promise.resolve()},delete:function(){return Promise.resolve()}};return se({list:function(){return Object(o.u)(pe.list)}},t)};function he(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}var ye,ve,me=Object(o.e)("pm","pm [access token]","posts manager for my blog."),be=function(e){localStorage.setItem("p-c-key",JSON.stringify(e))};t.default={doc:me,shortopts:"e",handler:(ye=regeneratorRuntime.mark((function e(t,n,r,i){var a,c,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i.restParams,!t.e){e.next=4;break}return u.a.unmountComponentAtNode(Object(o.a)("#gui")),e.abrupt("return","Goodbye");case 4:return a=t.user&&t.password?{user:t.user,password:t.password}:JSON.parse(localStorage.getItem("p-c-key"))||null,be(a),c=de(a),e.next=10,c.list();case 10:return s=e.sent,e.abrupt("return",new Promise((function(e,t){try{ce(J(s),c,(function(){e(),Object(o.a)("#gui").classList.remove("fullscreen"),setTimeout((function(){Terminal&&Terminal.exec("pm -e")}))}))}catch(e){return"Fail to fetch posts"}})));case 12:case"end":return e.stop()}}),e)})),ve=function(){var e=this,t=arguments;return new Promise((function(n,r){var o=ye.apply(e,t);function i(e){he(o,n,r,i,a,"next",e)}function a(e){he(o,n,r,i,a,"throw",e)}i(void 0)}))},function(e,t,n,r){return ve.apply(this,arguments)})}},"Zse/":function(e,t,n){},isNF:function(e,t,n){},o5JI:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL2FzeW5jLWltcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL3Bvc3QtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL2N1c3RvbS1lZGl0b3ItY29tbWFuZHMvY29tbWFuZHMvdXBkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvbWFuYWdlLXBhbmUvY3VzdG9tLWVkaXRvci1jb21tYW5kcy9jb21tYW5kcy9kZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3BtL2xpYi9tYW5hZ2UtcGFuZS9jdXN0b20tZWRpdG9yLWNvbW1hbmRzL2NvbW1hbmRzL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL2N1c3RvbS1lZGl0b3ItY29tbWFuZHMvY29tbWFuZHMvbmV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvbWFuYWdlLXBhbmUvY3VzdG9tLWVkaXRvci1jb21tYW5kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL3BlcnNpc3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL3VwbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3BtL2xpYi9tYW5hZ2UtcGFuZS9hdHRhY2htZW50LWJ0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL3BhbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3BtL2xpYi9tYW5hZ2UtcGFuZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL2Jsb2ctYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiZSIsImNhbGwiLCJ0aGlzIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsImkiLCJwdXNoIiwicHJvdG90eXBlIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwib2JqIiwia2V5IiwidmFsdWUiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiTk9USElORyIsIkRSQUZUX1NUQVRFIiwiaXNEcmFmdCIsImlzRHJhZnRhYmxlIiwiaXNBcnJheSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJhc3NpZ24iLCJoYXMiLCJzaGFsbG93Q29weSIsInNsaWNlIiwidW5kZWZpbmVkIiwiX19wcm90b19fIiwiY3JlYXRlIiwiZWFjaCIsImNiIiwidGhpbmciLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJpcyIsIngiLCJ5IiwiZ2VuZXJhdGVQYXRjaGVzIiwic3RhdGUiLCJiYXNlUGF0aCIsInBhdGNoZXMiLCJpbnZlcnNlUGF0Y2hlcyIsImJhc2UiLCJjb3B5IiwiYXNzaWduZWQiLCJtaW5MZW5ndGgiLCJNYXRoIiwibWluIiwicGF0aCIsIm9wIiwiX2kiLCJfaTIiLCJnZW5lcmF0ZUFycmF5UGF0Y2hlcyIsImFzc2lnbmVkVmFsdWUiLCJvcmlnVmFsdWUiLCJnZW5lcmF0ZU9iamVjdFBhdGNoZXMiLCJkZXNjcmlwdG9ycyIsInNjb3BlcyIsImN1cnJlbnRTY29wZSIsImNyZWF0ZURyYWZ0IiwicGFyZW50IiwiZHJhZnQiLCJfc3RhdGUiLCJmaW5hbGl6aW5nIiwiZ2V0IiwiYXNzZXJ0VW5yZXZva2VkIiwic291cmNlIiwicHJlcGFyZUNvcHkiLCJfZ2V0Iiwic2V0IiwibW9kaWZpZWQiLCJtYXJrQ2hhbmdlZCIsIl9zZXQiLCJjcmVhdGVQcm9wZXJ0eVByb3h5Iiwic2NvcGUiLCJmaW5hbGl6ZWQiLCJyZXZva2UiLCJyZXZva2VkIiwiY3JlYXRlSGlkZGVuUHJvcGVydHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzT2JqZWN0Q2hhbmdlcyIsImtleXMiLCJoYXNBcnJheUNoYW5nZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJsZWdhY3lQcm94eSIsImZyZWV6ZSIsIndpbGxGaW5hbGl6ZSIsInJlc3VsdCIsImJhc2VEcmFmdCIsIm5lZWRQYXRjaGVzIiwiZm9yRWFjaCIsIm1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkiLCJvYmplY3QiLCJtYXJrQ2hhbmdlc1N3ZWVwIiwic2NvcGVzJDEiLCJjdXJyZW50U2NvcGUkMSIsImNyZWF0ZURyYWZ0JDEiLCJkcmFmdHMiLCJfcmVmIiwiUHJveHkiLCJyZXZvY2FibGUiLCJhcnJheVRyYXBzIiwib2JqZWN0VHJhcHMiLCJwcm94eSIsInNvdXJjZSQxIiwib3duS2V5cyIsIlJlZmxlY3QiLCJtYXJrQ2hhbmdlZCQxIiwiZGVsZXRlUHJvcGVydHkiLCJvd25lciIsInNldFByb3RvdHlwZU9mIiwiZm4iLCJpc05hTiIsInBhcnNlSW50IiwibW9kZXJuUHJveHkiLCJjb25maWdEZWZhdWx0cyIsInVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwib25Bc3NpZ24iLCJvbkRlbGV0ZSIsIm9uQ29weSIsImltbWVyIiwiSW1tZXIiLCJjb25maWciLCJzZXRVc2VQcm94aWVzIiwicHJvZHVjZSIsImJpbmQiLCJyZWNpcGUiLCJwYXRjaExpc3RlbmVyIiwiX3RoaXMiLCJkZWZhdWx0QmFzZSIsIl9sZW4iLCJfa2V5IiwiX3JlY2lwZSIsImZpbmFsaXplIiwicG9wIiwiaXNGcm96ZW4iLCJmaW5hbGl6ZVRyZWUiLCJyb290IiwiX3RoaXMyIiwiZmluYWxpemVQcm9wZXJ0eSIsImluRHJhZnQiLCJwYXRjaCIsIl9pMyIsImpvaW4iLCJhc3luY0NvbXBvbmVudCIsImltcG9ydENvbXBvbmVudCIsImxvYWRlciIsImNvbXBvbmVudCIsInRoZW4iLCJjbXAiLCJzZXRTdGF0ZSIsIkMiLCJDb21wb25lbnQiLCJwb3N0cyIsImFjdGl2ZVBvc3RJZHgiLCJvblRpdGxlQ2xpY2siLCJtYXAiLCJpZHgiLCJpc0FjdGl2ZSIsImlkIiwicG9zdFR5cGUiLCJhdHRhY2htZW50X3VybCIsIm9uQ2xpY2siLCJjbGFzc05hbWUiLCJhcGkiLCJwb3N0TGlzdFVwZGF0ZXIiLCJQZXJzaXN0b3IiLCJlZGl0aW5nUG9zdCIsInJlZnJlc2giLCJjbSIsImVycm9yIiwic3VjY2VzcyIsIndhcm4iLCJ1cGRhdGUiLCJnZXRPcHRpb24iLCJkb2MiLCJnZXRWYWx1ZSIsIm5ld1Bvc3QiLCJyZW1vdmUiLCJvbGRQb3N0TGlzdCIsImZpbmQiLCJjb250ZW50IiwidHlwZSIsImFjdGl2ZSIsInBpZCIsImZpbHRlciIsInAiLCJ0bXBJZCIsInRtcFRpdGxlIiwicGFyYW1zIiwiYXJnU3RyaW5nIiwidHJpbSIsInNldE9wdGlvbiIsImhhc2giLCJEYXRlIiwibm93IiwidW5zaGlmdCIsImJ1aWxkRWRpdG9yQ29tbWFuZHMiLCJ0b29scyIsImV4aXQiLCJleEhhbmRsZXJWYWxpZGF0b3IiLCJleE5hbWUiLCJwdWJsaXNoZWQiLCJpbmNsdWRlcyIsImJ1aWxkVXBkYXRlQ21kIiwiYnVpbGREZWxldGVDbWQiLCJidWlsZENyZWF0ZUNtZCIsImJ1aWxkTmV3Q21kIiwiS0VZX1JFR19FWFAiLCJSZWdFeHAiLCJ2YWwiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicGFyc2UiLCJnZXRJdGVtIiwiX2dldFBlcnNpc3RvcktleXMiLCJrIiwidGVzdCIsInJlbW92ZUl0ZW0iLCJsaXN0Iiwid2l0aExvY2FsTGlzdCIsImFyciIsImxvY2FsTGlzdCIsImlkTWFwIiwibmV3UG9zdHMiLCJkZXN0cm95IiwiVXBsb2FkZXIiLCJmaWxlIiwidXBsb2FkaW5nIiwiZmlsZUlkIiwidXBsb2FkRmlsZSIsIm9uU3VjY2VzcyIsImZpbGVJbnB1dCIsImNsaWNrIiwiZmlsZXMiLCJyZWYiLCJhY2NlcHQiLCJvbkNoYW5nZSIsImhhbmRsZUZpbGVTZWxlY3QiLCJjaGlsZHJlbiIsInNlbGVjdCIsImhhbmRsZU9uQ2hvb3NlRmlsZSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIkJsaW5rRG90Iiwic2l6ZSIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJBdHRhY2htZW50SWNvbiIsIkF0dGFjaG1lbnRCdG4iLCJoYXNBdHRhY2hBbHJlYWR5IiwicmVxdWlyZSIsIkVkaXRvciIsIkFzeW5jSW1wb3J0IiwiYm9yZGVyIiwiYmFja2dyb3VuZCIsIlBhbmUiLCJ1cGRhdGVyRm4iLCJjYkZuIiwicG9zdExpc3QiLCJwcmV2U3RhdGUiLCJsb2NhbENoYW5nZXMiLCJ1cGRhdGVTdGFtcCIsImdldEVkaXRpbmdQb3N0VGl0bGUiLCJ1cmwiLCJ1cGRhdGVQb3N0TGlzdCIsInRhcmdldElkIiwidGl0bGVzIiwidGl0bGVGb3JtYXR0ZXIiLCJoYW5kbGVVcGxvYWRGaWxlIiwiaW5pdENvbnRlbnQiLCJidWlsZEVkdENscyIsImRhdGEtdiIsImNvbnRlbnRJZCIsImJhY2tncm91bmRDb2xvciIsIm9uU2F2ZSIsImhhbmRsZUVkaXRvckNvbnRlbnRDaGFuZ2UiLCJleEFyciIsImJ1aWxkRWRpdG9yRXhBcnIiLCJyZW5kZXJBdHRhY2htZW50QnRuIiwic3JjIiwicmVuZGVyVGl0bGVMaXN0IiwicmVuZGVyRWRpdG9yIiwiJGd1aSIsIiQiLCJjbGFzc0xpc3QiLCJhZGQiLCJSZWFjdERPTSIsInJlbmRlciIsIkJBU0VfVVJMIiwiQVBJIiwiZGVsZXRlIiwiY3JlZGVudGlhbCIsImFjdGlvbnNOZWVkQ3JlZGVudGlhbCIsInJlcSIsImF0dGFjaG1lbnRVUkwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlcUFuZENhY2hlIiwiZG9jVHBsIiwic2F2ZUNyZWRlbnRpYWwiLCJzaG9ydG9wdHMiLCJoYW5kbGVyIiwicGFyYW1zT2JqIiwiY21kU2V0IiwiJHRlcm1pbmFsIiwicmVzdFBhcmFtcyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1c2VyIiwicGFzc3dvcmQiLCJwb3N0U0RLIiwicmVqZWN0IiwicnVuTWFuYWdlUGFuZWwiLCJUZXJtaW5hbCIsImV4ZWMiXSwibWFwcGluZ3MiOiIwRUFDQSxJQU9JQSxFQUNBQyxFQVJBQyxFQUFVQyxFQUFPQyxRQUFVLEdBVS9CLFNBQVNDLElBQ0wsTUFBTSxJQUFJQyxNQUFNLG1DQUVwQixTQUFTQyxJQUNMLE1BQU0sSUFBSUQsTUFBTSxxQ0FzQnBCLFNBQVNFLEVBQVdDLEdBQ2hCLEdBQUlULElBQXFCVSxXQUVyQixPQUFPQSxXQUFXRCxFQUFLLEdBRzNCLElBQUtULElBQXFCSyxJQUFxQkwsSUFBcUJVLFdBRWhFLE9BREFWLEVBQW1CVSxXQUNaQSxXQUFXRCxFQUFLLEdBRTNCLElBRUksT0FBT1QsRUFBaUJTLEVBQUssR0FDL0IsTUFBTUUsR0FDSixJQUVJLE9BQU9YLEVBQWlCWSxLQUFLLEtBQU1ILEVBQUssR0FDMUMsTUFBTUUsR0FFSixPQUFPWCxFQUFpQlksS0FBS0MsS0FBTUosRUFBSyxNQXZDbkQsV0FDRyxJQUVRVCxFQURzQixtQkFBZlUsV0FDWUEsV0FFQUwsRUFFekIsTUFBT00sR0FDTFgsRUFBbUJLLEVBRXZCLElBRVFKLEVBRHdCLG1CQUFqQmEsYUFDY0EsYUFFQVAsRUFFM0IsTUFBT0ksR0FDTFYsRUFBcUJNLEdBakI3QixHQXdFQSxJQUVJUSxFQUZBQyxFQUFRLEdBQ1JDLEdBQVcsRUFFWEMsR0FBYyxFQUVsQixTQUFTQyxJQUNBRixHQUFhRixJQUdsQkUsR0FBVyxFQUNQRixFQUFhSyxPQUNiSixFQUFRRCxFQUFhTSxPQUFPTCxHQUU1QkUsR0FBYyxFQUVkRixFQUFN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LCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cblxuXG5cblxuXG5cblxuXG5cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBOT1RISU5HID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbChcImltbWVyLW5vdGhpbmdcIikgOiBkZWZpbmVQcm9wZXJ0eSh7fSwgXCJpbW1lci1ub3RoaW5nXCIsIHRydWUpO1xuXG52YXIgRFJBRlRfU1RBVEUgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sKFwiaW1tZXItc3RhdGVcIikgOiBcIl9fJGltbWVyX3N0YXRlXCI7XG5cbmZ1bmN0aW9uIGlzRHJhZnQodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiAhIXZhbHVlW0RSQUZUX1NUQVRFXTtcbn1cblxuZnVuY3Rpb24gaXNEcmFmdGFibGUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih2YWx1ZSkpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgIHJldHVybiBwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuZnVuY3Rpb24gb3JpZ2luYWwodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgdmFsdWVbRFJBRlRfU1RBVEVdKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtEUkFGVF9TVEFURV0uYmFzZTtcbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlIHJldHVybiB1bmRlZmluZWRcbn1cblxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgdmFsdWUpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG5mdW5jdGlvbiBzaGFsbG93Q29weSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlLnNsaWNlKCk7XG4gICAgdmFyIHRhcmdldCA9IHZhbHVlLl9fcHJvdG9fXyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIHJldHVybiBhc3NpZ24odGFyZ2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGVhY2godmFsdWUsIGNiKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNiKGksIHZhbHVlW2ldLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGNiKGtleSwgdmFsdWVba2V5XSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXModGhpbmcsIHByb3ApIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaW5nLCBwcm9wKTtcbn1cblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIEZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvYzY5OTA0YTUxMWI5MDAyNjY5MzUxNjgyMjMwNjNkZDg3NzJkZmM0MC9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL3NoYWxsb3dFcXVhbC5qc1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBBcnJheS5pc0FycmF5KHN0YXRlLmJhc2UpID8gZ2VuZXJhdGVBcnJheVBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykgOiBnZW5lcmF0ZU9iamVjdFBhdGNoZXMoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcyk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQXJyYXlQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICB2YXIgYmFzZSA9IHN0YXRlLmJhc2UsXG4gICAgICAgIGNvcHkgPSBzdGF0ZS5jb3B5LFxuICAgICAgICBhc3NpZ25lZCA9IHN0YXRlLmFzc2lnbmVkO1xuXG4gICAgdmFyIG1pbkxlbmd0aCA9IE1hdGgubWluKGJhc2UubGVuZ3RoLCBjb3B5Lmxlbmd0aCk7XG5cbiAgICAvLyBMb29rIGZvciByZXBsYWNlZCBpbmRpY2VzLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWluTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFzc2lnbmVkW2ldICYmIGJhc2VbaV0gIT09IGNvcHlbaV0pIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gYmFzZVBhdGguY29uY2F0KGkpO1xuICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHsgb3A6IFwicmVwbGFjZVwiLCBwYXRoOiBwYXRoLCB2YWx1ZTogY29weVtpXSB9KTtcbiAgICAgICAgICAgIGludmVyc2VQYXRjaGVzLnB1c2goeyBvcDogXCJyZXBsYWNlXCIsIHBhdGg6IHBhdGgsIHZhbHVlOiBiYXNlW2ldIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGlkIHRoZSBhcnJheSBleHBhbmQ/XG4gICAgaWYgKG1pbkxlbmd0aCA8IGNvcHkubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gbWluTGVuZ3RoOyBfaSA8IGNvcHkubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgIHBhdGg6IGJhc2VQYXRoLmNvbmNhdChfaSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNvcHlbX2ldXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpbnZlcnNlUGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgICAgIHBhdGg6IGJhc2VQYXRoLmNvbmNhdChcImxlbmd0aFwiKSxcbiAgICAgICAgICAgIHZhbHVlOiBiYXNlLmxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAuLi5vciBkaWQgaXQgc2hyaW5rP1xuICAgIGVsc2UgaWYgKG1pbkxlbmd0aCA8IGJhc2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgICAgICAgICBwYXRoOiBiYXNlUGF0aC5jb25jYXQoXCJsZW5ndGhcIiksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNvcHkubGVuZ3RoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IG1pbkxlbmd0aDsgX2kyIDwgYmFzZS5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBiYXNlUGF0aC5jb25jYXQoX2kyKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJhc2VbX2kyXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlT2JqZWN0UGF0Y2hlcyhzdGF0ZSwgYmFzZVBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKSB7XG4gICAgdmFyIGJhc2UgPSBzdGF0ZS5iYXNlLFxuICAgICAgICBjb3B5ID0gc3RhdGUuY29weTtcblxuICAgIGVhY2goc3RhdGUuYXNzaWduZWQsIGZ1bmN0aW9uIChrZXksIGFzc2lnbmVkVmFsdWUpIHtcbiAgICAgICAgdmFyIG9yaWdWYWx1ZSA9IGJhc2Vba2V5XTtcbiAgICAgICAgdmFyIHZhbHVlID0gY29weVtrZXldO1xuICAgICAgICB2YXIgb3AgPSAhYXNzaWduZWRWYWx1ZSA/IFwicmVtb3ZlXCIgOiBrZXkgaW4gYmFzZSA/IFwicmVwbGFjZVwiIDogXCJhZGRcIjtcbiAgICAgICAgaWYgKG9yaWdWYWx1ZSA9PT0gYmFzZSAmJiBvcCA9PT0gXCJyZXBsYWNlXCIpIHJldHVybjtcbiAgICAgICAgdmFyIHBhdGggPSBiYXNlUGF0aC5jb25jYXQoa2V5KTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKG9wID09PSBcInJlbW92ZVwiID8geyBvcDogb3AsIHBhdGg6IHBhdGggfSA6IHsgb3A6IG9wLCBwYXRoOiBwYXRoLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnB1c2gob3AgPT09IFwiYWRkXCIgPyB7IG9wOiBcInJlbW92ZVwiLCBwYXRoOiBwYXRoIH0gOiBvcCA9PT0gXCJyZW1vdmVcIiA/IHsgb3A6IFwiYWRkXCIsIHBhdGg6IHBhdGgsIHZhbHVlOiBvcmlnVmFsdWUgfSA6IHsgb3A6IFwicmVwbGFjZVwiLCBwYXRoOiBwYXRoLCB2YWx1ZTogb3JpZ1ZhbHVlIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseVBhdGNoZXMoZHJhZnQsIHBhdGNoZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdGNoID0gcGF0Y2hlc1tpXTtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRjaC5wYXRoO1xuXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCAmJiBwYXRjaC5vcCA9PT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgICAgICAgIGRyYWZ0ID0gcGF0Y2gudmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmFzZSA9IGRyYWZ0O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcGF0aC5sZW5ndGggLSAxOyBfaTMrKykge1xuICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlW3BhdGhbX2kzXV07XG4gICAgICAgICAgICAgICAgaWYgKCFiYXNlIHx8ICh0eXBlb2YgYmFzZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGJhc2UpKSAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFwcGx5IHBhdGNoLCBwYXRoIGRvZXNuJ3QgcmVzb2x2ZTogXCIgKyBwYXRoLmpvaW4oXCIvXCIpKTsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgc3dpdGNoIChwYXRjaC5vcCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXBsYWNlXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImFkZFwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBpcyBub3QgZXh0ZW5zaXZlLCBpdCBkb2VzIG5vdCBzdXBwb3J0IGluc2VydGlvbiBvciBgLWAgYXRtIVxuICAgICAgICAgICAgICAgICAgICBiYXNlW2tleV0gPSBwYXRjaC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShiYXNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gYmFzZS5sZW5ndGggLSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHRoZSBsYXN0IGluZGV4IG9mIGFuIGFycmF5IGNhbiBiZSByZW1vdmVkLCBpbmRleDogXCIgKyBrZXkgKyBcIiwgbGVuZ3RoOiBcIiArIGJhc2UubGVuZ3RoKTsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlLmxlbmd0aCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJhc2Vba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiICsgcGF0Y2gub3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkcmFmdDtcbn1cblxuLy8gQHRzLWNoZWNrXG5cbnZhciBkZXNjcmlwdG9ycyA9IHt9O1xuXG4vLyBGb3IgbmVzdGVkIHByb2R1Y2UgY2FsbHM6XG52YXIgc2NvcGVzID0gW107XG52YXIgY3VycmVudFNjb3BlID0gZnVuY3Rpb24gY3VycmVudFNjb3BlKCkge1xuICAgIHJldHVybiBzY29wZXNbc2NvcGVzLmxlbmd0aCAtIDFdO1xufTtcblxuZnVuY3Rpb24gd2lsbEZpbmFsaXplKHJlc3VsdCwgYmFzZURyYWZ0LCBuZWVkUGF0Y2hlcykge1xuICAgIHZhciBzY29wZSA9IGN1cnJlbnRTY29wZSgpO1xuICAgIHNjb3BlLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5maW5hbGl6aW5nID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSBiYXNlRHJhZnQpIHtcbiAgICAgICAgaWYgKG5lZWRQYXRjaGVzKSBtYXJrQ2hhbmdlc1JlY3Vyc2l2ZWx5KGJhc2VEcmFmdCk7XG4gICAgICAgIC8vIFRoaXMgaXMgZmFzdGVyIHdoZW4gd2UgZG9uJ3QgY2FyZSBhYm91dCB3aGljaCBhdHRyaWJ1dGVzIGNoYW5nZWQuXG4gICAgICAgIG1hcmtDaGFuZ2VzU3dlZXAoc2NvcGUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRHJhZnQoYmFzZSwgcGFyZW50KSB7XG4gICAgdmFyIGRyYWZ0ID0gdm9pZCAwO1xuICAgIGlmIChpc0RyYWZ0KGJhc2UpKSB7XG4gICAgICAgIHZhciBfc3RhdGUgPSBiYXNlW0RSQUZUX1NUQVRFXTtcbiAgICAgICAgLy8gQXZvaWQgY3JlYXRpbmcgbmV3IGRyYWZ0cyB3aGVuIGNvcHlpbmcuXG4gICAgICAgIF9zdGF0ZS5maW5hbGl6aW5nID0gdHJ1ZTtcbiAgICAgICAgZHJhZnQgPSBzaGFsbG93Q29weShfc3RhdGUuZHJhZnQpO1xuICAgICAgICBfc3RhdGUuZmluYWxpemluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWZ0ID0gc2hhbGxvd0NvcHkoYmFzZSk7XG4gICAgfVxuICAgIGVhY2goYmFzZSwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRyYWZ0LCBcIlwiICsgcHJvcCwgY3JlYXRlUHJvcGVydHlQcm94eShcIlwiICsgcHJvcCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2VlIFwicHJveHkuanNcIiBmb3IgcHJvcGVydHkgZG9jdW1lbnRhdGlvbi5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIHNjb3BlOiBwYXJlbnQgPyBwYXJlbnQuc2NvcGUgOiBjdXJyZW50U2NvcGUoKSxcbiAgICAgICAgbW9kaWZpZWQ6IGZhbHNlLFxuICAgICAgICBmaW5hbGl6aW5nOiBmYWxzZSwgLy8gZXM1IG9ubHlcbiAgICAgICAgZmluYWxpemVkOiBmYWxzZSxcbiAgICAgICAgYXNzaWduZWQ6IHt9LFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgYmFzZTogYmFzZSxcbiAgICAgICAgZHJhZnQ6IGRyYWZ0LFxuICAgICAgICBjb3B5OiBudWxsLFxuICAgICAgICByZXZva2U6IHJldm9rZSxcbiAgICAgICAgcmV2b2tlZDogZmFsc2UgLy8gZXM1IG9ubHlcbiAgICB9O1xuXG4gICAgY3JlYXRlSGlkZGVuUHJvcGVydHkoZHJhZnQsIERSQUZUX1NUQVRFLCBzdGF0ZSk7XG4gICAgc3RhdGUuc2NvcGUucHVzaChzdGF0ZSk7XG4gICAgcmV0dXJuIGRyYWZ0O1xufVxuXG5mdW5jdGlvbiByZXZva2UoKSB7XG4gICAgdGhpcy5yZXZva2VkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc291cmNlKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLmNvcHkgfHwgc3RhdGUuYmFzZTtcbn1cblxuZnVuY3Rpb24gX2dldChzdGF0ZSwgcHJvcCkge1xuICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgdmFyIHZhbHVlID0gc291cmNlKHN0YXRlKVtwcm9wXTtcbiAgICAvLyBEcmFmdHMgYXJlIG9ubHkgY3JlYXRlZCBmb3IgcHJveHlhYmxlIHZhbHVlcyB0aGF0IGV4aXN0IGluIHRoZSBiYXNlIHN0YXRlLlxuICAgIGlmICghc3RhdGUuZmluYWxpemluZyAmJiB2YWx1ZSA9PT0gc3RhdGUuYmFzZVtwcm9wXSAmJiBpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcHJlcGFyZUNvcHkoc3RhdGUpO1xuICAgICAgICByZXR1cm4gc3RhdGUuY29weVtwcm9wXSA9IGNyZWF0ZURyYWZ0KHZhbHVlLCBzdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gX3NldChzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgIHN0YXRlLmFzc2lnbmVkW3Byb3BdID0gdHJ1ZTtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkKSB7XG4gICAgICAgIGlmIChpcyhzb3VyY2Uoc3RhdGUpW3Byb3BdLCB2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmNvcHlbcHJvcF0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gbWFya0NoYW5nZWQoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkKSB7XG4gICAgICAgIHN0YXRlLm1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHN0YXRlLnBhcmVudCkgbWFya0NoYW5nZWQoc3RhdGUucGFyZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVDb3B5KHN0YXRlKSB7XG4gICAgaWYgKCFzdGF0ZS5jb3B5KSBzdGF0ZS5jb3B5ID0gc2hhbGxvd0NvcHkoc3RhdGUuYmFzZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3BlcnR5UHJveHkocHJvcCkge1xuICAgIHJldHVybiBkZXNjcmlwdG9yc1twcm9wXSB8fCAoZGVzY3JpcHRvcnNbcHJvcF0gPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2dldCh0aGlzW0RSQUZUX1NUQVRFXSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKHZhbHVlKSB7XG4gICAgICAgICAgICBfc2V0KHRoaXNbRFJBRlRfU1RBVEVdLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0VW5yZXZva2VkKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLnJldm9rZWQgPT09IHRydWUpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgYSBwcm94eSB0aGF0IGhhcyBiZWVuIHJldm9rZWQuIERpZCB5b3UgcGFzcyBhbiBvYmplY3QgZnJvbSBpbnNpZGUgYW4gaW1tZXIgZnVuY3Rpb24gdG8gYW4gYXN5bmMgcHJvY2Vzcz8gXCIgKyBKU09OLnN0cmluZ2lmeShzdGF0ZS5jb3B5IHx8IHN0YXRlLmJhc2UpKTtcbn1cblxuLy8gVGhpcyBsb29rcyBleHBlbnNpdmUsIGJ1dCBvbmx5IHByb3hpZXMgYXJlIHZpc2l0ZWQsIGFuZCBvbmx5IG9iamVjdHMgd2l0aG91dCBrbm93biBjaGFuZ2VzIGFyZSBzY2FubmVkLlxuZnVuY3Rpb24gbWFya0NoYW5nZXNTd2VlcChzY29wZSkge1xuICAgIC8vIFRoZSBuYXR1cmFsIG9yZGVyIG9mIGRyYWZ0cyBpbiB0aGUgYHNjb3BlYCBhcnJheSBpcyBiYXNlZCBvbiB3aGVuIHRoZXlcbiAgICAvLyB3ZXJlIGFjY2Vzc2VkLiBCeSBwcm9jZXNzaW5nIGRyYWZ0cyBpbiByZXZlcnNlIG5hdHVyYWwgb3JkZXIsIHdlIGhhdmUgYVxuICAgIC8vIGJldHRlciBjaGFuY2Ugb2YgcHJvY2Vzc2luZyBsZWFmIG5vZGVzIGZpcnN0LiBXaGVuIGEgbGVhZiBub2RlIGlzIGtub3duIHRvXG4gICAgLy8gaGF2ZSBjaGFuZ2VkLCB3ZSBjYW4gYXZvaWQgYW55IHRyYXZlcnNhbCBvZiBpdHMgYW5jZXN0b3Igbm9kZXMuXG4gICAgZm9yICh2YXIgaSA9IHNjb3BlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHNjb3BlW2ldO1xuICAgICAgICBpZiAoc3RhdGUubW9kaWZpZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdGF0ZS5iYXNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNBcnJheUNoYW5nZXMoc3RhdGUpKSBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc09iamVjdENoYW5nZXMoc3RhdGUpKSBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QgfHwgKHR5cGVvZiBvYmplY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmplY3QpKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuO1xuICAgIHZhciBzdGF0ZSA9IG9iamVjdFtEUkFGVF9TVEFURV07XG4gICAgaWYgKCFzdGF0ZSkgcmV0dXJuO1xuICAgIHZhciBiYXNlID0gc3RhdGUuYmFzZSxcbiAgICAgICAgZHJhZnQgPSBzdGF0ZS5kcmFmdCxcbiAgICAgICAgYXNzaWduZWQgPSBzdGF0ZS5hc3NpZ25lZDtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIC8vIExvb2sgZm9yIGFkZGVkIGtleXMuXG4gICAgICAgIE9iamVjdC5rZXlzKGRyYWZ0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBgdW5kZWZpbmVkYCBjaGVjayBpcyBhIGZhc3QgcGF0aCBmb3IgcHJlLWV4aXN0aW5nIGtleXMuXG4gICAgICAgICAgICBpZiAoYmFzZVtrZXldID09PSB1bmRlZmluZWQgJiYgIWhhcyhiYXNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYXNzaWduZWRba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghYXNzaWduZWRba2V5XSkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgdW50b3VjaGVkIHByb3BlcnRpZXMgdHJpZ2dlciByZWN1cnNpb24uXG4gICAgICAgICAgICAgICAgbWFya0NoYW5nZXNSZWN1cnNpdmVseShkcmFmdFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIExvb2sgZm9yIHJlbW92ZWQga2V5cy5cbiAgICAgICAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAvLyBUaGUgYHVuZGVmaW5lZGAgY2hlY2sgaXMgYSBmYXN0IHBhdGggZm9yIHByZS1leGlzdGluZyBrZXlzLlxuICAgICAgICAgICAgaWYgKGRyYWZ0W2tleV0gPT09IHVuZGVmaW5lZCAmJiAhaGFzKGRyYWZ0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYXNzaWduZWRba2V5XSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNBcnJheUNoYW5nZXMoc3RhdGUpKSB7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgYXNzaWduZWQubGVuZ3RoID0gdHJ1ZTtcbiAgICAgICAgaWYgKGRyYWZ0Lmxlbmd0aCA8IGJhc2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZHJhZnQubGVuZ3RoOyBpIDwgYmFzZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFzc2lnbmVkW2ldID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IGJhc2UubGVuZ3RoOyBfaSA8IGRyYWZ0Lmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFzc2lnbmVkW19pXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZHJhZnQubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgLy8gT25seSB1bnRvdWNoZWQgaW5kaWNlcyB0cmlnZ2VyIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIGlmIChhc3NpZ25lZFtfaTJdID09PSB1bmRlZmluZWQpIG1hcmtDaGFuZ2VzUmVjdXJzaXZlbHkoZHJhZnRbX2kyXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhhc09iamVjdENoYW5nZXMoc3RhdGUpIHtcbiAgICB2YXIgYmFzZSA9IHN0YXRlLmJhc2UsXG4gICAgICAgIGRyYWZ0ID0gc3RhdGUuZHJhZnQ7XG5cbiAgICAvLyBTZWFyY2ggZm9yIGFkZGVkIGtleXMuIFN0YXJ0IGF0IHRoZSBiYWNrLCBiZWNhdXNlIG5vbi1udW1lcmljIGtleXNcbiAgICAvLyBhcmUgb3JkZXJlZCBieSB0aW1lIG9mIGRlZmluaXRpb24gb24gdGhlIG9iamVjdC5cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZHJhZnQpO1xuICAgIGZvciAodmFyIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIC8vIFRoZSBgdW5kZWZpbmVkYCBjaGVjayBpcyBhIGZhc3QgcGF0aCBmb3IgcHJlLWV4aXN0aW5nIGtleXMuXG4gICAgICAgIGlmIChiYXNlW2tleXNbaV1dID09PSB1bmRlZmluZWQgJiYgIWhhcyhiYXNlLCBrZXlzW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaW5jZSBubyBrZXlzIGhhdmUgYmVlbiBhZGRlZCwgd2UgY2FuIGNvbXBhcmUgbGVuZ3RocyB0byBrbm93IGlmIGFuXG4gICAgLy8gb2JqZWN0IGhhcyBiZWVuIGRlbGV0ZWQuXG4gICAgcmV0dXJuIGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiYXNlKS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGhhc0FycmF5Q2hhbmdlcyhzdGF0ZSkge1xuICAgIHZhciBkcmFmdCA9IHN0YXRlLmRyYWZ0O1xuXG4gICAgaWYgKGRyYWZ0Lmxlbmd0aCAhPT0gc3RhdGUuYmFzZS5sZW5ndGgpIHJldHVybiB0cnVlO1xuICAgIC8vIFNlZSAjMTE2XG4gICAgLy8gSWYgd2UgZmlyc3Qgc2hvcnRlbiB0aGUgbGVuZ3RoLCBvdXIgYXJyYXkgaW50ZXJjZXB0b3JzIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAvLyBJZiBhZnRlciB0aGF0IG5ldyBpdGVtcyBhcmUgYWRkZWQsIHJlc3VsdCBpbiB0aGUgc2FtZSBvcmlnaW5hbCBsZW5ndGgsXG4gICAgLy8gdGhvc2UgbGFzdCBpdGVtcyB3aWxsIGhhdmUgbm8gaW50ZXJjZXB0aW5nIHByb3BlcnR5LlxuICAgIC8vIFNvIGlmIHRoZXJlIGlzIG5vIG93biBkZXNjcmlwdG9yIG9uIHRoZSBsYXN0IHBvc2l0aW9uLCB3ZSBrbm93IHRoYXQgaXRlbXMgd2VyZSByZW1vdmVkIGFuZCBhZGRlZFxuICAgIC8vIE4uQi46IHNwbGljZSwgdW5zaGlmdCwgZXRjIG9ubHkgc2hpZnQgdmFsdWVzIGFyb3VuZCwgYnV0IG5vdCBwcm9wIGRlc2NyaXB0b3JzLCBzbyB3ZSBvbmx5IGhhdmUgdG8gY2hlY2tcbiAgICAvLyB0aGUgbGFzdCBvbmVcbiAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZHJhZnQsIGRyYWZ0Lmxlbmd0aCAtIDEpO1xuICAgIC8vIGRlc2NyaXB0b3IgY2FuIGJlIG51bGwsIGJ1dCBvbmx5IGZvciBuZXdseSBjcmVhdGVkIHNwYXJzZSBhcnJheXMsIGVnLiBuZXcgQXJyYXkoMTApXG4gICAgaWYgKGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZ2V0KSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBGb3IgYWxsIG90aGVyIGNhc2VzLCB3ZSBkb24ndCBoYXZlIHRvIGNvbXBhcmUsIGFzIHRoZXkgd291bGQgaGF2ZSBiZWVuIHBpY2tlZCB1cCBieSB0aGUgaW5kZXggc2V0dGVyc1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGlkZGVuUHJvcGVydHkodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbn1cblxuXG5cbnZhciBsZWdhY3lQcm94eSA9IE9iamVjdC5mcmVlemUoe1xuXHRzY29wZXM6IHNjb3Blcyxcblx0Y3VycmVudFNjb3BlOiBjdXJyZW50U2NvcGUsXG5cdHdpbGxGaW5hbGl6ZTogd2lsbEZpbmFsaXplLFxuXHRjcmVhdGVEcmFmdDogY3JlYXRlRHJhZnRcbn0pO1xuXG4vLyBAdHMtY2hlY2tcblxuLy8gRm9yIG5lc3RlZCBwcm9kdWNlIGNhbGxzOlxudmFyIHNjb3BlcyQxID0gW107XG52YXIgY3VycmVudFNjb3BlJDEgPSBmdW5jdGlvbiBjdXJyZW50U2NvcGUoKSB7XG4gICAgcmV0dXJuIHNjb3BlcyQxW3Njb3BlcyQxLmxlbmd0aCAtIDFdO1xufTtcblxuLy8gRG8gbm90aGluZyBiZWZvcmUgYmVpbmcgZmluYWxpemVkLlxuZnVuY3Rpb24gd2lsbEZpbmFsaXplJDEoKSB7fVxuXG5mdW5jdGlvbiBjcmVhdGVEcmFmdCQxKGJhc2UsIHBhcmVudCkge1xuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgLy8gVHJhY2sgd2hpY2ggcHJvZHVjZSBjYWxsIHRoaXMgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgICAgICBzY29wZTogcGFyZW50ID8gcGFyZW50LnNjb3BlIDogY3VycmVudFNjb3BlJDEoKSxcbiAgICAgICAgLy8gVHJ1ZSBmb3IgYm90aCBzaGFsbG93IGFuZCBkZWVwIGNoYW5nZXMuXG4gICAgICAgIG1vZGlmaWVkOiBmYWxzZSxcbiAgICAgICAgLy8gVXNlZCBkdXJpbmcgZmluYWxpemF0aW9uLlxuICAgICAgICBmaW5hbGl6ZWQ6IGZhbHNlLFxuICAgICAgICAvLyBUcmFjayB3aGljaCBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBhc3NpZ25lZCAodHJ1ZSkgb3IgZGVsZXRlZCAoZmFsc2UpLlxuICAgICAgICBhc3NpZ25lZDoge30sXG4gICAgICAgIC8vIFRoZSBwYXJlbnQgZHJhZnQgc3RhdGUuXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAvLyBUaGUgYmFzZSBzdGF0ZS5cbiAgICAgICAgYmFzZTogYmFzZSxcbiAgICAgICAgLy8gVGhlIGJhc2UgcHJveHkuXG4gICAgICAgIGRyYWZ0OiBudWxsLFxuICAgICAgICAvLyBBbnkgcHJvcGVydHkgcHJveGllcy5cbiAgICAgICAgZHJhZnRzOiB7fSxcbiAgICAgICAgLy8gVGhlIGJhc2UgY29weSB3aXRoIGFueSB1cGRhdGVkIHZhbHVlcy5cbiAgICAgICAgY29weTogbnVsbCxcbiAgICAgICAgLy8gQ2FsbGVkIGJ5IHRoZSBgcHJvZHVjZWAgZnVuY3Rpb24uXG4gICAgICAgIHJldm9rZTogbnVsbFxuICAgIH07XG5cbiAgICB2YXIgX3JlZiA9IEFycmF5LmlzQXJyYXkoYmFzZSkgPyBQcm94eS5yZXZvY2FibGUoW3N0YXRlXSwgYXJyYXlUcmFwcykgOiBQcm94eS5yZXZvY2FibGUoc3RhdGUsIG9iamVjdFRyYXBzKSxcbiAgICAgICAgcmV2b2tlID0gX3JlZi5yZXZva2UsXG4gICAgICAgIHByb3h5ID0gX3JlZi5wcm94eTtcblxuICAgIHN0YXRlLmRyYWZ0ID0gcHJveHk7XG4gICAgc3RhdGUucmV2b2tlID0gcmV2b2tlO1xuXG4gICAgc3RhdGUuc2NvcGUucHVzaChzdGF0ZSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuXG52YXIgb2JqZWN0VHJhcHMgPSB7XG4gICAgZ2V0OiBnZXQkMSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyQkMSh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHByb3AgaW4gc291cmNlJDEodGFyZ2V0KTtcbiAgICB9LFxuICAgIG93bktleXM6IGZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMoc291cmNlJDEodGFyZ2V0KSk7XG4gICAgfSxcblxuICAgIHNldDogc2V0JDEsXG4gICAgZGVsZXRlUHJvcGVydHk6IGRlbGV0ZVByb3BlcnR5LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eSQxLFxuICAgIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW1tZXIgZG9lcyBub3Qgc3VwcG9ydCBgc2V0UHJvdG90eXBlT2YoKWAuXCIpO1xuICAgIH1cbn07XG5cbnZhciBhcnJheVRyYXBzID0ge307XG5lYWNoKG9iamVjdFRyYXBzLCBmdW5jdGlvbiAoa2V5LCBmbikge1xuICAgIGFycmF5VHJhcHNba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXJndW1lbnRzWzBdID0gYXJndW1lbnRzWzBdWzBdO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufSk7XG5hcnJheVRyYXBzLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24gKHN0YXRlLCBwcm9wKSB7XG4gICAgaWYgKGlzTmFOKHBhcnNlSW50KHByb3ApKSkgdGhyb3cgbmV3IEVycm9yKFwiSW1tZXIgZG9lcyBub3Qgc3VwcG9ydCBkZWxldGluZyBwcm9wZXJ0aWVzIGZyb20gYXJyYXlzOiBcIiArIHByb3ApO1xuICAgIHJldHVybiBvYmplY3RUcmFwcy5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsIHN0YXRlWzBdLCBwcm9wKTtcbn07XG5hcnJheVRyYXBzLnNldCA9IGZ1bmN0aW9uIChzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBpZiAocHJvcCAhPT0gXCJsZW5ndGhcIiAmJiBpc05hTihwYXJzZUludChwcm9wKSkpIHRocm93IG5ldyBFcnJvcihcIkltbWVyIGRvZXMgbm90IHN1cHBvcnQgc2V0dGluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzIG9uIGFycmF5czogXCIgKyBwcm9wKTtcbiAgICByZXR1cm4gb2JqZWN0VHJhcHMuc2V0LmNhbGwodGhpcywgc3RhdGVbMF0sIHByb3AsIHZhbHVlKTtcbn07XG5cbmZ1bmN0aW9uIHNvdXJjZSQxKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLmNvcHkgfHwgc3RhdGUuYmFzZTtcbn1cblxuZnVuY3Rpb24gZ2V0JDEoc3RhdGUsIHByb3ApIHtcbiAgICBpZiAocHJvcCA9PT0gRFJBRlRfU1RBVEUpIHJldHVybiBzdGF0ZTtcbiAgICB2YXIgZHJhZnRzID0gc3RhdGUuZHJhZnRzO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRyYWZ0IGluIHVubW9kaWZpZWQgc3RhdGUuXG5cbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkICYmIGhhcyhkcmFmdHMsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiBkcmFmdHNbcHJvcF07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gc291cmNlJDEoc3RhdGUpW3Byb3BdO1xuICAgIGlmIChzdGF0ZS5maW5hbGl6ZWQgfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGRyYWZ0IGluIG1vZGlmaWVkIHN0YXRlLlxuICAgIGlmIChzdGF0ZS5tb2RpZmllZCkge1xuICAgICAgICAvLyBBc3NpZ25lZCB2YWx1ZXMgYXJlIG5ldmVyIGRyYWZ0ZWQuIFRoaXMgY2F0Y2hlcyBhbnkgZHJhZnRzIHdlIGNyZWF0ZWQsIHRvby5cbiAgICAgICAgaWYgKHZhbHVlICE9PSBzdGF0ZS5iYXNlW3Byb3BdKSByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIFN0b3JlIGRyYWZ0cyBvbiB0aGUgY29weSAod2hlbiBvbmUgZXhpc3RzKS5cbiAgICAgICAgZHJhZnRzID0gc3RhdGUuY29weTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHJhZnRzW3Byb3BdID0gY3JlYXRlRHJhZnQkMSh2YWx1ZSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBzZXQkMShzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkKSB7XG4gICAgICAgIC8vIE9wdGltaXplIGJhc2VkIG9uIHZhbHVlJ3MgdHJ1dGhpbmVzcy4gVHJ1dGh5IHZhbHVlcyBhcmUgZ3VhcmFudGVlZCB0b1xuICAgICAgICAvLyBuZXZlciBiZSB1bmRlZmluZWQsIHNvIHdlIGNhbiBhdm9pZCB0aGUgYGluYCBvcGVyYXRvci4gTGFzdGx5LCB0cnV0aHlcbiAgICAgICAgLy8gdmFsdWVzIG1heSBiZSBkcmFmdHMsIGJ1dCBmYWxzeSB2YWx1ZXMgYXJlIG5ldmVyIGRyYWZ0cy5cbiAgICAgICAgdmFyIGlzVW5jaGFuZ2VkID0gdmFsdWUgPyBpcyhzdGF0ZS5iYXNlW3Byb3BdLCB2YWx1ZSkgfHwgdmFsdWUgPT09IHN0YXRlLmRyYWZ0c1twcm9wXSA6IGlzKHN0YXRlLmJhc2VbcHJvcF0sIHZhbHVlKSAmJiBwcm9wIGluIHN0YXRlLmJhc2U7XG4gICAgICAgIGlmIChpc1VuY2hhbmdlZCkgcmV0dXJuIHRydWU7XG4gICAgICAgIG1hcmtDaGFuZ2VkJDEoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5hc3NpZ25lZFtwcm9wXSA9IHRydWU7XG4gICAgc3RhdGUuY29weVtwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eShzdGF0ZSwgcHJvcCkge1xuICAgIC8vIFRoZSBgdW5kZWZpbmVkYCBjaGVjayBpcyBhIGZhc3QgcGF0aCBmb3IgcHJlLWV4aXN0aW5nIGtleXMuXG4gICAgaWYgKHN0YXRlLmJhc2VbcHJvcF0gIT09IHVuZGVmaW5lZCB8fCBwcm9wIGluIHN0YXRlLmJhc2UpIHtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRbcHJvcF0gPSBmYWxzZTtcbiAgICAgICAgbWFya0NoYW5nZWQkMShzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5jb3B5KSBkZWxldGUgc3RhdGUuY29weVtwcm9wXTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN0YXRlLCBwcm9wKSB7XG4gICAgdmFyIG93bmVyID0gc3RhdGUubW9kaWZpZWQgPyBzdGF0ZS5jb3B5IDogaGFzKHN0YXRlLmRyYWZ0cywgcHJvcCkgPyBzdGF0ZS5kcmFmdHMgOiBzdGF0ZS5iYXNlO1xuICAgIHZhciBkZXNjcmlwdG9yID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3duZXIsIHByb3ApO1xuICAgIGlmIChkZXNjcmlwdG9yICYmICEoQXJyYXkuaXNBcnJheShvd25lcikgJiYgcHJvcCA9PT0gXCJsZW5ndGhcIikpIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbn1cblxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkkMSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbW1lciBkb2VzIG5vdCBzdXBwb3J0IGRlZmluaW5nIHByb3BlcnRpZXMgb24gZHJhZnQgb2JqZWN0cy5cIik7XG59XG5cbmZ1bmN0aW9uIG1hcmtDaGFuZ2VkJDEoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkKSB7XG4gICAgICAgIHN0YXRlLm1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuY29weSA9IGFzc2lnbihzaGFsbG93Q29weShzdGF0ZS5iYXNlKSwgc3RhdGUuZHJhZnRzKTtcbiAgICAgICAgc3RhdGUuZHJhZnRzID0gbnVsbDtcbiAgICAgICAgaWYgKHN0YXRlLnBhcmVudCkgbWFya0NoYW5nZWQkMShzdGF0ZS5wYXJlbnQpO1xuICAgIH1cbn1cblxudmFyIG1vZGVyblByb3h5ID0gT2JqZWN0LmZyZWV6ZSh7XG5cdHNjb3Blczogc2NvcGVzJDEsXG5cdGN1cnJlbnRTY29wZTogY3VycmVudFNjb3BlJDEsXG5cdHdpbGxGaW5hbGl6ZTogd2lsbEZpbmFsaXplJDEsXG5cdGNyZWF0ZURyYWZ0OiBjcmVhdGVEcmFmdCQxXG59KTtcblxuZnVuY3Rpb24gdmVyaWZ5TWluaWZpZWQoKSB7fVxuXG52YXIgY29uZmlnRGVmYXVsdHMgPSB7XG4gICAgdXNlUHJveGllczogdHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiLFxuICAgIGF1dG9GcmVlemU6IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIDogdmVyaWZ5TWluaWZpZWQubmFtZSA9PT0gXCJ2ZXJpZnlNaW5pZmllZFwiLFxuICAgIG9uQXNzaWduOiBudWxsLFxuICAgIG9uRGVsZXRlOiBudWxsLFxuICAgIG9uQ29weTogbnVsbFxufTtcblxudmFyIEltbWVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEltbWVyKGNvbmZpZykge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBJbW1lcik7XG5cbiAgICAgICAgYXNzaWduKHRoaXMsIGNvbmZpZ0RlZmF1bHRzLCBjb25maWcpO1xuICAgICAgICB0aGlzLnNldFVzZVByb3hpZXModGhpcy51c2VQcm94aWVzKTtcbiAgICAgICAgdGhpcy5wcm9kdWNlID0gdGhpcy5wcm9kdWNlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoSW1tZXIsIFt7XG4gICAgICAgIGtleTogXCJwcm9kdWNlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9kdWNlKGJhc2UsIHJlY2lwZSwgcGF0Y2hMaXN0ZW5lcikge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgLy8gY3VycmllZCBpbnZvY2F0aW9uXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgcmVjaXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEJhc2UgPSByZWNpcGU7XG4gICAgICAgICAgICAgICAgcmVjaXBlID0gYmFzZTtcblxuICAgICAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdEJhc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcm9kdWNlKGJhc2UsIGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWNpcGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoX3JlY2lwZSA9IHJlY2lwZSkuY2FsbC5hcHBseShfcmVjaXBlLCBbZHJhZnQsIGRyYWZ0XS5jb25jYXQoYXJncykpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbiwgdGhlIHNlY29uZCBhcmd1bWVudCB0byBwcm9kdWNlIHNob3VsZCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGlmIChwYXRjaExpc3RlbmVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBhdGNoTGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwidGhlIHRoaXJkIGFyZ3VtZW50IG9mIGEgcHJvZHVjZXIgc2hvdWxkIG5vdCBiZSBzZXQgb3IgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIHByb3hpZXMgZm9yIHBsYWluIG9iamVjdHMvYXJyYXlzLlxuICAgICAgICAgICAgaWYgKCFpc0RyYWZ0YWJsZShiYXNlKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlY2lwZShiYXNlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBiYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2VlICMxMDAsIGRvbid0IG5lc3QgcHJvZHVjZXJzXG4gICAgICAgICAgICBlbHNlIGlmIChpc0RyYWZ0KGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlY2lwZS5jYWxsKGJhc2UsIGJhc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBiYXNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGUgZ2l2ZW4gdmFsdWUgbXVzdCBiZSBwcm94aWVkLlxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29wZXMucHVzaChbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZURyYWZ0ID0gdGhpcy5jcmVhdGVEcmFmdChiYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVjaXBlLmNhbGwoYmFzZURyYWZ0LCBiYXNlRHJhZnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lsbEZpbmFsaXplKHJlc3VsdCwgYmFzZURyYWZ0LCAhIXBhdGNoTGlzdGVuZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV2ZXIgZ2VuZXJhdGUgcGF0Y2hlcyB3aGVuIG5vIGxpc3RlbmVyIGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0Y2hlcyA9IHBhdGNoTGlzdGVuZXIgJiYgW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VQYXRjaGVzID0gcGF0Y2hMaXN0ZW5lciAmJiBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsaXplIHRoZSBtb2RpZmllZCBkcmFmdC4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCB8fCByZXN1bHQgPT09IGJhc2VEcmFmdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbmFsaXplKGJhc2VEcmFmdCwgW10sIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4ub3IgdXNlIGEgcmVwbGFjZW1lbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VycyBtdXN0IG5ldmVyIG1vZGlmeSB0aGUgZHJhZnQgX2FuZF8gcmV0dXJuIHNvbWV0aGluZyBlbHNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VEcmFmdFtEUkFGVF9TVEFURV0ubW9kaWZpZWQpIHRocm93IG5ldyBFcnJvcihcIkFuIGltbWVyIHByb2R1Y2VyIHJldHVybmVkIGEgbmV3IHZhbHVlICphbmQqIG1vZGlmaWVkIGl0cyBkcmFmdC4gRWl0aGVyIHJldHVybiBhIG5ldyB2YWx1ZSAqb3IqIG1vZGlmeSB0aGUgZHJhZnQuXCIpOyAvLyBwcmV0dGllci1pZ25vcmVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluYWxpemUgdGhlIHJlcGxhY2VtZW50IGluIGNhc2UgaXQgY29udGFpbnMgKG9yIGlzKSBhIHN1YnNldCBvZiB0aGUgZHJhZnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdGFibGUocmVzdWx0KSkgcmVzdWx0ID0gdGhpcy5maW5hbGl6ZShyZXN1bHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0Y2hMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiBcInJlcGxhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlUGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3A6IFwicmVwbGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTY29wZSgpLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5yZXZva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjb3Blcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoTGlzdGVuZXIgJiYgcGF0Y2hMaXN0ZW5lcihwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gTk9USElORyA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInNldEF1dG9GcmVlemVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF1dG9GcmVlemUodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b0ZyZWV6ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic2V0VXNlUHJveGllc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VXNlUHJveGllcyh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy51c2VQcm94aWVzID0gdmFsdWU7XG4gICAgICAgICAgICBhc3NpZ24odGhpcywgdmFsdWUgPyBtb2Rlcm5Qcm94eSA6IGxlZ2FjeVByb3h5KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqIEZpbmFsaXplIGEgZHJhZnQsIHJldHVybmluZyBlaXRoZXIgdGhlIHVubW9kaWZpZWQgYmFzZSBzdGF0ZSBvciBhIG1vZGlmaWVkXG4gICAgICAgICAqIGNvcHkgb2YgdGhlIGJhc2Ugc3RhdGUuXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZmluYWxpemVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmFsaXplKGRyYWZ0LCBwYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4oZHJhZnQpKSByZXR1cm4gZHJhZnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemVUcmVlKGRyYWZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5ldmVyIGZpbmFsaXplIGRyYWZ0cyBvd25lZCBieSBhbiBvdXRlciBzY29wZS5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5zY29wZSAhPT0gdGhpcy5jdXJyZW50U2NvcGUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkcmFmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RhdGUubW9kaWZpZWQpIHJldHVybiBzdGF0ZS5iYXNlO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZS5maW5hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5maW5hbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmluYWxpemVUcmVlKHN0YXRlLmRyYWZ0LCBwYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25EZWxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbmVkID0gc3RhdGUuYXNzaWduZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBhc3NpZ25lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRbcHJvcF0gfHwgdGhpcy5vbkRlbGV0ZShzdGF0ZSwgcHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25Db3B5KSB0aGlzLm9uQ29weShzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBOZXN0ZWQgcHJvZHVjZXJzIG11c3QgbmV2ZXIgYXV0by1mcmVlemUgdGhlaXIgcmVzdWx0LFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQgbWF5IGNvbnRhaW4gZHJhZnRzIGZyb20gcGFyZW50IHByb2R1Y2Vycy5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvRnJlZXplICYmIHRoaXMuc2NvcGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKHN0YXRlLmNvcHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVzKSBnZW5lcmF0ZVBhdGNoZXMoc3RhdGUsIHBhdGgsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5jb3B5O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICogRmluYWxpemUgYWxsIGRyYWZ0cyBpbiB0aGUgZ2l2ZW4gc3RhdGUgdHJlZS5cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJmaW5hbGl6ZVRyZWVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmFsaXplVHJlZShyb290LCBwYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHJvb3RbRFJBRlRfU1RBVEVdO1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcm9vdCA9IHRoaXMudXNlUHJveGllcyA/IHN0YXRlLmNvcHkgOiBzdGF0ZS5jb3B5ID0gc2hhbGxvd0NvcHkoc3RhdGUuZHJhZnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb25Bc3NpZ24gPSB0aGlzLm9uQXNzaWduO1xuXG4gICAgICAgICAgICB2YXIgZmluYWxpemVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGZpbmFsaXplUHJvcGVydHkocHJvcCwgdmFsdWUsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgYHJvb3RgIGNhbiBiZSBhIGRyYWZ0IGluIGhlcmUuXG4gICAgICAgICAgICAgICAgdmFyIGluRHJhZnQgPSAhIXN0YXRlICYmIHBhcmVudCA9PT0gcm9vdDtcblxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWZ0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50W3Byb3BdID0gdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXRjaGVzIGFyZSBuZXZlciBnZW5lcmF0ZWQgZm9yIGFzc2lnbmVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZXMgJiYgaW5EcmFmdCAmJiAhc3RhdGUuYXNzaWduZWRbcHJvcF0gPyBfdGhpczIuZmluYWxpemUodmFsdWUsIHBhdGguY29uY2F0KHByb3ApLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykgOiBfdGhpczIuZmluYWxpemUodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuY2hhbmdlZCBkcmFmdHMgYXJlIGlnbm9yZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbkRyYWZ0ICYmIHZhbHVlID09PSBzdGF0ZS5iYXNlW3Byb3BdKSByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVuY2hhbmdlZCBkcmFmdCBwcm9wZXJ0aWVzIGFyZSBpZ25vcmVkLlxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluRHJhZnQgJiYgaXModmFsdWUsIHN0YXRlLmJhc2VbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gU2VhcmNoIG5ldyBvYmplY3RzIGZvciB1bmZpbmFsaXplZCBkcmFmdHMuIEZyb3plbiBvYmplY3RzIHNob3VsZCBuZXZlciBjb250YWluIGRyYWZ0cy5cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNEcmFmdGFibGUodmFsdWUpICYmICFPYmplY3QuaXNGcm96ZW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCh2YWx1ZSwgZmluYWxpemVQcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5EcmFmdCAmJiBvbkFzc2lnbikge1xuICAgICAgICAgICAgICAgICAgICBvbkFzc2lnbihzdGF0ZSwgcHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGVhY2gocm9vdCwgZmluYWxpemVQcm9wZXJ0eSk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gSW1tZXI7XG59KCk7XG5cbnZhciBpbW1lciA9IG5ldyBJbW1lcigpO1xuXG4vKipcbiAqIFRoZSBgcHJvZHVjZWAgZnVuY3Rpb24gdGFrZXMgYSB2YWx1ZSBhbmQgYSBcInJlY2lwZSBmdW5jdGlvblwiICh3aG9zZVxuICogcmV0dXJuIHZhbHVlIG9mdGVuIGRlcGVuZHMgb24gdGhlIGJhc2Ugc3RhdGUpLiBUaGUgcmVjaXBlIGZ1bmN0aW9uIGlzXG4gKiBmcmVlIHRvIG11dGF0ZSBpdHMgZmlyc3QgYXJndW1lbnQgaG93ZXZlciBpdCB3YW50cy4gQWxsIG11dGF0aW9ucyBhcmVcbiAqIG9ubHkgZXZlciBhcHBsaWVkIHRvIGEgX19jb3B5X18gb2YgdGhlIGJhc2Ugc3RhdGUuXG4gKlxuICogUGFzcyBvbmx5IGEgZnVuY3Rpb24gdG8gY3JlYXRlIGEgXCJjdXJyaWVkIHByb2R1Y2VyXCIgd2hpY2ggcmVsaWV2ZXMgeW91XG4gKiBmcm9tIHBhc3NpbmcgdGhlIHJlY2lwZSBmdW5jdGlvbiBldmVyeSB0aW1lLlxuICpcbiAqIE9ubHkgcGxhaW4gb2JqZWN0cyBhbmQgYXJyYXlzIGFyZSBtYWRlIG11dGFibGUuIEFsbCBvdGhlciBvYmplY3RzIGFyZVxuICogY29uc2lkZXJlZCB1bmNvcHlhYmxlLlxuICpcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgX19ib3VuZF9fIHRvIGl0cyBgSW1tZXJgIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBiYXNlIC0gdGhlIGluaXRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb2R1Y2VyIC0gZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHByb3h5IG9mIHRoZSBiYXNlIHN0YXRlIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB3aGljaCBjYW4gYmUgZnJlZWx5IG1vZGlmaWVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXRjaExpc3RlbmVyIC0gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB0aGUgcGF0Y2hlcyBwcm9kdWNlZCBoZXJlXG4gKiBAcmV0dXJucyB7YW55fSBhIG5ldyBzdGF0ZSwgb3IgdGhlIGluaXRpYWwgc3RhdGUgaWYgbm90aGluZyB3YXMgbW9kaWZpZWRcbiAqL1xudmFyIHByb2R1Y2UgPSBpbW1lci5wcm9kdWNlO1xuLyoqXG4gKiBQYXNzIHRydWUgdG8gYXV0b21hdGljYWxseSBmcmVlemUgYWxsIGNvcGllcyBjcmVhdGVkIGJ5IEltbWVyLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGF1dG8tZnJlZXppbmcgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbi5cbiAqL1xudmFyIHNldEF1dG9GcmVlemUgPSBmdW5jdGlvbiBzZXRBdXRvRnJlZXplKHZhbHVlKSB7XG4gIHJldHVybiBpbW1lci5zZXRBdXRvRnJlZXplKHZhbHVlKTtcbn07XG5cbi8qKlxuICogUGFzcyB0cnVlIHRvIHVzZSB0aGUgRVMyMDE1IGBQcm94eWAgY2xhc3Mgd2hlbiBjcmVhdGluZyBkcmFmdHMsIHdoaWNoIGlzXG4gKiBhbHdheXMgZmFzdGVyIHRoYW4gdXNpbmcgRVM1IHByb3hpZXMuXG4gKlxuICogQnkgZGVmYXVsdCwgZmVhdHVyZSBkZXRlY3Rpb24gaXMgdXNlZCwgc28gY2FsbGluZyB0aGlzIGlzIHJhcmVseSBuZWNlc3NhcnkuXG4gKi9cbnZhciBzZXRVc2VQcm94aWVzID0gZnVuY3Rpb24gc2V0VXNlUHJveGllcyh2YWx1ZSkge1xuICByZXR1cm4gaW1tZXIuc2V0VXNlUHJveGllcyh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEFwcGx5IGFuIGFycmF5IG9mIEltbWVyIHBhdGNoZXMgdG8gdGhlIGZpcnN0IGFyZ3VtZW50LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBwcm9kdWNlciwgd2hpY2ggbWVhbnMgY29weS1vbi13cml0ZSBpcyBpbiBlZmZlY3QuXG4gKi9cbnZhciBhcHBseVBhdGNoZXMkMSA9IHByb2R1Y2UoYXBwbHlQYXRjaGVzKTtcblxuZXhwb3J0IHsgcHJvZHVjZSwgc2V0QXV0b0ZyZWV6ZSwgc2V0VXNlUHJveGllcywgYXBwbHlQYXRjaGVzJDEgYXMgYXBwbHlQYXRjaGVzLCBJbW1lciwgb3JpZ2luYWwsIGlzRHJhZnQsIE5PVEhJTkcgYXMgbm90aGluZyB9O1xuZXhwb3J0IGRlZmF1bHQgcHJvZHVjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBhc3luY0NvbXBvbmVudCA9IChpbXBvcnRDb21wb25lbnQsIGxvYWRlciA9IG51bGwpID0+IHtcbiAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgIGNvbXBvbmVudDogbnVsbFxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaW1wb3J0Q29tcG9uZW50KClcbiAgICAgICAgLnRoZW4oY21wID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb21wb25lbnQ6IGNtcC5kZWZhdWx0fSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IEMgPSB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgIHJldHVybiBDID8gPEMgey4uLnRoaXMucHJvcHN9Lz4gOiBsb2FkZXI7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3luY0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwb3N0cyxcbiAgICBhY3RpdmVQb3N0SWR4LFxuICAgIG9uVGl0bGVDbGljayxcbiAgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPHVsPlxuICAgICAgICB7XG4gICAgICAgICAgcG9zdHMubWFwKCh7IHRpdGxlLCBpZCwgcG9zdFR5cGU6IHR5cGUsIGF0dGFjaG1lbnRfdXJsfSwgaWR4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGFjdGl2ZVBvc3RJZHggPT09IGlkeDtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtvblRpdGxlQ2xpY2soaWR4KX19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtpc0FjdGl2ZSA/ICdhY3RpdmUnIDogJyd9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICA8L3VsPlxuICApXG59XG4iLCJleHBvcnQgZGVmYXVsdCAoeyBhcGksIHBvc3RMaXN0VXBkYXRlciwgUGVyc2lzdG9yLCBlZGl0aW5nUG9zdCwgcmVmcmVzaH0pID0+ICh7ZXJyb3IsIHN1Y2Nlc3MsIHdhcm59LCBjbSkgPT4ge1xuICBhcGkudXBkYXRlKGNtLmdldE9wdGlvbignY29udGVudElkJyksIGNtLmRvYy5nZXRWYWx1ZSgpLCBlZGl0aW5nUG9zdC50aXRsZSlcbiAgICAudGhlbigobmV3UG9zdCkgPT4ge1xuICAgICAgUGVyc2lzdG9yLnJlbW92ZShuZXdQb3N0LmlkKTtcbiAgICAgIHJlZnJlc2goKTtcbiAgICAgIG5ld1Bvc3QucG9zdFR5cGUgPSAncHVibGlzaGVkJztcbiAgICAgIHBvc3RMaXN0VXBkYXRlcigob2xkUG9zdExpc3QpID0+IHtcbiAgICAgICAgY29uc3QgcG9zdCA9IG9sZFBvc3RMaXN0XG4gICAgICAgICAgLmZpbmQoKHsgaWQgfSkgPT4gaWQgPT09IG5ld1Bvc3QuaWQpO1xuXG4gICAgICAgIHBvc3QuY29udGVudCA9IG5ld1Bvc3QuY29udGVudFxuICAgICAgfSk7XG4gICAgICBzdWNjZXNzKCfljZrmloflt7Lmm7TmlrAnKVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGVycm9yKCfljZrmlofmm7TmlrDlpLHotKUnKVxuICAgIH0pO1xufVxuXG4iLCJleHBvcnQgZGVmYXVsdCAoeyBQZXJzaXN0b3IsIHBvc3RMaXN0VXBkYXRlciwgYXBpLCBhY3RpdmV9LCB0eXBlKSA9PlxuICAoe2Vycm9yLCBzdWNjZXNzLCB3YXJufSwgY20pID0+IHtcbiAgICBjb25zdCBwaWQgPSBjbS5nZXRPcHRpb24oJ2NvbnRlbnRJZCcpO1xuICAgIFBlcnNpc3Rvci5yZW1vdmUocGlkKTtcbiAgICBwb3N0TGlzdFVwZGF0ZXIoKG9sZFBvc3RMaXN0KSA9PiB7XG4gICAgICByZXR1cm4gb2xkUG9zdExpc3QuZmlsdGVyKHAgPT4gcC5pZCAhPT0gcGlkKTtcbiAgICB9KTtcblxuICAgIGlmKHR5cGUgPT09ICdkcmFmdCcpIHtcbiAgICAgIHN1Y2Nlc3MoJ+WNmuaWh+W3sue7j+WIoOmZpCcpXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXBpLmRlbGV0ZShwaWQpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGFjdGl2ZSgwKTtcbiAgICAgICAgc3VjY2Vzcygn5Y2a5paH5rC45LmF5Yig6ZmkJylcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgZXJyb3IoJ+WNmuaWh+WIoOmZpOWksei0pScpO1xuICAgICAgfSk7XG4gIH1cblxuIiwiZXhwb3J0IGRlZmF1bHQgKHsgUGVyc2lzdG9yLCBhcGksIHBvc3RMaXN0VXBkYXRlciB9KSA9PiBcbiAgKHtlcnJvciwgc3VjY2Vzcywgd2Fybn0sIGNtKSA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSBjbS5nZXRPcHRpb24oJ25ld1Bvc3RUaXRsZScpO1xuICAgIGNvbnN0IHRtcElkID0gY20uZ2V0T3B0aW9uKCdjb250ZW50SWQnKTtcbiAgICBjb25zdCB0bXBUaXRsZSA9IFBlcnNpc3Rvci5nZXQodG1wSWQpLnRpdGxlO1xuXG4gICAgY29uc3QgY29udGVudCA9IGNtLmRvYy5nZXRWYWx1ZSgpO1xuICAgIGlmICghKHRpdGxlIHx8IHRtcFRpdGxlKSkge1xuICAgICAgZXJyb3IoJ+agh+mimOS4jeiDveS4uuepuiEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICBlcnJvcign5YaF5a655LiN6IO95Li656m6IScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFwaS5jcmVhdGUodGl0bGUgfHwgdG1wVGl0bGUsIGNvbnRlbnQpXG4gICAgICAudGhlbigobmV3UG9zdCkgPT4ge1xuICAgICAgICBQZXJzaXN0b3IucmVtb3ZlKHRtcElkKTtcbiAgICAgICAgcG9zdExpc3RVcGRhdGVyKChvbGRQb3N0TGlzdCkgPT4ge1xuICAgICAgICAgIG9sZFBvc3RMaXN0WzBdID0gbmV3UG9zdDtcbiAgICAgICAgICBvbGRQb3N0TGlzdFswXS5wb3N0VHlwZSA9ICdwdWJsaXNoZWQnXG4gICAgICAgIH0pXG4gICAgICAgIHN1Y2Nlc3MoJ+WNmuaWh+WIm+W7uuaIkOWKnycpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGVycm9yKCfljZrmlofliJvlu7rlpLHotKUnKVxuICAgICAgfSk7XG4gIH1cblxuIiwiaW1wb3J0IGhhc2ggZnJvbSAnb2JqZWN0LWhhc2gnO1xuZXhwb3J0IGRlZmF1bHQgKHsgUGVyc2lzdG9yLCBwb3N0TGlzdFVwZGF0ZXIsIGFjdGl2ZSB9KSA9PiBcbiAgKHtlcnJvciwgc3VjY2Vzcywgd2Fybn0sIGNtLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IHBhcmFtcy5hcmdTdHJpbmcgJiYgcGFyYW1zLmFyZ1N0cmluZy50cmltKCk7XG4gICAgaWYoIXRpdGxlKSB7XG4gICAgICBlcnJvcign5qCH6aKY5LiN6IO95Li656m6OiBuZXcgJmx0O3RpdGxlJmd0OycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbS5zZXRPcHRpb24oJ25ld1Bvc3RUaXRsZScsIHRpdGxlKTtcbiAgICBjb25zdCB0bXBJZCA9IGhhc2goRGF0ZS5ub3coKSkuc2xpY2UoMTYpO1xuICAgIGNvbnN0IG5ld1Bvc3QgPSB7XG4gICAgICB0aXRsZSxcbiAgICAgIGlkOiB0bXBJZCxcbiAgICAgIHBvc3RUeXBlOiAnZHJhZnQnLFxuICAgICAgY29udGVudDogJydcbiAgICB9XG4gICAgUGVyc2lzdG9yLnNldCh0bXBJZCwgbmV3UG9zdCk7XG4gICAgcG9zdExpc3RVcGRhdGVyKChvbGRQb3N0TGlzdCkgPT4ge1xuICAgICAgb2xkUG9zdExpc3QudW5zaGlmdChuZXdQb3N0KTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICBhY3RpdmUoMCk7XG4gICAgfSlcbiAgfVxuXG4iLCJpbXBvcnQge1xuICBidWlsZFVwZGF0ZUNtZCxcbiAgYnVpbGREZWxldGVDbWQsXG4gIGJ1aWxkQ3JlYXRlQ21kLFxuICBidWlsZE5ld0NtZCxcbn0gZnJvbSAnLi9jb21tYW5kcyc7XG5cbi8qKlxuICogQHBvc3RUeXBlIHtTdHJpbmd9IFsnZHJhZnQnLCAncHVibGlzaGVkJ11cbiAqL1xuXG5jb25zdCBwaWNrQ21kID0gKGNtZE5hbWVBcnIsIGNvbW1hbmRzKSA9PiB7XG4gIHJldHVybiBjb21tYW5kcy5maWx0ZXIoKHsgbmFtZSB9KSA9PiBjbWROYW1lQXJyLmluY2x1ZGVzKG5hbWUpKVxufVxuXG5jb25zdCBidWlsZEVkaXRvckNvbW1hbmRzID0gKHRvb2xzLCBwb3N0VHlwZSkgPT4ge1xuICBjb25zdCB7XG4gICAgYXBpLCBwb3N0TGlzdFVwZGF0ZXIsIGFjdGl2ZSwgZXhpdCwgUGVyc2lzdG9yXG4gIH0gPSB0b29scztcblxuICBjb25zdCBnZW5lcmFsQ21kU2V0ID0gW1xuICAgICduZXcnLFxuICAgICdkZWxldGVUaGlzUG9zdEZvcmV2ZXInLFxuICAgICdleGl0JyxcbiAgXTtcblxuICBjb25zdCBleEhhbmRsZXJWYWxpZGF0b3IgPSAoZm4sIGV4TmFtZSkgPT4ge1xuICAgIGNvbnN0IGRlZGljYXRlZFBvc3RDbWRNYXAgPSB7XG4gICAgICBkcmFmdDogWydwdWJsaXNoJ10sXG4gICAgICBwdWJsaXNoZWQ6IFsndXBkYXRlJ11cbiAgICB9O1xuXG4gICAgY29uc3QgZGVmYXVsdEhhbmRsZXIgPSAoeyBlcnJvciB9KSA9PiB7XG4gICAgICBlcnJvcign6Z2e5rOV5ZG95LukJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IGlzVmFsaWQgPSBkZWRpY2F0ZWRQb3N0Q21kTWFwW3Bvc3RUeXBlXS5pbmNsdWRlcyhleE5hbWUpO1xuICAgIHJldHVybiBpc1ZhbGlkID8gZm4gOiBkZWZhdWx0SGFuZGxlcjtcbiAgfTtcblxuICBjb25zdCBjb21tYW5kcyA9IFt7XG4gICAgbmFtZTogJ3VwZGF0ZScsXG4gICAgZm46IGV4SGFuZGxlclZhbGlkYXRvcihidWlsZFVwZGF0ZUNtZCh0b29scyksICd1cGRhdGUnKVxuICB9LCB7XG4gICAgbmFtZTogJ2RlbGV0ZVRoaXNQb3N0Rm9yZXZlcicsXG4gICAgZm46IGJ1aWxkRGVsZXRlQ21kKHRvb2xzLCBwb3N0VHlwZSlcbiAgfSwge1xuICAgIG5hbWU6ICdwdWJsaXNoJyxcbiAgICBmbjogZXhIYW5kbGVyVmFsaWRhdG9yKGJ1aWxkQ3JlYXRlQ21kKHRvb2xzKSwgJ3B1Ymxpc2gnKVxuICB9LCB7XG4gICAgbmFtZTogJ2V4aXQnLFxuICAgIGZuOiAoKSA9PiB7IGV4aXQoKTt9XG4gIH0sIHtcbiAgICBuYW1lOiAnbmV3JyxcbiAgICBmbjogYnVpbGROZXdDbWQodG9vbHMpXG4gIH1dXG5cbiAgcmV0dXJuIGNvbW1hbmRzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYnVpbGRFZGl0b3JDb21tYW5kcztcbiIsImNvbnN0IEtFWV9QUkVGSVggPSAncG0tcGVyc2lzdG9yLSc7XG5jb25zdCBLRVlfUFJFRklYX0ZPUl9USU1FU1RBTVAgPSAncG0tdGltZS1zdGFtcCc7XG5jb25zdCBLRVlfUkVHX0VYUCA9IG5ldyBSZWdFeHAoJ14nICsgS0VZX1BSRUZJWCk7XG5cbmNvbnN0IHVwZGF0ZVRpbWVTdGFtcCA9ICgpID0+IHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgS0VZX1BSRUZJWF9GT1JfVElNRVNUQU1QLFxuICAgIERhdGUubm93KClcbiAgKTtcbn1cblxuY29uc3QgZ2V0VGltZVN0YW1wID0gKCkgPT4ge1xuICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICBLRVlfUFJFRklYX0ZPUl9USU1FU1RBTVAsXG4gICkgfHwgMDtcbn1cblxuY29uc3Qgc2V0ID0gKGtleSwgdmFsKSA9PiB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgIEtFWV9QUkVGSVggKyBrZXksXG4gICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xuICB1cGRhdGVUaW1lU3RhbXAoKTtcbn1cblxuY29uc3QgZ2V0ID0gKGtleSkgPT4ge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICBLRVlfUFJFRklYICsga2V5XG4gICkpO1xufVxuXG5jb25zdCBfZ2V0ID0gKGtleSkgPT4ge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICBrZXlcbiAgKSk7XG59XG5cbmNvbnN0IF9nZXRQZXJzaXN0b3JLZXlzID0gKCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKVxuICAgIC5maWx0ZXIoayA9PiBLRVlfUkVHX0VYUC50ZXN0KGspKVxufVxuXG5jb25zdCByZW1vdmUgPSAoa2V5KSA9PiB7XG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFxuICAgIEtFWV9QUkVGSVggKyBrZXlcbiAgKTtcbn1cblxuY29uc3QgbGlzdCA9ICgpID0+IHtcbiAgcmV0dXJuIF9nZXRQZXJzaXN0b3JLZXlzKCkubWFwKF9nZXQpXG59O1xuXG5jb25zdCB3aXRoTG9jYWxMaXN0ID0gKGFycikgPT4ge1xuICBjb25zdCBsb2NhbExpc3QgPSBsaXN0KCk7XG4gIGNvbnN0IGlkTWFwID0ge307XG4gIGFyci5mb3JFYWNoKCh7aWR9KSA9PiB7XG4gICAgaWRNYXBbaWRdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxvY2FsTGlzdC5tYXAocCA9PiAoe1xuICAgICAgcG9zdFR5cGU6ICdkcmFmdCcsXG4gICAgICAuLi5wXG4gICAgfSkpO1xuICB9XG5cbiAgY29uc3QgbmV3UG9zdHMgPSBsb2NhbExpc3RcbiAgICAuZmlsdGVyKCh7IGlkIH0pID0+IHtcbiAgICAgIHJldHVybiAhaWRNYXBbaWRdO1xuICAgIH0pO1xuXG4gIHJldHVybiBbXG4gICAgLi4ubmV3UG9zdHMubWFwKHAgPT4gKHtwb3N0VHlwZTogJ2RyYWZ0JywgLi4ucH0pKSxcbiAgICAuLi5hcnIubWFwKHAgPT4gKHtwb3N0VHlwZTogJ3B1Ymxpc2hlZCcsIC4uLnB9KSlcbiAgXVxufTtcblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgX2dldFBlcnNpc3RvcktleXMoKS5mb3JFYWNoKGsgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGspXG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBzZXQsXG4gIGdldCxcbiAgcmVtb3ZlLFxuICBsaXN0LFxuICBkZXN0cm95LFxuICB3aXRoTG9jYWxMaXN0LFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXBsb2FkRmlsZSB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jbGFzcyBVcGxvYWRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuXG4gIHN0YXRlID0ge1xuICAgIGZpbGU6IG51bGwsXG4gICAgdXBsb2FkaW5nOiBmYWxzZSxcbiAgfTtcblxuICB1cGxvYWRGaWxlID0gKGZpbGUpID0+IHtcbiAgICBjb25zdCB1cGxvYWRBcGlFbmRQb2ludCA9ICdodHRwczovL2FwaS1ncm9jZXJ5LnpqaC1pbS5ub3cuc2gvdXBsb2FkJztcbiAgICBjb25zdCBpZCA9IGAke3RoaXMucHJvcHMuZmlsZUlkfS0ke2ZpbGUubmFtZX1gO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB1cGxvYWRpbmc6IHRydWUgfSk7XG4gICAgdXBsb2FkRmlsZSh1cGxvYWRBcGlFbmRQb2ludCwgZmlsZSwgJ2ZpbGUnLCB7IGlkIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB1cGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICBjb25zdCBjYkZuID0gdGhpcy5wcm9wcy5vblN1Y2Nlc3MgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGNvbnN0IGZpbGVVUkwgPSBgaHR0cHM6Ly9pbWFnZXMtcmVwby5zZ3AxLmRpZ2l0YWxvY2VhbnNwYWNlcy5jb20vJHtpZH1gO1xuICAgICAgICBjYkZuKGZpbGVVUkwpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB1cGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgfSlcbiAgfTtcblxuICBoYW5kbGVPbkNob29zZUZpbGUgPSAoKSA9PiB7XG4gICAgdGhpcy5maWxlSW5wdXQgJiYgdGhpcy5maWxlSW5wdXQuY2xpY2soKTtcbiAgfTtcblxuICBoYW5kbGVGaWxlU2VsZWN0ID0gKGUpID0+IHtcbiAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudXBsb2FkRmlsZShmaWxlKVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gW1xuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj17ZmlsZUlucHV0ID0+ICh0aGlzLmZpbGVJbnB1dCA9IGZpbGVJbnB1dCl9XG4gICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgYWNjZXB0PXt0aGlzLnByb3BzLmFjY2VwdH1cbiAgICAgICAgY2xhc3NOYW1lPVwiZmlsZS1pbnB1dFwiXG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUZpbGVTZWxlY3R9XG4gICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgZS50YXJnZXQudmFsdWUgPSBudWxsO1xuICAgICAgICB9fVxuICAgICAgLz4sXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgc2VsZWN0OiB0aGlzLmhhbmRsZU9uQ2hvb3NlRmlsZSxcbiAgICAgICAgdXBsb2FkaW5nOiB0aGlzLnN0YXRlLnVwbG9hZGluZ1xuICAgICAgfSlcbiAgICBdXG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgVXBsb2FkZXJcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmNvbnN0IEJsaW5rRG90ID0gKHsgc2l6ZSA9IDMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY2xhc3NOYW1lPVwiYmctYmxpbmstZG90XCJcbiAgICBzdHlsZT17e1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9fVxuICAvPlxuKTtcblxuZXhwb3J0IHtcbiAgQmxpbmtEb3Rcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1VwbG9hZGVyfSBmcm9tICcuL3VwbG9hZGVyJztcbmltcG9ydCB7QmxpbmtEb3R9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBBdHRhY2htZW50SWNvbiBmcm9tICcuLi9pY29ucy9hdHRhY2htZW50LnN2Zyc7XG5cbmNvbnN0IEF0dGFjaG1lbnRCdG4gPSAoe1xuICBvblN1Y2Nlc3MsXG4gIGZpbGVJZCxcbiAgaGFzQXR0YWNoQWxyZWFkeVxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxVcGxvYWRlclxuICAgICAgZmlsZUlkPXtmaWxlSWR9XG4gICAgICBvblN1Y2Nlc3M9e29uU3VjY2Vzc31cbiAgICA+XG4gICAgICB7XG4gICAgICAgICh7IHNlbGVjdCwgdXBsb2FkaW5nIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgYWN0aW9ucyAke2hhc0F0dGFjaEFscmVhZHkgPyAnaGFzQXR0YWNoJyA6ICcnfWB9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3NlbGVjdH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3VwbG9hZGluZ1xuICAgICAgICAgICAgICAgID8gPEJsaW5rRG90IC8+XG4gICAgICAgICAgICAgICAgOiA8QXR0YWNobWVudEljb24vPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgPC9VcGxvYWRlcj5cbiAgKVxufTtcblxuZXhwb3J0IHtcbiAgQXR0YWNobWVudEJ0blxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9kdWNlIGZyb20gJ2ltbWVyJztcblxuaW1wb3J0IEFzeW5jSW1wb3J0IGZyb20gJy4vYXN5bmMtaW1wb3J0JztcbmltcG9ydCBQb3N0TGlzdCBmcm9tICcuL3Bvc3QtbGlzdC8nXG5pbXBvcnQgYnVpbGRFZGl0b3JFeEFyciBmcm9tICcuL2N1c3RvbS1lZGl0b3ItY29tbWFuZHMvJ1xuaW1wb3J0ICogYXMgUGVyc2lzdG9yIGZyb20gJy4uL3BlcnNpc3Rvci8nXG5pbXBvcnQge0F0dGFjaG1lbnRCdG59IGZyb20gJy4vYXR0YWNobWVudC1idG4nO1xuXG5jb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmNvbnN0IEVkaXRvciA9IEFzeW5jSW1wb3J0KFxuICAoKSA9PiB7XG4gICAgcmV0dXJuIGltcG9ydCgnQHpob3VqaWFoYW8vZWRpdG9yL2xpYi9yZWFjdC1jb2RlLW1pcnJvcicpO1xuICB9LFxuICAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgd2lkdGg6ICdjYWxjKDUwJSAtIDE1cHgpJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJvcmRlcjogJ2RvdHRlZCAxcHggIzAwMCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZjBmMGYwJyxcbiAgICAgIH19XG4gICAgLz5cbiAgKVxuKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYW5lIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmVQb3N0SWR4OiAwLFxuICAgICAgdXBkYXRlU3RhbXA6IERhdGUubm93KCksXG4gICAgICBwb3N0TGlzdDogdGhpcy5wcm9wcy5wb3N0c1xuICAgIH1cbiAgfVxuICBcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gUGVyc2lzdG9yLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGFjdGl2ZSA9IChhY3RpdmVQb3N0SWR4KSA9PiB7dGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZVBvc3RJZHggfSl9XG5cbiAgdXBkYXRlUG9zdExpc3QgPSAodXBkYXRlckZuLCBjYkZuID0gKCkgPT4gbnVsbCkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHVwZGF0ZXJGbikpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwb3N0TGlzdDogdXBkYXRlckZuXG4gICAgICB9KVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG4gICAgICBwb3N0TGlzdDogcHJvZHVjZShwcmV2U3RhdGUucG9zdExpc3QsIHVwZGF0ZXJGbilcbiAgICB9KSwgY2JGbilcbiAgfVxuXG4gIGJ1aWxkRWR0Q2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRpbmdQb3N0ID0gdGhpcy5zdGF0ZS5wb3N0TGlzdFtcbiAgICAgIHRoaXMuc3RhdGUuYWN0aXZlUG9zdElkeFxuICAgIF0gfHwgdGhpcy5zdGF0ZS5wb3N0TGlzdFswXTtcbiAgICBjb25zdCBsb2NhbENoYW5nZXMgPSAhIVBlcnNpc3Rvci5nZXQoZWRpdGluZ1Bvc3QuaWQpO1xuICAgIGxldCB0eXBlID0gJ25vcm1hbC1maWxlJztcblxuICAgIGlmIChlZGl0aW5nUG9zdC5wb3N0VHlwZSA9PT0gJ2RyYWZ0JyAmJiBsb2NhbENoYW5nZXMpIHtcbiAgICAgIHR5cGUgPSAnbmV3LWZpbGUnO1xuICAgIH1cblxuICAgIGlmIChlZGl0aW5nUG9zdC5wb3N0VHlwZSA9PT0gJ3B1Ymxpc2hlZCcgJiYgbG9jYWxDaGFuZ2VzKSB7XG4gICAgICB0eXBlID0gJ2NoYW5nZWQtZmlsZSdcbiAgICB9XG5cbiAgICByZXR1cm4gXCJlZGl0b3Itd3JhcHBlciBcIiArIHR5cGU7XG4gIH07XG5cbiAgdGl0bGVGb3JtYXR0ZXIgPSBwID0+IHtcbiAgICByZXR1cm4gYCR7cC50aXRsZX1gO1xuICB9XG5cbiAgcmVmcmVzaCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHVwZGF0ZVN0YW1wOiBEYXRlLm5vdygpXG4gICAgfSlcbiAgfTtcblxuICBnZXRFZGl0aW5nUG9zdFRpdGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRpbmdQb3N0ID0gdGhpcy5zdGF0ZS5wb3N0TGlzdFtcbiAgICAgIHRoaXMuc3RhdGUuYWN0aXZlUG9zdElkeFxuICAgIF0gfHwgdGhpcy5zdGF0ZS5wb3N0TGlzdFswXTtcbiAgICByZXR1cm4gZWRpdGluZ1Bvc3QudGl0bGU7XG4gIH1cblxuICBoYW5kbGVFZGl0b3JDb250ZW50Q2hhbmdlID0gKGlkLCBjb250ZW50KSA9PiB7XG4gICAgY29uc3QgZWRpdGluZ1Bvc3QgPSB0aGlzLnN0YXRlLnBvc3RMaXN0W1xuICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVQb3N0SWR4XG4gICAgXSB8fCB0aGlzLnN0YXRlLnBvc3RMaXN0WzBdO1xuICAgIFBlcnNpc3Rvci5zZXQoaWQsIHtcbiAgICAgIHRpdGxlOiB0aGlzLmdldEVkaXRpbmdQb3N0VGl0bGUoKSxcbiAgICAgIHBvc3RUeXBlOiBlZGl0aW5nUG9zdC50eXBlLFxuICAgICAgaWQsXG4gICAgICBjb250ZW50XG4gICAgfSlcbiAgfTtcblxuICBoYW5kbGVVcGxvYWRGaWxlID0gaWQgPT4gKHVybCkgPT4ge1xuICAgIHRoaXMucHJvcHMuYXBpLnVwZGF0ZShpZCwgJycsICcnLCB1cmwpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zdExpc3QoKG9sZFBvc3RMaXN0KSA9PiB7XG4gICAgICAgICAgb2xkUG9zdExpc3QuZmluZCgoeyBpZDogdGFyZ2V0SWQgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGlkID09PSB0YXJnZXRJZFxuICAgICAgICAgIH0pLmF0dGFjaG1lbnRfdXJsID0gdXJsO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9KVxuICB9O1xuXG4gIHJlbmRlclRpdGxlTGlzdCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWxpc3QtY29sXCI+XG4gICAgICAgIDxQb3N0TGlzdFxuICAgICAgICAgIHRpdGxlcz17dGhpcy5zdGF0ZS5wb3N0TGlzdC5tYXAodGhpcy50aXRsZUZvcm1hdHRlcil9XG4gICAgICAgICAgdXBkYXRlPXt0aGlzLnByb3BzLmFwaS51cGRhdGV9XG4gICAgICAgICAgcG9zdExpc3RVcGRhdGVyPXt0aGlzLnVwZGF0ZVBvc3RMaXN0fVxuICAgICAgICAgIHJlZnJlc2g9e3RoaXMucmVmcmVzaH1cbiAgICAgICAgICBwb3N0cz17dGhpcy5zdGF0ZS5wb3N0TGlzdH1cbiAgICAgICAgICBvblRpdGxlQ2xpY2s9e3RoaXMuYWN0aXZlfVxuICAgICAgICAgIGFjdGl2ZVBvc3RJZHg9e3RoaXMuc3RhdGUuYWN0aXZlUG9zdElkeH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfTtcblxuICByZW5kZXJBdHRhY2htZW50QnRuID0gKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRpbmdQb3N0ID0gdGhpcy5zdGF0ZS5wb3N0TGlzdFtcbiAgICAgIHRoaXMuc3RhdGUuYWN0aXZlUG9zdElkeFxuICAgICAgXSB8fCB0aGlzLnN0YXRlLnBvc3RMaXN0WzBdO1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgcG9zdFR5cGU6IHR5cGUsXG4gICAgICBhdHRhY2htZW50X3VybDogdXJsXG4gICAgfSA9IGVkaXRpbmdQb3N0O1xuXG4gICAgY29uc3QgaXNQdWJsaXNoZWQgPSB0eXBlID09PSAncHVibGlzaGVkJztcblxuICAgIGlmICghaXNQdWJsaXNoZWQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdHRhY2htZW50QnRuXG4gICAgICAgIGZpbGVJZD17aWR9XG4gICAgICAgIGhhc0F0dGFjaEFscmVhZHk9eyEhdXJsfVxuICAgICAgICBvblN1Y2Nlc3M9e3RoaXMuaGFuZGxlVXBsb2FkRmlsZShpZCl9XG4gICAgICAvPlxuICAgIClcbiAgfTtcblxuICByZW5kZXJFZGl0b3IgPSAoKSA9PiB7XG4gICAgY29uc3QgZWRpdGluZ1Bvc3QgPSB0aGlzLnN0YXRlLnBvc3RMaXN0W1xuICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVQb3N0SWR4XG4gICAgXSB8fCB0aGlzLnN0YXRlLnBvc3RMaXN0WzBdO1xuICAgIGNvbnN0IGxvY2FsQ2hhbmdlcyA9IFBlcnNpc3Rvci5nZXQoZWRpdGluZ1Bvc3QuaWQpO1xuICAgIGNvbnN0IGluaXRDb250ZW50ID0gKGxvY2FsQ2hhbmdlcyAmJiBsb2NhbENoYW5nZXMuY29udGVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgPyBsb2NhbENoYW5nZXMuY29udGVudFxuICAgICAgOiAoZWRpdGluZ1Bvc3QuY29udGVudCB8fCAnJyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMuYnVpbGRFZHRDbHMoKX0gZGF0YS12PXt2ZXJzaW9ufT5cbiAgICAgICAgPEVkaXRvclxuICAgICAgICAgIHZhbHVlPXtpbml0Q29udGVudH1cbiAgICAgICAgICBjb250ZW50SWQ9e2VkaXRpbmdQb3N0LmlkfVxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmMmYyZjJcIlxuICAgICAgICAgIG9uU2F2ZT17dGhpcy5oYW5kbGVFZGl0b3JDb250ZW50Q2hhbmdlfVxuICAgICAgICAgIGV4QXJyPXtidWlsZEVkaXRvckV4QXJyKHtcbiAgICAgICAgICAgIGFwaTogdGhpcy5wcm9wcy5hcGksXG4gICAgICAgICAgICBwb3N0TGlzdFVwZGF0ZXI6IHRoaXMudXBkYXRlUG9zdExpc3QsXG4gICAgICAgICAgICBlZGl0aW5nUG9zdCxcbiAgICAgICAgICAgIHJlZnJlc2g6IHRoaXMucmVmcmVzaCxcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUsXG4gICAgICAgICAgICBleGl0OiB0aGlzLnByb3BzLmV4aXQsXG4gICAgICAgICAgICBQZXJzaXN0b3JcbiAgICAgICAgICB9LCBlZGl0aW5nUG9zdC5wb3N0VHlwZSl9XG4gICAgICAgIC8+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckF0dGFjaG1lbnRCdG4oKVxuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0aW5nUG9zdC5hdHRhY2htZW50X3VybFxuICAgICAgICAgICYmIDxpbWcgc3JjPXtlZGl0aW5nUG9zdC5hdHRhY2htZW50X3VybH0gLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVcIj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJUaXRsZUxpc3QoKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJFZGl0b3IoKX1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgeyAkIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuXG5pbXBvcnQgUGFuZSBmcm9tICcuL3BhbmUnO1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5leHBvcnQgY29uc3QgdW5pbnN0YWxsID0gKCkgPT4ge1xuICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKCQoJyNndWknKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChwb3N0cywgYXBpLCBleGl0KSA9PiB7XG4gIGNvbnN0ICRndWkgPSAkKCcjZ3VpJylcbiAgJGd1aS5jbGFzc0xpc3QuYWRkKCdmdWxsc2NyZWVuJyk7XG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICA8UGFuZSBwb3N0cz17cG9zdHN9IGFwaT17YXBpfSBleGl0PXtleGl0fS8+LFxuICAgICRndWlcbiAgKVxufVxuIiwiaW1wb3J0IHsgcmVxLCByZXFBbmRDYWNoZSB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuLy8gY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcGkuempoLmltL3onO1xuY29uc3QgQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcGktZ3JvY2VyeS56amgtaW0ubm93LnNoL3onO1xuY29uc3QgQVBJID0ge1xuICBjcmVhdGU6IGAke0JBU0VfVVJMfS9wb3N0L2NyZWF0ZWAsXG4gIHVwZGF0ZTogYCR7QkFTRV9VUkx9L3Bvc3QvdXBkYXRlYCxcbiAgZGVsZXRlOiBgJHtCQVNFX1VSTH0vcG9zdC9kZWxldGVgLFxuICBsaXN0OiBgJHtCQVNFX1VSTH0vcG9zdHNgLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGNyZWRlbnRpYWwpID0+IHtcbiAgY29uc3QgYWN0aW9uc05lZWRDcmVkZW50aWFsID0gY3JlZGVudGlhbFxuICAgID8ge1xuICAgICAgY3JlYXRlOiAodGl0bGUsIGNvbnRlbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcShcbiAgICAgICAgICBBUEkuY3JlYXRlLFxuICAgICAgICAgICdQT1NUJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAuLi5jcmVkZW50aWFsXG4gICAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IChpZCwgY29udGVudCwgdGl0bGUsIGF0dGFjaG1lbnRVUkwpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcShcbiAgICAgICAgICBBUEkudXBkYXRlLFxuICAgICAgICAgICdQT1NUJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIGF0dGFjaG1lbnRfdXJsOiBhdHRhY2htZW50VVJMLFxuICAgICAgICAgICAgLi4uY3JlZGVudGlhbFxuICAgICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgZGVsZXRlOiAoaWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcShcbiAgICAgICAgICBBUEkuZGVsZXRlLFxuICAgICAgICAgICdQT1NUJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIC4uLmNyZWRlbnRpYWxcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgOiB7XG4gICAgICBjcmVhdGU6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICAgICAgdXBkYXRlOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICAgIGRlbGV0ZTogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgfTtcblxuICByZXR1cm4ge1xuICAgIGxpc3Q6ICgpID0+IHtcbiAgICAgIHJldHVybiByZXFBbmRDYWNoZShBUEkubGlzdCk7XG4gICAgfSxcbiAgICAuLi5hY3Rpb25zTmVlZENyZWRlbnRpYWxcbiAgfVxufVxuIiwiaW1wb3J0IHsgZG9jVHBsLCAkIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuXG5pbXBvcnQgcnVuTWFuYWdlUGFuZWwgZnJvbSAnLi9tYW5hZ2UtcGFuZSc7XG5pbXBvcnQge3VuaW5zdGFsbH0gZnJvbSAnLi9tYW5hZ2UtcGFuZSc7XG5pbXBvcnQgcG9zdFNESyBmcm9tICcuL2Jsb2ctYXBpLyc7XG5pbXBvcnQgeyB3aXRoTG9jYWxMaXN0IH0gZnJvbSAnLi9wZXJzaXN0b3IvJztcblxuY29uc3QgZG9jID0gZG9jVHBsKCdwbScsICdwbSBbYWNjZXNzIHRva2VuXScsICdwb3N0cyBtYW5hZ2VyIGZvciBteSBibG9nLicpO1xuXG5jb25zdCBzYXZlQ3JlZGVudGlhbCA9IChjcmVkZW50aWFsKSA9PiB7XG4gIGNvbnN0IGNyZWRlbnRpYWxLZXkgPSAncC1jLWtleSc7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNyZWRlbnRpYWxLZXksIEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWwpKTtcbn07XG5cbmNvbnN0IGxvYWRDcmVkZW50aWFsID0gKCkgPT4ge1xuICBjb25zdCBjcmVkZW50aWFsS2V5ID0gJ3AtYy1rZXknO1xuICByZXR1cm4gSlNPTi5wYXJzZShcbiAgICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShjcmVkZW50aWFsS2V5KVxuICApIHx8IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRvYyxcbiAgc2hvcnRvcHRzOiAnZScsXG4gIGhhbmRsZXI6IGFzeW5jIChcbiAgICBwYXJhbXNPYmosXG4gICAgY21kU2V0LFxuICAgICR0ZXJtaW5hbCxcbiAgICB7XG4gICAgICByZXN0UGFyYW1zOiBhY2Nlc3NUb2tlblxuICAgIH1cbiAgKSA9PiB7XG4gICAgaWYgKHBhcmFtc09iai5lKSB7XG4gICAgICB1bmluc3RhbGwoKTtcbiAgICAgIHJldHVybiAnR29vZGJ5ZSc7XG4gICAgfTtcblxuICAgIGNvbnN0IGNyZWRlbnRpYWwgPSAoIHBhcmFtc09iai51c2VyICYmIHBhcmFtc09iai5wYXNzd29yZCApXG4gICAgICA/IHtcbiAgICAgICAgdXNlcjogcGFyYW1zT2JqLnVzZXIsXG4gICAgICAgIHBhc3N3b3JkOiBwYXJhbXNPYmoucGFzc3dvcmRcbiAgICAgIH1cbiAgICAgIDogbG9hZENyZWRlbnRpYWwoKTtcblxuICAgIHNhdmVDcmVkZW50aWFsKGNyZWRlbnRpYWwpO1xuICAgIGNvbnN0IGFwaSA9IHBvc3RTREsoY3JlZGVudGlhbCk7XG4gICAgY29uc3QgcG9zdHMgPSBhd2FpdCBhcGkubGlzdCgpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBydW5NYW5hZ2VQYW5lbCh3aXRoTG9jYWxMaXN0KHBvc3RzKSwgYXBpLCAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICQoJyNndWknKS5jbGFzc0xpc3QucmVtb3ZlKCdmdWxsc2NyZWVuJyk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBUZXJtaW5hbCAmJiBUZXJtaW5hbC5leGVjKCdwbSAtZScpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gXCJGYWlsIHRvIGZldGNoIHBvc3RzXCI7XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==