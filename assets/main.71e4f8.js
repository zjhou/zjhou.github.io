!function(n){function e(e){for(var t,r,u=e[0],a=e[1],c=0,i=[];c<u.length;c++)r=u[c],o[r]&&i.push(o[r][0]),o[r]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t]);for(s&&s(e);i.length;)i.shift()()}var t={},r={2:0},o={2:0};function u(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,u),r.l=!0,r.exports}u.e=function(n){var e=[];r[n]?e.push(r[n]):0!==r[n]&&{1:1,4:1,6:1,7:1}[n]&&e.push(r[n]=new Promise((function(e,t){for(var o=({}[n]||n)+"."+{0:"5827a2",1:"4b2714",4:"a4ef4c",5:"1afc6d",6:"3f1527",7:"fafaaa",8:"c76a1e",9:"52ff31",10:"3a8d55",11:"9eaded"}[n]+".min.css",a=u.p+o,c=document.getElementsByTagName("link"),i=0;i<c.length;i++){var s=(l=c[i]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(s===o||s===a))return e()}var f=document.getElementsByTagName("style");for(i=0;i<f.length;i++){var l;if((s=(l=f[i]).getAttribute("data-href"))===o||s===a)return e()}var d=document.createElement("link");d.rel="stylesheet",d.type="text/css",d.onload=e,d.onerror=function(e){var o=e&&e.target&&e.target.src||a,u=new Error("Loading CSS chunk "+n+" failed.\n("+o+")");u.code="CSS_CHUNK_LOAD_FAILED",u.request=o,delete r[n],d.parentNode.removeChild(d),t(u)},d.href=a,document.getElementsByTagName("head")[0].appendChild(d)})).then((function(){r[n]=0})));var t=o[n];if(0!==t)if(t)e.push(t[2]);else{var a=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=a);var c,i=document.createElement("script");i.charset="utf-8",i.timeout=120,u.nc&&i.setAttribute("nonce",u.nc),i.src=function(n){return u.p+""+({}[n]||n)+".71e4f8.js"}(n),c=function(e){i.onerror=i.onload=null,clearTimeout(s);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),u=e&&e.target&&e.target.src,a=new Error("Loading chunk "+n+" failed.\n("+r+": "+u+")");a.type=r,a.request=u,t[1](a)}o[n]=void 0}};var s=setTimeout((function(){c({type:"timeout",target:i})}),12e4);i.onerror=i.onload=c,document.head.appendChild(i)}return Promise.all(e)},u.m=n,u.c=t,u.d=function(n,e,t){u.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},u.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},u.t=function(n,e){if(1&e&&(n=u(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(u.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)u.d(t,r,function(e){return n[e]}.bind(null,r));return t},u.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return u.d(e,"a",e),e},u.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},u.p="/assets/",u.oe=function(n){throw console.error(n),n};var a=this.webpackJsonp=this.webpackJsonp||[],c=a.push.bind(a);a.push=e,a=a.slice();for(var i=0;i<a.length;i++)e(a[i]);var s=c;u(u.s=0)}({0:function(n,e,t){n.exports=t("EYcP")},"1EKS":function(n,e,t){n.exports=t("bS/x")(38)},"8RZD":function(n,e,t){"use strict";var r=t("v/Yx"),o=t.n(r),u=function(n){for(var e=arguments.length,t=new Array(e>1?e-1:0),r=1;r<e;r++)t[r-1]=arguments[r];return 0===t.length?n:n.replace(/{(\d+)}/g,(function(n,e){return null!=t[e]?t[e]:n}))},a=function(n){if(!n)return"";var e=n.split("\n"),t=e.filter((function(n){return/^[^-\s].*/.test(n)&&""!==n})).length>0;if(1===e.length||t)return n;var r=e.map((function(n){return n.match(/^\s+/)})).filter((function(n){return n})).map((function(n){return n[0]})),o=Math.min.apply(null,r.map((function(n){return n.length}))),u=e.map((function(n){return n.slice(o)})).join("\n");return u.startsWith("\n")?u.replace("\n",""):u},c=function(n,e,t){var r,o=e||["-","\\","|","/"],u=0;return function(e,a){e?r=setInterval((function(){u++,a?a.innerHTML=o[u%o.length]:n&&n(o[u%o.length])}),t||80):(a&&a.remove(),clearInterval(r))}},i=function(){var n=function(n){return n<10?"0"+n:n},e=new Date,t=e.getHours(),r=e.getMinutes(),o=e.getSeconds(),u=e.getMilliseconds(),a=n(t),c=n(r),i=n(o);return"".concat(a,":").concat(c,":").concat(i,".").concat(y("0")(u,"999"))};function s(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){if(!(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n)))return;var t=[],r=!0,o=!1,u=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done)&&(t.push(a.value),!e||t.length!==e);r=!0);}catch(n){o=!0,u=n}finally{try{r||null==c.return||c.return()}finally{if(o)throw u}}return t}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}document.querySelectorAll.bind(document);var f=document.querySelector.bind(document),l=function(n){var e=document.createElement("a");e.href=n||"about:blanket",e.target="_blanket",e.click(),e=null},d=function(n){var e=document.createElement("div");return e.innerHTML=n,e.children.length?e.children:e.childNodes},p=function(n){return!(n.children&&n.children.length)},m=function(n){return n.slice().pop()},h=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3,e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=arguments.length>2?arguments[2]:void 0,r=function n(e){return e<2?e:n(e-1)+n(e-2)},o=r(n),u=r(n+1),a=r(n+2),c=r(n+3),i=r(n+4),f=[[0,0],[u+o,0],[0,2*o],[u+o,2*o],[0,i-a]],l=function(n){return n.replace(/[\n]/g,"")},p=function(n,e,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"#000";return l('\n      <rect \n        x="'.concat(n,'"\n        y="').concat(e,'" \n        width="').concat(t,'" \n        height="').concat(r,'" \n        fill="').concat(o,'" \n        stroke-width="0"\n      />\n    '))},m=function(n,e,t){return l('\n      <svg\n        width="'.concat(n,'"\n        height="').concat(e,'"\n        version="1.1"\n        xmlns="http://www.w3.org/2000/svg"\n      >\n        ').concat(t,"\n      </svg>\n    "))},h=f.map((function(n,e){var r=s(n,2),i=r[0],f=r[1],l=4===e;return p(i,f,l?c:u,l?a:o,t)})).join(""),g=m(c,i,h);return e?d(g)[0]:g},g=function(n){var e=document.getElementsByTagName("head")[0],t=e.querySelector("style");t||(t=e.appendChild(document.createElement("style"))).setAttribute("type","text/css"),t.appendChild(d(a(n))[0])},v=function(n,e){var t=document.createEvent("Events");t.initEvent("keyup",!0,!0),t.key=e,n.dispatchEvent(t)},y=function(n){return function(e,t){return String(n).repeat(String(t).length-String(e).length)+e}},b=function(n){n.scrollTop=n.scrollHeight},w=function(n,e){return"<a href=".concat(e,' target="_blanket" >').concat(n,"</a>")},x=function(n,e,t){return"\n    NAME\n        ".concat(n,"\n        \n    SYNOPSIS\n        ").concat(e,"\n        \n    DESCRIPTION\n        ").concat(t).replace(/</g,"&lt;")},E=new Map,S=t("1EKS"),A=t.n(S),j=function(n,e,t,r){var o;return regeneratorRuntime.async((function(u){for(;;)switch(u.prev=u.next){case 0:return o=new Headers({"Content-Type":"application/json",Accept:"application/json"}),r&&o.append("Authorization","token ".concat(r)),u.next=4,regeneratorRuntime.awrap(fetch(n,{method:e,headers:o,body:t?JSON.stringify(t):null}));case 4:return u.abrupt("return",u.sent.json());case 5:case"end":return u.stop()}}))},O=function(){var n,e,t,r,o,u,a=arguments;return regeneratorRuntime.async((function(c){for(;;)switch(c.prev=c.next){case 0:for(n=a.length,e=new Array(n),t=0;t<n;t++)e[t]=a[t];if(r=A()(e),!(o=E.get(r))){c.next=7;break}return c.abrupt("return",o);case 7:return c.next=9,regeneratorRuntime.awrap(j.apply(void 0,e));case 9:return u=c.sent,E.set(r,u),c.abrupt("return",u);case 12:case"end":return c.stop()}}))},T=function(n){if(E.get(n))return Promise.resolve();var e,t,r=new Image;r.src=n;try{e=r.decode()}catch(n){t=r,e=new Promise((function(n,e){t.onload=function(){n(t)}}))}return e.then((function(){E.set(n,!0)}))};function R(n){return function(n){if(Array.isArray(n)){for(var e=0,t=new Array(n.length);e<n.length;e++)t[e]=n[e];return t}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}t.d(e,"s",(function(){return k})),t.d(e,"n",(function(){return _})),t.d(e,"k",(function(){return N})),t.d(e,"q",(function(){return I})),t.d(e,"x",(function(){return M})),t.d(e,"a",(function(){return f})),t.d(e,"j",(function(){return l})),t.d(e,"m",(function(){return p})),t.d(e,"d",(function(){return d})),t.d(e,"g",(function(){return h})),t.d(e,"i",(function(){return m})),t.d(e,"l",(function(){return g})),t.d(e,"y",(function(){return v})),t.d(e,"c",(function(){return y})),t.d(e,"v",(function(){return b})),t.d(e,"o",(function(){return w})),t.d(e,"e",(function(){return x})),t.d(e,"f",(function(){return u})),t.d(e,"b",(function(){return a})),t.d(e,"p",(function(){return c})),t.d(e,"r",(function(){return i})),t.d(e,"t",(function(){return j})),t.d(e,"h",(function(){return T})),t.d(e,"u",(function(){return O})),t.d(e,"w",(function(){return E}));var P=new o.a(navigator.userAgent),k=function(n,e){var t,r,o,u,a,c,i=arguments;return regeneratorRuntime.async((function(s){for(;;)switch(s.prev=s.next){case 0:for(t=i.length,r=new Array(t>2?t-2:0),o=2;o<t;o++)r[o-2]=i[o];return u=R(n),a=u[0],c=u.slice(1),s.abrupt("return",c.reduce((function(n,t,o){var u;return regeneratorRuntime.async((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,regeneratorRuntime.awrap(n);case 2:return u=a.sent,a.abrupt("return",t.apply(void 0,[u].concat(r)).then((function(n){e&&"function"==typeof e&&e(o+1,n)})));case 4:case"end":return a.stop()}}))}),a().then((function(n){return e&&"function"==typeof e&&e(0,n),n}))));case 3:case"end":return s.stop()}}))};function C(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,o=0;return new Promise((function(u,a){!function c(){"function"==typeof n?t>=0?(n(r?o:t),o++,t--,setTimeout(c,function(n){return Math.round(Math.random()*n/2)+n}(e))):setTimeout((function(){u("done")}),5*e):a("invalid param")}()}))}function M(n,e){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=null,o=!0;return function(){var u=arguments,a=this,c=t&&o,i=function(){n.apply(a,u),r=null};c&&(o=!1,i()),r||(r=setTimeout(i,e))}}function N(n,e,t){return C((function(t){return e(n.slice(0,t))}),t,n.length,!0)}function I(){}var _=function(){return"mobile"===P.device.type}},BaMe:function(n,e,t){},EYcP:function(n,e,t){"use strict";t.r(e);var r=t("8RZD");t("BaMe");function o(n,e,o,u,a){var c,i;return regeneratorRuntime.async((function(n){for(;;)switch(n.prev=n.next){case 0:if(window.Terminal){n.next=2;break}return n.abrupt("return",!1);case 2:return function(){var n,e;return regeneratorRuntime.async((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,regeneratorRuntime.awrap(Promise.all([t.e(1),t.e(8)]).then(t.bind(null,"zsIg")));case 2:n=r.sent,e=n.default,window.Terminal.addCommands({edit:e});case 5:case"end":return r.stop()}}))},c=[{action:function(){var n,e;return regeneratorRuntime.async((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,regeneratorRuntime.awrap(t.e(7).then(t.bind(null,"97er")));case 2:n=r.sent,e=n.default,window.Terminal.addCommands(e);case 5:case"end":return r.stop()}}))},desc:"安装基本命令 [DONE]"},{action:function(){var n,e;return regeneratorRuntime.async((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,regeneratorRuntime.awrap(Promise.all([t.e(6),t.e(9)]).then(t.bind(null,"XXAI")));case 2:n=r.sent,e=n.default,window.Terminal.addCommands({pm:e});case 5:case"end":return r.stop()}}))},desc:"安装管理工具 [DONE]"},{action:function(){var n,e;return regeneratorRuntime.async((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,regeneratorRuntime.awrap(Promise.all([t.e(0),t.e(4),t.e(5)]).then(t.bind(null,"b3vB")));case 2:n=r.sent,e=n.default,window.Terminal.addCommands({blog:e});case 5:case"end":return r.stop()}}))},desc:"安装博客组件 [DONE]"}],i=function(n){a(c[n].desc,!0)},n.abrupt("return",Object(r.s)(c.map((function(n){return n.action})),i));case 9:case"end":return n.stop()}}))}var u,a,c;t("t4vB");regeneratorRuntime.async((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,regeneratorRuntime.awrap(Promise.all([t.e(0),t.e(10)]).then(t.bind(null,"Rf5Z")));case 2:return u=n.sent,a=u.default,c=a(Object(r.a)("#terminal"),{}),window.Terminal=c,document.addEventListener("click",(function(n){if(Array.from(n.target.classList).includes("command")){var e=n.target.getAttribute("data-cmd"),t=n.target.hasAttribute("multi"),r=t?e.split(/\s*&&\s*/):e,o=t?"humanizerExecCmdArr":"humanizerExec";n.target.classList.remove("command"),c[o](r).then((function(){n.target.classList.add("command")}))}})),c.addCommands({hi:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0],arguments.length>1&&arguments[1],arguments.length>2&&arguments[2],arguments.length>3&&arguments[3];var n=arguments.length>4?arguments[4]:void 0;n("This site is currently constructing..."),n("comming soon!")}}),c.addCommands({preInstall:o}),n.next=11,regeneratorRuntime.awrap(c.humanizerExec("preInstall"));case 11:if(!Object(r.n)()){n.next=13;break}return n.abrupt("return",c.humanizerExec("hi"));case 13:case"end":return n.stop()}})).then((function(){Object(r.n)()||Object(r.a)(".commands").classList.add("show")}))},"bS/x":function(n,e){n.exports=vendor_lib_13010f71d9ca55cb5953},t4vB:function(n,e,t){},"v/Yx":function(n,e,t){n.exports=t("bS/x")(51)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,