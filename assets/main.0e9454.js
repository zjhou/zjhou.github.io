!function(e){function n(n){for(var t,r,u=n[0],i=n[1],a=0,c=[];a<u.length;a++)r=u[a],o[r]&&c.push(o[r][0]),o[r]=0;for(t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t]);for(f&&f(n);c.length;)c.shift()()}var t={},r={0:0},o={0:0};function u(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,u),r.l=!0,r.exports}u.e=function(e){var n=[];r[e]?n.push(r[e]):0!==r[e]&&{2:1,3:1,4:1}[e]&&n.push(r[e]=new Promise((function(n,t){for(var o=({}[e]||e)+"."+{2:"b3cb04",3:"1f92f0",4:"00d5dc",5:"f37d1b"}[e]+".min.css",i=u.p+o,a=document.getElementsByTagName("link"),c=0;c<a.length;c++){var f=(l=a[c]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(f===o||f===i))return n()}var s=document.getElementsByTagName("style");for(c=0;c<s.length;c++){var l;if((f=(l=s[c]).getAttribute("data-href"))===o||f===i)return n()}var p=document.createElement("link");p.rel="stylesheet",p.type="text/css",p.onload=n,p.onerror=function(n){var o=n&&n.target&&n.target.src||i,u=new Error("Loading CSS chunk "+e+" failed.\n("+o+")");u.code="CSS_CHUNK_LOAD_FAILED",u.request=o,delete r[e],p.parentNode.removeChild(p),t(u)},p.href=i,document.getElementsByTagName("head")[0].appendChild(p)})).then((function(){r[e]=0})));var t=o[e];if(0!==t)if(t)n.push(t[2]);else{var i=new Promise((function(n,r){t=o[e]=[n,r]}));n.push(t[2]=i);var a,c=document.createElement("script");c.charset="utf-8",c.timeout=120,u.nc&&c.setAttribute("nonce",u.nc),c.src=function(e){return u.p+""+({}[e]||e)+".0e9454.js"}(e),a=function(n){c.onerror=c.onload=null,clearTimeout(f);var t=o[e];if(0!==t){if(t){var r=n&&("load"===n.type?"missing":n.type),u=n&&n.target&&n.target.src,i=new Error("Loading chunk "+e+" failed.\n("+r+": "+u+")");i.type=r,i.request=u,t[1](i)}o[e]=void 0}};var f=setTimeout((function(){a({type:"timeout",target:c})}),12e4);c.onerror=c.onload=a,document.head.appendChild(c)}return Promise.all(n)},u.m=e,u.c=t,u.d=function(e,n,t){u.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,n){if(1&n&&(e=u(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(u.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)u.d(t,r,function(n){return e[n]}.bind(null,r));return t},u.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(n,"a",n),n},u.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},u.p="/assets/",u.oe=function(e){throw console.error(e),e};var i=this.webpackJsonp=this.webpackJsonp||[],a=i.push.bind(i);i.push=n,i=i.slice();for(var c=0;c<i.length;c++)n(i[c]);var f=a;u(u.s=0)}({0:function(e,n,t){e.exports=t("c/hr")},"1EKS":function(e,n,t){e.exports=t("Poco")(38)},"8RZD":function(e,n,t){"use strict";var r=t("v/Yx"),o=t.n(r),u=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))};document.querySelectorAll.bind(document);var i=document.querySelector.bind(document),a=function(e){return function(n,t){return String(e).repeat(String(t).length-String(n).length)+n}},c=function(e,n,t){return"\n    NAME\n        ".concat(e,"\n        \n    SYNOPSIS\n        ").concat(n,"\n        \n    DESCRIPTION\n        ").concat(t).replace(/</g,"&lt;")},f=new Map,s=t("1EKS"),l=t.n(s);function p(e,n,t,r,o,u,i){try{var a=e[u](i),c=a.value}catch(e){return void t(e)}a.done?n(c):Promise.resolve(c).then(r,o)}function d(e){return function(){var n=this,t=arguments;return new Promise((function(r,o){var u=e.apply(n,t);function i(e){p(u,r,o,i,a,"next",e)}function a(e){p(u,r,o,i,a,"throw",e)}i(void 0)}))}}var h,v,m,g=function(){var e=d(regeneratorRuntime.mark((function e(n,t,r,o){var u,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return u=new Headers({"Content-Type":"application/json",Accept:"application/json"}),o&&u.append("Authorization","token ".concat(o)),i=r?JSON.stringify(r):null,e.next=5,fetch(n,{method:t,headers:u,body:i});case 5:return e.abrupt("return",e.sent.json());case 6:case"end":return e.stop()}}),e)})));return function(n,t,r,o){return e.apply(this,arguments)}}(),y=(h=g,function(){var e=d(regeneratorRuntime.mark((function e(n,t){var r,o,u,i,a,c=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(a in r=c.length>2&&void 0!==c[2]?c[2]:"file",o=c.length>3&&void 0!==c[3]?c[3]:{},u=new Headers({Accept:"application/json"}),i=new FormData,o)o.hasOwnProperty(a)&&i.append(a,o[a]);return i.append("type",t.type),i.append(r,t),e.next=9,fetch(n,{method:"POST",headers:u,body:i});case 9:return e.abrupt("return",e.sent.json());case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}()),b=function(){var e=d(regeneratorRuntime.mark((function e(){var n,t,r,o,u,i,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(n=a.length,t=new Array(n),r=0;r<n;r++)t[r]=a[r];if(o=l()(t),!(u=f.get(o))){e.next=7;break}return e.abrupt("return",u);case 7:return e.next=9,g.apply(void 0,t);case 9:return i=e.sent,f.set(o,i),e.abrupt("return",i);case 12:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),w=function(e){if(f.get(e))return Promise.resolve();var n,t,r=new Image;r.src=e;try{n=r.decode()}catch(e){t=r,n=new Promise((function(e,n){t.onload=function(){e(t)}}))}return n.then((function(){f.set(e,!0)}))};t.d(n,"f",(function(){return x})),t.d(n,"e",(function(){return P})),t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return a})),t.d(n,"c",(function(){return c})),t.d(n,"k",(function(){return u})),t.d(n,"g",(function(){return g})),t.d(n,"d",(function(){return w})),t.d(n,"h",(function(){return b})),t.d(n,"j",(function(){return y})),t.d(n,"i",(function(){return f}));var S=new o.a(navigator.userAgent),x=function(e,n){return n.map((function(n){return e[n]}))};var P=function(){return"mobile"===S.device.type}},"9Huf":function(e,n,t){},Poco:function(e,n){e.exports=vendor_lib_a1be979b9d868af4d75a},SJhl:function(e,n,t){},"c/hr":function(e,n,t){"use strict";t.r(n);var r=t("8RZD");t("SJhl"),t("9Huf");function o(e,n,t,r,o,u,i){try{var a=e[u](i),c=a.value}catch(e){return void t(e)}a.done?n(c):Promise.resolve(c).then(r,o)}(function(){var e,n=(e=regeneratorRuntime.mark((function e(){var n,o,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(5)]).then(t.bind(null,"b3vB"));case 2:return n=e.sent,o=n.default,u=Object(r.a)("#gui"),e.abrupt("return",o(u));case 6:case"end":return e.stop()}}),e)})),function(){var n=this,t=arguments;return new Promise((function(r,u){var i=e.apply(n,t);function a(e){o(i,r,u,a,c,"next",e)}function c(e){o(i,r,u,a,c,"throw",e)}a(void 0)}))});return function(){return n.apply(this,arguments)}})()().then((function(){console.log("loaded")}))},"v/Yx":function(e,n,t){e.exports=t("Poco")(49)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL25vZGVfbW9kdWxlcy9vYmplY3QtaGFzaC9kaXN0L29iamVjdF9oYXNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSB2ZW5kb3JfbGliX2ExYmU5NzliOWQ4NjhhZjRkNzVhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvc3RydXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3V0aWxzL2xpYi9kb211dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvdHBsdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vdXRpbHMvbGliL3N0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby91dGlscy9saWIvcmVxdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3V0aWxzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2ZW5kb3JfbGliX2ExYmU5NzliOWQ4NjhhZjRkNzVhXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9qcy9tYWluL2luZGV4LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9ub2RlX21vZHVsZXMvdWEtZGV2aWNlL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSB2ZW5kb3JfbGliX2ExYmU5NzliOWQ4NjhhZjRkNzVhIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImluc3RhbGxlZE1vZHVsZXMiLCJpbnN0YWxsZWRDc3NDaHVua3MiLCIwIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwiZSIsInByb21pc2VzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJocmVmIiwiZnVsbGhyZWYiLCJwIiwiZXhpc3RpbmdMaW5rVGFncyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkYXRhSHJlZiIsInRhZyIsImdldEF0dHJpYnV0ZSIsInJlbCIsImV4aXN0aW5nU3R5bGVUYWdzIiwibGlua1RhZyIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwib25sb2FkIiwib25lcnJvciIsImV2ZW50IiwicmVxdWVzdCIsInRhcmdldCIsInNyYyIsImVyciIsIkVycm9yIiwiY29kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwidGhlbiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJvblNjcmlwdENvbXBsZXRlIiwic2NyaXB0IiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsImpzb25wU2NyaXB0U3JjIiwiY2xlYXJUaW1lb3V0IiwiY2h1bmsiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJzZXRUaW1lb3V0IiwiaGVhZCIsImFsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJvZSIsImNvbnNvbGUiLCJqc29ucEFycmF5IiwidGhpcyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsInMiLCJ1dWlkIiwicmVwbGFjZSIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCIkIiwicXVlcnlTZWxlY3RvciIsImNvbXBsZXRpb25XaXRoIiwiZmlsbGluZ0NoYXIiLCJzaG9ydCIsImxvbmciLCJTdHJpbmciLCJyZXBlYXQiLCJkb2NUcGwiLCJzeW5vcHNpcyIsImRlc2NyaXB0aW9uIiwic3RvcmUiLCJNYXAiLCJmbiIsImRlZmF1bHRWYWwiLCJyZXN1bHQiLCJyZXEiLCJ1cmwiLCJtZXRob2QiLCJ0b2tlbiIsImhlYWRlcnMiLCJIZWFkZXJzIiwiYXBwZW5kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmZXRjaCIsImpzb24iLCJ1cGxvYWRGaWxlIiwiZmlsZSIsImsiLCJleHRyYURhdGEiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwicmVxQW5kQ2FjaGUiLCJhcmdzIiwiaGFzaCIsIm5ld1Jlc3VsdCIsInNldCIsImdldEltYWdlIiwicmV0UHJvbWlzZSIsImltZ09iaiIsImltYWdlIiwiSW1hZ2UiLCJkZWNvZGUiLCJ1YUluZm8iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInBpY2siLCJvYmoiLCJrZXlzIiwibWFwIiwiaXNNb2JpbGUiLCJkZXZpY2UiLCJ2ZW5kb3JfbGliX2ExYmU5NzliOWQ4NjhhZjRkNzVhIiwicmVuZGVyQmxvZ0F0IiwibW91bnREb20iLCJpbml0IiwibG9nIl0sIm1hcHBpbmdzIjoiYUFDRSxTQUFTQSxFQUFxQkMsR0FRN0IsSUFQQSxJQU1JQyxFQUFVQyxFQU5WQyxFQUFXSCxFQUFLLEdBQ2hCSSxFQUFjSixFQUFLLEdBS0FLLEVBQUksRUFBR0MsRUFBVyxHQUNwQ0QsRUFBSUYsRUFBU0ksT0FBUUYsSUFDekJILEVBQVVDLEVBQVNFLEdBQ2hCRyxFQUFnQk4sSUFDbEJJLEVBQVNHLEtBQUtELEVBQWdCTixHQUFTLElBRXhDTSxFQUFnQk4sR0FBVyxFQUU1QixJQUFJRCxLQUFZRyxFQUNaTSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLVCxFQUFhSCxLQUNwRGEsRUFBUWIsR0FBWUcsRUFBWUgsSUFLbEMsSUFGR2MsR0FBcUJBLEVBQW9CZixHQUV0Q00sRUFBU0MsUUFDZEQsRUFBU1UsT0FBVFYsR0FPRixJQUFJVyxFQUFtQixHQUduQkMsRUFBcUIsQ0FDeEJDLEVBQUcsR0FNQVgsRUFBa0IsQ0FDckJXLEVBQUcsR0FXSixTQUFTQyxFQUFvQm5CLEdBRzVCLEdBQUdnQixFQUFpQmhCLEdBQ25CLE9BQU9nQixFQUFpQmhCLEdBQVVvQixRQUduQyxJQUFJQyxFQUFTTCxFQUFpQmhCLEdBQVksQ0FDekNJLEVBQUdKLEVBQ0hzQixHQUFHLEVBQ0hGLFFBQVMsSUFVVixPQU5BUCxFQUFRYixHQUFVWSxLQUFLUyxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRCxHQUcvREUsRUFBT0MsR0FBSSxFQUdKRCxFQUFPRCxRQUtmRCxFQUFvQkksRUFBSSxTQUF1QnRCLEdBQzlDLElBQUl1QixFQUFXLEdBS1pQLEVBQW1CaEIsR0FBVXVCLEVBQVNoQixLQUFLUyxFQUFtQmhCLElBQ3pCLElBQWhDZ0IsRUFBbUJoQixJQUZYLENBQUMsRUFBSSxFQUFFLEVBQUksRUFBRSxFQUFJLEdBRXNCQSxJQUN0RHVCLEVBQVNoQixLQUFLUyxFQUFtQmhCLEdBQVcsSUFBSXdCLFNBQVEsU0FBU0MsRUFBU0MsR0FJekUsSUFIQSxJQUFJQyxHQUFhLEdBQUczQixJQUFVQSxHQUFXLElBQU0sQ0FBQyxFQUFJLFNBQVMsRUFBSSxTQUFTLEVBQUksU0FBUyxFQUFJLFVBQVVBLEdBQVcsV0FDNUc0QixFQUFXVixFQUFvQlcsRUFBSUYsRUFDbkNHLEVBQW1CQyxTQUFTQyxxQkFBcUIsUUFDN0M3QixFQUFJLEVBQUdBLEVBQUkyQixFQUFpQnpCLE9BQVFGLElBQUssQ0FDaEQsSUFDSThCLEdBREFDLEVBQU1KLEVBQWlCM0IsSUFDUmdDLGFBQWEsY0FBZ0JELEVBQUlDLGFBQWEsUUFDakUsR0FBZSxlQUFaRCxFQUFJRSxNQUF5QkgsSUFBYU4sR0FBUU0sSUFBYUwsR0FBVyxPQUFPSCxJQUVyRixJQUFJWSxFQUFvQk4sU0FBU0MscUJBQXFCLFNBQ3RELElBQVE3QixFQUFJLEVBQUdBLEVBQUlrQyxFQUFrQmhDLE9BQVFGLElBQUssQ0FDakQsSUFBSStCLEVBRUosSUFESUQsR0FEQUMsRUFBTUcsRUFBa0JsQyxJQUNUZ0MsYUFBYSxnQkFDaEJSLEdBQVFNLElBQWFMLEVBQVUsT0FBT0gsSUFFdkQsSUFBSWEsRUFBVVAsU0FBU1EsY0FBYyxRQUNyQ0QsRUFBUUYsSUFBTSxhQUNkRSxFQUFRRSxLQUFPLFdBQ2ZGLEVBQVFHLE9BQVNoQixFQUNqQmEsRUFBUUksUUFBVSxTQUFTQyxHQUMxQixJQUFJQyxFQUFVRCxHQUFTQSxFQUFNRSxRQUFVRixFQUFNRSxPQUFPQyxLQUFPbEIsRUFDdkRtQixFQUFNLElBQUlDLE1BQU0scUJBQXVCaEQsRUFBVSxjQUFnQjRDLEVBQVUsS0FDL0VHLEVBQUlFLEtBQU8sd0JBQ1hGLEVBQUlILFFBQVVBLFNBQ1A1QixFQUFtQmhCLEdBQzFCc0MsRUFBUVksV0FBV0MsWUFBWWIsR0FDL0JaLEVBQU9xQixJQUVSVCxFQUFRWCxLQUFPQyxFQUVKRyxTQUFTQyxxQkFBcUIsUUFBUSxHQUM1Q29CLFlBQVlkLE1BQ2ZlLE1BQUssV0FDUHJDLEVBQW1CaEIsR0FBVyxNQU1oQyxJQUFJc0QsRUFBcUJoRCxFQUFnQk4sR0FDekMsR0FBMEIsSUFBdkJzRCxFQUdGLEdBQUdBLEVBQ0YvQixFQUFTaEIsS0FBSytDLEVBQW1CLFFBQzNCLENBRU4sSUFBSUMsRUFBVSxJQUFJL0IsU0FBUSxTQUFTQyxFQUFTQyxHQUMzQzRCLEVBQXFCaEQsRUFBZ0JOLEdBQVcsQ0FBQ3lCLEVBQVNDLE1BRTNESCxFQUFTaEIsS0FBSytDLEVBQW1CLEdBQUtDLEdBR3RDLElBQ0lDLEVBREFDLEVBQVMxQixTQUFTUSxjQUFjLFVBR3BDa0IsRUFBT0MsUUFBVSxRQUNqQkQsRUFBT0UsUUFBVSxJQUNiekMsRUFBb0IwQyxJQUN2QkgsRUFBT0ksYUFBYSxRQUFTM0MsRUFBb0IwQyxJQUVsREgsRUFBT1gsSUFuR1YsU0FBd0I5QyxHQUN2QixPQUFPa0IsRUFBb0JXLEVBQUksSUFBTSxHQUFHN0IsSUFBVUEsR0FBM0NrQixhQWtHUTRDLENBQWU5RCxHQUU1QndELEVBQW1CLFNBQVViLEdBRTVCYyxFQUFPZixRQUFVZSxFQUFPaEIsT0FBUyxLQUNqQ3NCLGFBQWFKLEdBQ2IsSUFBSUssRUFBUTFELEVBQWdCTixHQUM1QixHQUFhLElBQVZnRSxFQUFhLENBQ2YsR0FBR0EsRUFBTyxDQUNULElBQUlDLEVBQVl0QixJQUF5QixTQUFmQSxFQUFNSCxLQUFrQixVQUFZRyxFQUFNSCxNQUNoRTBCLEVBQVV2QixHQUFTQSxFQUFNRSxRQUFVRixFQUFNRSxPQUFPQyxJQUNoRHFCLEVBQVEsSUFBSW5CLE1BQU0saUJBQW1CaEQsRUFBVSxjQUFnQmlFLEVBQVksS0FBT0MsRUFBVSxLQUNoR0MsRUFBTTNCLEtBQU95QixFQUNiRSxFQUFNdkIsUUFBVXNCLEVBQ2hCRixFQUFNLEdBQUdHLEdBRVY3RCxFQUFnQk4sUUFBV29FLElBRzdCLElBQUlULEVBQVVVLFlBQVcsV0FDeEJiLEVBQWlCLENBQUVoQixLQUFNLFVBQVdLLE9BQVFZLE1BQzFDLE1BQ0hBLEVBQU9mLFFBQVVlLEVBQU9oQixPQUFTZSxFQUNqQ3pCLFNBQVN1QyxLQUFLbEIsWUFBWUssR0FHNUIsT0FBT2pDLFFBQVErQyxJQUFJaEQsSUFJcEJMLEVBQW9Cc0QsRUFBSTVELEVBR3hCTSxFQUFvQnVELEVBQUkxRCxFQUd4QkcsRUFBb0J3RCxFQUFJLFNBQVN2RCxFQUFTd0QsRUFBTUMsR0FDM0MxRCxFQUFvQjJELEVBQUUxRCxFQUFTd0QsSUFDbENuRSxPQUFPc0UsZUFBZTNELEVBQVN3RCxFQUFNLENBQUVJLFlBQVksRUFBTUMsSUFBS0osS0FLaEUxRCxFQUFvQitELEVBQUksU0FBUzlELEdBQ1gsb0JBQVgrRCxRQUEwQkEsT0FBT0MsYUFDMUMzRSxPQUFPc0UsZUFBZTNELEVBQVMrRCxPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0Q1RSxPQUFPc0UsZUFBZTNELEVBQVMsYUFBYyxDQUFFaUUsT0FBTyxLQVF2RGxFLEVBQW9CbUUsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFsRSxFQUFvQmtFLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS2hGLE9BQU9pRixPQUFPLE1BR3ZCLEdBRkF2RSxFQUFvQitELEVBQUVPLEdBQ3RCaEYsT0FBT3NFLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9sRSxFQUFvQndELEVBQUVjLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ0RSxFQUFvQjBFLEVBQUksU0FBU3hFLEdBQ2hDLElBQUl3RCxFQUFTeEQsR0FBVUEsRUFBT21FLFdBQzdCLFdBQXdCLE9BQU9uRSxFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBRixFQUFvQndELEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVIxRCxFQUFvQjJELEVBQUksU0FBU2dCLEVBQVFDLEdBQVksT0FBT3RGLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtrRixFQUFRQyxJQUd6RzVFLEVBQW9CVyxFQUFJLFdBR3hCWCxFQUFvQjZFLEdBQUssU0FBU2hELEdBQTJCLE1BQXBCaUQsUUFBUTdCLE1BQU1wQixHQUFZQSxHQUVuRSxJQUFJa0QsRUFBYUMsS0FBbUIsYUFBSUEsS0FBbUIsY0FBSyxHQUM1REMsRUFBbUJGLEVBQVcxRixLQUFLb0YsS0FBS00sR0FDNUNBLEVBQVcxRixLQUFPVixFQUNsQm9HLEVBQWFBLEVBQVdHLFFBQ3hCLElBQUksSUFBSWpHLEVBQUksRUFBR0EsRUFBSThGLEVBQVc1RixPQUFRRixJQUFLTixFQUFxQm9HLEVBQVc5RixJQUMzRSxJQUFJVSxFQUFzQnNGLEVBSW5CakYsRUFBb0JBLEVBQW9CbUYsRUFBSSxHLGdFQ2hQckRqRixFQUFPRCxRQUFXRCxFQUFvQixPQUFyQixDQUE4QixLLDZEQ29HbENvRixFQUFPLFdBQ2xCLE9BQVEsQ0FBQyxNQUFNLEtBQUssS0FBSyxLQUFLLE1BQU1DLFFBQVEsVUFBVSxTQUFBOUIsR0FBQyxPQUNwREEsRUFBSStCLE9BQU9DLGdCQUFnQixJQUFJQyxXQUFXLElBQUksR0FBSyxJQUFNakMsRUFBSSxHQUFHa0MsU0FBUyxRQ3BHbkU1RSxTQUFTNkUsaUJBQWlCakIsS0FBSzVELFVBQTFDLElBQ004RSxFQUFJOUUsU0FBUytFLGNBQWNuQixLQUFLNUQsVUEwR2hDZ0YsRUFBaUIsU0FBQ0MsR0FDcEIsT0FBTyxTQUFTQyxFQUFPQyxHQUNuQixPQUFPQyxPQUFPSCxHQUFhSSxPQUN6QkQsT0FBT0QsR0FBTTdHLE9BQVM4RyxPQUFPRixHQUFPNUcsUUFDbEM0RyxJQ3pHTkksRUFBUyxTQUFDMUMsRUFBTTJDLEVBQVVDLEdBQWpCLE1BQWlDLDhCQUV0QzVDLEVBRnNDLDZDQUt0QzJDLEVBTHNDLGdEQVF0Q0MsR0FBZWhCLFFBQVEsS0FBTSxTQ2hCbkNpQixFQUFRLElBQUlDLEksaVZDR1QsSUFBY0MsRUFBSUMsRUFDbkJDLEVBWUFDLEVBQUcsNENBQUcsV0FBT0MsRUFBS0MsRUFBUWpJLEVBQU1rSSxHQUExQiwrRkFDSkMsRUFBVSxJQUFJQyxRQUFRLENBQzFCLGVBQWdCLG1CQUNoQixPQUFVLHFCQUdSRixHQUNGQyxFQUFRRSxPQUFPLGdCQUFmLGdCQUF5Q0gsSUFHckNJLEVBQU90SSxFQUFPdUksS0FBS0MsVUFBVXhJLEdBQVEsS0FWakMsU0FXSXlJLE1BQU1ULEVBQUssQ0FDdkJDLE9BQVFBLEVBQ1JFLFVBQ0FHLFNBZFEsdUNBZU5JLFFBZk0sMkNBQUgsNERBb0JIQyxHQWpDZWYsRUErQk9HLEVBRVosNENBQUcsV0FBT0MsRUFBS1ksR0FBWiwwR0FNakIsSUFBV0MsS0FOd0JqRCxFQUFsQiwrQkFBd0IsT0FBUWtELEVBQWhDLCtCQUE0QyxHQUN2RFgsRUFBVSxJQUFJQyxRQUFRLENBQzFCLE9BQVUscUJBR05XLEVBQVcsSUFBSUMsU0FDTEYsRUFDVkEsRUFBVWxJLGVBQWVpSSxJQUMzQkUsRUFBU1YsT0FBT1EsRUFBR0MsRUFBVUQsSUFSaEIsT0FXakJFLEVBQVNWLE9BQU8sT0FBUU8sRUFBS2xHLE1BQzdCcUcsRUFBU1YsT0FBT3pDLEVBQUtnRCxHQVpKLFNBYUhILE1BQU1ULEVBQUssQ0FDdkJDLE9BQVEsT0FDUkUsVUFDQUcsS0FBTVMsSUFoQlMsdUNBaUJiTCxRQWpCYSw0Q0FBSCx5REFvQlZPLEVBQVcsNENBQUcsd0lBQVVDLEVBQVYseUJBQVVBLEVBQVYsV0FDWnRELEVBQU11RCxJQUFLRCxLQUNYcEIsRUFBU0osRUFBTXhDLElBQUlVLElBRlAseUNBSVRrQyxHQUpTLHVCQU1RQyxFQUFHLFdBQUgsRUFBT21CLEdBTmYsY0FNVkUsRUFOVSxPQU9oQjFCLEVBQU0yQixJQUFJekQsRUFBS3dELEdBUEMsa0JBUVRBLEdBUlMsNENBQUgscURBcUJYRSxFQUFXLFNBQUN0QixHQUNoQixHQUFJTixFQUFNeEMsSUFBSThDLEdBQ1osT0FBT3RHLFFBQVFDLFVBR2pCLElBQ0k0SCxFQWRrQkMsRUFhbEJDLEVBQVEsSUFBSUMsTUFFaEJELEVBQU16RyxJQUFNZ0YsRUFFWixJQUNFdUIsRUFBYUUsRUFBTUUsU0FDbkIsTUFBT25JLEdBbkJhZ0ksRUFvQlFDLEVBQTVCRixFQW5CSyxJQUFJN0gsU0FBUSxTQUFDQyxFQUFTQyxHQUMzQjRILEVBQU83RyxPQUFTLFdBQ2RoQixFQUFRNkgsT0FvQlosT0FBT0QsRUFBV2hHLE1BQUssV0FDckJtRSxFQUFNMkIsSUFBSXJCLEdBQUssTyxzWENwRm5CLElBQU00QixFQUFTLElBQUlDLElBQUdDLFVBQVVDLFdBeUJuQkMsRUFBTyxTQUFDQyxFQUFLQyxHQUN4QixPQUFPQSxFQUFLQyxLQUFJLFNBQUF0QixHQUFDLE9BQUlvQixFQUFJcEIsT0EwRTNCLElBTU11QixFQUFXLFdBQ2YsTUFBOEIsV0FBdkJSLEVBQU9TLE9BQU8zSCxPLDRDQ3BIdkJwQixFQUFPRCxRQUFVaUosaUMsZ09DSVAsZSxFQUFBLEcsRUFBQSx5QkFBRyx1SEFDNkIsdURBRDdCLHVCQUNNQyxFQUROLFVBRUxDLEVBQVd6RCxZQUFFLFFBRlIsa0JBR0p3RCxFQUFhQyxJQUhULDBDLCtLQUFILHFEQU1WQyxHQUFPbEgsTUFBSyxXQUNWMkMsUUFBUXdFLElBQUksYyx1QkNYZHBKLEVBQU9ELFFBQVdELEVBQW9CLE9BQXJCLENBQThCIiwiZmlsZSI6Im1haW4uMGU5NDU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbiBcdHZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH1cblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArICh7fVtjaHVua0lkXXx8Y2h1bmtJZCkgKyBcIi5cIiArIFwiMGU5NDU0XCIgKyBcIi5qc1wiXG4gXHR9XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuIFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuIFx0Ly8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSBmdW5jdGlvbiByZXF1aXJlRW5zdXJlKGNodW5rSWQpIHtcbiBcdFx0dmFyIHByb21pc2VzID0gW107XG5cblxuIFx0XHQvLyBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiBDU1MgbG9hZGluZ1xuIFx0XHR2YXIgY3NzQ2h1bmtzID0ge1wiMlwiOjEsXCIzXCI6MSxcIjRcIjoxfTtcbiBcdFx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG4gXHRcdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHR2YXIgaHJlZiA9IFwiXCIgKyAoe31bY2h1bmtJZF18fGNodW5rSWQpICsgXCIuXCIgKyB7XCIyXCI6XCJiM2NiMDRcIixcIjNcIjpcIjFmOTJmMFwiLFwiNFwiOlwiMDBkNWRjXCIsXCI1XCI6XCJmMzdkMWJcIn1bY2h1bmtJZF0gKyBcIi5taW4uY3NzXCI7XG4gXHRcdFx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuIFx0XHRcdFx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcbiBcdFx0XHRcdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiBcdFx0XHRcdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcbiBcdFx0XHRcdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcbiBcdFx0XHRcdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gcmVzb2x2ZSgpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiBcdFx0XHRcdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gXHRcdFx0XHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gXHRcdFx0XHRsaW5rVGFnLm9ubG9hZCA9IHJlc29sdmU7XG4gXHRcdFx0XHRsaW5rVGFnLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuIFx0XHRcdFx0XHR2YXIgcmVxdWVzdCA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjIHx8IGZ1bGxocmVmO1xuIFx0XHRcdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlcXVlc3QgKyBcIilcIik7XG4gXHRcdFx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcbiBcdFx0XHRcdFx0ZXJyLnJlcXVlc3QgPSByZXF1ZXN0O1xuIFx0XHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdXG4gXHRcdFx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuIFx0XHRcdFx0XHRyZWplY3QoZXJyKTtcbiBcdFx0XHRcdH07XG4gXHRcdFx0XHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuIFx0XHRcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gXHRcdFx0XHRoZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuIFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHRcdH0pKTtcbiBcdFx0fVxuXG4gXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblxuIFx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cbiBcdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG4gXHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiBcdFx0XHRcdH0pO1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuIFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuIFx0XHRcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRcdFx0dmFyIG9uU2NyaXB0Q29tcGxldGU7XG5cbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuIFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcbiBcdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c2NyaXB0LnNyYyA9IGpzb25wU2NyaXB0U3JjKGNodW5rSWQpO1xuXG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJyk7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG4gXHRcdFx0XHRcdFx0XHRjaHVua1sxXShlcnJvcik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuIFx0XHRcdFx0XHRvblNjcmlwdENvbXBsZXRlKHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KTtcbiBcdFx0XHRcdH0sIDEyMDAwMCk7XG4gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuIFx0fTtcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9hc3NldHMvXCI7XG5cbiBcdC8vIG9uIGVycm9yIGZ1bmN0aW9uIGZvciBhc3luYyBsb2FkaW5nXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHRoaXNbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB0aGlzW1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyhcIlBvY29cIikpKDM4KTsiLCJpbXBvcnQge2NvbXBsZXRpb25XaXRofSBmcm9tICcuL2RvbXV0aWwnO1xuXG5jb25zdCBmb3JtYXQgPSAobXNnLCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gbXNnO1xuICAgIHJldHVybiBtc2cucmVwbGFjZSgveyhcXGQrKX0vZyxcbiAgICAgICAgKG1hdGNoLCBudW1iZXIpID0+IChhcmdzW251bWJlcl0gIT0gbnVsbFxuICAgICAgICAgICAgPyBhcmdzW251bWJlcl1cbiAgICAgICAgICAgIDogbWF0Y2gpKTtcbn07XG5jb25zdCBpbnNlcnQgPSAocHJlZml4KSA9PiAoc3RyKSA9PiBwcmVmaXggKyBzdHI7XG5cbmNvbnN0IENORGF0ZVN0cmluZyA9IChkYXRlKSA9PiB7XG4gIGxldCBjbiA9IFtcIuOAh1wiLFwi5LiAXCIsXCLkuoxcIixcIuS4iVwiLFwi5ZubXCIsXCLkupRcIixcIuWFrVwiLFwi5LiDXCIsXCLlhatcIixcIuS5nVwiXTtcbiAgbGV0IHMgPSBbXTtcbiAgbGV0IFlZID0gZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gIGZvciAobGV0IGk9MDsgaTxZWS5sZW5ndGg7IGkrKylcbiAgICBpZiAoY25bWVkuY2hhckF0KGkpXSlcbiAgICAgIHMucHVzaChjbltZWS5jaGFyQXQoaSldKTtcbiAgICBlbHNlXG4gICAgICBzLnB1c2goWVkuY2hhckF0KGkpKTtcbiAgcy5wdXNoKFwi5bm0XCIpO1xuICBsZXQgTU0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICBpZiAoTU08MTApXG4gICAgcy5wdXNoKGNuW01NXSk7XG4gIGVsc2UgaWYgKE1NPDIwKSB7XG4gICAgdmFyIGNuTSA9IE1NICUgMTBcbiAgICAgID8gY25bTU0lIDEwXVxuICAgICAgOiAnJztcbiAgICBzLnB1c2goXCLljYFcIiArIGNuTSk7XG4gIH1cbiAgcy5wdXNoKFwi5pyIXCIpO1xuICBsZXQgREQgPSBkYXRlLmdldERhdGUoKTtcbiAgaWYgKEREPDEwKVxuICAgIHMucHVzaChjbltERF0pO1xuICBlbHNlIGlmIChERDwyMCkge1xuICAgIHZhciBjbkQgPSBERCAlIDEwXG4gICAgICA/IGNuW0REJSAxMF1cbiAgICAgIDogJyc7XG4gICAgcy5wdXNoKFwi5Y2BXCIgKyBjbkQpO1xuICB9IGVsc2UgaWYgKEREIDwgMzApe1xuICAgIHZhciBjbkQgPSBERCAlIDEwXG4gICAgICA/IGNuW0REJSAxMF1cbiAgICAgIDogJyc7XG4gICAgcy5wdXNoKFwi5LqM5Y2BXCIgKyBjbkQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjbkQgPSBERCAlIDEwXG4gICAgICA/IGNuW0REJSAxMF1cbiAgICAgIDogJyc7XG4gICAgcy5wdXNoKFwi5LiJ5Y2BXCIgKyBjbkQpO1xuICB9XG4gIHMucHVzaChcIuaXpVwiKTtcbiAgcmV0dXJuIHMuam9pbignJyk7XG59O1xuXG5jb25zdCBiYXNlNjQgPSB7XG4gIGRlY29kZTogKHN0cikgPT4ge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKHN0cikpKTtcbiAgfSxcbiAgZW5jb2RlOiBzdHIgPT4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKVxufTtcblxuY29uc3QgVHJpbSA9IChzdHIpID0+IHtcbiAgaWYoIXN0cikgcmV0dXJuIFwiXCI7XG4gIGxldCBzdHJBcnIgPSBzdHIuc3BsaXQoJ1xcbicpLFxuICAgIG5vU3RhcnRTcGFjZSA9IHN0ckFyci5maWx0ZXIoc3RyID0+IC9eW14tXFxzXS4qLy50ZXN0KHN0cikgJiYgc3RyICE9PSAnJykubGVuZ3RoID4gMDtcbiAgaWYgKHN0ckFyci5sZW5ndGggPT09IDEgfHwgbm9TdGFydFNwYWNlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBlbHNlIHtcbiAgICBsZXQgc3BhY2VBcnIgPSBzdHJBcnIubWFwKHN0ciA9PiBzdHIubWF0Y2goL15cXHMrLykpLmZpbHRlcih2ID0+IHYpLm1hcChhcnIgPT4gYXJyWzBdKTtcbiAgICBsZXQgc2hvcnRlc3RTcGFjZUxlbiA9IE1hdGgubWluLmFwcGx5KG51bGwsIHNwYWNlQXJyLm1hcChzcGFjZSA9PiBzcGFjZS5sZW5ndGgpKTtcbiAgICBsZXQgcmVzdWx0ID0gc3RyQXJyLm1hcChzdHIgPT4gc3RyLnNsaWNlKHNob3J0ZXN0U3BhY2VMZW4pKS5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gcmVzdWx0LnN0YXJ0c1dpdGgoXCJcXG5cIilcbiAgICAgID8gcmVzdWx0LnJlcGxhY2UoXCJcXG5cIiwgXCJcIilcbiAgICAgIDogcmVzdWx0O1xuICB9XG59O1xuXG5jb25zdCBtYWtlVGV4dFNwaW5uZXIgPSAoY2IsIHRleHRBcnIsIHRpbWVvdXQpID0+IHtcbiAgbGV0IHRleHQgPSB0ZXh0QXJyIHx8IFsnLScsICdcXFxcJywgJ3wnLCAnLyddLFxuICAgIHRpbWVyLFxuICAgIGNvdW50ZXIgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbihsb2FkaW5nLCAkZWxlKSB7XG4gICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgaWYoJGVsZSl7XG4gICAgICAgICAgJGVsZS5pbm5lckhUTUwgPSB0ZXh0W2NvdW50ZXIgJSB0ZXh0Lmxlbmd0aF07XG4gICAgICAgIH1lbHNlIGlmIChjYil7XG4gICAgICAgICAgY2IodGV4dFtjb3VudGVyICUgdGV4dC5sZW5ndGhdKVxuICAgICAgICB9XG4gICAgICB9LCB0aW1lb3V0IHx8IDgwKVxuICAgIH1lbHNle1xuICAgICAgaWYoJGVsZSkgeyRlbGUucmVtb3ZlKCl9XG4gICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB1dWlkID0gKCkgPT4ge1xuICByZXR1cm4gKFsxZTddKy0xZTMrLTRlMystOGUzKy0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLCBjID0+XG4gICAgKGMgXiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmIDE1ID4+IGMgLyA0KS50b1N0cmluZygxNilcbiAgKTtcbn07XG5cbmNvbnN0IHRvZGF5ID0gKCkgPT4ge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBZWVlZID0gbm93LmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgbW0gPSBub3cuZ2V0TW9udGgoKSArIDE7XG4gIGNvbnN0IE1NID0gbW0gPCAxMCA/ICcwJyArIG1tIDogbW07XG5cbiAgY29uc3QgZGQgPSBub3cuZ2V0RGF0ZSgpO1xuICBjb25zdCBERCA9IGRkIDwgMTAgPyAnMCcgKyBkZCA6IGRkO1xuICByZXR1cm4gYCR7WVlZWX0tJHtNTX0tJHtERH1gO1xufTtcblxudmFyIG51bTJjbiA9e1xuXG4gIC8vIGZyb206IGh0dHBzOi8vYmxvZy5jc2RuLm5ldC9xcV8zNDczMTU3NC9hcnRpY2xlL2RldGFpbHMvNzExOTQyNzNcbiAgLy8gYXV0aG9yOiB1bmtub3duXG5cbiAgLypcbiAgICogIOWNleS9jVxuICAgKi9cbiAgdW5pdHM6J+S4quWNgeeZvuWNg+S4h0AjJeS6v14mficsXG4gIC8qXG4gICAqICAgIOWtl+esplxuICAgKi9cbiAgY2hhcnM6J+mbtuS4gOS6jOS4ieWbm+S6lOWFreS4g+WFq+S5nScsXG4gIC8qXG4gICAgICDmlbDlrZfovazkuK3mlodcbiAgICAgIEBudW1iZXIge0ludGVnZXJ9IOW9ouWmgjEyM+eahOaVsOWtl1xuICAgICAgQHJldHVybiB7U3RyaW5nfSDov5Tlm57ovazmjaLmiJDnmoTlvaLlpoIg5LiA55m+5LqM5Y2B5LiJIOeahOWtl+espuS4slxuICAqL1xuICBudW1iZXJUb0NoaW5lc2U6ZnVuY3Rpb24obnVtYmVyKXtcbiAgICB2YXIgYT0obnVtYmVyKycnKS5zcGxpdCgnJykscz1bXSx0PXRoaXM7XG4gICAgaWYoYS5sZW5ndGg+MTIpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0b28gYmlnJyk7XG4gICAgfWVsc2V7XG4gICAgICBmb3IodmFyIGk9MCxqPWEubGVuZ3RoLTE7aTw9ajtpKyspe1xuICAgICAgICBpZihqPT09MXx8aj09PTV8fGo9PT05KXsvL+S4pOS9jeaVsCDlpITnkIbnibnmrornmoQgMSpcbiAgICAgICAgICBpZihpPT09MCl7XG4gICAgICAgICAgICBpZihhW2ldIT09JzEnKXMucHVzaCh0LmNoYXJzLmNoYXJBdChhW2ldKSk7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzLnB1c2godC5jaGFycy5jaGFyQXQoYVtpXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcy5wdXNoKHQuY2hhcnMuY2hhckF0KGFbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZihpIT09ail7XG4gICAgICAgICAgcy5wdXNoKHQudW5pdHMuY2hhckF0KGotaSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vcmV0dXJuIHM7XG4gICAgcmV0dXJuIHMuam9pbignJykucmVwbGFjZSgv6Zu2KFvljYHnmb7ljYPkuIfkur9AIyVeJn5dKS9nLGZ1bmN0aW9uKG0sZCxiKXsvL+S8mOWFiOWkhOeQhiDpm7bnmb4g6Zu25Y2DIOetiVxuICAgICAgYj10LnVuaXRzLmluZGV4T2YoZCk7XG4gICAgICBpZihiIT09LTEpe1xuICAgICAgICBpZihkPT09J+S6vycpcmV0dXJuIGQ7XG4gICAgICAgIGlmKGQ9PT0n5LiHJylyZXR1cm4gZDtcbiAgICAgICAgaWYoYVtqLWJdPT09JzAnKXJldHVybiAn6Zu2J1xuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH0pLnJlcGxhY2UoL+mbtisvZywn6Zu2JykucmVwbGFjZSgv6Zu2KFvkuIfkur9dKS9nLGZ1bmN0aW9uKG0sYil7Ly8g6Zu255m+IOmbtuWNg+WkhOeQhuWQjiDlj6/og73lh7rnjrAg6Zu26Zu255u46L+e55qEIOWGjeWkhOeQhue7k+WwvuS4uumbtueahFxuICAgICAgcmV0dXJuIGI7XG4gICAgfSkucmVwbGFjZSgv5Lq/W+S4h+WNg+eZvl0vZywn5Lq/JykucmVwbGFjZSgvW+mbtl0kLywnJykucmVwbGFjZSgvW0AjJV4mfl0vZyxmdW5jdGlvbihtKXtcbiAgICAgIHJldHVybiB7J0AnOifljYEnLCcjJzon55m+JywnJSc6J+WNgycsJ14nOifljYEnLCcmJzon55m+Jywnfic6J+WNgyd9W21dO1xuICAgIH0pLnJlcGxhY2UoLyhb5Lq/5LiHXSkoW+S4gC3kuZ1dKS9nLGZ1bmN0aW9uKG0sZCxiLGMpe1xuICAgICAgYz10LnVuaXRzLmluZGV4T2YoZCk7XG4gICAgICBpZihjIT09LTEpe1xuICAgICAgICBpZihhW2otY109PT0nMCcpcmV0dXJuIGQrJ+mbticrYlxuICAgICAgfVxuICAgICAgcmV0dXJuIG07XG4gICAgfSk7XG4gIH1cbn07XG5cbmNvbnN0IG5vdyA9ICgpID0+IHtcbiAgY29uc3QgY29tcGxldGVTdHIgPSB4ID0+IHggPCAxMCA/ICcwJyArIHggOiB4O1xuXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IEggPSBub3cuZ2V0SG91cnMoKTtcbiAgY29uc3QgTSA9IG5vdy5nZXRNaW51dGVzKCk7XG4gIGNvbnN0IFMgPSBub3cuZ2V0U2Vjb25kcygpO1xuICBjb25zdCBtID0gbm93LmdldE1pbGxpc2Vjb25kcygpO1xuICBjb25zdCBISCA9IGNvbXBsZXRlU3RyKEgpO1xuICBjb25zdCBNTSA9IGNvbXBsZXRlU3RyKE0pO1xuICBjb25zdCBTUyA9IGNvbXBsZXRlU3RyKFMpO1xuICByZXR1cm4gYCR7SEh9OiR7TU19OiR7U1N9LiR7Y29tcGxldGlvbldpdGgoJzAnKShtLCAnOTk5Jyl9YDtcblxufTtcblxuY29uc3QgbnVtYmVyMmNoaW5lc2UgPSBudW0yY24ubnVtYmVyVG9DaGluZXNlO1xuZXhwb3J0IHtmb3JtYXQsIGluc2VydCwgQ05EYXRlU3RyaW5nLCBiYXNlNjQsIHRvZGF5LCBUcmltLCBtYWtlVGV4dFNwaW5uZXIsIG5vdywgbnVtYmVyMmNoaW5lc2V9O1xuIiwiaW1wb3J0IHtUcmltfSBmcm9tIFwiLi9zdHJ1dGlsc1wiO1xuXG5jb25zdCAkJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwuYmluZChkb2N1bWVudCk7XG5jb25zdCAkID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvci5iaW5kKGRvY3VtZW50KTtcbmNvbnN0IGdvdG8gPSAodXJsKSA9PiB7XG4gICAgbGV0ICR0bXBMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICR0bXBMaW5rLmhyZWYgPSB1cmwgfHwgJ2Fib3V0OmJsYW5rZXQnO1xuICAgICR0bXBMaW5rLnRhcmdldCA9ICdfYmxhbmtldCc7XG4gICAgJHRtcExpbmsuY2xpY2soKTtcbiAgICAkdG1wTGluayA9IG51bGw7XG59O1xuXG5jb25zdCBjcmVhdGVOb2Rlc0Zyb20gPSAoaHRtbFN0cikgPT4ge1xuICAgIGxldCAkbm9kZXNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgJG5vZGVzV3JhcHBlci5pbm5lckhUTUwgPSBodG1sU3RyO1xuICAgIHJldHVybiAkbm9kZXNXcmFwcGVyLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgPyAkbm9kZXNXcmFwcGVyLmNoaWxkcmVuXG4gICAgICA6ICRub2Rlc1dyYXBwZXIuY2hpbGROb2Rlcztcbn07XG5cbmNvbnN0IGlzRWxlbWVudEVtcHR5ID0gKCRlbGUpID0+IHtcbiAgICByZXR1cm4gISgkZWxlLmNoaWxkcmVuICYmICRlbGUuY2hpbGRyZW4ubGVuZ3RoKTtcbn07XG5cbmNvbnN0IGdldExhc3RFbGUgPSBhcnIgPT4ge1xuICAgIHJldHVybiBhcnIuc2xpY2UoKS5wb3AoKTtcbn07XG5cbmNvbnN0IGdlblN2Z0xvZ28gPSAobiA9IDMsIHJldHVybkRvbUVsZW1lbnQgPSBmYWxzZSwgY29sb3IpID0+IHtcbiAgICBjb25zdCBGaWIgPSAobikgPT4ge1xuICAgICAgICByZXR1cm4gbiA8IDIgPyBuIDogKEZpYihuIC0gMSkgKyBGaWIobiAtIDIpKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc21SZWN0SHQgPSBGaWIobilcbiAgICAgICwgc21SZWN0V2QgPSBGaWIobiArIDEpXG4gICAgICAsIGxnUmVjdEh0ID0gRmliKG4gKyAyKVxuICAgICAgLCBsZ1JlY3RXZCA9IEZpYihuICsgMylcbiAgICAgICwgbG9nb0h0ICAgPSBGaWIobiArIDQpO1xuXG4gICAgY29uc3QgcG9zQXJyPSBbXG4gICAgICAgIFswLCAwXSxcbiAgICAgICAgW3NtUmVjdFdkICsgc21SZWN0SHQsIDBdLFxuICAgICAgICBbMCwgMiAqIHNtUmVjdEh0XSxcbiAgICAgICAgW3NtUmVjdFdkICsgc21SZWN0SHQsIDIgKiBzbVJlY3RIdF0sXG4gICAgICAgIFswLCBsb2dvSHQgLSBsZ1JlY3RIdF1cbiAgICBdO1xuICAgIGNvbnN0IG9uZUxpbmUgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1tcXG5dL2csICcnKTtcbiAgICBjb25zdCByZW5kZXJSZWN0ID0gKHgsIHksIHcsIGgsIGM9JyMwMDAnKSA9PiBvbmVMaW5lKGBcbiAgICAgIDxyZWN0IFxuICAgICAgICB4PVwiJHt4fVwiXG4gICAgICAgIHk9XCIke3l9XCIgXG4gICAgICAgIHdpZHRoPVwiJHt3fVwiIFxuICAgICAgICBoZWlnaHQ9XCIke2h9XCIgXG4gICAgICAgIGZpbGw9XCIke2N9XCIgXG4gICAgICAgIHN0cm9rZS13aWR0aD1cIjBcIlxuICAgICAgLz5cbiAgICBgKTtcbiAgICBjb25zdCByZW5kZXJMb2dvID0gKHcsIGgsIGNvbnRlbnQpID0+IG9uZUxpbmUoYFxuICAgICAgPHN2Z1xuICAgICAgICB3aWR0aD1cIiR7d31cIlxuICAgICAgICBoZWlnaHQ9XCIke2h9XCJcbiAgICAgICAgdmVyc2lvbj1cIjEuMVwiXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgPlxuICAgICAgICAke2NvbnRlbnR9XG4gICAgICA8L3N2Zz5cbiAgICBgKTtcbiAgICBjb25zdCBsb2dvQ29udGVudCA9IHBvc0Fyci5tYXAoKFt4LCB5XSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgaXNMYXJnZVJlY3QgPSBpbmRleCA9PT0gNDtcbiAgICAgICAgY29uc3QgdyA9IGlzTGFyZ2VSZWN0ID8gbGdSZWN0V2QgOiBzbVJlY3RXZDtcbiAgICAgICAgY29uc3QgaCA9IGlzTGFyZ2VSZWN0ID8gbGdSZWN0SHQgOiBzbVJlY3RIdDtcblxuICAgICAgICByZXR1cm4gcmVuZGVyUmVjdCh4LCB5LCB3LCBoLCBjb2xvcik7XG4gICAgfSkuam9pbignJyk7XG5cbiAgICBjb25zdCBsb2dvU3RyID0gcmVuZGVyTG9nbyhcbiAgICAgIGxnUmVjdFdkLFxuICAgICAgbG9nb0h0LFxuICAgICAgbG9nb0NvbnRlbnRcbiAgICApO1xuXG4gICAgcmV0dXJuIHJldHVybkRvbUVsZW1lbnRcbiAgICAgID8gY3JlYXRlTm9kZXNGcm9tKGxvZ29TdHIpWzBdXG4gICAgICA6IGxvZ29TdHI7XG59O1xuXG5jb25zdCBpbmplY3RDU1MgPSAoY3NzU3RyKSA9PiB7XG4gICAgbGV0ICRoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSxcbiAgICAgICRzdHlsZSA9ICRoZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlJyk7XG5cbiAgICBpZiAoISRzdHlsZSkge1xuICAgICAgICAkc3R5bGUgPSAkaGVhZC5hcHBlbmRDaGlsZChcbiAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gICAgICAgICk7XG4gICAgICAgICRzdHlsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICB9XG5cbiAgICAkc3R5bGUuYXBwZW5kQ2hpbGQoXG4gICAgICBjcmVhdGVOb2Rlc0Zyb20oVHJpbShjc3NTdHIpKVswXVxuICAgICk7XG59O1xuXG5jb25zdCB0cmlnZ2VyID0gKCRlbGUsIGtleSkgPT4ge1xuICAgIGxldCBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudHMnKTtcbiAgICBldi5pbml0RXZlbnQoJ2tleXVwJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgZXYua2V5ID0ga2V5O1xuICAgICRlbGUuZGlzcGF0Y2hFdmVudChldik7XG59O1xuXG5jb25zdCBjb21wbGV0aW9uV2l0aCA9IChmaWxsaW5nQ2hhcikgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbihzaG9ydCwgbG9uZykge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGZpbGxpbmdDaGFyKS5yZXBlYXQoXG4gICAgICAgICAgU3RyaW5nKGxvbmcpLmxlbmd0aCAtIFN0cmluZyhzaG9ydCkubGVuZ3RoXG4gICAgICAgICkgKyBzaG9ydDtcbiAgICB9XG59O1xuXG5jb25zdCBzY3JvbGxUb0JvdHRvbSA9ICgkZWxlKSA9PiB7XG4gICAgLy8gdG8gZml4OiDlgYforr7mraTml7bmnInlvoDkuIrmu5rliqjnmoTmg6/mgKfvvIxcbiAgICAvLyDlvZPmu5rliqjmnaHmu5rliqjoh7PlupXpg6jlkI7kvJrnu6fnu63lvoDkuIrmu5rliqhcbiAgICAkZWxlLnNjcm9sbFRvcCA9ICRlbGUuc2Nyb2xsSGVpZ2h0O1xufTtcblxuZXhwb3J0IHtcbiAgICAkLCAkJCwgZ290bywgaXNFbGVtZW50RW1wdHksIGNyZWF0ZU5vZGVzRnJvbSwgZ2VuU3ZnTG9nbywgZ2V0TGFzdEVsZSxcbiAgICBpbmplY3RDU1MsIHRyaWdnZXIsIGNvbXBsZXRpb25XaXRoLCBzY3JvbGxUb0JvdHRvbSxcbn07XG4iLCJjb25zdCBsaW5rID0gKHRleHQsIHNyYykgPT4gYDxhIGhyZWY9JHtzcmN9IHRhcmdldD1cIl9ibGFua2V0XCIgPiR7dGV4dH08L2E+YDtcbi8qKlxuICog5paH5qGj5qih5p2/XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDlkb3ku6TlkI3np7DooYzvvIzlpoLvvIxscyAtIOWIl+WHuuWNmuaWh+WIl+ihqFxuICogQHBhcmFtIHN5bm9wc2lzIOivreazleihjO+8jOWmgu+8jGJsb2cgWy1lXVxuICogQHBhcmFtIGRlc2NyaXB0aW9uIOaPj+i/sOihjO+8jOaPj+i/sOWRveS7pOWKn+iDveetieetiVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgZG9jVHBsID0gKG5hbWUsIHN5bm9wc2lzLCBkZXNjcmlwdGlvbikgPT4gKGBcbiAgICBOQU1FXG4gICAgICAgICR7bmFtZX1cbiAgICAgICAgXG4gICAgU1lOT1BTSVNcbiAgICAgICAgJHtzeW5vcHNpc31cbiAgICAgICAgXG4gICAgREVTQ1JJUFRJT05cbiAgICAgICAgJHtkZXNjcmlwdGlvbn1gKS5yZXBsYWNlKC88L2csICcmbHQ7Jyk7XG5cbmV4cG9ydCB7XG4gICAgbGluayxcbiAgICBkb2NUcGxcbn07IiwibGV0IHN0b3JlID0gbmV3IE1hcCgpO1xuZXhwb3J0IHtzdG9yZX07XG5cbiIsImltcG9ydCB7c3RvcmV9IGZyb20gXCIuL3N0b3JlXCI7XG5pbXBvcnQgaGFzaCBmcm9tICdvYmplY3QtaGFzaCc7XG5cbmV4cG9ydCBjb25zdCBvbmNlID0gKGZuLCBkZWZhdWx0VmFsKSA9PiB7XG4gIGxldCByZXN1bHQ7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGlmIChmbikge1xuICAgICAgY29uc3QgZm5SZXN1bHQgPSBmbiguLi5hcmdzKTtcbiAgICAgIHJlc3VsdCA9IGRlZmF1bHRWYWwgfHwgZm5SZXN1bHQ7XG4gICAgICBmbiA9IG51bGw7XG4gICAgICByZXR1cm4gZm5SZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5jb25zdCByZXEgPSBhc3luYyAodXJsLCBtZXRob2QsIGRhdGEsIHRva2VuKSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9KTtcblxuICBpZiAodG9rZW4pIHtcbiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIGB0b2tlbiAke3Rva2VufWApO1xuICB9XG5cbiAgY29uc3QgYm9keSA9IGRhdGEgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IG51bGw7XG4gIHJldHVybiAoYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgaGVhZGVycyxcbiAgICBib2R5LFxuICB9KSkuanNvbigpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlcU9uY2UgPSBvbmNlKHJlcSk7XG5cbmNvbnN0IHVwbG9hZEZpbGUgPSBhc3luYyAodXJsLCBmaWxlLCBrZXkgPSAnZmlsZScsIGV4dHJhRGF0YSA9IHt9KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgfSk7XG5cbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChjb25zdCBrIGluIGV4dHJhRGF0YSkge1xuICAgIGlmIChleHRyYURhdGEuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChrLCBleHRyYURhdGFba10pXG4gICAgfVxuICB9XG4gIGZvcm1EYXRhLmFwcGVuZCgndHlwZScsIGZpbGUudHlwZSk7XG4gIGZvcm1EYXRhLmFwcGVuZChrZXksIGZpbGUpO1xuICByZXR1cm4gKGF3YWl0IGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnMsXG4gICAgYm9keTogZm9ybURhdGEsXG4gIH0pKS5qc29uKCk7XG59O1xuXG5jb25zdCByZXFBbmRDYWNoZSA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGtleSA9IGhhc2goYXJncyk7XG4gIGNvbnN0IHJlc3VsdCA9IHN0b3JlLmdldChrZXkpO1xuICBpZiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBuZXdSZXN1bHQgPSBhd2FpdCByZXEoLi4uYXJncyk7XG4gICAgc3RvcmUuc2V0KGtleSwgbmV3UmVzdWx0KTtcbiAgICByZXR1cm4gbmV3UmVzdWx0XG4gIH1cbn07XG5cblxuY29uc3QgbG9hZEltZ1Byb21pc2UgPSAoaW1nT2JqKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaW1nT2JqLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUoaW1nT2JqKTtcbiAgICB9O1xuICB9KVxufVxuXG5jb25zdCBnZXRJbWFnZSA9ICh1cmwpID0+IHtcbiAgaWYgKHN0b3JlLmdldCh1cmwpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgbGV0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gIGxldCByZXRQcm9taXNlO1xuICBpbWFnZS5zcmMgPSB1cmw7XG5cbiAgdHJ5IHtcbiAgICByZXRQcm9taXNlID0gaW1hZ2UuZGVjb2RlKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXRQcm9taXNlID0gbG9hZEltZ1Byb21pc2UoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHJldFByb21pc2UudGhlbigoKSA9PiB7XG4gICAgc3RvcmUuc2V0KHVybCwgdHJ1ZSk7XG4gIH0pO1xufTtcblxuY29uc3QgZ3JhcGhRbFF1ZXJ5ID0gKGVuZHBvaW50LCBxdWVyeVN0cikgPT4gcmVxKGVuZHBvaW50LCAnUE9TVCcsIHtxdWVyeTogcXVlcnlTdHJ9KTtcblxuZXhwb3J0IHtncmFwaFFsUXVlcnksIHJlcSwgZ2V0SW1hZ2UsIHJlcUFuZENhY2hlLCB1cGxvYWRGaWxlfTtcbiIsImltcG9ydCBVQSBmcm9tICd1YS1kZXZpY2UnO1xuXG5leHBvcnQgKiBmcm9tICcuL2RvbXV0aWwnO1xuZXhwb3J0ICogZnJvbSAnLi90cGx1dGlsJztcbmV4cG9ydCAqIGZyb20gJy4vc3RydXRpbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9yZXF1dGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3N0b3JlJztcblxuXG5jb25zdCB1YUluZm8gPSBuZXcgVUEobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogZXhlYyBmdW5jIHRoYXQgcmV0dXJuIGEgcHJvbWlzZSBvbmUgYnkgb25lXG4gKiBAcGFyYW0gZnVuY0FyclxuICogQHBhcmFtIGNiRm5cbiAqIEBwYXJhbSBleHRyYVBhcmFtc1xuICogQHJldHVybnMge1Byb21pc2U8Li4uKnwqPn1cbiAqL1xuY29uc3QgcHJvbWlzZU9uZUJ5T25lID0gYXN5bmMgKGZ1bmNBcnIsIGNiRm4sIC4uLmV4dHJhUGFyYW1zKSA9PiB7XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gWy4uLmZ1bmNBcnJdO1xuICByZXR1cm4gcmVzdC5yZWR1Y2UoXG4gICAgYXN5bmMgKGFjYywgZnVuYywgaW5kZXgpID0+IHtcbiAgICAgIGxldCBwcmV2UmVzdWx0ID0gYXdhaXQgYWNjO1xuICAgICAgcmV0dXJuIGZ1bmMocHJldlJlc3VsdCwgLi4uZXh0cmFQYXJhbXMpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBjYkZuICYmIHR5cGVvZiBjYkZuID09PSBcImZ1bmN0aW9uXCIgJiYgY2JGbihpbmRleCArIDEsIHJlcyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZpcnN0KCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjYkZuICYmIHR5cGVvZiBjYkZuID09PSBcImZ1bmN0aW9uXCIgJiYgY2JGbigwLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSxcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwaWNrID0gKG9iaiwga2V5cykgPT4ge1xuICByZXR1cm4ga2V5cy5tYXAoayA9PiBvYmpba10pO1xufTtcblxuZnVuY3Rpb24gaHVtYW5pemVyRGVsYXlDYWxsKGZ1biwgZGVsYXkgPSAzMCwgdGltZXMgPSAxLCBpZkluYykge1xuICBsZXQgaHVtYW5pemVyRGVsYXkgPSBkZWxheSA9PiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBkZWxheSAvIDIpICsgZGVsYXk7XG4gIGxldCBjb3VudGVyID0gMDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBjYWxsID0gKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGZ1biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmICh0aW1lcyA+PSAwKSB7XG4gICAgICAgICAgICBmdW4oaWZJbmMgPyBjb3VudGVyIDogdGltZXMpO1xuICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgdGltZXMtLTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2FsbCwgaHVtYW5pemVyRGVsYXkoZGVsYXkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgnZG9uZScpXG4gICAgICAgICAgICB9LCBkZWxheSAqIDUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2ludmFsaWQgcGFyYW0nKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNhbGwoKTtcbiAgICB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dGbGF0dGVuKGFycikge1xuICBpZiAoIWFyci5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmV0ID0gW107XG4gIGFyci5mb3JFYWNoKGVsZSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlKSkge1xuICAgICAgcmV0LnB1c2goLi4uZWxlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChlbGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrLCB3YWl0LCBpbW1lZGlhdGUgPSBmYWxzZSkge1xuICBsZXQgdGltZW91dCA9IG51bGw7XG4gIGxldCBpbml0aWFsQ2FsbCA9IHRydWU7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgaW5pdGlhbENhbGw7XG4gICAgY29uc3QgbmV4dCA9ICgpID0+IHtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aW1lb3V0ID0gbnVsbFxuICAgIH07XG5cbiAgICBpZiAoY2FsbE5vdykge1xuICAgICAgaW5pdGlhbENhbGwgPSBmYWxzZTtcbiAgICAgIG5leHQoKVxuICAgIH1cblxuICAgIGlmICghdGltZW91dCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobmV4dCwgd2FpdCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGh1bWFuaXplcklucHV0KHN0ciwgaW5wdXRGdW4sIHNwZWVkKSB7XG4gIHJldHVybiBodW1hbml6ZXJEZWxheUNhbGwoKGNvdW50ZXIpID0+IGlucHV0RnVuKHN0ci5zbGljZSgwLCBjb3VudGVyKSksIHNwZWVkLCBzdHIubGVuZ3RoLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHtcbn1cblxuY29uc3QgdXBkYXRlQXJyRWxlID0gKGFyciwgaW5kZXgsIHZhbCkgPT4ge1xuICBjb25zdCBjb3B5ID0gYXJyLnNsaWNlKCk7XG4gIGNvcHkuc3BsaWNlKGluZGV4LCAxLCB2YWwpO1xuICByZXR1cm4gY29weTtcbn07XG5cbmNvbnN0IGlzTW9iaWxlID0gKCkgPT4ge1xuICByZXR1cm4gdWFJbmZvLmRldmljZS50eXBlID09PSAnbW9iaWxlJztcbn07XG5cbmV4cG9ydCB7XG4gIHVwZGF0ZUFyckVsZSwgcHJvbWlzZU9uZUJ5T25lLCBpc01vYmlsZSwgaHVtYW5pemVyRGVsYXlDYWxsLCBodW1hbml6ZXJJbnB1dCwgbm9vcCwgdGhyb3R0bGUsIHNoYWxsb3dGbGF0dGVuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHZlbmRvcl9saWJfYTFiZTk3OWI5ZDg2OGFmNGQ3NWE7IiwiaW1wb3J0IHsgJCB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcclxuaW1wb3J0ICdzdHlsZS9pbmRleC5zY3NzJztcclxuaW1wb3J0ICdzdHlsZS9tYXJrZG93bi5zY3NzJztcclxuXHJcbmNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBkZWZhdWx0OiByZW5kZXJCbG9nQXQgfSA9IGF3YWl0IGltcG9ydCgnQHpob3VqaWFoYW8vYmxvZycpO1xyXG4gIGNvbnN0IG1vdW50RG9tID0gJCgnI2d1aScpO1xyXG4gIHJldHVybiByZW5kZXJCbG9nQXQobW91bnREb20pO1xyXG59O1xyXG5cclxuaW5pdCgpLnRoZW4oKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdsb2FkZWQnKTtcclxufSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oXCJQb2NvXCIpKSg0OSk7Il0sInNvdXJjZVJvb3QiOiIifQ==