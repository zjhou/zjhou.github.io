(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{gXRL:function(e,t,n){},zsIg:function(e,t,n){"use strict";n.r(t);n("gXRL");var r=n("8RZD"),a=function(e,t,n){var a=window.converter.makeHtml(e),o=Object(r.a)("#gui"),c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=Object(r.a)(e);a.innerHTML='\n    <div class="editor-wrapper">\n      <div class="edit-area">\n          <textarea class="editor">'.concat(t,'</textarea>\n      </div>\n      <div class="preview-area"><div class="markdown-body">').concat(n,"</div></div>\n    </div> \n  "),a.classList.add("editor"),a.classList.add("on");var o=Object(r.a)("textarea.editor"),c=Object(r.a)(".preview-area");return o.focus(),{$editor:o,$preview:c}}("#gui",e,a),i=c.$editor,s=c.$preview;i.addEventListener("keydown",(function(e){var n=e.key,r=e.ctrlKey,a=r&&"c"===n;if(r&&"s"===n)return t(i.value),o.classList.remove("on"),void(o.innerHTML="");a&&(t(""),o.classList.remove("on"),o.innerHTML="")})),i.addEventListener("input",(function(e){s.innerHTML=window.converter.makeHtml(e.target.value)}))};function o(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function i(e){o(c,r,a,i,s,"next",e)}function s(e){o(c,r,a,i,s,"throw",e)}i(void 0)}))}}var i="https://api.github.com/repos/zjhou/notes/contents/_posts",s=localStorage.getItem("ghtoken"),u=function(){var e=c(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.z.get("notes")){e.next=6;break}return e.next=4,Object(r.v)(i,"GET");case 4:t=e.sent,r.z.set("notes",t);case 6:return e.abrupt("return",t);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),d=function(e,t,n){if(!s)return Promise.reject("please set PAT first!");var a="".concat(n||Object(r.B)(),"-").concat(e,".md"),o="".concat(i,"/").concat(a),c={message:"add note: ".concat(a),committer:{name:"zjhou",email:"z@zjh.im"},content:r.d.encode(t)};return Object(r.v)(o,"PUT",c,s)},v=function(){var e=c(regeneratorRuntime.mark((function e(t,n){var a,o,c,d,v,f;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s){e.next=2;break}return e.abrupt("return",Promise.reject("please set PAT first!"));case 2:return e.next=4,u();case 4:if(a=e.sent,o=a.filter((function(e){return e.name.includes(t)}))[0]){e.next=8;break}throw"无法找到笔记";case 8:return c=o.name,d=o.sha,v="".concat(i,"/").concat(c),f={message:"update note: ".concat(c),content:r.d.encode(n),sha:d,committer:{name:"zjhou",email:"z@zjh.im"}},e.abrupt("return",Object(r.v)(v,"PUT",f,s));case 12:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}();t.default={shortopts:"n:u",handler:function(e,t,n,r){var o=r.restParams,c=r.fromPipe;return new Promise((function(t,n){var r=e.n,i=e.u;r?a(i?c:"",(function(e){var a=i?"更新":"添加";(i?v:d)(r,e).then((function(){t("笔记".concat(a,"成功！"))})).catch(n)}),n):a(o||c,t,n)}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,