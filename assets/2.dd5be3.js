(this.webpackJsonp=this.webpackJsonp||[]).push([[2],{"6jCm":function(t,e,n){},CLOQ:function(t,e,n){},Dk2R:function(t,e,n){},DyyM:function(t,e,n){},HAps:function(t,e,n){},Hj0M:function(t,e,n){},KUuw:function(t){t.exports={_from:"@zhoujiahao/blog@1.10.3",_id:"@zhoujiahao/blog@1.10.3",_inBundle:!1,_integrity:"sha512-J+R3g5cq6T5zeHepRlUco163aqW/SOqdoM7zxqYAGrEZ8N1VHNGT0CZUOOBu0YssdC8jUA7QqPFDKL80ENXr7A==",_location:"/@zhoujiahao/blog",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"@zhoujiahao/blog@1.10.3",name:"@zhoujiahao/blog",escapedName:"@zhoujiahao%2fblog",scope:"@zhoujiahao",rawSpec:"1.10.3",saveSpec:null,fetchSpec:"1.10.3"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/blog/-/blog-1.10.3.tgz",_shasum:"aad9eb9aa3cb055c0fb3bf954644ede7a0a25aef",_spec:"@zhoujiahao/blog@1.10.3",_where:"/home/runner/work/playground/playground",author:{name:"zjhou",email:"z@zjh.im"},bundleDependencies:!1,dependencies:{"@zhoujiahao/bblego":"^0.2.1","@zhoujiahao/pm":"^1.0.41","@zhoujiahao/utils":"^1.0.40","react-transition-group":"^1.2.1"},deprecated:!1,description:"my react blog",devDependencies:{"@babel/core":"^7.2.0","@babel/plugin-proposal-class-properties":"^7.3.0","@babel/plugin-syntax-dynamic-import":"^7.2.0","@babel/preset-env":"^7.2.0","@babel/preset-react":"^7.0.0","babel-loader":"^8.0.4","css-loader":"^1.0.1","node-sass":"^4.11.0","sass-loader":"^7.1.0","style-loader":"^0.23.1",webpack:"^4.19.0","webpack-bundle-analyzer":"^3.0.4","webpack-cli":"^3.2.1"},directories:{lib:"lib",test:"__tests__"},gitHead:"489f75961f2dcdff999aeac671519034fc792a6e",homepage:"",keywords:["blog"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/blog",peerDependencies:{"@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},version:"1.10.3"}},OgkG:function(t,e,n){},RTF2:function(t,e,n){},b3vB:function(t,e,n){"use strict";n.r(e);var r=n("q1tI"),o=n.n(r),i=n("i8i4"),c=n.n(i),u=(n("OgkG"),n("TSYQ")),a=n.n(u),s=n("8RZD"),l=n("17x9"),f=n.n(l);n("DyyM");function p(){return(p=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var h=function(t){return o.a.createElement("input",p({className:"bblego-input"},t))},y=(n("jABj"),function(t){var e=t.absCenter,n=t.style;return o.a.createElement("div",{style:n,className:a()("tick-loader",{center:e})})}),b=(n("6jCm"),function(t){var e=t.onClick,n=t.className,r=t.style,i=t.hidden;return o.a.createElement("button",{type:"button",style:r,className:a()("menu-button",n,{hidden:i}),onClick:e})});b.propTypes={onClick:f.a.func.isRequired,className:f.a.string.isRequired};n("crH2");var d=function(t){return o.a.createElement("span",{className:a()("icon-text",t.className||""),style:{color:t.color||I.$black}},t.icon,t.text||t.children)};function v(){return(v=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var m=function(t){var e=t.title,n=t.showChildren,r=t.children;return o.a.createElement("div",{className:"menu-item"},o.a.createElement(d,v({},e,{color:I.$green1,className:"panel-title"})),o.a.createElement("div",{className:"menu-item-content"},n&&r))};function g(t){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function w(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function E(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?w(Object(n),!0).forEach((function(e){R(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function S(t,e){return(S=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function P(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=x(t);if(e){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return j(this,n)}}function j(t,e){return!e||"object"!==g(e)&&"function"!=typeof e?_(t):e}function _(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function x(t){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function R(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function D(){return(D=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}m.propTypes={showChildren:f.a.bool.isRequired,title:f.a.shape({icon:f.a.element,text:f.a.string}).isRequired};var M=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&S(t,e)}(c,t);var e,n,r,i=P(c);function c(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),R(_(e=i.call(this,t)),"openMenu",(function(){e.setState({activePanel:null,isOpen:!0})})),R(_(e),"chooseMenuItem",(function(t){var n=function(){e.setState({activePanel:t},(function(){setTimeout((function(){e.setState({isOpen:!1})}),700)}))};e.state.isOpen?n():(e.openMenu(),setTimeout(n,700))})),R(_(e),"renderMenuButton",(function(){var t=e.props,n=t.children,r=t.menuBtnStyle,i=void 0===r?{}:r,c=t.hideIcon,u=t.getScrollableDomByActivePanel,s=e.state,l=s.isOpen,f=s.activePanel;return o.a.createElement(b,{className:a()({hidden:l}),scrollableDom:u?u(f):null,hidden:c,style:E(E({},i),{},{zIndex:n.length}),onClick:function(){l||setTimeout((function(){e.openMenu()}),300)}})})),R(_(e),"renderMenuItem",(function(t,n){var r,i,c,u=e.props.children,s=e.state,l=s.isOpen,f=s.activePanel,p=n===u.length-1,h=l?n*e.Offset:0,y={top:h,left:h},b={top:"calc(100% + 20px)",left:n*e.Offset};return r=null!==f?f===n?{top:0,left:0}:b:y,o.a.createElement("div",{tabIndex:-1,role:"button",className:a()("menu-panel",{last:p,active:f===n}),onClick:function(){l&&e.chooseMenuItem(n)},onKeyPress:function(){},style:E(E({},r),{},{zIndex:n}),key:n},o.a.createElement("div",{className:"panel"},(i=t,c={showChildren:f===n||p},o.a.createElement(i.type,D({},i.props,c)))))}));var n=t.open,r=t.activePanelIndex;return e.state={isOpen:n,activePanel:r},e.Offset=t.offset||(window.innerWidth-100)/t.children.length,e}return e=c,(n=[{key:"render",value:function(){var t=this.props.children,e=this.state,n=e.isOpen,r=e.activePanel;return o.a.createElement("div",{"data-active-panel":r,className:a()("menu-panel-container",{open:n})},t.map(this.renderMenuItem),this.renderMenuButton())}}])&&O(e.prototype,n),r&&O(e,r),c}(o.a.PureComponent);M.MenuItem=m;var C=M,T=(n("pgvL"),function(t){return o.a.createElement("span",{className:"covered-text"},t.text||t.children)}),I={$gray1:"#333333",$gray2:"#4f4f4f",$gray3:"#828282",$gray4:"#bdbdbd",$gray5:"#e0e0e0",$gray6:"#f2f2f2",$green1:"#51c49f",$green2:"#82d5bb",$green3:"#9ddec9",$green4:"#c2eade",$green5:"#f1fffa",$red3:"#ff8888",$white:"#fff",$black:"#000"},k=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fill:"#9DDEC9",d:"M2 2h12v3H2z"}),o.a.createElement("path",{fill:"#9DDEC9",d:"M2 2h3v12H2z"}),o.a.createElement("path",{d:"M5 2h1v2H5V2zM13 2h1v3h-1zM9 2h1v2H9zM2 5h2v1H2zM2 9h2v1H2zM2 13h3v1H2z",fill:"#51C49F"}),o.a.createElement("path",{fill:"#F1FFFA",d:"M5 5h9v9H5z"}))};k.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var z=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{d:"M11 4H6l5 5V4z",fill:"#82D5BB"}),o.a.createElement("path",{d:"M2 8l4-4 5 5-4 4-5-5z",fill:"#82D5BB"}),o.a.createElement("path",{d:"M14 3H9l5 5V3z",fill:"#51C49F"}),o.a.createElement("path",{d:"M4 8l5-5 5 5-5 5-5-5z",fill:"#51C49F"}),o.a.createElement("rect",{x:"10",y:"5",width:"2",height:"2",rx:"1",fill:"#C2EADE"}))};z.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var A=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fill:"#9DDEC9",d:"M2 10h12v4H2z"}),o.a.createElement("path",{fill:"#51C49F",d:"M11.364 2.707l2.121 2.121-4.95 4.95-2.12-2.121z"}),o.a.createElement("path",{fill:"#82D5BB",d:"M12.071 2l2.121 2.121-.707.707-2.121-2.12zM6.06 10.132l.354-2.475 2.122 2.121-2.475.354z"}))};A.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var N=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fill:"#51C49F",d:"M2 2h12v2.667H2z"}),o.a.createElement("path",{fill:"#82D5BB",d:"M2 4.667h12v4H2z"}),o.a.createElement("path",{fill:"#9DDEC9",d:"M2 8.667h12V14H2z"}))};N.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var H=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M14 14a6 6 0 0 0-12 0h12z",fill:"#82D5BB"}),o.a.createElement("ellipse",{cx:"8",cy:"5.6",rx:"3",ry:"3.6",fill:"#51C49F"}))};H.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var B=function(t){return o.a.createElement("svg",t,o.a.createElement("circle",{cx:"8",cy:"8",r:"6",fill:"#F88"}),o.a.createElement("path",{d:"M4.25 7.25h7.5v1.5h-7.5v-1.5z",fill:"#F1FFFA"}))};B.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var F=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fill:"#51C49F",d:"M2 2h12v12H2z"}),o.a.createElement("path",{fill:"#F1FFFA",d:"M4.572 2.857h6.857v10.286H4.572zM2.857 5.429h.857v.857h-.857zM12.286 4.571h.857v.857h-.857zM2.857 3.714h.857v.857h-.857zM12.286 2.857h.857v.857h-.857zM2.857 7.143h.857V8h-.857zM12.286 6.286h.857v.857h-.857zM2.857 8.857h.857v.857h-.857zM12.286 9.714h.857v.857h-.857zM12.286 8h.857v.857h-.857zM2.857 12.286h.857v.857h-.857zM12.286 11.429h.857v.857h-.857zM2.857 10.571h.857v.857h-.857z"}))};F.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};var V=function(t){return o.a.createElement("svg",t,o.a.createElement("path",{fill:"#9DDEC9",d:"M2 4h12v8H2z"}),o.a.createElement("path",{d:"M7.973 9.293L2.189 4h11.568L7.973 9.293z",fill:"#51C49F"}))};V.defaultProps={width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var L=function(t,e){return(L=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function $(t,e){function n(){this.constructor=t}L(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function U(t){return"function"==typeof t}var q=!1,Y={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;q=t},get useDeprecatedSynchronousErrorHandling(){return q}};function W(t){setTimeout((function(){throw t}),0)}var K={closed:!0,next:function(t){},error:function(t){if(Y.useDeprecatedSynchronousErrorHandling)throw t;W(t)},complete:function(){}},G=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function Q(t){return null!==t&&"object"==typeof t}var J=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),X=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._ctorUnsubscribe,o=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var c=0;c<n.length;++c){n[c].remove(this)}if(U(o)){r&&(this._unsubscribe=void 0);try{o.call(this)}catch(t){e=t instanceof J?Z(t.errors):[t]}}if(G(i)){c=-1;for(var u=i.length;++c<u;){var a=i[c];if(Q(a))try{a.unsubscribe()}catch(t){e=e||[],t instanceof J?e=e.concat(Z(t.errors)):e.push(t)}}}if(e)throw new J(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=n._parentOrParents;if(null===o)n._parentOrParents=this;else if(o instanceof t){if(o===this)return n;n._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return n;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[n]:i.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function Z(t){return t.reduce((function(t,e){return t.concat(e instanceof J?e.errors:e)}),[])}var tt=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),et=function(t){function e(n,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=K;break;case 1:if(!n){i.destination=K;break}if("object"==typeof n){n instanceof e?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new nt(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new nt(i,n,r,o)}return i}return $(e,t),e.prototype[tt]=function(){return this},e.create=function(t,n,r){var o=new e(t,n,r);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(X),nt=function(t){function e(e,n,r,o){var i,c=t.call(this)||this;c._parentSubscriber=e;var u=c;return U(n)?i=n:n&&(i=n.next,r=n.error,o=n.complete,n!==K&&(U((u=Object.create(n)).unsubscribe)&&c.add(u.unsubscribe.bind(u)),u.unsubscribe=c.unsubscribe.bind(c))),c._context=u,c._next=i,c._error=r,c._complete=o,c}return $(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;Y.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=Y.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):W(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;W(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};Y.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),Y.useDeprecatedSynchronousErrorHandling)throw t;W(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!Y.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return Y.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(W(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(et);var rt=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function ot(t){return t}function it(t){return 0===t.length?ot:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var ct=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof et)return t;if(t[tt])return t[tt]()}return t||e||n?new et(t,e,n):new et(K)}(t,e,n);if(r?o.add(r.call(o,this.source)):o.add(this.source||Y.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),Y.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){Y.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof et?r:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=ut(e))((function(e,r){var o;o=n.subscribe((function(e){try{t(e)}catch(t){r(t),o&&o.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[rt]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:it(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=ut(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function ut(t){if(t||(t=Y.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function at(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new st(t,e))}}var st=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new lt(t,this.project,this.thisArg))},t}(),lt=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.project=n,o.count=0,o.thisArg=r||o,o}return $(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(et);function ft(t,e,n,r){return U(n)&&(r=n,n=void 0),r?ft(t,e,n).pipe(at((function(t){return G(t)?r.apply(void 0,t):r(t)}))):new ct((function(r){!function t(e,n,r,o,i){var c;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,i),c=function(){return u.removeEventListener(n,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var a=e;e.on(n,r),c=function(){return a.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var s=e;e.addListener(n,r),c=function(){return s.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,r,o,i)}o.add(c)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}var pt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return $(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return $(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(X)),ht=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),yt=new(function(t){function e(n,r){void 0===r&&(r=ht.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return $(e,t),e.prototype.schedule=function(n,r,o){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,o):t.prototype.schedule.call(this,n,r,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(ht))(pt);function bt(t,e){var n;return void 0===t&&(t=0),void 0===e&&(e=yt),(G(n=t)||!(n-parseFloat(n)+1>=0)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=yt),new ct((function(n){return n.add(e.schedule(dt,t,{subscriber:n,counter:0,period:t})),n}))}function dt(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var vt=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),mt=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return $(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(X),gt=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return $(e,t),e}(et),wt=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return $(e,t),e.prototype[tt]=function(){return new gt(this)},e.prototype.lift=function(t){var e=new Et(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new vt;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].next(t)},e.prototype.error=function(t){if(this.closed)throw new vt;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new vt;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new vt;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new vt;return this.hasError?(t.error(this.thrownError),X.EMPTY):this.isStopped?(t.complete(),X.EMPTY):(this.observers.push(t),new mt(this,t))},e.prototype.asObservable=function(){var t=new ct;return t.source=this,t},e.create=function(t,e){return new Et(t,e)},e}(ct),Et=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return $(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):X.EMPTY},e}(wt);var Ot=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?Pt:St}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),St=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return $(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(et),Pt=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.bufferSize=n,o.startBufferEvery=r,o.buffers=[],o.count=0,o}return $(e,t),e.prototype._next=function(t){var e=this.bufferSize,n=this.startBufferEvery,r=this.buffers,o=this.count;this.count++,o%n==0&&r.push([]);for(var i=r.length;i--;){var c=r[i];c.push(t),c.length===e&&(r.splice(i,1),this.destination.next(c))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(et);function jt(t,e){return function(n){return n.lift(new _t(t,e))}}var _t=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new xt(t,this.predicate,this.thisArg))},t}(),xt=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.count=0,o}return $(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(et);function Rt(t,e){return function(n){return n.lift(new Dt(t,e))}}var Dt=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Mt(t,this.compare,this.keySelector))},t}(),Mt=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.keySelector=r,o.hasKey=!1,"function"==typeof n&&(o.compare=n),o}return $(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(et),Ct=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function Tt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var It=Tt(),kt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function zt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var At=function(t){if(t&&"function"==typeof t[rt])return r=t,function(t){var e=r[rt]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(kt(t))return Ct(t);if(zt(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,W),t};if(t&&"function"==typeof t[It])return e=t,function(t){for(var n=e[It]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,o=Q(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")},Nt=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return $(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(et),Ht=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return $(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(et);function Bt(t,e){if(!e.closed)return t instanceof ct?t.subscribe(e):At(t)(e)}var Ft=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Vt(t,this.durationSelector))},t}(),Vt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return $(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=Bt(e,new Nt(this)))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=void 0,n.unsubscribe(),this.remove(n)),this.value=void 0,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(Ht);function Lt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return $t(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $t(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Ut=function(t){var e,n,o,i=Lt(Object(r.useState)("up"),2),c=i[0],u=i[1],a=ft(t||window,"scroll",{capture:!0}).pipe(at((function(t){return t.target.scrollTop})),(n=2,void 0===o&&(o=null),function(t){return t.lift(new Ot(n,o))}),jt((function(t){var e=Lt(t,2),n=e[0],r=e[1];return Math.abs(n-r)>50})),at((function(t){var e=Lt(t,2);return e[0]-e[1]>0?"UP":"DOWN"})),Rt(),(e=function(){return bt(300)},function(t){return t.lift(new Ft(e))})),s=new wt;return a.subscribe(s),Object(r.useEffect)((function(){var t=s.subscribe((function(t){u(t)}));return function(){return t.unsubscribe()}})),[c]};function qt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Yt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Yt(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Wt=function(t,e){var n=qt(Object(r.useState)(!1),2),o=n[0],i=n[1],c=ft(t||document,"scroll").pipe(at((function(t){var n=t.target;return e?n.scrollTop>=n.scrollHeight-n.offsetHeight-e:n.scrollTop===n.scrollHeight-n.offsetHeight})),Rt()),u=new wt;return c.subscribe(u),Object(r.useEffect)((function(){var t=u.subscribe((function(t){i(t)}));return function(){return t.unsubscribe()}})),[o]};function Kt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Gt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Gt(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Qt=function(t){var e=Kt(Ut(),1)[0];return t.children(e)},Jt=o.a.createContext({openMenu:function(){},gotoPage:function(){}});function Xt(t){return(Xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Zt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function te(t,e){return(te=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ee(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=oe(t);if(e){var o=oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ne(this,n)}}function ne(t,e){return!e||"object"!==Xt(e)&&"function"!=typeof e?re(t):e}function re(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function oe(t){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ie(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ce(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var ue=C.MenuItem,ae=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ce(this,t);var n=e.title,r=e.icon,i=e.component,c="string"==typeof n,u=o.a.isValidElement(r),a=o.a.isValidElement(i);if(!(c&&u&&a))throw"Invalid Page";return this.title=n,this.icon=r,this.component=i,this},se=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&te(t,e)}(c,t);var e,n,r,i=ee(c);function c(t){var e;return ce(this,c),ie(re(e=i.call(this,t)),"gotoPage",(function(t){e.menu&&e.menu.chooseMenuItem(t)})),ie(re(e),"openMenu",(function(){e.menu&&e.menu.openMenu()})),ie(re(e),"renderMenu",(function(t){return o.a.createElement(C,{ref:function(t){return e.menu=t},offset:50,activePanelIndex:e.state.activePageIndex,hideIcon:t,open:e.state.isMenuOpen},c.pages.map((function(t){return o.a.createElement(ue,{title:{icon:t.icon,text:t.title}},t.component)})))})),e.state={activePageIndex:t.activePageIndex,isMenuOpen:!0},e}return e=c,(n=[{key:"render",value:function(){var t=this,e={openMenu:this.openMenu,gotoPage:this.gotoPage};return Object(s.e)()?o.a.createElement(Jt.Provider,{value:e},o.a.createElement(Qt,null,(function(e){var n="DOWN"===e;return t.renderMenu(n)}))):o.a.createElement(Jt.Provider,{value:e},this.renderMenu())}}])&&Zt(e.prototype,n),r&&Zt(e,r),c}(o.a.Component);ie(se,"propTypes",{activePageIndex:f.a.number.isRequired}),ie(se,"pages",[]),ie(se,"addPage",(function(t){se.pages.push(new ae(t))})),ie(se,"addPages",(function(t){t.forEach(se.addPage)}));var le=n("KUuw"),fe={posts:"".concat("https://api.zjh.im","/z/posts"),res:"".concat("https://api.zjh.im","/res"),devRes:"http://localhost:3000/res"},pe=le.version,he=le.name,ye=pe,be=("https://github.com/zjhou/toyBox/releases/tag/".concat(he,"@").concat(pe),n("M55E")),de=n.n(be);n("HAps");function ve(t){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function me(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ge(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?me(Object(n),!0).forEach((function(e){xe(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function we(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ee(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Oe(t,e){return(Oe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Se(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=_e(t);if(e){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(t,e){return!e||"object"!==ve(e)&&"function"!=typeof e?je(t):e}function je(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _e(t){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xe(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Re=function(t){return function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Oe(t,e)}(a,e);var n,r,i,u=Se(a);function a(){var t;we(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return xe(je(t=u.call.apply(u,[this].concat(n))),"handleResize",(function(e){c.a.render(t.renderGuideLines(t.$rootDom.getBoundingClientRect()),t.$container)})),xe(je(t),"renderGuideLines",(function(e){var n=t.props,r=n.top,i=n.bottom,c=n.left,u=n.right,a=n.color,s={position:"fixed",background:void 0===a?"cyan":a,zIndex:100},l=ge(ge({},s),{},{width:"100%",height:1,left:0}),f=ge(ge({},s),{},{height:"100%",width:1,top:0}),p=e.top,h=e.bottom,y=e.left,b=e.right;return[r&&o.a.createElement("div",{style:ge(ge({},l),{},{top:p})}),i&&o.a.createElement("div",{style:ge(ge({},l),{},{top:h})}),c&&o.a.createElement("div",{style:ge(ge({},f),{},{left:y})}),u&&o.a.createElement("div",{style:ge(ge({},f),{},{left:b})})]})),t}return n=a,(r=[{key:"componentDidMount",value:function(){var t=this;this.$rootDom=c.a.findDOMNode(this),this.$container=document.createElement("div"),document.body.appendChild(this.$container),setTimeout(this.handleResize,this.props.delay||0),window.addEventListener("resize",(function(){t.handleResize()}))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize),c.a.unmountComponentAtNode(this.$container),this.$container.remove()}},{key:"render",value:function(){return o.a.createElement(t,this.props)}}])&&Ee(n.prototype,r),i&&Ee(n,i),a}(o.a.PureComponent)};Re(Tn);function De(t){return t&&"function"==typeof t.schedule}function Me(t,e){return new ct((function(n){var r=new X,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function Ce(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[rt]}(t))return function(t,e){return new ct((function(n){var r=new X;return r.add(e.schedule((function(){var o=t[rt]();r.add(o.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(zt(t))return function(t,e){return new ct((function(n){var r=new X;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(kt(t))return Me(t,e);if(function(t){return t&&"function"==typeof t[It]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new ct((function(n){var r,o=new X;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(e.schedule((function(){r=t[It](),o.add(e.schedule((function(){if(!n.closed){var t,e;try{var o=r.next();t=o.value,e=o.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Te(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(Te((function(n,r){return(o=t(n,r),i?Ce(o,i):o instanceof ct?o:new ct(At(o))).pipe(at((function(t,o){return e(n,t,r,o)})));var o,i}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new Ie(t,n))})}var Ie=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new ke(t,this.project,this.concurrent))},t}(),ke=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return $(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Nt(this),n=this.destination;n.add(e);var r=Bt(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Ht);function ze(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Te(ot,t)}function Ae(t,e){return e?Me(t,e):new ct(Ct(t))}var Ne=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new He(t),r=Bt(this.notifier,new Nt(n));return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),He=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return $(e,t),e.prototype.notifyNext=function(){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(Ht);n("r8OW");function Be(t){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ve(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Le(t,e){return(Le=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $e(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ye(t);if(e){var o=Ye(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ue(this,n)}}function Ue(t,e){return!e||"object"!==Be(e)&&"function"!=typeof e?qe(t):e}function qe(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ye(t){return(Ye=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function We(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ke(t){return function(t){if(Array.isArray(t))return Ge(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Ge(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ge(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ge(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Qe=function(t){return Ke(Array(t).keys())},Je=new wt,Xe=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Le(t,e)}(c,t);var e,n,r,i=$e(c);function c(){var t;Fe(this,c);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return We(qe(t=i.call.apply(i,[this].concat(n))),"state",{y:6*t.props.current,isDragging:!1}),We(qe(t),"buildProgressStr",(function(){return"".concat((t.state.y-6)/6+1," / ").concat(t.props.total)})),We(qe(t),"updatePointerPos",(function(e){t.setState({y:e})})),We(qe(t),"updateDragStatus",(function(e){t.setState({isDragging:e})})),We(qe(t),"pointerEventHandler",(function(t){Je.next(t)})),We(qe(t),"renderTickIndicator",(function(){var e=t.props,n=e.total,r=e.current;return o.a.createElement("div",{className:a()("drag-tick-indicator",{absRight:t.props.absRight,isDragging:t.state.isDragging}),ref:function(e){t.indicator=e},onMouseUp:t.pointerEventHandler,onMouseMove:t.pointerEventHandler},Qe(n).map((function(e){var n=e===r-1;return o.a.createElement("div",{onClick:function(n){return t.props.onClick(n,e)},className:a()("tick",{active:n})})})),o.a.createElement("div",{className:"pointer","data-progress":t.buildProgressStr(),style:{top:t.state.y},ref:function(e){t.pointer=e},onMouseDown:t.pointerEventHandler}))})),t}return e=c,(n=[{key:"componentDidMount",value:function(){var t=this;document.onselectstart=function(){return!1};var e=this,n=Je.pipe(jt((function(t){return"mousedown"===t.type}))),r=Je.pipe(jt((function(t){return"mousemove"===t.type}))),o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return De(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof o&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof ct?t[0]:ze(n)(Ae(t,r))}(ft(document,"mouseup")),i=n.pipe(at((function(){return r.pipe((t=o,function(e){return e.lift(new Ne(t))}));var t})),ze(1),(function(t){return at((function(t){var n=e.indicator&&e.indicator.getBoundingClientRect().y;return t.clientY-n-6}))(t)}),at((function(t){return 6*Math.round(t/6)})),jt((function(e){return e<t.indicator.getBoundingClientRect().height-12&&e>=6})));this.dragNdropSubscribtion=i.subscribe(this.updatePointerPos),this.dragStartSubscribtion=n.subscribe((function(){t.updateDragStatus(!0)})),this.dragEndSubscribtion=o.pipe(at((function(){var e=t.state.y,n=Math.floor(e/6);return n>=t.props.total?t.props.total:n<=1?1:n})),jt((function(){return t.state.isDragging}))).subscribe((function(e){t.props.onDrop(e),t.updateDragStatus(!1)}))}},{key:"componentWillUnmount",value:function(){this.dragEndSubscribtion.unsubscribe(),this.dragStartSubscribtion.unsubscribe(),this.dragNdropSubscribtion.unsubscribe()}},{key:"render",value:function(){return this.props.total<2?null:this.renderTickIndicator()}}])&&Ve(e.prototype,n),r&&Ve(e,r),c}(o.a.Component);We(Xe,"propTypes",{current:f.a.number,total:f.a.number,onClick:f.a.func,absRight:f.a.bool}),We(Xe,"defaultProps",{onDrop:function(){},onClick:function(){},current:1,absRight:!1});n("hUxU");function Ze(t){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function tn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function en(t,e){return(en=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function nn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=cn(t);if(e){var o=cn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return rn(this,n)}}function rn(t,e){return!e||"object"!==Ze(e)&&"function"!=typeof e?on(t):e}function on(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function cn(t){return(cn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function un(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var an=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&en(t,e)}(c,t);var e,n,r,i=nn(c);function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),un(on(e=i.call(this,t)),"handleMouseMove",(function(t){var n=t.clientX,r=t.clientY,o=e.self.getBoundingClientRect(),i=o.top,c=o.left;e.setState({x:n-c,y:r-i})})),un(on(e),"setTooltipState",(function(t){e.setState({show:t})})),e.state={x:0,y:0,show:!0},e}return e=c,(n=[{key:"componentDidMount",value:function(){var t=this.self.getBoundingClientRect(),e=t.bottom,n=t.left;this.setState({x:n,y:e})}},{key:"render",value:function(){var t=this,e="translate3d(".concat(this.state.x+20,"px, ").concat(this.state.y+20,"px, 0)");return o.a.createElement("div",{onMouseMove:this.handleMouseMove,ref:function(e){return t.self=e},className:"tooltip-wrapper"},this.props.children({showTooltip:function(){t.setTooltipState(!0)},hideTooltip:function(){t.setTooltipState(!1)}}),o.a.createElement("div",{key:2,className:"tooltip",style:{transform:e}},this.state.show?this.props.tooltip:null))}}])&&tn(e.prototype,n),r&&tn(e,r),c}(o.a.PureComponent);n("Dk2R");n("Hj0M");function sn(t){return(sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ln(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function fn(t,e){return(fn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function pn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=bn(t);if(e){var o=bn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return hn(this,n)}}function hn(t,e){return!e||"object"!==sn(e)&&"function"!=typeof e?yn(t):e}function yn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function bn(t){return(bn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function dn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var vn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&fn(t,e)}(c,t);var e,n,r,i=pn(c);function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),dn(yn(e=i.call(this,t)),"renderImg",(function(){var t=e.props,n=t.tooltip,r=t.src,i=t.onClick,c=t.onLoad,u=void 0===c?function(){}:c,a=e.state.loading;return o.a.createElement(an,{tooltip:n},(function(t){var n=t.showTooltip,c=t.hideTooltip,s=o.a.createElement("img",{src:r,key:r,onClick:i,onLoad:function(){e.setState({loading:!1},u)},style:{display:a?"none":"unset"},onMouseEnter:n,onMouseLeave:c});return o.a.createElement(o.a.Fragment,null,a&&e.renderLoadingView(),s)}))})),dn(yn(e),"renderLoadingView",(function(){var t=e.props,n=t.src,r=t.loadingViewRenderer;return r?[o.a.createElement(y,{absCenter:!0}),r(n)]:o.a.createElement(y,{absCenter:!0})})),e.state={loading:!0,error:null},e}return e=c,(n=[{key:"componentWillReceiveProps",value:function(t,e){t.src===this.props.src||s.i.get(t.src)||this.setState({loading:!0})}},{key:"render",value:function(){return this.state.error?":(":this.renderImg()}}])&&ln(e.prototype,n),r&&ln(e,r),c}(o.a.Component);function mn(t){return(mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function gn(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function wn(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?gn(Object(n),!0).forEach((function(e){xn(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):gn(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function En(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function On(t,e){return(On=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Sn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=_n(t);if(e){var o=_n(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pn(this,n)}}function Pn(t,e){return!e||"object"!==mn(e)&&"function"!=typeof e?jn(t):e}function jn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _n(t){return(_n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Rn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&On(t,e)}(i,t);var e,n,r,o=Sn(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),xn(jn(e=o.call(this,t)),"getStateByPropsAndCurrentPageIndex",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.props,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.currentPageIndex,r=t.pageSize,o=t.data,i=t.infiniteLoopMode,c=Math.ceil(o.length/r),u=(n-1)*r,a=n*r,s=o.slice(u,a)||[],l=n<c,f=[];if(l){var p=n*r,h=(n+1)*r;f=o.slice(p,h)||[]}else i&&(f=o.slice(0,r));return{hasNextPage:l,hasPrevPage:n>1,currentPageIndex:n,currentPageData:s,nextPageData:f,totalPages:c}})),xn(jn(e),"next",(function(){(e.state.hasNextPage||e.props.infiniteLoopMode)&&e.setState((function(t){return e.getStateByPropsAndCurrentPageIndex(e.props,t.hasNextPage?t.currentPageIndex+1:1)}))})),xn(jn(e),"prev",(function(){(e.state.hasPrevPage||e.props.infiniteLoopMode)&&e.setState((function(t){return e.getStateByPropsAndCurrentPageIndex(e.props,t.hasPrevPage?t.currentPageIndex-1:t.totalPages)}))})),xn(jn(e),"isValidProps",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.props,n=t.data,r=t.pageSize,o=t.currentPageIndex,i=void 0===o?1:o,c=Math.ceil(n.length/r);return n.length&&r>0&&i>=1&&i<=c})),e.isValidProps(t)?(e.state=e.getStateByPropsAndCurrentPageIndex(),e):Pn(e)}return e=i,(n=[{key:"render",value:function(){return this.isValidProps(this.props)&&this.props.children(wn(wn({},this.state),{},{next:this.next,prev:this.prev}))}}])&&En(e.prototype,n),r&&En(e,r),i}(o.a.PureComponent);function Dn(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Mn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Mn(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}Rn.defaultProps={currentPageIndex:1},Rn.propTypes={data:f.a.array.isRequired,pageSize:f.a.number.isRequired,currentPageIndex:f.a.number,children:f.a.func.isRequired};var Cn=function(t){var e=t.wrapperSelector,n=t.children,o=t.mountSize,i=t.bufferDistance;if(n.length<=1||!o)return n;var c=o>0?o:1,u=Dn(Object(r.useState)(1),2),a=u[0],l=u[1],f=Dn(Wt(Object(s.a)(e),i),1)[0];return Object(r.useEffect)((function(){f&&l(a+1)}),[f]),n.slice(0,a*c)},Tn=function(){return o.a.createElement("div",{style:{display:"flex",height:"100%"}})},In=new de.a.Converter({openLinksInNewWindow:!0,simpleLineBreaks:!0});In.setFlavor("github");var kn=function(t){return In&&t?In.makeHtml(t):t},zn=function(t){var e=t.md,n=t.className;return o.a.createElement("div",{dangerouslySetInnerHTML:{__html:kn(e)},className:"".concat(n," markdown-body")})};n("CLOQ");function An(t){return(An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Hn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Bn(t,e){return(Bn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Fn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=$n(t);if(e){var o=$n(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Vn(this,n)}}function Vn(t,e){return!e||"object"!==An(e)&&"function"!=typeof e?Ln(t):e}function Ln(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function $n(t){return($n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Un(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var qn=Re((function(t){return o.a.createElement("iframe",t)})),Yn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Bn(t,e)}(c,t);var e,n,r,i=Fn(c);function c(){var t;Nn(this,c);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Un(Ln(t=i.call.apply(i,[this].concat(n))),"state",{loading:!0}),Un(Ln(t),"handleLoaded",(function(){t.setState({loading:!1})})),t}return e=c,(n=[{key:"render",value:function(){return o.a.createElement("div",{className:"figma-live"},o.a.createElement(qn,{onLoad:this.handleLoaded,width:"800",height:"450",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FNqS0N6THcwmfvK3QIn9crW%2FHOME%3Fnode-id%3D0%253A1&chrome=DOCUMENTATION",delay:700,color:"#ff8888",top:!0,left:!0,right:!0,bottom:!0}),this.state.loading?o.a.createElement(y,{absCenter:!0}):null)}}])&&Hn(e.prototype,n),r&&Hn(e,r),c}(o.a.PureComponent);n("RTF2");function Wn(t){return(Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Kn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Gn(t,e){return(Gn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Qn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Zn(t);if(e){var o=Zn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Jn(this,n)}}function Jn(t,e){return!e||"object"!==Wn(e)&&"function"!=typeof e?Xn(t):e}function Xn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Zn(t){return(Zn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function tr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var er=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Gn(t,e)}(u,t);var e,r,i,c=Qn(u);function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),tr(Xn(e=c.call(this,t)),"commands",[{name:"q",fn:function(){e.props.openMenu()}},{name:"vol",fn:function(){e.props.gotoPage(2)}}]),tr(Xn(e),"install",(function(){return e.setState({loading:!0}),n.e(4).then(n.bind(null,"XXAI")).then((function(t){return t.default.handler({user:"z@zjh.im",password:e.state.password,dom:e.editorWrapper,commands:e.commands})})).finally((function(){e.setState({loading:!1})}))})),tr(Xn(e),"handlePasswordChange",(function(t){e.setState({password:t.target.value})})),tr(Xn(e),"renderForm",(function(){return o.a.createElement("div",{className:"keys"},o.a.createElement(h,{type:"password",placeholder:"钥匙",onChange:e.handlePasswordChange,onBlur:e.install,autoComplete:!1,autoFocus:!1,autoSave:!1}))})),e.state={password:"",loading:!1},e}return e=u,(r=[{key:"render",value:function(){var t=this;return o.a.createElement("div",{className:"posts-editor",ref:function(e){return t.editorWrapper=e}},this.state.loading?o.a.createElement(y,null):this.renderForm())}}])&&Kn(e.prototype,r),i&&Kn(e,i),u}(o.a.PureComponent);function nr(t){return(nr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function rr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function or(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ir(t,e,n){return e&&or(t.prototype,e),n&&or(t,n),t}function cr(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ur(t,e)}function ur(t,e){return(ur=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ar(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=fr(t);if(e){var o=fr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return sr(this,n)}}function sr(t,e){return!e||"object"!==nr(e)&&"function"!=typeof e?lr(t):e}function lr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function fr(t){return(fr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function pr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var hr=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return Promise.resolve()},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"payload",n=function(n){cr(i,n);var r=ar(i);function i(){var t,n;rr(this,i);for(var c=arguments.length,u=new Array(c),a=0;a<c;a++)u[a]=arguments[a];return pr(lr(n=r.call.apply(r,[this].concat(u))),"state",(pr(t={loading:!0},e,null),pr(t,"error",null),t)),pr(lr(n),"ErrorRenderer",(function(t){return o.a.createElement(d,{color:I.$red3,icon:o.a.createElement(B,null)},t.message||"ERROR")})),n}return ir(i,[{key:"componentDidMount",value:function(){var n=this;t().then((function(t){var r;n.setState((pr(r={},e,t),pr(r,"loading",!1),r))})).catch((function(t){n.setState({error:t,loading:!1})}))}},{key:"render",value:function(){var t=this.props,e=t.spinner,n=void 0===e?o.a.createElement(y,{absCenter:!0}):e,r=t.errorView,i=void 0===r?this.ErrorRenderer:r;return n&&this.state.loading?n:i&&this.state.error?"function"==typeof i?i(this.state.error):i:this.props.children(this.state)}}]),i}(o.a.PureComponent);return n},yr=function(t){return t.map((function(t){return t.url}))},br=hr((function(){return Object(s.g)(fe.posts)}),"posts"),dr=hr((function(){return Object(s.g)(fe.res).then(yr)}),"photos"),vr=(n("iDs4"),function(t){var e=t.post,n=t.className;return o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-title"},e.title),o.a.createElement(zn,{md:e.content,className:"post-content"}),o.a.createElement("div",{className:"post-date"},e.date))});function mr(t){return(mr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function gr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function wr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Er(t,e){return(Er=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Or(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=jr(t);if(e){var o=jr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Sr(this,n)}}function Sr(t,e){return!e||"object"!==mr(e)&&"function"!=typeof e?Pr(t):e}function Pr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function jr(t){return(jr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var xr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Er(t,e)}(c,t);var e,n,r,i=Or(c);function c(){var t;gr(this,c);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return _r(Pr(t=i.call.apply(i,[this].concat(n))),"renderErrorView",(function(t){return o.a.createElement(d,{color:I.$red3,icon:o.a.createElement(B,null)},t.message||"ERROR")})),_r(Pr(t),"renderList",(function(){return o.a.createElement(br,{errorView:t.renderErrorView,spinner:o.a.createElement(y,{absCenter:!0})},(function(t){var e=t.posts;return o.a.createElement(Cn,{mountSize:5,bufferDistance:100,wrapperSelector:".posts-wrapper"},e&&e.slice().reverse().map((function(t){return o.a.createElement(vr,{post:t})})))}))})),t}return e=c,(n=[{key:"render",value:function(){return this.renderList()}}])&&wr(e.prototype,n),r&&wr(e,r),c}(o.a.PureComponent),Rr=function(){return o.a.createElement("div",{className:"posts-wrapper",style:{overflow:"auto",height:"100%"}},o.a.createElement(xr,null))};function Dr(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,u=t[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Mr(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Mr(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mr(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Cr=function(){var t=Dr(o.a.useState(!1),2),e=t[0],n=t[1];return o.a.createElement("div",{className:a()("cover-image",{showTape:e&&!Object(s.e)()})},o.a.createElement(vn,{src:"https://zjh-im-res.oss-cn-shenzhen.aliyuncs.com/image/JPEG%E5%9B%BE%E5%83%8F-6CDEC9FB33CD-1.jpeg?x-oss-process=style/webp",onLoad:function(){n(!0)},tooltip:"Welcome"}))},Tr=function(){return o.a.createElement("span",null,"v"+ye)},Ir=function(){return o.a.createElement("div",{className:"about pc-view"},o.a.createElement(Cr,null),o.a.createElement("div",{className:"contact"},o.a.createElement(d,{icon:o.a.createElement(V,null)},o.a.createElement(T,{text:"邮箱：嗨@当前域名"})),o.a.createElement(d,{icon:o.a.createElement(z,null),text:o.a.createElement(Tr,null),color:I.$gray4})))},kr=function(t){return"".concat(t).concat("?x-oss-process=style/webp")},zr=function(t){return o.a.createElement("img",{src:(e=t,"".concat(e.replace("?x-oss-process=style/webp","")).concat("?x-oss-process=style/thumbnail")),style:{filter:"opacity(0.2)"}});var e},Ar=function(){return o.a.createElement(dr,null,(function(t){var e=t.photos;return o.a.createElement(Rn,{data:e,pageSize:1,infiniteLoopMode:!0},(function(t){var e,n=t.currentPageData,r=t.next,i=t.totalPages,c=t.nextPageData,u=t.currentPageIndex,a="".concat(u," / ").concat(i);return c.length&&(e=kr(c[0]),Object(s.d)(e).then((function(){console.info("image cached")}))),o.a.createElement(vn,{src:kr(n[0]),onClick:r,tooltip:a,loadingViewRenderer:zr})}))}))},Nr=(n("ca4H"),function(t){return o.a.createElement("div",{className:"article-layout"},o.a.createElement("div",{className:"left"},t.left),o.a.createElement("div",{className:"right"},o.a.createElement("div",{className:"right-top"},t.rightTop),o.a.createElement("div",{className:"right-bottom"},t.rightBottom)))});n("oui7");function Hr(){return(Hr=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Br(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var Fr=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=t.replace("《","").replace("》","");return"《".concat(e,"》")},Vr=function(t){var e=t.next,n=t.prev,r=t.totalPages,i=t.currentPageIndex;return o.a.createElement("span",{className:"actions"},o.a.createElement("span",{onClick:n},"上一篇"),o.a.createElement("span",{onClick:e},"下一篇"),o.a.createElement("span",null,"".concat(i," / ").concat(r)))},Lr=function(t){var e=t.title,n=t.content,r=t.actions;return o.a.createElement(Nr,{left:Fr(e),rightTop:o.a.createElement(zn,{md:n}),rightBottom:r})},$r=function(){return o.a.createElement(br,null,(function(t){var e=t.posts;return o.a.createElement(Rn,{data:e,pageSize:1,infiniteLoopMode:!0},(function(t){var e=t.currentPageData,n=Br(t,["currentPageData"]),r=e[0];return o.a.createElement(Lr,Hr({actions:o.a.createElement(Vr,n)},r))}))}))},Ur=Object(s.e)(),qr={design:{title:"美术部",icon:o.a.createElement(k,null),component:o.a.createElement(Yn,null)},editor:{title:"编辑部",icon:o.a.createElement(A,null),component:o.a.createElement(Jt.Consumer,null,(function(t){return o.a.createElement(er,t)}))},posts:{title:"杂记",icon:o.a.createElement(N,null),component:o.a.createElement(Rr,null)},articles:{title:"杂记",icon:o.a.createElement(N,null),component:o.a.createElement($r,null)},photos:{title:"照片",icon:o.a.createElement(F,null),component:o.a.createElement(Ar,null)},about:{title:"关于",icon:o.a.createElement(H,null),component:o.a.createElement(Ir,null)}},Yr=Object(s.f)(qr,["design","editor","articles","photos","about"]),Wr=Object(s.f)(qr,["posts","about"]),Kr=Ur?Wr:Yr;function Gr(t){return(Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Qr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Jr(t,e){return(Jr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Xr(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=to(t);if(e){var o=to(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Zr(this,n)}}function Zr(t,e){return!e||"object"!==Gr(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function to(t){return(to=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var eo=Object(s.e)(),no=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Jr(t,e)}(c,t);var e,n,r,i=Xr(c);function c(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),e=i.call(this,t),se.addPages(Kr),e}return e=c,(n=[{key:"render",value:function(){return o.a.createElement("div",{className:a()("App",{mobile:eo})},o.a.createElement(se,{activePageIndex:null}))}}])&&Qr(e.prototype,n),r&&Qr(e,r),c}(r.Component);e.default=function(t){t.classList.add("blog"),c.a.render(o.a.createElement(no,null),t)}},ca4H:function(t,e,n){},crH2:function(t,e,n){},hUxU:function(t,e,n){},iDs4:function(t,e,n){},jABj:function(t,e,n){},oui7:function(t,e,n){},pgvL:function(t,e,n){},r8OW:function(t,e,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmJsZWdvL3NyYy9jb21wb25lbnRzL2lucHV0L0lucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9iYmxlZ28vc3JjL2NvbXBvbmVudHMvc3Bpbm5lci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmJsZWdvL3NyYy9jb21wb25lbnRzL21lbnUvbWVudV9idG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2JibGVnby9zcmMvY29tcG9uZW50cy9pY29uX3RleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2JibGVnby9zcmMvY29tcG9uZW50cy9tZW51L21lbnVfaXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmJsZWdvL3NyYy9jb21wb25lbnRzL21lbnUvbWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmJsZWdvL3NyYy9jb21wb25lbnRzL21lbnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2JibGVnby9zcmMvY29tcG9uZW50cy9jb3ZlcmVkX3RleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2JibGVnby9zcmMvc3R5bGVzL2Rlc2lnbl9zeXN0ZW1fc3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9iYmxlZ28vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvdG9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvY2FuUmVwb3J0RXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3ViamVjdFN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3N1YnNjcmliZVRvSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvaW5uZXJTdWJzY3JpYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL2NvbW1vbl9ob29rcy91c2Vfc2Nyb2xsX2RpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9jb21tb25faG9va3MvdXNlX3Njcm9sbF9zdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvY29yZS93aXRoX3Njcm9sbF9kaXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvY29yZS9ibG9nX2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvY29yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29uZmlnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9hdHRhY2hfZ3VpZGVfbGluZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2Jsb2dfdG9wX2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3Byb2dyZXNzX2luZGljYXRvci9kcmFnX3RpY2tfaW5kaWNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29ic2VydmFibGUvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3Vyc29yX3Rvb2xsdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9JbWcvaW1nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9wYWdpbmdfc3RhdGVfbWFuYWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbW91bnRfb25fc2Nyb2xsX3RvX2JvdHRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGFnZV9jb21wL2Rlc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9wYWdlX2NvbXAvZWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9kYXRhLXByb3ZpZGVyL2NvbXAtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvZGF0YS1wcm92aWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9wYWdlX2NvbXAvcG9zdF9saXN0L3Bvc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGFnZV9jb21wL3Bvc3RfbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9wYWdlX2NvbXAvYWJvdXQvY292ZXJfaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGFnZV9jb21wL2Fib3V0L3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGFnZV9jb21wL2Fib3V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3BhZ2VfY29tcC9waG90b3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGFnZV9jb21wL2FydGljbGUvbGF5b3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3BhZ2VfY29tcC9hcnRpY2xlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3BhZ2VfY29tcC9wYWdlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiSW5wdXQiLCJwcm9wcyIsImNsYXNzTmFtZSIsIlRpY2tMb2FkZXIiLCJhYnNDZW50ZXIiLCJzdHlsZSIsImNsYXNzbmFtZSIsImNlbnRlciIsIk1lbnVCdG4iLCJvbkNsaWNrIiwiaGlkZGVuIiwidHlwZSIsImNuIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJJY29uVGV4dCIsImNvbG9yIiwiQ09MT1JTIiwiJGJsYWNrIiwiaWNvbiIsInRleHQiLCJjaGlsZHJlbiIsIk1lbnVJdGVtIiwidGl0bGUiLCJzaG93Q2hpbGRyZW4iLCIkZ3JlZW4xIiwiYm9vbCIsInNoYXBlIiwiZWxlbWVudCIsIk1lbnUiLCJzZXRTdGF0ZSIsImFjdGl2ZVBhbmVsIiwiaXNPcGVuIiwiY2hvb3NlIiwic2V0VGltZW91dCIsInN0YXRlIiwib3Blbk1lbnUiLCJtZW51QnRuU3R5bGUiLCJoaWRlSWNvbiIsImdldFNjcm9sbGFibGVEb21CeUFjdGl2ZVBhbmVsIiwic2Nyb2xsYWJsZURvbSIsInpJbmRleCIsImxlbmd0aCIsImMiLCJpIiwicmV0UG9zIiwiQ29tcG9uZW50IiwiZXh0cmFQcm9wcyIsImlzTGFzdENoaWxkIiwicG9zIiwiT2Zmc2V0Iiwibm9ybWFsUG9zIiwidG9wIiwibGVmdCIsImluYWN0aXZlUG9zIiwidGFiSW5kZXgiLCJyb2xlIiwibGFzdCIsImFjdGl2ZSIsImNob29zZU1lbnVJdGVtIiwib25LZXlQcmVzcyIsImtleSIsIm9wZW4iLCJhY3RpdmVQYW5lbEluZGV4Iiwib2Zmc2V0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsInRoaXMiLCJkYXRhLWFjdGl2ZS1wYW5lbCIsIm1hcCIsInJlbmRlck1lbnVJdGVtIiwicmVuZGVyTWVudUJ1dHRvbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIkNvdmVyZWRUZXh0IiwiJGdyYXkxIiwiJGdyYXkyIiwiJGdyYXkzIiwiJGdyYXk0IiwiJGdyYXk1IiwiJGdyYXk2IiwiJGdyZWVuMiIsIiRncmVlbjMiLCIkZ3JlZW40IiwiJGdyZWVuNSIsIiRyZWQzIiwiJHdoaXRlIiwiUnVsZXJJY29uIiwiVGFnSWNvbiIsIkVkaXRJY29uIiwiUG9zdEljb24iLCJBYm91dEljb24iLCJFcnJvckljb24iLCJQaG90b0ljb24iLCJNYWlsSWNvbiIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4dGVuZHMiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiaXNGdW5jdGlvbiIsIngiLCJfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MiLCJjb25maWciLCJQcm9taXNlIiwidW5kZWZpbmVkIiwidmFsdWUiLCJFcnJvciIsInN0YWNrIiwiaG9zdFJlcG9ydEVycm9yIiwiZXJyIiwiZW1wdHkiLCJjbG9zZWQiLCJuZXh0IiwiZXJyb3IiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwiY29tcGxldGUiLCJpc0FycmF5IiwiaXNPYmplY3QiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvckltcGwiLCJlcnJvcnMiLCJjYWxsIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiam9pbiIsIm5hbWUiLCJTdWJzY3JpcHRpb24iLCJ1bnN1YnNjcmliZSIsIl9wYXJlbnRPclBhcmVudHMiLCJfc3Vic2NyaXB0aW9ucyIsIl9jdG9yVW5zdWJzY3JpYmUiLCJfdW5zdWJzY3JpYmUiLCJyZW1vdmUiLCJpbmRleCIsImUiLCJmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMiLCJsZW4iLCJzdWIiLCJjb25jYXQiLCJwdXNoIiwiYWRkIiwidGVhcmRvd24iLCJzdWJzY3JpcHRpb24iLCJFTVBUWSIsInRtcCIsImluZGV4T2YiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJzcGxpY2UiLCJyZWR1Y2UiLCJlcnJzIiwicnhTdWJzY3JpYmVyIiwiU3ltYm9sIiwiTWF0aCIsInJhbmRvbSIsIl9zdXBlciIsIlN1YnNjcmliZXIiLCJkZXN0aW5hdGlvbk9yTmV4dCIsIl90aGlzIiwic3luY0Vycm9yVmFsdWUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JUaHJvd2FibGUiLCJpc1N0b3BwZWQiLCJhcmd1bWVudHMiLCJkZXN0aW5hdGlvbiIsInN1YnNjcmliZXIiLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl91bnN1YnNjcmliZUFuZFJlY3ljbGUiLCJTYWZlU3Vic2NyaWJlciIsIl9wYXJlbnRTdWJzY3JpYmVyIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0IiwiYmluZCIsIl9jb250ZXh0IiwiX190cnlPclNldEVycm9yIiwiX190cnlPclVuc3ViIiwid3JhcHBlZENvbXBsZXRlIiwiZm4iLCJwYXJlbnQiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJwcmV2IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJzaW5rIiwibmV4dE9yT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJfYSIsImNsb3NlZF8xIiwiY2FuUmVwb3J0RXJyb3IiLCJjb25zb2xlIiwid2FybiIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJvcGVyYXRpb25zIiwiX2kiLCJ0b1Byb21pc2UiLCJwcm9qZWN0IiwidGhpc0FyZyIsIlR5cGVFcnJvciIsIk1hcE9wZXJhdG9yIiwiTWFwU3Vic2NyaWJlciIsImNvdW50IiwicmVzdWx0IiwiZnJvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwib3B0aW9ucyIsInJlc3VsdFNlbGVjdG9yIiwiYXJncyIsImFwcGx5Iiwic2V0dXBTdWJzY3JpcHRpb24iLCJzb3VyY2VPYmoiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0Iiwic291cmNlXzEiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzb3VyY2VfMiIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInNvdXJjZV8zIiwic2xpY2UiLCJBc3luY0FjdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJwZW5kaW5nIiwic2NoZWR1bGUiLCJkZWxheSIsImlkIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsInNldEludGVydmFsIiwiZmx1c2giLCJjbGVhckludGVydmFsIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiZXJyb3JlZCIsImVycm9yVmFsdWUiLCJhY3Rpb25zIiwiQWN0aW9uIiwiU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwibm93IiwiRGF0ZSIsIkFzeW5jU2NoZWR1bGVyIiwiZGVsZWdhdGUiLCJzY2hlZHVsZWQiLCJhY3Rpb24iLCJzaGlmdCIsImludGVydmFsIiwicGVyaW9kIiwidmFsIiwicGFyc2VGbG9hdCIsImRpc3BhdGNoIiwiY291bnRlciIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsIiwiU3ViamVjdFN1YnNjcmlwdGlvbiIsInN1YmplY3QiLCJvYnNlcnZlcnMiLCJzdWJzY3JpYmVySW5kZXgiLCJTdWJqZWN0U3Vic2NyaWJlciIsIlN1YmplY3QiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwiY29weSIsImFzT2JzZXJ2YWJsZSIsIkFub255bW91c1N1YmplY3QiLCJCdWZmZXJDb3VudE9wZXJhdG9yIiwiYnVmZmVyU2l6ZSIsInN0YXJ0QnVmZmVyRXZlcnkiLCJzdWJzY3JpYmVyQ2xhc3MiLCJCdWZmZXJDb3VudFN1YnNjcmliZXIiLCJidWZmZXIiLCJCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyIiwiYnVmZmVycyIsImZpbHRlciIsInByZWRpY2F0ZSIsIkZpbHRlck9wZXJhdG9yIiwiRmlsdGVyU3Vic2NyaWJlciIsImRpc3RpbmN0VW50aWxDaGFuZ2VkIiwiY29tcGFyZSIsImtleVNlbGVjdG9yIiwiRGlzdGluY3RVbnRpbENoYW5nZWRPcGVyYXRvciIsIkRpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciIsImhhc0tleSIsInkiLCJzdWJzY3JpYmVUb0FycmF5IiwiYXJyYXkiLCJnZXRTeW1ib2xJdGVyYXRvciIsIml0ZXJhdG9yIiwiaXNBcnJheUxpa2UiLCJpc1Byb21pc2UiLCJ0aGVuIiwic3Vic2NyaWJlVG8iLCJvYmoiLCJvYnMiLCJwcm9taXNlIiwiaXRlcmFibGUiLCJpdGVtIiwiZG9uZSIsInJldHVybiIsIlNpbXBsZUlubmVyU3Vic2NyaWJlciIsIm5vdGlmeU5leHQiLCJub3RpZnlFcnJvciIsIm5vdGlmeUNvbXBsZXRlIiwiU2ltcGxlT3V0ZXJTdWJzY3JpYmVyIiwiaW5uZXJWYWx1ZSIsImlubmVyU3Vic2NyaWJlIiwiaW5uZXJTdWJzY3JpYmVyIiwiRGVib3VuY2VPcGVyYXRvciIsImR1cmF0aW9uU2VsZWN0b3IiLCJEZWJvdW5jZVN1YnNjcmliZXIiLCJoYXNWYWx1ZSIsIl90cnlOZXh0IiwiZW1pdFZhbHVlIiwiZHVyYXRpb24iLCJkdXJhdGlvblN1YnNjcmlwdGlvbiIsInVzZVNjcm9sbERpcmVjdGlvbiIsIiRkb20iLCJ1c2VTdGF0ZSIsImRpciIsInNldERpciIsInNjcm9sbERpckNoYW5nZWQkIiwiY2FwdHVyZSIsInNjcm9sbFRvcCIsInByZSIsIm54dCIsImFicyIsInVzZUVmZmVjdCIsInVzZVNjcm9sbFN0YXR1cyIsImJ1ZmZlckRpc3RhbmNlIiwiaXNIaXRCb3R0b20iLCJzZXRTdGF0dXMiLCJoaXRCb3R0b21TdGF0dXNDaGFuZ2VkJCIsImRvY3VtZW50IiwiJG9iaiIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsInMiLCJXaXRoU2Nyb2xsRGlyIiwiQmxvZ0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZ290b1BhZ2UiLCJCbG9nUGFnZSIsInBhcmFtIiwiY29tcG9uZW50IiwiaXNWYWxpZFRpdGxlIiwiaXNWYWxpZEljb24iLCJpc1ZhbGlkRWxlbWVudCIsImlzVmFsaWRDb21wIiwiQmxvZyIsImFjdGl2ZVBhZ2VJbmRleCIsIm1lbnUiLCJyZWYiLCJtIiwiaXNNZW51T3BlbiIsInBhZ2VzIiwiY29udGV4dFZhbHVlIiwiaXNNb2JpbGUiLCJQcm92aWRlciIsInJlbmRlck1lbnUiLCJudW1iZXIiLCJwYWdlIiwiYWRkUGFnZSIsImFwaVVSTCIsInBvc3RzIiwicmVzIiwiZGV2UmVzIiwidmVyc2lvbiIsInBrZ0pzb24iLCJwYWNrYWdlSW5mbyIsIldpdGhHdWlkZUxpbmUiLCJzaG93IiwiUmVhY3REb20iLCJyZW5kZXIiLCJyZW5kZXJHdWlkZUxpbmVzIiwiJHJvb3REb20iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCIkY29udGFpbmVyIiwicmVjdE9iaiIsInNob3dUb3BMaW5lIiwic2hvd0JvdExpbmUiLCJib3R0b20iLCJzaG93TGVmdExpbmUiLCJzaG93UmlnaHRMaW5lIiwicmlnaHQiLCJjb21tb25HdWlkZUxpbmVTdHlsZSIsInBvc2l0aW9uIiwiYmFja2dyb3VuZCIsImhvcml6R3VpZGVMaW5lU3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsInZlcnRpR3VpZGVMaW5lU3R5bGUiLCJmaW5kRE9NTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJoYW5kbGVSZXNpemUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwiRW1wdHlEaXYiLCJpc1NjaGVkdWxlciIsInNjaGVkdWxlQXJyYXkiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVQcm9taXNlIiwiaXNJdGVyYWJsZSIsInNjaGVkdWxlSXRlcmFibGUiLCJtZXJnZU1hcCIsImNvbmN1cnJlbnQiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsImEiLCJpaSIsIk1lcmdlTWFwT3BlcmF0b3IiLCJNZXJnZU1hcFN1YnNjcmliZXIiLCJoYXNDb21wbGV0ZWQiLCJfaW5uZXJTdWIiLCJpc2giLCJpbm5lclN1YnNjcmlwdGlvbiIsIm1lcmdlQWxsIiwiZnJvbUFycmF5IiwiVGFrZVVudGlsT3BlcmF0b3IiLCJub3RpZmllciIsInRha2VVbnRpbFN1YnNjcmliZXIiLCJub3RpZmllclN1YnNjcmlwdGlvbiIsInNlZW5WYWx1ZSIsIlRha2VVbnRpbFN1YnNjcmliZXIiLCJyYW5nZSIsIm51bSIsImtleXMiLCJwb2ludGVyRXZlbnQkIiwiVGlja0luZGljYXRvciIsImN1cnJlbnQiLCJpc0RyYWdnaW5nIiwidG90YWwiLCJjbGFzc05hbWVzIiwiYWJzUmlnaHQiLCJpbmRpY2F0b3IiLCJvbk1vdXNlVXAiLCJwb2ludGVyRXZlbnRIYW5kbGVyIiwib25Nb3VzZU1vdmUiLCJpc0FjdGl2ZVRpY2siLCJkYXRhLXByb2dyZXNzIiwiYnVpbGRQcm9ncmVzc1N0ciIsInBvaW50ZXIiLCJvbk1vdXNlRG93biIsIm9uc2VsZWN0c3RhcnQiLCJzZWxmIiwiZHJhZ1N0YXJ0JCIsImRyYWdNb3ZpbmckIiwiZHJhZ0VuZCQiLCJvYnNlcnZhYmxlcyIsInBvcCIsIm1lcmdlIiwiZHJhZ05kcm9wJCIsInBhcmVudFkiLCJjbGllbnRZIiwicm91bmQiLCJkcmFnTmRyb3BTdWJzY3JpYnRpb24iLCJ1cGRhdGVQb2ludGVyUG9zIiwiZHJhZ1N0YXJ0U3Vic2NyaWJ0aW9uIiwidXBkYXRlRHJhZ1N0YXR1cyIsImRyYWdFbmRTdWJzY3JpYnRpb24iLCJmbG9vciIsInBvaW50ZXJJZHgiLCJvbkRyb3AiLCJyZW5kZXJUaWNrSW5kaWNhdG9yIiwiQ3Vyc29yVG9vbHRpcCIsImNsaWVudFgiLCJ0cmFuc2Zvcm1WYWwiLCJoYW5kbGVNb3VzZU1vdmUiLCJzaG93VG9vbHRpcCIsInNldFRvb2x0aXBTdGF0ZSIsImhpZGVUb29sdGlwIiwidHJhbnNmb3JtIiwidG9vbHRpcCIsIkltZyIsInNyYyIsIm9uTG9hZCIsImxvYWRpbmciLCJyZXRJbWciLCJkaXNwbGF5Iiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwicmVuZGVyTG9hZGluZ1ZpZXciLCJsb2FkaW5nVmlld1JlbmRlcmVyIiwibmV4dFByb3BzIiwibmV4dENvbnRleHQiLCJzdG9yZSIsImdldCIsInJlbmRlckltZyIsIlBhZ2luZ1N0YXRlTWFuYWdlciIsImN1cnJlbnRQYWdlSW5kZXgiLCJwYWdlU2l6ZSIsImRhdGEiLCJpbmZpbml0ZUxvb3BNb2RlIiwidG90YWxQYWdlcyIsImNlaWwiLCJzdGFydCIsImVuZCIsImN1cnJlbnRQYWdlRGF0YSIsImhhc05leHRQYWdlIiwibmV4dFBhZ2VEYXRhIiwibmV4dFBhZ2VTdGFydCIsIm5leHRQYWdlRW5kIiwiaGFzUHJldlBhZ2UiLCJwcmV2U3RhdGUiLCJnZXRTdGF0ZUJ5UHJvcHNBbmRDdXJyZW50UGFnZUluZGV4IiwiaXNWYWxpZFByb3BzIiwiZGVmYXVsdFByb3BzIiwiTW91bnRPblNjcm9sbFRvQm90dG9tIiwid3JhcHBlclNlbGVjdG9yIiwibW91bnRTaXplIiwibW91bnRTaXplQXRPbmVUaW1lIiwiaGl0Qm90dG9tQ291bnQiLCJzZXRDb3VudCIsInVzZVNjcm9sbEhpdEJvdHRvbVN0YXR1cyIsIiQiLCJjb252ZXJ0ZXIiLCJzaG93ZG93biIsIkNvbnZlcnRlciIsIm9wZW5MaW5rc0luTmV3V2luZG93Iiwic2ltcGxlTGluZUJyZWFrcyIsInNldEZsYXZvciIsIm1kMmh0bSIsIm1kIiwibWFrZUh0bWwiLCJIVE1MIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJEZXNpZ25GcmFtZSIsIkRlc2lnbiIsImhhbmRsZUxvYWRlZCIsIkVkaXRvciIsInVzZXIiLCJwYXNzd29yZCIsImRvbSIsImVkaXRvcldyYXBwZXIiLCJjb21tYW5kcyIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJoYW5kbGVQYXNzd29yZENoYW5nZSIsIm9uQmx1ciIsImluc3RhbGwiLCJhdXRvQ29tcGxldGUiLCJhdXRvRm9jdXMiLCJhdXRvU2F2ZSIsInIiLCJyZW5kZXJGb3JtIiwiYnVpbGREYXRhUHJvdmlkZXIiLCJxdWVyeUZuIiwicGF5bG9hZEtleSIsIlJldENvbXAiLCJwYXlsb2FkIiwic3Bpbm5lciIsImVycm9yVmlldyIsIkVycm9yUmVuZGVyZXIiLCJleHRyYWN0UGhvdG9zVXJsIiwicGhvdG9zIiwidXJsIiwiUG9zdHNQcm92aWRlciIsInJlcSIsIlBob3Rvc1Byb3ZpZGVyIiwicG9zdCIsImNvbnRlbnQiLCJkYXRlIiwiUG9zdExpc3QiLCJyZW5kZXJFcnJvclZpZXciLCJyZXZlcnNlIiwicmVuZGVyTGlzdCIsIlBvc3RzIiwib3ZlcmZsb3ciLCJDb3ZlckltYWdlIiwibG9hZGVkIiwic2V0TG9hZGluZ1N0YXRlIiwic2hvd1RhcGUiLCJWZXJzaW9uIiwiQWJvdXQiLCJ0b1dlYnBVcmwiLCJyZW5kZXJCbHVycnlUaHVtYm5haWwiLCJvcmlnaW5VcmwiLCJyZXBsYWNlIiwiUGhvdG9zIiwicHJvZ3Jlc3MiLCJnZXRJbWFnZSIsImluZm8iLCJMYXlvdXQiLCJyaWdodFRvcCIsInJpZ2h0Qm90dG9tIiwid3JhcFRpdGxlIiwiY2xlYW5UaXRsZSIsIkFjdGlvbnMiLCJBcnRpY2xlIiwiQXJ0aWNsZXMiLCJyZXN0IiwiSVNfTU9CSUxFIiwiZGVzaWduIiwiZWRpdG9yIiwiQ29uc3VtZXIiLCJhcnRpY2xlcyIsImFib3V0IiwiUGNQYWdlcyIsInBpY2siLCJNb2JpbGVQYWdlcyIsIlBBR0VTIiwiQXBwIiwiYWRkUGFnZXMiLCJtb2JpbGUiLCIkd3JhcHBlciIsImNsYXNzTGlzdCIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiMHBFQUdPLElBQU1BLEVBQVEsU0FB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QSxTQUNqQixjQUFNQSxHQUNOZ1ksR0FBS2dRLFNBQVNGLElBRkcsRSw4Q0FNakIsT0FDRSx5QkFBSzduQixVQUFXSSxJQUFVLE1BQU8sQ0FBQzRuQixPQUFRWixNQUN4QyxrQkFBQyxHQUFELENBQU1wUCxnQkFBaUIsYSxnQ0FUYmpWLGFDSEgsbUJBQUNrbEIsR0FDZEEsRUFBU0MsVUFBVTNlLElBQUksUUFDdkI0ZSxJQUFTNU8sT0FBTyxrQkFBQyxHQUFELE1BQVMwTyxLIiwiZmlsZSI6IjIuZGQ1YmUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi4vLi4vc3R5bGVzL2lucHV0LnNjc3MnO1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIGNsYXNzTmFtZT1cImJibGVnby1pbnB1dFwiXG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICcuLi8uLi9zdHlsZXMvc3Bpbm5lci5zY3NzJ1xuXG5leHBvcnQgY29uc3QgQmxpbmtEb3QgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPVwiYmxpbmstZG90XCI+wrc8L3NwYW4+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgVGlja0xvYWRlciA9ICh7IGFic0NlbnRlciwgc3R5bGUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lKFwidGljay1sb2FkZXJcIiwge1xuICAgICAgICBjZW50ZXI6IGFic0NlbnRlclxuICAgICAgfSl9XG4gICAgLz5cbiAgKVxufTtcblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmV4cG9ydCBjb25zdCBNZW51QnRuID0gKHtcbiAgb25DbGljayxcbiAgY2xhc3NOYW1lLFxuICBzdHlsZSxcbiAgaGlkZGVuLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgY2xhc3NOYW1lPXtjbignbWVudS1idXR0b24nLCBjbGFzc05hbWUsIHtcbiAgICAgICAgaGlkZGVuXG4gICAgICB9KX1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgLz5cbiAgKTtcbn07XG5cbk1lbnVCdG4ucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0ICcuLi8uLi9zdHlsZXMvaWNvbl90ZXh0LnNjc3MnO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSAnLi4vLi4nO1xuXG5leHBvcnQgY29uc3QgSWNvblRleHQgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtjbignaWNvbi10ZXh0JywgcHJvcHMuY2xhc3NOYW1lIHx8ICcnKX1cbiAgICAgIHN0eWxlPXt7IGNvbG9yOiBwcm9wcy5jb2xvciB8fCBDT0xPUlMuJGJsYWNrfX1cbiAgICA+XG4gICAgICB7cHJvcHMuaWNvbn1cbiAgICAgIHtwcm9wcy50ZXh0IHx8IHByb3BzLmNoaWxkcmVufVxuICAgIDwvc3Bhbj5cbiAgKVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IEljb25UZXh0IH0gZnJvbSBcIi4uL2ljb25fdGV4dFwiO1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSBcIi4uLy4uXCI7XG5cbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdGl0bGUsXG4gICAgc2hvd0NoaWxkcmVuLFxuICAgIGNoaWxkcmVuLFxuICB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbnUtaXRlbVwiPlxuICAgICAgPEljb25UZXh0XG4gICAgICAgIHsuLi50aXRsZX1cbiAgICAgICAgY29sb3I9e0NPTE9SUy4kZ3JlZW4xfVxuICAgICAgICBjbGFzc05hbWU9XCJwYW5lbC10aXRsZVwiXG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZW51LWl0ZW0tY29udGVudFwiPlxuICAgICAgICB7c2hvd0NoaWxkcmVuICYmIGNoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5NZW51SXRlbS5wcm9wVHlwZXMgPSB7XG4gIHNob3dDaGlsZHJlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgdGl0bGU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaWNvbjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSkuaXNSZXF1aXJlZCxcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgTWVudUJ0biB9IGZyb20gXCIuL21lbnVfYnRuXCI7XG5pbXBvcnQgeyBNZW51SXRlbX0gZnJvbSBcIi4vbWVudV9pdGVtXCI7XG5cbmNvbnN0IE1pblBhbmVsV2lkdGggPSAxMDA7XG5jb25zdCBhbmltYXRpb25EZWxheSA9IDcwMDtcbmNvbnN0IHNob3J0QW5pbURlbGF5ID0gMzAwO1xuXG5jb25zdCBBZGRFeHRyYVByb3BzVG8gPSAoQ29tcG9uZW50LCBleHRyYVByb3BzKSA9PiB7XG4gIHJldHVybiA8Q29tcG9uZW50LnR5cGUgey4uLkNvbXBvbmVudC5wcm9wc30gey4uLmV4dHJhUHJvcHN9IC8+O1xufTtcblxuY2xhc3MgTWVudSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBvcGVuLFxuICAgICAgYWN0aXZlUGFuZWxJbmRleCxcbiAgICB9ID0gcHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzT3Blbjogb3BlbixcbiAgICAgIGFjdGl2ZVBhbmVsOiBhY3RpdmVQYW5lbEluZGV4XG4gICAgfVxuXG4gICAgdGhpcy5PZmZzZXQgPSBwcm9wcy5vZmZzZXRcbiAgICAgIHx8ICh3aW5kb3cuaW5uZXJXaWR0aCAtIE1pblBhbmVsV2lkdGgpIC8gcHJvcHMuY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG5cbiAgb3Blbk1lbnUgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhY3RpdmVQYW5lbDogbnVsbCxcbiAgICAgIGlzT3BlbjogdHJ1ZSxcbiAgICB9KVxuICB9XG5cbiAgY2hvb3NlTWVudUl0ZW0gPSAoYWN0aXZlUGFuZWwpID0+IHtcbiAgICBjb25zdCBjaG9vc2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlUGFuZWxcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzT3BlbjogZmFsc2UgfSk7XG4gICAgICAgIH0sIGFuaW1hdGlvbkRlbGF5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmlzT3Blbikge1xuICAgICAgY2hvb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vcGVuTWVudSgpO1xuICAgIHNldFRpbWVvdXQoY2hvb3NlLCBhbmltYXRpb25EZWxheSk7XG4gIH1cblxuICByZW5kZXJNZW51QnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgbWVudUJ0blN0eWxlID0ge30sXG4gICAgICBoaWRlSWNvbixcbiAgICAgIGdldFNjcm9sbGFibGVEb21CeUFjdGl2ZVBhbmVsLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qge1xuICAgICAgaXNPcGVuLFxuICAgICAgYWN0aXZlUGFuZWxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPE1lbnVCdG5cbiAgICAgICAgY2xhc3NOYW1lPXtjbih7IGhpZGRlbjogaXNPcGVuIH0pfVxuICAgICAgICBzY3JvbGxhYmxlRG9tPXtnZXRTY3JvbGxhYmxlRG9tQnlBY3RpdmVQYW5lbFxuICAgICAgICAgID8gZ2V0U2Nyb2xsYWJsZURvbUJ5QWN0aXZlUGFuZWwoYWN0aXZlUGFuZWwpXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgaGlkZGVuPXtoaWRlSWNvbn1cbiAgICAgICAgc3R5bGU9e3suLi5tZW51QnRuU3R5bGUsIHpJbmRleDogY2hpbGRyZW4ubGVuZ3RofX1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGlmIChpc09wZW4pIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9wZW5NZW51KCk7XG4gICAgICAgICAgfSwgc2hvcnRBbmltRGVsYXkpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICByZW5kZXJNZW51SXRlbSA9IChjLCBpKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7XG4gICAgICBpc09wZW4sXG4gICAgICBhY3RpdmVQYW5lbFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgaXNMYXN0Q2hpbGQgPSBpID09PSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGNvbnN0IHBvcyA9IGlzT3BlbiA/IGkgKiB0aGlzLk9mZnNldCA6IDA7XG4gICAgY29uc3QgYWN0aXZlUG9zID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICB9O1xuICAgIGNvbnN0IG5vcm1hbFBvcyA9IHtcbiAgICAgIHRvcDogcG9zLFxuICAgICAgbGVmdDogcG9zLFxuICAgIH07XG4gICAgY29uc3QgaW5hY3RpdmVQb3MgPSB7XG4gICAgICB0b3A6ICdjYWxjKDEwMCUgKyAyMHB4KScsIC8vIGhpZGUgc2hhZG93XG4gICAgICBsZWZ0OiBpICogdGhpcy5PZmZzZXQsXG4gICAgfTtcblxuICAgIGxldCByZXRQb3M7XG4gICAgaWYgKGFjdGl2ZVBhbmVsICE9PSBudWxsKSB7XG4gICAgICByZXRQb3MgPSBhY3RpdmVQYW5lbCA9PT0gaSA/IGFjdGl2ZVBvcyA6IGluYWN0aXZlUG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRQb3MgPSBub3JtYWxQb3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPXtjbignbWVudS1wYW5lbCcsIHtcbiAgICAgICAgICBsYXN0OiBpc0xhc3RDaGlsZCxcbiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZVBhbmVsID09PSBpLFxuICAgICAgICB9KX1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGlmICghaXNPcGVuKSB7IHJldHVybjsgfVxuICAgICAgICAgIHRoaXMuY2hvb3NlTWVudUl0ZW0oaSk7XG4gICAgICAgIH19XG4gICAgICAgIG9uS2V5UHJlc3M9eygpID0+IHt9fVxuICAgICAgICBzdHlsZT17ey4uLnJldFBvcywgekluZGV4OiBpfX1cbiAgICAgICAga2V5PXtpfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsXCI+XG4gICAgICAgICAge0FkZEV4dHJhUHJvcHNUbyhjLCB7IHNob3dDaGlsZHJlbjogKGFjdGl2ZVBhbmVsID09PSBpIHx8IGlzTGFzdENoaWxkKX0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHtcbiAgICAgIGlzT3BlbixcbiAgICAgIGFjdGl2ZVBhbmVsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBkYXRhLWFjdGl2ZS1wYW5lbD17YWN0aXZlUGFuZWx9XG4gICAgICAgIGNsYXNzTmFtZT17Y24oJ21lbnUtcGFuZWwtY29udGFpbmVyJywge1xuICAgICAgICAgIG9wZW46IGlzT3BlbixcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgIHtcbiAgICAgICAgICBjaGlsZHJlbi5tYXAodGhpcy5yZW5kZXJNZW51SXRlbSlcbiAgICAgICAgfVxuICAgICAgICB7dGhpcy5yZW5kZXJNZW51QnV0dG9uKCl9XG4gICAgICA8L2Rpdj5cbiAgICApXG5cbiAgfVxufVxuXG5NZW51Lk1lbnVJdGVtID0gTWVudUl0ZW07XG5cbmV4cG9ydCB7XG4gIE1lbnVcbn0iLCJpbXBvcnQgJy4uLy4uL3N0eWxlcy9tZW51LnNjc3MnO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gXCIuL21lbnVcIjtcbmV4cG9ydCBkZWZhdWx0IE1lbnU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuLi8uLi9zdHlsZXMvY292ZXJlZF90ZXh0LnNjc3MnO1xuXG5leHBvcnQgY29uc3QgQ292ZXJlZFRleHQgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9XCJjb3ZlcmVkLXRleHRcIj5cbiAgICAgIHtwcm9wcy50ZXh0IHx8IHByb3BzLmNoaWxkcmVufVxuICAgIDwvc3Bhbj5cbiAgKVxufTtcbiIsImV4cG9ydCBjb25zdCBDT0xPUlMgPSB7XG4gICRncmF5MTogJyMzMzMzMzMnLFxuICAkZ3JheTI6ICcjNGY0ZjRmJyxcbiAgJGdyYXkzOiAnIzgyODI4MicsXG4gICRncmF5NDogJyNiZGJkYmQnLFxuICAkZ3JheTU6ICcjZTBlMGUwJyxcbiAgJGdyYXk2OiAnI2YyZjJmMicsXG4gICRncmVlbjE6ICcjNTFjNDlmJyxcbiAgJGdyZWVuMjogJyM4MmQ1YmInLFxuICAkZ3JlZW4zOiAnIzlkZGVjOScsXG4gICRncmVlbjQ6ICcjYzJlYWRlJyxcbiAgJGdyZWVuNTogJyNmMWZmZmEnLFxuICAkcmVkMzogJyNmZjg4ODgnLFxuICAkd2hpdGU6ICcjZmZmJyxcbiAgJGJsYWNrOiAnIzAwMCcsXG59O1xuIiwiaW1wb3J0IFJ1bGVySWNvbiBmcm9tICcuL2ljb25zL3J1bGVyLnN2Zyc7XG5pbXBvcnQgVGFnSWNvbiBmcm9tICcuL2ljb25zL3RhZy5zdmcnO1xuaW1wb3J0IEVkaXRJY29uIGZyb20gJy4vaWNvbnMvZWRpdC5zdmcnO1xuaW1wb3J0IFBvc3RJY29uIGZyb20gJy4vaWNvbnMvcG9zdC5zdmcnO1xuaW1wb3J0IEFib3V0SWNvbiBmcm9tICcuL2ljb25zL2Fib3V0LnN2Zyc7XG5pbXBvcnQgRXJyb3JJY29uIGZyb20gJy4vaWNvbnMvZXJyb3Iuc3ZnJztcbmltcG9ydCBQaG90b0ljb24gZnJvbSAnLi9pY29ucy9waG90by5zdmcnO1xuaW1wb3J0IEdyaWRJY29uIGZyb20gJy4vaWNvbnMvZ3JpZC5zdmcnO1xuaW1wb3J0IE1haWxJY29uIGZyb20gJy4vaWNvbnMvbWFpbC5zdmcnXG5cbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50cydcbmV4cG9ydCAqIGZyb20gJy4vc3R5bGVzL2Rlc2lnbl9zeXN0ZW1fc3R5bGVzJ1xuZXhwb3J0IHtcbiAgUnVsZXJJY29uLFxuICBUYWdJY29uLFxuICBFZGl0SWNvbixcbiAgUG9zdEljb24sXG4gIEFib3V0SWNvbixcbiAgRXJyb3JJY29uLFxuICBQaG90b0ljb24sXG4gIEdyaWRJY29uLFxuICBNYWlsSWNvblxufVxuXG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3MgPSBmYWxzZTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICBzZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IC8qQF9fUFVSRV9fKi8gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUud2FybignREVQUkVDQVRFRCEgUnhKUyB3YXMgc2V0IHRvIHVzZSBkZXByZWNhdGVkIHN5bmNocm9ub3VzIGVycm9yIGhhbmRsaW5nIGJlaGF2aW9yIGJ5IGNvZGUgYXQ6IFxcbicgKyBlcnJvci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzKSB7XG4gICAgICAgICAgICAvKkBfX1BVUkVfXyovIGNvbnNvbGUubG9nKCdSeEpTOiBCYWNrIHRvIGEgYmV0dGVyIGVycm9yIGJlaGF2aW9yLiBUaGFuayB5b3UuIDwzJyk7XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXQgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZygpIHtcbiAgICAgICAgcmV0dXJuIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncztcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9ob3N0UmVwb3J0RXJyb3InO1xuZXhwb3J0IHZhciBlbXB0eSA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09iamVjdC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzID9cbiAgICAgICAgICAgIGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF91dGlsX2lzT2JqZWN0LF91dGlsX2lzRnVuY3Rpb24sX3V0aWxfVW5zdWJzY3JpcHRpb25FcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL3V0aWwvaXNPYmplY3QnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG52YXIgU3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9jdG9yVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50T3JQYXJlbnRzID0gX2EuX3BhcmVudE9yUGFyZW50cywgX2N0b3JVbnN1YnNjcmliZSA9IF9hLl9jdG9yVW5zdWJzY3JpYmUsIF91bnN1YnNjcmliZSA9IF9hLl91bnN1YnNjcmliZSwgX3N1YnNjcmlwdGlvbnMgPSBfYS5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIF9wYXJlbnRPclBhcmVudHMucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfcGFyZW50T3JQYXJlbnRzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRPclBhcmVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihfdW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICBpZiAoX2N0b3JVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0ZWFyZG93bjtcbiAgICAgICAgaWYgKCF0ZWFyZG93bikge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbi5jbG9zZWQgfHwgdHlwZW9mIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIShzdWJzY3JpcHRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9zdWJzY3JpcHRpb25zID0gW3RtcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSBbX3BhcmVudE9yUGFyZW50cywgdGhpc107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cy5pbmRleE9mKHRoaXMpID09PSAtMSkge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5wdXNoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gW3N1YnNjcmlwdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25JbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uIChlbXB0eSkge1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfShuZXcgU3Vic2NyaXB0aW9uKCkpKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZnVuY3Rpb24gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVycm9ycykge1xuICAgIHJldHVybiBlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChlcnJzLCBlcnIpIHsgcmV0dXJuIGVycnMuY29uY2F0KChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgICAgICA6ICdAQHJ4U3Vic2NyaWJlcl8nICsgLypAX19QVVJFX18qLyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydCB2YXIgJCRyeFN1YnNjcmliZXIgPSByeFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yeFN1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF91dGlsX2lzRnVuY3Rpb24sX09ic2VydmVyLF9TdWJzY3JpcHRpb24sX2ludGVybmFsX3N5bWJvbF9yeFN1YnNjcmliZXIsX2NvbmZpZyxfdXRpbF9ob3N0UmVwb3J0RXJyb3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlbXB0eSBhcyBlbXB0eU9ic2VydmVyIH0gZnJvbSAnLi9PYnNlcnZlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vaW50ZXJuYWwvc3ltYm9sL3J4U3Vic2NyaWJlcic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbnZhciBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25Pck5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBlbXB0eU9ic2VydmVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbk9yTmV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uT3JOZXh0IGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZGVzdGluYXRpb25Pck5leHQuc3luY0Vycm9yVGhyb3dhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbk9yTmV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uT3JOZXh0LmFkZChfdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIoX3RoaXMsIGRlc3RpbmF0aW9uT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgc3Vic2NyaWJlci5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gdGhpcy5fcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudE9yUGFyZW50cyA9IF9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIFNhZmVTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKF9wYXJlbnRTdWJzY3JpYmVyLCBvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgbmV4dCA9IG9ic2VydmVyT3JOZXh0Lm5leHQ7XG4gICAgICAgICAgICBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yO1xuICAgICAgICAgICAgY29tcGxldGUgPSBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAhPT0gZW1wdHlPYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0LnVuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGQoY29udGV4dC51bnN1YnNjcmliZS5iaW5kKGNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9IF90aGlzLnVuc3Vic2NyaWJlLmJpbmQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgX3RoaXMuX25leHQgPSBuZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCAmJiB0aGlzLl9uZXh0KSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yVW5zdWIodGhpcy5fbmV4dCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX25leHQsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICAgICAgdmFyIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgPSBjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZztcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICghdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmICh1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50U3Vic2NyaWJlci5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcGxldGUuY2FsbChfdGhpcy5fY29udGV4dCk7IH07XG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyB8fCAhX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclVuc3ViID0gZnVuY3Rpb24gKGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fX3RyeU9yU2V0RXJyb3IgPSBmdW5jdGlvbiAocGFyZW50LCBmbiwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgY2FsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudFN1YnNjcmliZXIgPSB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF90b1N1YnNjcmliZXIsX3N5bWJvbF9vYnNlcnZhYmxlLF91dGlsX3BpcGUsX2NvbmZpZyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjYW5SZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyB0b1N1YnNjcmliZXIgfSBmcm9tICcuL3V0aWwvdG9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG52YXIgT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKHRoaXMuc291cmNlIHx8IChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiAhc2luay5zeW5jRXJyb3JUaHJvd2FibGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc2luaykgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzaW5rLnN5bmNFcnJvclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzaW5rKSkge1xuICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gdmFsdWUgPSB4OyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIsX3N5bWJvbF9yeFN1YnNjcmliZXIsX09ic2VydmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IHJ4U3Vic2NyaWJlciBhcyByeFN1YnNjcmliZXJTeW1ib2wgfSBmcm9tICcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJztcbmltcG9ydCB7IGVtcHR5IGFzIGVtcHR5T2JzZXJ2ZXIgfSBmcm9tICcuLi9PYnNlcnZlcic7XG5leHBvcnQgZnVuY3Rpb24gdG9TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICBpZiAobmV4dE9yT2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIoZW1wdHlPYnNlcnZlcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX1N1YnNjcmliZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNhblJlcG9ydEVycm9yKG9ic2VydmVyKSB7XG4gICAgd2hpbGUgKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBfYSA9IG9ic2VydmVyLCBjbG9zZWRfMSA9IF9hLmNsb3NlZCwgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbiwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoY2xvc2VkXzEgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FuUmVwb3J0RXJyb3IuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWFwT3BlcmF0aW9uKHNvdXJjZSkge1xuICAgICAgICBpZiAodHlwZW9mIHByb2plY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLiBBcmUgeW91IGxvb2tpbmcgZm9yIGBtYXBUbygpYD8nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxudmFyIE1hcE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcE9wZXJhdG9yKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBNYXBTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJvamVjdCwgdGhpcy50aGlzQXJnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0IHsgTWFwT3BlcmF0b3IgfTtcbnZhciBNYXBTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1hcFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgdGhpc0FyZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMudGhpc0FyZyA9IHRoaXNBcmcgfHwgX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdC5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyZXN1bHQpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNBcnJheSxfdXRpbF9pc0Z1bmN0aW9uLF9vcGVyYXRvcnNfbWFwIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWFwJztcbnZhciB0b1N0cmluZyA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBpc0FycmF5KGFyZ3MpID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJlc3VsdFNlbGVjdG9yKGFyZ3MpOyB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmdW5jdGlvbiBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXR1cFN1YnNjcmlwdGlvbih0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXR1cFN1YnNjcmlwdGlvbihzb3VyY2VPYmosIGV2ZW50TmFtZSwgaGFuZGxlciwgc3Vic2NyaWJlciwgb3B0aW9ucykge1xuICAgIHZhciB1bnN1YnNjcmliZTtcbiAgICBpZiAoaXNFdmVudFRhcmdldChzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMSA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSkge1xuICAgICAgICB2YXIgc291cmNlXzIgPSBzb3VyY2VPYmo7XG4gICAgICAgIHNvdXJjZU9iai5vbihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8yLm9mZihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopKSB7XG4gICAgICAgIHZhciBzb3VyY2VfMyA9IHNvdXJjZU9iajtcbiAgICAgICAgc291cmNlT2JqLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc291cmNlT2JqICYmIHNvdXJjZU9iai5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZU9iai5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgc2V0dXBTdWJzY3JpcHRpb24oc291cmNlT2JqW2ldLCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVyLmFkZCh1bnN1YnNjcmliZSk7XG59XG5mdW5jdGlvbiBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcihzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkTGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuIHNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLm9uID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoub2ZmID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldChzb3VyY2VPYmopIHtcbiAgICByZXR1cm4gc291cmNlT2JqICYmIHR5cGVvZiBzb3VyY2VPYmouYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX0FjdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xudmFyIEFzeW5jQWN0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9ICEhZSAmJiBlIHx8IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgdmFyIGluZGV4ID0gYWN0aW9ucy5pbmRleE9mKHRoaXMpO1xuICAgICAgICB0aGlzLndvcmsgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwXG4iLCJ2YXIgU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIG5vdyA9IFNjaGVkdWxlci5ub3c7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5TY2hlZHVsZXJBY3Rpb24gPSBTY2hlZHVsZXJBY3Rpb247XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5TY2hlZHVsZXJBY3Rpb24odGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBEYXRlLm5vdygpOyB9O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9Bc3luY0FjdGlvbixfQXN5bmNTY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcbmltcG9ydCB7IEFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi9Bc3luY1NjaGVkdWxlcic7XG5leHBvcnQgdmFyIGFzeW5jU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TY2hlZHVsZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBub3cgPSBTY2hlZHVsZXIubm93O1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICYmIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICE9PSBfdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZS5ub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgJiYgQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZS5zY2hlZHVsZSh3b3JrLCBkZWxheSwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCB3b3JrLCBkZWxheSwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyO1xufShTY2hlZHVsZXIpKTtcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3NjaGVkdWxlcl9hc3luYyxfdXRpbF9pc051bWVyaWMgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNOdW1lcmljIH0gZnJvbSAnLi4vdXRpbC9pc051bWVyaWMnO1xuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHBlcmlvZCA9IDA7XG4gICAgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBzY2hlZHVsZXIgPSBhc3luYztcbiAgICB9XG4gICAgaWYgKCFpc051bWVyaWMocGVyaW9kKSB8fCBwZXJpb2QgPCAwKSB7XG4gICAgICAgIHBlcmlvZCA9IDA7XG4gICAgfVxuICAgIGlmICghc2NoZWR1bGVyIHx8IHR5cGVvZiBzY2hlZHVsZXIuc2NoZWR1bGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZGlzcGF0Y2gsIHBlcmlvZCwgeyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBjb3VudGVyOiAwLCBwZXJpb2Q6IHBlcmlvZCB9KSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2goc3RhdGUpIHtcbiAgICB2YXIgc3Vic2NyaWJlciA9IHN0YXRlLnN1YnNjcmliZXIsIGNvdW50ZXIgPSBzdGF0ZS5jb3VudGVyLCBwZXJpb2QgPSBzdGF0ZS5wZXJpb2Q7XG4gICAgc3Vic2NyaWJlci5uZXh0KGNvdW50ZXIpO1xuICAgIHRoaXMuc2NoZWR1bGUoeyBzdWJzY3JpYmVyOiBzdWJzY3JpYmVyLCBjb3VudGVyOiBjb3VudGVyICsgMSwgcGVyaW9kOiBwZXJpb2QgfSwgcGVyaW9kKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaXNBcnJheSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi9pc0FycmF5JztcbmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWModmFsKSB7XG4gICAgcmV0dXJuICFpc0FycmF5KHZhbCkgJiYgKHZhbCAtIHBhcnNlRmxvYXQodmFsKSArIDEpID49IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc051bWVyaWMuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG52YXIgU3ViamVjdFN1YnNjcmlwdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpcHRpb24oc3ViamVjdCwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0O1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gc3ViamVjdC5vYnNlcnZlcnM7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IG51bGw7XG4gICAgICAgIGlmICghb2JzZXJ2ZXJzIHx8IG9ic2VydmVycy5sZW5ndGggPT09IDAgfHwgc3ViamVjdC5pc1N0b3BwZWQgfHwgc3ViamVjdC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaWJlckluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YodGhpcy5zdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2Uoc3Vic2NyaWJlckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3ViamVjdFN1YnNjcmlwdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdFN1YnNjcmlwdGlvbi5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX09ic2VydmFibGUsX1N1YnNjcmliZXIsX1N1YnNjcmlwdGlvbixfdXRpbF9PYmplY3RVbnN1YnNjcmliZWRFcnJvcixfU3ViamVjdFN1YnNjcmlwdGlvbixfaW50ZXJuYWxfc3ltYm9sX3J4U3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YmplY3RTdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xudmFyIFN1YmplY3RTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3RTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3RTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU3ViamVjdFN1YnNjcmliZXIgfTtcbnZhciBTdWJqZWN0ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvcHlbaV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgdmFyIGxlbiA9IG9ic2VydmVycy5sZW5ndGg7XG4gICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHlbaV0uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhpcy50aHJvd25FcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyQ291bnQoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgIGlmIChzdGFydEJ1ZmZlckV2ZXJ5ID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RhcnRCdWZmZXJFdmVyeSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBidWZmZXJDb3VudE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgQnVmZmVyQ291bnRPcGVyYXRvcihidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSk7XG4gICAgfTtcbn1cbnZhciBCdWZmZXJDb3VudE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICAgICAgICB0aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5O1xuICAgICAgICBpZiAoIXN0YXJ0QnVmZmVyRXZlcnkgfHwgYnVmZmVyU2l6ZSA9PT0gc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyQ2xhc3MgPSBCdWZmZXJDb3VudFN1YnNjcmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXJDbGFzcyA9IEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQnVmZmVyQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IHRoaXMuc3Vic2NyaWJlckNsYXNzKHN1YnNjcmliZXIsIHRoaXMuYnVmZmVyU2l6ZSwgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5KSk7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgQnVmZmVyQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlckNvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJDb3VudFN1YnNjcmliZXIoZGVzdGluYXRpb24sIGJ1ZmZlclNpemUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PSB0aGlzLmJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlckNvdW50U3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xudmFyIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnk7XG4gICAgICAgIF90aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGJ1ZmZlclNpemUgPSBfYS5idWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5ID0gX2Euc3RhcnRCdWZmZXJFdmVyeSwgYnVmZmVycyA9IF9hLmJ1ZmZlcnMsIGNvdW50ID0gX2EuY291bnQ7XG4gICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgaWYgKGNvdW50ICUgc3RhcnRCdWZmZXJFdmVyeSA9PT0gMCkge1xuICAgICAgICAgICAgYnVmZmVycy5wdXNoKFtdKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gYnVmZmVycy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzW2ldO1xuICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IGJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJzID0gX2EuYnVmZmVycywgZGVzdGluYXRpb24gPSBfYS5kZXN0aW5hdGlvbjtcbiAgICAgICAgd2hpbGUgKGJ1ZmZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlckNvdW50LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyT3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBGaWx0ZXJPcGVyYXRvcihwcmVkaWNhdGUsIHRoaXNBcmcpKTtcbiAgICB9O1xufVxudmFyIEZpbHRlck9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbHRlck9wZXJhdG9yKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICB9XG4gICAgRmlsdGVyT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBGaWx0ZXJTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMucHJlZGljYXRlLCB0aGlzLnRoaXNBcmcpKTtcbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJPcGVyYXRvcjtcbn0oKSk7XG52YXIgRmlsdGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhGaWx0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbHRlclN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICBfdGhpcy50aGlzQXJnID0gdGhpc0FyZztcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpbHRlclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByZWRpY2F0ZS5jYWxsKHRoaXMudGhpc0FyZywgdmFsdWUsIHRoaXMuY291bnQrKyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gc291cmNlLmxpZnQobmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IoY29tcGFyZSwga2V5U2VsZWN0b3IpKTsgfTtcbn1cbnZhciBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3IoY29tcGFyZSwga2V5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb21wYXJlID0gY29tcGFyZTtcbiAgICAgICAgdGhpcy5rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIH1cbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuY29tcGFyZSwgdGhpcy5rZXlTZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3RpbmN0VW50aWxDaGFuZ2VkT3BlcmF0b3I7XG59KCkpO1xudmFyIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlzdGluY3RVbnRpbENoYW5nZWRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb21wYXJlLCBrZXlTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMua2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaGFzS2V5ID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgY29tcGFyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgX3RoaXMuY29tcGFyZSA9IGNvbXBhcmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICByZXR1cm4geCA9PT0geTtcbiAgICB9O1xuICAgIERpc3RpbmN0VW50aWxDaGFuZ2VkU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBrZXlTZWxlY3RvciA9IHRoaXMua2V5U2VsZWN0b3I7XG4gICAgICAgICAgICBrZXkgPSBrZXlTZWxlY3RvciA/IGtleVNlbGVjdG9yKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNLZXkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcGFyZSh0aGlzLmtleSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYXNLZXkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXN0aW5jdFVudGlsQ2hhbmdlZFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0FycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW4gJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gLypAX19QVVJFX18qLyBnZXRTeW1ib2xJdGVyYXRvcigpO1xuZXhwb3J0IHZhciAkJGl0ZXJhdG9yID0gaXRlcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3Vic2NyaWJlVG9BcnJheSxfc3Vic2NyaWJlVG9Qcm9taXNlLF9zdWJzY3JpYmVUb0l0ZXJhYmxlLF9zdWJzY3JpYmVUb09ic2VydmFibGUsX2lzQXJyYXlMaWtlLF9pc1Byb21pc2UsX2lzT2JqZWN0LF9zeW1ib2xfaXRlcmF0b3IsX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IHN1YnNjcmliZVRvQXJyYXkgfSBmcm9tICcuL3N1YnNjcmliZVRvQXJyYXknO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9Qcm9taXNlIH0gZnJvbSAnLi9zdWJzY3JpYmVUb1Byb21pc2UnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9JdGVyYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJlVG9JdGVyYWJsZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb09ic2VydmFibGUgfSBmcm9tICcuL3N1YnNjcmliZVRvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4vaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL2lzT2JqZWN0JztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUbyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfb2JzZXJ2YWJsZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZVRvT2JzZXJ2YWJsZShyZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5TGlrZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0FycmF5KHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb1Byb21pc2UocmVzdWx0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdFtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVUb0l0ZXJhYmxlKHJlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUgPSBpc09iamVjdChyZXN1bHQpID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgcmVzdWx0ICsgXCInXCI7XG4gICAgICAgIHZhciBtc2cgPSBcIllvdSBwcm92aWRlZCBcIiArIHZhbHVlICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLlwiXG4gICAgICAgICAgICArICcgWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIEFycmF5LCBvciBJdGVyYWJsZS4nO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc3ltYm9sX29ic2VydmFibGUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAodHlwZW9mIG9icy5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9PYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IGhvc3RSZXBvcnRFcnJvciB9IGZyb20gJy4vaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgc3Vic2NyaWJlVG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCBob3N0UmVwb3J0RXJyb3IpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZVRvUHJvbWlzZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3N5bWJvbF9pdGVyYXRvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IHZhciBzdWJzY3JpYmVUb0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uZG9uZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci5yZXR1cm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9JdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzdWJzY3JpYmVUbyB9IGZyb20gJy4vdXRpbC9zdWJzY3JpYmVUbyc7XG52YXIgU2ltcGxlSW5uZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNpbXBsZUlubmVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaW1wbGVJbm5lclN1YnNjcmliZXIocGFyZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTaW1wbGVJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU2ltcGxlSW5uZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5RXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTaW1wbGVJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZUlubmVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2ltcGxlSW5uZXJTdWJzY3JpYmVyIH07XG52YXIgQ29tcGxleElubmVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb21wbGV4SW5uZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbXBsZXhJbm5lclN1YnNjcmliZXIocGFyZW50LCBvdXRlclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMub3V0ZXJWYWx1ZSA9IG91dGVyVmFsdWU7XG4gICAgICAgIF90aGlzLm91dGVySW5kZXggPSBvdXRlckluZGV4O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbXBsZXhJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Lm5vdGlmeU5leHQodGhpcy5vdXRlclZhbHVlLCB2YWx1ZSwgdGhpcy5vdXRlckluZGV4LCB0aGlzKTtcbiAgICB9O1xuICAgIENvbXBsZXhJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlFcnJvcihlcnJvcik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIENvbXBsZXhJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5Q29tcGxldGUodGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wbGV4SW5uZXJTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBDb21wbGV4SW5uZXJTdWJzY3JpYmVyIH07XG52YXIgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFNpbXBsZU91dGVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaW1wbGVPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgIH07XG4gICAgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgIH07XG4gICAgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZU91dGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2ltcGxlT3V0ZXJTdWJzY3JpYmVyIH07XG52YXIgQ29tcGxleE91dGVyU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb21wbGV4T3V0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbXBsZXhPdXRlclN1YnNjcmliZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQ29tcGxleE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChfb3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgX291dGVySW5kZXgsIF9pbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBDb21wbGV4T3V0ZXJTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIENvbXBsZXhPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKF9pbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcGxleE91dGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgQ29tcGxleE91dGVyU3Vic2NyaWJlciB9O1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyU3Vic2NyaWJlKHJlc3VsdCwgaW5uZXJTdWJzY3JpYmVyKSB7XG4gICAgaWYgKGlubmVyU3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zdWJzY3JpYmUoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmliZVRvKHJlc3VsdCkoaW5uZXJTdWJzY3JpYmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyU3Vic2NyaWJlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfaW5uZXJTdWJzY3JpYmUgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNpbXBsZU91dGVyU3Vic2NyaWJlciwgaW5uZXJTdWJzY3JpYmUsIFNpbXBsZUlubmVyU3Vic2NyaWJlciB9IGZyb20gJy4uL2lubmVyU3Vic2NyaWJlJztcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBEZWJvdW5jZU9wZXJhdG9yKGR1cmF0aW9uU2VsZWN0b3IpKTsgfTtcbn1cbnZhciBEZWJvdW5jZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYm91bmNlT3BlcmF0b3IoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uU2VsZWN0b3IgPSBkdXJhdGlvblNlbGVjdG9yO1xuICAgIH1cbiAgICBEZWJvdW5jZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgRGVib3VuY2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMuZHVyYXRpb25TZWxlY3RvcikpO1xuICAgIH07XG4gICAgcmV0dXJuIERlYm91bmNlT3BlcmF0b3I7XG59KCkpO1xudmFyIERlYm91bmNlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWJvdW5jZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVib3VuY2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kdXJhdGlvblNlbGVjdG9yID0gZHVyYXRpb25TZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kdXJhdGlvblNlbGVjdG9yLmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyeU5leHQodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWUoKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSwgZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpcHRpb24gPSBpbm5lclN1YnNjcmliZShkdXJhdGlvbiwgbmV3IFNpbXBsZUlubmVyU3Vic2NyaWJlcih0aGlzKSk7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gJiYgIXN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlKCk7XG4gICAgfTtcbiAgICBEZWJvdW5jZVN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSgpO1xuICAgIH07XG4gICAgRGVib3VuY2VTdWJzY3JpYmVyLnByb3RvdHlwZS5lbWl0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZHVyYXRpb25TdWJzY3JpcHRpb247XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvblN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX25leHQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEZWJvdW5jZVN1YnNjcmliZXI7XG59KFNpbXBsZU91dGVyU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwXG4iLCJpbXBvcnQgeyBmcm9tRXZlbnQsIFN1YmplY3QsIGludGVydmFsIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBtYXAsXG4gIGJ1ZmZlckNvdW50LFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgZGVib3VuY2UsXG4gIGZpbHRlclxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VTY3JvbGxEaXJlY3Rpb24gPSAoJGRvbSkgPT4ge1xuICBjb25zdCBbZGlyLCBzZXREaXJdID0gdXNlU3RhdGUoJ3VwJyk7XG4gIGNvbnN0IHNjcm9sbCQgID0gZnJvbUV2ZW50KCRkb20gfHwgd2luZG93LCAnc2Nyb2xsJywge1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSk7XG4gIGNvbnN0IHNjcm9sbERpckNoYW5nZWQkID0gc2Nyb2xsJC5waXBlKFxuICAgIG1hcChlID0+IGUudGFyZ2V0LnNjcm9sbFRvcCksXG4gICAgYnVmZmVyQ291bnQoMiksXG4gICAgZmlsdGVyKChbcHJlLCBueHRdKSA9PiBNYXRoLmFicyhwcmUgLSBueHQpID4gNTApLFxuICAgIG1hcCgoW3ByZSwgbnh0XSkgPT4gcHJlIC0gbnh0ID4gMCA/ICdVUCcgOiAnRE9XTicpLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgZGVib3VuY2UoKCkgPT4gaW50ZXJ2YWwoMzAwKSlcbiAgKTtcbiAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG4gIHNjcm9sbERpckNoYW5nZWQkLnN1YnNjcmliZShzdWJqZWN0KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN1YmplY3Quc3Vic2NyaWJlKGQgPT4ge1xuICAgICAgc2V0RGlyKGQpXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHN1Yi51bnN1YnNjcmliZSgpO1xuICB9KTtcbiAgcmV0dXJuIFtkaXJdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlU2Nyb2xsRGlyZWN0aW9uO1xuIiwiaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBtYXAsXG4gIGJ1ZmZlckNvdW50LFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgdXNlU2Nyb2xsU3RhdHVzID0gKCRkb20sIGJ1ZmZlckRpc3RhbmNlKSA9PiB7XG4gIGNvbnN0IFtpc0hpdEJvdHRvbSwgc2V0U3RhdHVzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgc2Nyb2xsJCAgPSBmcm9tRXZlbnQoJGRvbSB8fCBkb2N1bWVudCwgJ3Njcm9sbCcpO1xuICBjb25zdCBoaXRCb3R0b21TdGF0dXNDaGFuZ2VkJCA9IHNjcm9sbCQucGlwZShcbiAgICBtYXAoZSA9PiB7XG4gICAgICBjb25zdCAkb2JqID0gZS50YXJnZXQ7XG4gICAgICBpZiAoYnVmZmVyRGlzdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuICRvYmouc2Nyb2xsVG9wID49ICgkb2JqLnNjcm9sbEhlaWdodCAtICRvYmoub2Zmc2V0SGVpZ2h0KSAtIGJ1ZmZlckRpc3RhbmNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRvYmouc2Nyb2xsVG9wID09PSAoJG9iai5zY3JvbGxIZWlnaHQgLSAkb2JqLm9mZnNldEhlaWdodClcbiAgICB9KSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICBoaXRCb3R0b21TdGF0dXNDaGFuZ2VkJC5zdWJzY3JpYmUoc3ViamVjdCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdWIgPSBzdWJqZWN0LnN1YnNjcmliZShzID0+IHtcbiAgICAgIHNldFN0YXR1cyhzKVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG4gIHJldHVybiBbaXNIaXRCb3R0b21dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlU2Nyb2xsU3RhdHVzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNjcm9sbERpcmVjdGlvbiB9IGZyb20gJy4uL2NvbW1vbl9ob29rcyc7XG5cbmV4cG9ydCBjb25zdCBXaXRoU2Nyb2xsRGlyID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFtkaXJdID0gdXNlU2Nyb2xsRGlyZWN0aW9uKCk7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbihkaXIpXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IEJsb2dDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIG9wZW5NZW51OiAoKSA9PiB7fSxcbiAgZ290b1BhZ2U6ICgpID0+IHt9XG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJztcbmltcG9ydCB7V2l0aFNjcm9sbERpcn0gZnJvbSAnLi93aXRoX3Njcm9sbF9kaXInO1xuaW1wb3J0IHtCbG9nQ29udGV4dH0gZnJvbSBcIi4vYmxvZ19jb250ZXh0XCI7XG5pbXBvcnQge2lzTW9iaWxlfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxuY29uc3QgTWVudUl0ZW0gPSBNZW51Lk1lbnVJdGVtO1xuXG5jbGFzcyBCbG9nUGFnZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtID0ge30pIHtcbiAgICBjb25zdCB7IHRpdGxlLCBpY29uLCBjb21wb25lbnQgfSA9IHBhcmFtO1xuXG4gICAgY29uc3QgaXNWYWxpZFRpdGxlID0gdHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJztcbiAgICBjb25zdCBpc1ZhbGlkSWNvbiA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pO1xuICAgIGNvbnN0IGlzVmFsaWRDb21wID0gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY29tcG9uZW50KTtcblxuICAgIGlmICghKGlzVmFsaWRUaXRsZSAmJiBpc1ZhbGlkSWNvbiAmJiBpc1ZhbGlkQ29tcCkpIHtcbiAgICAgIHRocm93ICdJbnZhbGlkIFBhZ2UnO1xuICAgIH1cblxuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmljb24gPSBpY29uO1xuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmNvbnN0IGNyZWF0ZUJsb2dQYWdlID0gKHApID0+IG5ldyBCbG9nUGFnZShwKTtcblxuZXhwb3J0IGNsYXNzIEJsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFjdGl2ZVBhZ2VJbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmVQYWdlSW5kZXg6IHByb3BzLmFjdGl2ZVBhZ2VJbmRleCxcbiAgICAgIGlzTWVudU9wZW46IHRydWUsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhZ2VzID0gW107XG5cbiAgc3RhdGljIGFkZFBhZ2UgPSAocGFnZSkgPT4ge1xuICAgIEJsb2cucGFnZXMucHVzaChjcmVhdGVCbG9nUGFnZShwYWdlKSk7XG4gIH07XG5cbiAgc3RhdGljIGFkZFBhZ2VzID0gKHBhZ2VzKSA9PiB7XG4gICAgcGFnZXMuZm9yRWFjaChCbG9nLmFkZFBhZ2UpXG4gIH07XG5cbiAgZ290b1BhZ2UgPSAoYWN0aXZlUGFnZUluZGV4KSA9PiB7XG4gICAgdGhpcy5tZW51ICYmIHRoaXMubWVudS5jaG9vc2VNZW51SXRlbShhY3RpdmVQYWdlSW5kZXgpO1xuICB9XG5cbiAgb3Blbk1lbnUgPSAoKSA9PiB7XG4gICAgdGhpcy5tZW51ICYmIHRoaXMubWVudS5vcGVuTWVudSgpO1xuICB9XG5cbiAgcmVuZGVyTWVudSA9IChoaWRlSWNvbikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8TWVudVxuICAgICAgICByZWY9e20gPT4gKHRoaXMubWVudSA9IG0pfVxuICAgICAgICBvZmZzZXQ9ezUwfVxuICAgICAgICBhY3RpdmVQYW5lbEluZGV4PXt0aGlzLnN0YXRlLmFjdGl2ZVBhZ2VJbmRleH1cbiAgICAgICAgaGlkZUljb249e2hpZGVJY29ufVxuICAgICAgICBvcGVuPXt0aGlzLnN0YXRlLmlzTWVudU9wZW59XG4gICAgICA+XG4gICAgICAgIHtCbG9nLnBhZ2VzLm1hcChwID0+IChcbiAgICAgICAgICA8TWVudUl0ZW1cbiAgICAgICAgICAgIHRpdGxlPXt7XG4gICAgICAgICAgICAgIGljb246IHAuaWNvbixcbiAgICAgICAgICAgICAgdGV4dDogcC50aXRsZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3AuY29tcG9uZW50fVxuICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICkpfVxuICAgICAgPC9NZW51PlxuICAgIClcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29udGV4dFZhbHVlID0ge1xuICAgICAgb3Blbk1lbnU6IHRoaXMub3Blbk1lbnUsXG4gICAgICBnb3RvUGFnZTogdGhpcy5nb3RvUGFnZSxcbiAgICB9XG5cbiAgICBpZiAoIWlzTW9iaWxlKCkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxCbG9nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dFZhbHVlfT5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJNZW51KCl9XG4gICAgICAgIDwvQmxvZ0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QmxvZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICAgIDxXaXRoU2Nyb2xsRGlyPlxuICAgICAgICAgIHsoZGlyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoaWRlSWNvbiA9IGRpciA9PT0gJ0RPV04nO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTWVudShoaWRlSWNvbik7XG4gICAgICAgICAgfX1cbiAgICAgICAgPC9XaXRoU2Nyb2xsRGlyPlxuICAgICAgPC9CbG9nQ29udGV4dC5Qcm92aWRlcj5cbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCBwa2dKc29uIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbmV4cG9ydCBjb25zdCBhcGlFbmRQb2ludCA9ICdodHRwczovL2FwaS56amguaW0nO1xuZXhwb3J0IGNvbnN0IE9TU0VuZFBvaW50ID0gJ2h0dHBzOi8vempoLWltLXJlcy5vc3MtY24tc2hlbnpoZW4uYWxpeXVuY3MuY29tJztcblxuZXhwb3J0IGNvbnN0IGFwaVVSTCA9IHtcbiAgcG9zdHM6IGAke2FwaUVuZFBvaW50fS96L3Bvc3RzYCxcbiAgcmVzOiBgJHthcGlFbmRQb2ludH0vcmVzYCxcbiAgZGV2UmVzOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3JlcycsXG59O1xuXG5leHBvcnQgY29uc3QgUm91dGVzID0ge1xuICBzdG9yaWVzOiAnL3N0b3JpZXMnLFxuICBhYm91dDogJy9hYm91dCcsXG4gIHN0b3J5OiAnL3N0b3JpZXMvOmlkJyxcbiAgLy8gcGhvdG9Hcm91cHM6ICcvcGhvdG9zJyxcbiAgcGhvdG9zOiAnL3Bob3RvcycsXG4gIHBob3RvR3JvdXA6ICcvcGhvdG9zLzppZCcsXG4gIHBob3RvOiAnL3Bob3RvLzppZCcsXG4gIHVwZGF0ZXM6ICcvdW5yZWFkJyxcbiAgaG9tZTogJy8nLFxufTtcblxuY29uc3QgdmVyc2lvbiA9IHBrZ0pzb24udmVyc2lvbjtcbmNvbnN0IG5hbWUgPSBwa2dKc29uLm5hbWU7XG5leHBvcnQgY29uc3QgcGFja2FnZUluZm8gPSB7XG4gIHZlcnNpb24sXG4gIG5hbWUsXG4gIGdpdFVSTDogYGh0dHBzOi8vZ2l0aHViLmNvbS96amhvdS90b3lCb3gvcmVsZWFzZXMvdGFnLyR7bmFtZX1AJHt2ZXJzaW9ufWBcbn07XG5cblxuZXhwb3J0IGNvbnN0IHRtcEJsdXJyeVRodW1ibmFpbFVybFN1ZmZpeCA9ICc/eC1vc3MtcHJvY2Vzcz1zdHlsZS90aHVtYm5haWwnO1xuZXhwb3J0IGNvbnN0IHRtcFdlYnBVcmxTdWZmaXggPSAnP3gtb3NzLXByb2Nlc3M9c3R5bGUvd2VicCc7XG5leHBvcnQgY29uc3QgRmlnbWFMaXZlQWRkciA9IFwiaHR0cHM6Ly93d3cuZmlnbWEuY29tL2VtYmVkP2VtYmVkX2hvc3Q9c2hhcmUmdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmZpZ21hLmNvbSUyRmZpbGUlMkZOcVMwTjZUSGN3bWZ2SzNRSW45Y3JXJTJGSE9NRSUzRm5vZGUtaWQlM0QwJTI1M0ExJmNocm9tZT1ET0NVTUVOVEFUSU9OXCI7XG5leHBvcnQgY29uc3QgY292ZXJJbWdTcmMgPSAnaHR0cHM6Ly96amgtaW0tcmVzLm9zcy1jbi1zaGVuemhlbi5hbGl5dW5jcy5jb20vaW1hZ2UvSlBFRyVFNSU5QiVCRSVFNSU4MyU4Ri02Q0RFQzlGQjMzQ0QtMS5qcGVnP3gtb3NzLXByb2Nlc3M9c3R5bGUvd2VicCc7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xuXG5jb25zdCBERUZBVUxUX0dVSURFTElORV9DT0xPUiA9ICdjeWFuJztcblxuZXhwb3J0IGNvbnN0IFdpdGhHdWlkZUxpbmUgPSAoQ29tcG9uZW50KSA9PiB7XG4gIHJldHVybiBjbGFzcyBXaXRoR3VpZGVMaW5lQmFzZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy4kcm9vdERvbSA9IFJlYWN0RG9tLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdGhpcy4kY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuJGNvbnRhaW5lcik7XG5cbiAgICAgIHNldFRpbWVvdXQodGhpcy5oYW5kbGVSZXNpemUsIHRoaXMucHJvcHMuZGVsYXkgfHwgMCk7XG4gICAgICAvLyB0aGlzLmhhbmRsZVJlc2l6ZSgpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICAgIFJlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy4kY29udGFpbmVyKTtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBoYW5kbGVSZXNpemUgPSAoc2hvdykgPT4ge1xuICAgICAgUmVhY3REb20ucmVuZGVyKFxuICAgICAgICB0aGlzLnJlbmRlckd1aWRlTGluZXModGhpcy4kcm9vdERvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lclxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyR3VpZGVMaW5lcyA9IChyZWN0T2JqKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvcDogc2hvd1RvcExpbmUsXG4gICAgICAgIGJvdHRvbTogc2hvd0JvdExpbmUsXG4gICAgICAgIGxlZnQ6IHNob3dMZWZ0TGluZSxcbiAgICAgICAgcmlnaHQ6IHNob3dSaWdodExpbmUsXG4gICAgICAgIGNvbG9yID0gREVGQVVMVF9HVUlERUxJTkVfQ09MT1IsXG4gICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgY29uc3QgY29tbW9uR3VpZGVMaW5lU3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcixcbiAgICAgICAgekluZGV4OiAxMDAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBob3Jpekd1aWRlTGluZVN0eWxlID0ge1xuICAgICAgICAuLi5jb21tb25HdWlkZUxpbmVTdHlsZSxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmVydGlHdWlkZUxpbmVTdHlsZSA9IHtcbiAgICAgICAgLi4uY29tbW9uR3VpZGVMaW5lU3R5bGUsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSA9IHJlY3RPYmo7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHNob3dUb3BMaW5lICYmIDxkaXYgc3R5bGU9e3suLi5ob3Jpekd1aWRlTGluZVN0eWxlLCB0b3B9fS8+LFxuICAgICAgICBzaG93Qm90TGluZSAmJiA8ZGl2IHN0eWxlPXt7Li4uaG9yaXpHdWlkZUxpbmVTdHlsZSwgdG9wOiBib3R0b219fS8+LFxuICAgICAgICBzaG93TGVmdExpbmUgJiYgPGRpdiBzdHlsZT17ey4uLnZlcnRpR3VpZGVMaW5lU3R5bGUsIGxlZnR9fS8+LFxuICAgICAgICBzaG93UmlnaHRMaW5lICYmIDxkaXYgc3R5bGU9e3suLi52ZXJ0aUd1aWRlTGluZVN0eWxlLCBsZWZ0OiByaWdodH19Lz4sXG4gICAgICBdO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4udGhpcy5wcm9wc30gLz5cbiAgICB9XG4gIH1cbn07XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBHb2xkZW5Ub3BEb3duIGZyb20gJy4vZ29sZGVuX3JhdGlvX3RvcF9kb3duJ1xuaW1wb3J0IHtXaXRoR3VpZGVMaW5lfSBmcm9tICcuLi9hdHRhY2hfZ3VpZGVfbGluZSc7XG5pbXBvcnQge0VtcHR5RGl2fSBmcm9tICcuLi9pbmRleCc7XG5cbmNvbnN0IEVtcHR5RGl2V2l0aEd1aWRlTGluZSA9IFdpdGhHdWlkZUxpbmUoRW1wdHlEaXYpO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge3RvcCwgZG93biwgYWxpZ25Ub3BJdGVtcywgcmF0aW8sIHBhZGRpbmcsIGZ1bGxIZWlnaHQsIHdpdGhHdWlkZUxpbmUsIHN0eWxlfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPEdvbGRlblRvcERvd25cbiAgICAgIHJhdGlvPXtyYXRpb31cbiAgICAgIHRvcD17KFxuICAgICAgICA8R29sZGVuVG9wRG93blxuICAgICAgICAgIGRvd249eyhcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBhbGlnblRvcEl0ZW1zIHx8ICd1bnNldCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RvcH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgdG9wPXt3aXRoR3VpZGVMaW5lID8gPEVtcHR5RGl2V2l0aEd1aWRlTGluZSB0b3AgYm90dG9tLz4gOiBudWxsfVxuICAgICAgICAgIHJldmVyc2VcbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICBkb3duPXsoXG4gICAgICAgIDxkaXYgc3R5bGU9e3twYWRkaW5nLCBoZWlnaHQ6IGZ1bGxIZWlnaHQgPyAnMTAwJScgOiAnYXV0bycsIC4uLnN0eWxlfX0+XG4gICAgICAgICAge2Rvd259XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAvPlxuICApXG59IiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSxfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZCh0aGlzLnNjaGVkdWxlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfc2NoZWR1bGVPYnNlcnZhYmxlLF9zY2hlZHVsZVByb21pc2UsX3NjaGVkdWxlQXJyYXksX3NjaGVkdWxlSXRlcmFibGUsX3V0aWxfaXNJbnRlcm9wT2JzZXJ2YWJsZSxfdXRpbF9pc1Byb21pc2UsX3V0aWxfaXNBcnJheUxpa2UsX3V0aWxfaXNJdGVyYWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBzY2hlZHVsZU9ic2VydmFibGUgfSBmcm9tICcuL3NjaGVkdWxlT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVByb21pc2UgfSBmcm9tICcuL3NjaGVkdWxlUHJvbWlzZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi9zY2hlZHVsZUFycmF5JztcbmltcG9ydCB7IHNjaGVkdWxlSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSXRlcmFibGUoaW5wdXQpIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCB8fCBpbnB1dCkgKyAnIGlzIG5vdCBvYnNlcnZhYmxlJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZWQuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfb2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgJiYgdHlwZW9mIGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24sX3N5bWJvbF9vYnNlcnZhYmxlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpOyB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9TdWJzY3JpcHRpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9zeW1ib2xfaXRlcmF0b3IgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX1N1YnNjcmlwdGlvbixfc3ltYm9sX2l0ZXJhdG9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBzdWIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpdGVyYXRvciAmJiB0eXBlb2YgaXRlcmF0b3IucmV0dXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRvbmU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSByZXN1bHQuZG9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX21hcCxfb2JzZXJ2YWJsZV9mcm9tLF9pbm5lclN1YnNjcmliZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBTaW1wbGVPdXRlclN1YnNjcmliZXIsIFNpbXBsZUlubmVyU3Vic2NyaWJlciwgaW5uZXJTdWJzY3JpYmUgfSBmcm9tICcuLi9pbm5lclN1YnNjcmliZSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5waXBlKG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBmcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0sIGNvbmN1cnJlbnQpKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgTWVyZ2VNYXBPcGVyYXRvcihwcm9qZWN0LCBjb25jdXJyZW50KSk7IH07XG59XG52YXIgTWVyZ2VNYXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgIH1cbiAgICBNZXJnZU1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IE1lcmdlTWFwU3Vic2NyaWJlcihvYnNlcnZlciwgdGhpcy5wcm9qZWN0LCB0aGlzLmNvbmN1cnJlbnQpKTtcbiAgICB9O1xuICAgIHJldHVybiBNZXJnZU1hcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE1lcmdlTWFwT3BlcmF0b3IgfTtcbnZhciBNZXJnZU1hcFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoTWVyZ2VNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgY29uY3VycmVudCkge1xuICAgICAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgX3RoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgICAgIF90aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIDwgdGhpcy5jb25jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90cnlOZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl90cnlOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgrKztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucHJvamVjdCh2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZSsrO1xuICAgICAgICB0aGlzLl9pbm5lclN1YihyZXN1bHQpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAoaXNoKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBuZXcgU2ltcGxlSW5uZXJTdWJzY3JpYmVyKHRoaXMpO1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBkZXN0aW5hdGlvbi5hZGQoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgdmFyIGlubmVyU3Vic2NyaXB0aW9uID0gaW5uZXJTdWJzY3JpYmUoaXNoLCBpbm5lclN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoaW5uZXJTdWJzY3JpcHRpb24gIT09IGlubmVyU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKGlubmVyU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChpbm5lclZhbHVlKTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KGJ1ZmZlci5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSA9PT0gMCAmJiB0aGlzLmhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTWVyZ2VNYXBTdWJzY3JpYmVyO1xufShTaW1wbGVPdXRlclN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE1lcmdlTWFwU3Vic2NyaWJlciB9O1xuZXhwb3J0IHZhciBmbGF0TWFwID0gbWVyZ2VNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG8sX3NjaGVkdWxlZF9zY2hlZHVsZWQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG8gfSBmcm9tICcuLi91dGlsL3N1YnNjcmliZVRvJztcbmltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghc2NoZWR1bGVyKSB7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlVG8oaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlTWFwLF91dGlsX2lkZW50aXR5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfc3Vic2NyaWJlVG9BcnJheSxfc2NoZWR1bGVkX3NjaGVkdWxlQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgc3Vic2NyaWJlVG9BcnJheSB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9BcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXknO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZVRvQXJyYXkoaW5wdXQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX2lubmVyU3Vic2NyaWJlIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbm5lclN1YnNjcmliZSwgU2ltcGxlSW5uZXJTdWJzY3JpYmVyLCBTaW1wbGVPdXRlclN1YnNjcmliZXIgfSBmcm9tICcuLi9pbm5lclN1YnNjcmliZSc7XG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikpOyB9O1xufVxudmFyIFRha2VVbnRpbE9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VVbnRpbE9wZXJhdG9yKG5vdGlmaWVyKSB7XG4gICAgICAgIHRoaXMubm90aWZpZXIgPSBub3RpZmllcjtcbiAgICB9XG4gICAgVGFrZVVudGlsT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciB0YWtlVW50aWxTdWJzY3JpYmVyID0gbmV3IFRha2VVbnRpbFN1YnNjcmliZXIoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBub3RpZmllclN1YnNjcmlwdGlvbiA9IGlubmVyU3Vic2NyaWJlKHRoaXMubm90aWZpZXIsIG5ldyBTaW1wbGVJbm5lclN1YnNjcmliZXIodGFrZVVudGlsU3Vic2NyaWJlcikpO1xuICAgICAgICBpZiAobm90aWZpZXJTdWJzY3JpcHRpb24gJiYgIXRha2VVbnRpbFN1YnNjcmliZXIuc2VlblZhbHVlKSB7XG4gICAgICAgICAgICB0YWtlVW50aWxTdWJzY3JpYmVyLmFkZChub3RpZmllclN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZSh0YWtlVW50aWxTdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFrZVVudGlsU3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlVW50aWxPcGVyYXRvcjtcbn0oKSk7XG52YXIgVGFrZVVudGlsU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUYWtlVW50aWxTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VVbnRpbFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNlZW5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VVbnRpbFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsU3Vic2NyaWJlcjtcbn0oU2ltcGxlT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN1YmplY3QsIGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIGNvbmNhdEFsbCwgdGFrZVVudGlsLCB0YWtlLCB0YWtlTGFzdCwgZGlzdGluY3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgJy4vZHJhZ19pbmRpY2F0b3Jfc3R5bGUuc2Nzcyc7XG5cbmNvbnN0IHJhbmdlID0gbnVtID0+IFsuLi5BcnJheShudW0pLmtleXMoKV07XG5jb25zdCBwb2ludGVyRXZlbnQkID0gbmV3IFN1YmplY3QoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlja0luZGljYXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBhYnNSaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcz17XG4gICAgb25Ecm9wOiAoKSA9PiB7fSxcbiAgICBvbkNsaWNrOiAoKSA9PiB7fSxcbiAgICBjdXJyZW50OiAxLFxuICAgIGFic1JpZ2h0OiBmYWxzZSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICB5OiB0aGlzLnByb3BzLmN1cnJlbnQgKiA2LFxuICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICB9O1xuXG4gIGJ1aWxkUHJvZ3Jlc3NTdHIgPSAoKSA9PiBgJHsodGhpcy5zdGF0ZS55IC0gNikgLyA2ICsgMX0gLyAke3RoaXMucHJvcHMudG90YWx9YDtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyB3b3JrYXJvdW5kIGZvciBzYWZhcmk6IHdyb25nIHRleHQgY3Vyc29yIHdoZW4gZHJhZztcbiAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlOyB9O1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgY2FsY1BvaW50ZXJZID0gcyA9PiBtYXAoZSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnRZID0gc2VsZi5pbmRpY2F0b3IgJiYgc2VsZi5pbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueTtcbiAgICAgIGNvbnN0IG1vdXNlWSA9IGUuY2xpZW50WTtcbiAgICAgIHJldHVybiBtb3VzZVkgLSBwYXJlbnRZIC0gNjtcbiAgICB9KShzKTtcbiAgICBjb25zdCBkcmFnU3RhcnQkID0gcG9pbnRlckV2ZW50JC5waXBlKGZpbHRlcihlID0+IGUudHlwZSA9PT0gJ21vdXNlZG93bicpKTtcbiAgICBjb25zdCBkcmFnTW92aW5nJCA9IHBvaW50ZXJFdmVudCQucGlwZShmaWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSk7XG4gICAgY29uc3QgZHJhZ0VuZCQgPSBtZXJnZShcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNldXAnKSxcbiAgICAgIC8vIHBvaW50ZXJFdmVudCQucGlwZShmaWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdtb3VzZXVwJykpXG4gICAgKTtcbiAgICBjb25zdCBkcmFnTmRyb3AkID0gZHJhZ1N0YXJ0JC5waXBlKFxuICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gZHJhZ01vdmluZyQucGlwZShcbiAgICAgICAgICAgIHRha2VVbnRpbChkcmFnRW5kJCkpXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICBjb25jYXRBbGwoKSxcbiAgICAgIGNhbGNQb2ludGVyWSxcbiAgICAgIG1hcCh5ID0+IE1hdGgucm91bmQoeSAvIDYpICogNiksXG4gICAgICBmaWx0ZXIoeSA9PiB5IDwgdGhpcy5pbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gMTIgJiYgeSA+PSA2KSxcbiAgICApO1xuICAgIHRoaXMuZHJhZ05kcm9wU3Vic2NyaWJ0aW9uID0gZHJhZ05kcm9wJC5zdWJzY3JpYmUodGhpcy51cGRhdGVQb2ludGVyUG9zKTtcbiAgICB0aGlzLmRyYWdTdGFydFN1YnNjcmlidGlvbiA9IGRyYWdTdGFydCQuc3Vic2NyaWJlKCgpID0+IHt0aGlzLnVwZGF0ZURyYWdTdGF0dXModHJ1ZSl9KTtcbiAgICB0aGlzLmRyYWdFbmRTdWJzY3JpYnRpb24gPSBkcmFnRW5kJC5waXBlKFxuICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuc3RhdGUueTtcbiAgICAgICAgY29uc3QgcG9zID0gTWF0aC5mbG9vcih5IC8gNik7XG4gICAgICAgIGlmIChwb3MgPj0gdGhpcy5wcm9wcy50b3RhbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRvdGFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPD0gMSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgICB9KSxcbiAgICAgIGZpbHRlcigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmlzRHJhZ2dpbmdcbiAgICAgIH0pXG4gICAgKS5zdWJzY3JpYmUoKHBvaW50ZXJJZHgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMub25Ecm9wKHBvaW50ZXJJZHgpO1xuICAgICAgdGhpcy51cGRhdGVEcmFnU3RhdHVzKGZhbHNlKVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRyYWdFbmRTdWJzY3JpYnRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLmRyYWdTdGFydFN1YnNjcmlidGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuZHJhZ05kcm9wU3Vic2NyaWJ0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICB1cGRhdGVQb2ludGVyUG9zID0gKHkpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHt5fSlcbiAgfTtcblxuICB1cGRhdGVEcmFnU3RhdHVzID0gKGlzRHJhZ2dpbmcpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtpc0RyYWdnaW5nfSlcbiAgfTtcblxuICBwb2ludGVyRXZlbnRIYW5kbGVyID0gKGUpID0+IHtwb2ludGVyRXZlbnQkLm5leHQoZSl9O1xuXG4gIHJlbmRlclRpY2tJbmRpY2F0b3IgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0b3RhbCwgY3VycmVudCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJkcmFnLXRpY2staW5kaWNhdG9yXCIsIHtcbiAgICAgICAgICBhYnNSaWdodDogdGhpcy5wcm9wcy5hYnNSaWdodCxcbiAgICAgICAgICBpc0RyYWdnaW5nOiB0aGlzLnN0YXRlLmlzRHJhZ2dpbmdcbiAgICAgICAgfSl9XG4gICAgICAgIHJlZj17cmVmID0+IHt0aGlzLmluZGljYXRvciA9IHJlZjt9fVxuICAgICAgICBvbk1vdXNlVXA9e3RoaXMucG9pbnRlckV2ZW50SGFuZGxlcn1cbiAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMucG9pbnRlckV2ZW50SGFuZGxlcn1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIHJhbmdlKHRvdGFsKS5tYXAoaSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0FjdGl2ZVRpY2sgPSBpID09PSBjdXJyZW50IC0gMTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUsIGkpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndGljaycsIHtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZTogaXNBY3RpdmVUaWNrLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInBvaW50ZXJcIlxuICAgICAgICAgICAgZGF0YS1wcm9ncmVzcz17dGhpcy5idWlsZFByb2dyZXNzU3RyKCl9XG4gICAgICAgICAgICBzdHlsZT17e3RvcDogdGhpcy5zdGF0ZS55fX1cbiAgICAgICAgICAgIHJlZj17cmVmID0+IHt0aGlzLnBvaW50ZXIgPSByZWY7fX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLnBvaW50ZXJFdmVudEhhbmRsZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRvdGFsIDwgMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyVGlja0luZGljYXRvcigpXG4gIH1cbn1cbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX09ic2VydmFibGUsX3V0aWxfaXNTY2hlZHVsZXIsX29wZXJhdG9yc19tZXJnZUFsbCxfZnJvbUFycmF5IFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZUFsbCc7XG5pbXBvcnQgeyBmcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgdmFyIHNjaGVkdWxlciA9IG51bGw7XG4gICAgdmFyIGxhc3QgPSBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIobGFzdCkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPiAxICYmIHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSBudWxsICYmIG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBvYnNlcnZhYmxlc1swXSBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VBbGwoY29uY3VycmVudCkoZnJvbUFycmF5KG9ic2VydmFibGVzLCBzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfbWVyZ2VBbGwgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgbWVyZ2VBbGwgfSBmcm9tICcuL21lcmdlQWxsJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIG1lcmdlQWxsKDEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jbGFzcyBDdXJzb3JUb29sdGlwIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHNob3c6IHRydWVcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7Ym90dG9tLCBsZWZ0fSA9IHRoaXMuc2VsZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHg6IGxlZnQsXG4gICAgICB5OiBib3R0b21cbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlTW92ZSA9ICh7Y2xpZW50WCwgY2xpZW50WX0pID0+IHtcbiAgICBjb25zdCB7dG9wLCBsZWZ0fSA9IHRoaXMuc2VsZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHg6IGNsaWVudFggLSBsZWZ0LFxuICAgICAgeTogY2xpZW50WSAtIHRvcFxuICAgIH0pXG4gIH07XG5cbiAgc2V0VG9vbHRpcFN0YXRlID0gKHNob3cpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvdyB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHRyYW5zZm9ybVZhbCA9IGB0cmFuc2xhdGUzZCgke3RoaXMuc3RhdGUueCArIDIwfXB4LCAke3RoaXMuc3RhdGUueSArIDIwfXB4LCAwKWA7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMuaGFuZGxlTW91c2VNb3ZlfVxuICAgICAgICByZWY9eyhyZWYpID0+IHRoaXMuc2VsZiA9IHJlZn1cbiAgICAgICAgY2xhc3NOYW1lPVwidG9vbHRpcC13cmFwcGVyXCJcbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW4oe1xuICAgICAgICAgIHNob3dUb29sdGlwOiAoKSA9PiB7IHRoaXMuc2V0VG9vbHRpcFN0YXRlKHRydWUpIH0sXG4gICAgICAgICAgaGlkZVRvb2x0aXA6ICgpID0+IHsgdGhpcy5zZXRUb29sdGlwU3RhdGUoZmFsc2UpIH0sXG4gICAgICAgIH0pfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAga2V5PXsyfVxuICAgICAgICAgIGNsYXNzTmFtZT1cInRvb2x0aXBcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVZhbFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5zaG93ID8gdGhpcy5wcm9wcy50b29sdGlwIDogbnVsbCB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXJzb3JUb29sdGlwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuaW1wb3J0IHsgVGlja0xvYWRlciBhcyBTcGlubmVyIH0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJ1xuaW1wb3J0IEN1cnNvclRvb2x0aXAgZnJvbSAnLi4vY3Vyc29yX3Rvb2xsdGlwJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jbGFzcyBJbWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICBpZiAobmV4dFByb3BzLnNyYyAhPT0gdGhpcy5wcm9wcy5zcmMgJiYgIXN0b3JlLmdldChuZXh0UHJvcHMuc3JjKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvYWRpbmc6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmVuZGVySW1nID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRvb2x0aXAsXG4gICAgICBzcmMsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Mb2FkID0gKCkgPT4ge30sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IGxvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEN1cnNvclRvb2x0aXBcbiAgICAgICAgdG9vbHRpcD17dG9vbHRpcH1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgICh7IHNob3dUb29sdGlwLCBoaWRlVG9vbHRpcCB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXRJbWcgPSAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e3NyY31cbiAgICAgICAgICAgICAgICBrZXk9e3NyY31cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgICAgIG9uTG9hZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgICAgICAgICB9LCBvbkxvYWQpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogbG9hZGluZyA/ICdub25lJyA6ICd1bnNldCcgfX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9e3Nob3dUb29sdGlwfVxuICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGlkZVRvb2x0aXB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIHtsb2FkaW5nICYmICh0aGlzLnJlbmRlckxvYWRpbmdWaWV3KCkpfVxuICAgICAgICAgICAgICAgIHtyZXRJbWd9XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgPC9DdXJzb3JUb29sdGlwPlxuICAgIClcbiAgfTtcblxuICByZW5kZXJMb2FkaW5nVmlldyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzcmMsXG4gICAgICBsb2FkaW5nVmlld1JlbmRlcmVyLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghbG9hZGluZ1ZpZXdSZW5kZXJlcikge1xuICAgICAgcmV0dXJuIDxTcGlubmVyIGFic0NlbnRlciAvPlxuICAgIH1cbiAgICByZXR1cm4gWzxTcGlubmVyIGFic0NlbnRlciAvPiwgbG9hZGluZ1ZpZXdSZW5kZXJlcihzcmMpXTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgcmV0dXJuICc6KCdcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJJbWcoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnaW5nU3RhdGVNYW5hZ2VyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkUHJvcHMocHJvcHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleCgpO1xuICB9XG5cbiAgZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleCA9IChwcm9wcyA9IHRoaXMucHJvcHMsIGN1cnJlbnRQYWdlSW5kZXggPSBwcm9wcy5jdXJyZW50UGFnZUluZGV4KSA9PiB7XG4gICAgY29uc3QgeyBwYWdlU2l6ZSwgZGF0YSwgaW5maW5pdGVMb29wTW9kZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbChkYXRhLmxlbmd0aCAvIHBhZ2VTaXplKTtcbiAgICBjb25zdCBzdGFydCA9IChjdXJyZW50UGFnZUluZGV4IC0gMSkgKiBwYWdlU2l6ZTtcbiAgICBjb25zdCBlbmQgPSBjdXJyZW50UGFnZUluZGV4ICogcGFnZVNpemU7XG4gICAgY29uc3QgY3VycmVudFBhZ2VEYXRhID0gZGF0YS5zbGljZShzdGFydCwgIGVuZCkgfHwgW107XG5cbiAgICBjb25zdCBoYXNOZXh0UGFnZSA9IGN1cnJlbnRQYWdlSW5kZXggPCB0b3RhbFBhZ2VzO1xuICAgIGxldCBuZXh0UGFnZURhdGEgPSBbXTtcbiAgICBpZiAoaGFzTmV4dFBhZ2UpIHtcbiAgICAgIGNvbnN0IG5leHRQYWdlU3RhcnQgPSBjdXJyZW50UGFnZUluZGV4ICogcGFnZVNpemU7XG4gICAgICBjb25zdCBuZXh0UGFnZUVuZCA9IChjdXJyZW50UGFnZUluZGV4ICsgMSkgKiBwYWdlU2l6ZTtcbiAgICAgIG5leHRQYWdlRGF0YSA9IGRhdGEuc2xpY2UoXG4gICAgICAgIG5leHRQYWdlU3RhcnQsXG4gICAgICAgIG5leHRQYWdlRW5kXG4gICAgICApIHx8IFtdO1xuICAgIH0gZWxzZSBpZiAoaW5maW5pdGVMb29wTW9kZSkge1xuICAgICAgbmV4dFBhZ2VEYXRhID0gZGF0YS5zbGljZShcbiAgICAgICAgMCxcbiAgICAgICAgcGFnZVNpemUsXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBoYXNOZXh0UGFnZSxcbiAgICAgIGhhc1ByZXZQYWdlOiBjdXJyZW50UGFnZUluZGV4ID4gMSxcbiAgICAgIGN1cnJlbnRQYWdlSW5kZXgsXG4gICAgICBjdXJyZW50UGFnZURhdGEsXG4gICAgICBuZXh0UGFnZURhdGEsXG4gICAgICB0b3RhbFBhZ2VzLFxuICAgIH1cbiAgfTtcblxuICBuZXh0ID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5oYXNOZXh0UGFnZSAmJiAhdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3BNb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT5cbiAgICAgIHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleChcbiAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldlN0YXRlLmhhc05leHRQYWdlXG4gICAgICAgICAgPyBwcmV2U3RhdGUuY3VycmVudFBhZ2VJbmRleCArIDFcbiAgICAgICAgICA6IDFcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHByZXYgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhc1ByZXZQYWdlICYmICF0aGlzLnByb3BzLmluZmluaXRlTG9vcE1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT5cbiAgICAgIHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleChcbiAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldlN0YXRlLmhhc1ByZXZQYWdlXG4gICAgICAgICAgPyBwcmV2U3RhdGUuY3VycmVudFBhZ2VJbmRleCAtIDFcbiAgICAgICAgICA6IHByZXZTdGF0ZS50b3RhbFBhZ2VzXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBpc1ZhbGlkUHJvcHMgPSAocHJvcHMgPSB0aGlzLnByb3BzKSA9PiB7XG4gICAgY29uc3Qge2RhdGEsIHBhZ2VTaXplLCBjdXJyZW50UGFnZUluZGV4ID0gMX0gPSBwcm9wcztcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gcGFnZVNpemUpO1xuICAgIHJldHVybiBkYXRhLmxlbmd0aFxuICAgICAgJiYgcGFnZVNpemUgPiAwXG4gICAgICAmJiBjdXJyZW50UGFnZUluZGV4ID49IDFcbiAgICAgICYmIGN1cnJlbnRQYWdlSW5kZXggPD0gdG90YWxQYWdlcztcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFByb3BzKHRoaXMucHJvcHMpICYmIHRoaXMucHJvcHMuY2hpbGRyZW4oe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIG5leHQ6IHRoaXMubmV4dCxcbiAgICAgIHByZXY6IHRoaXMucHJldixcbiAgICB9KVxuICB9XG59XG5cblBhZ2luZ1N0YXRlTWFuYWdlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGN1cnJlbnRQYWdlSW5kZXg6IDEsXG59O1xuXG5QYWdpbmdTdGF0ZU1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBkYXRhOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgcGFnZVNpemU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY3VycmVudFBhZ2VJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59OyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyAkIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuaW1wb3J0IHsgdXNlU2Nyb2xsSGl0Qm90dG9tU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29tbW9uX2hvb2tzJztcblxuY29uc3QgTW91bnRPblNjcm9sbFRvQm90dG9tID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyU2VsZWN0b3IsXG4gICAgY2hpbGRyZW4sXG4gICAgbW91bnRTaXplLFxuICAgIGJ1ZmZlckRpc3RhbmNlLFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA8PSAxIHx8ICFtb3VudFNpemUpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICBjb25zdCBtb3VudFNpemVBdE9uZVRpbWUgPSBtb3VudFNpemUgPiAwID8gbW91bnRTaXplIDogMTtcbiAgY29uc3QgW2hpdEJvdHRvbUNvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZSgxKTtcbiAgY29uc3QgW2lzSGl0Qm90dG9tXSA9IHVzZVNjcm9sbEhpdEJvdHRvbVN0YXR1cygkKHdyYXBwZXJTZWxlY3RvciksIGJ1ZmZlckRpc3RhbmNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0hpdEJvdHRvbSkge1xuICAgICAgc2V0Q291bnQoaGl0Qm90dG9tQ291bnQgKyAxKTtcbiAgICB9XG4gIH0sIFtpc0hpdEJvdHRvbV0pO1xuXG4gIHJldHVybiBjaGlsZHJlbi5zbGljZSgwLCBoaXRCb3R0b21Db3VudCAqIG1vdW50U2l6ZUF0T25lVGltZSk7XG59O1xuXG5leHBvcnQge1xuICBNb3VudE9uU2Nyb2xsVG9Cb3R0b21cbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNob3dkb3duIGZyb20gJ3Nob3dkb3duJztcbmV4cG9ydCAqIGZyb20gJy4vcHJvZ3Jlc3NfaW5kaWNhdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vYXR0YWNoX2d1aWRlX2xpbmUnO1xuZXhwb3J0ICogZnJvbSAnLi9wcm9ncmVzc19pbmRpY2F0b3InO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDdXJzb3JUb29sdGlwIH0gZnJvbSAnLi9jdXJzb3JfdG9vbGx0aXAnO1xuZXhwb3J0ICogZnJvbSAnLi9jdXN0b21fbGluay9iYXNlX2xpbmsnO1xuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJbWcgfSBmcm9tICcuL0ltZy9pbWcnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQYWdpbmdNYW5hZ2VyIH0gZnJvbSAnLi9wYWdpbmdfc3RhdGVfbWFuYWdlcic7XG5leHBvcnQgKiBmcm9tICcuL21vdW50X29uX3Njcm9sbF90b19ib3R0b20nXG5cbmV4cG9ydCBjb25zdCBFbXB0eURpdiA9ICgpID0+IHtcbiAgcmV0dXJuIDxkaXYgc3R5bGU9e3tkaXNwbGF5OiAnZmxleCcsIGhlaWdodDogJzEwMCUnfX0gLz5cbn07XG5cbmV4cG9ydCBjb25zdCBFbXB0eVBsYWNlSG9sZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzcGFuIHN0eWxlPXt7Y29sb3I6ICcjY2NjJ319PuaXoDwvc3Bhbj5cbiAgKVxufTtcblxuY29uc3QgY29udmVydGVyID0gbmV3IHNob3dkb3duLkNvbnZlcnRlcih7XG4gIG9wZW5MaW5rc0luTmV3V2luZG93OiB0cnVlLFxuICBzaW1wbGVMaW5lQnJlYWtzOiB0cnVlXG59KTtcblxuY29udmVydGVyLnNldEZsYXZvcignZ2l0aHViJyk7XG5cbmNvbnN0IG1kMmh0bSA9IG1kID0+IGNvbnZlcnRlciAmJiBtZFxuICA/IGNvbnZlcnRlci5tYWtlSHRtbChtZClcbiAgOiBtZDtcblxuZXhwb3J0IGNvbnN0IEhUTUwgPSAoeyBtZCwgY2xhc3NOYW1lIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogbWQyaHRtKG1kKX19XG4gICAgICBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZX0gbWFya2Rvd24tYm9keWB9XG4gICAgLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFRpY2tMb2FkZXIgfSBmcm9tICdAemhvdWppYWhhby9iYmxlZ28nO1xuaW1wb3J0IHsgRmlnbWFMaXZlQWRkciB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBXaXRoR3VpZGVMaW5lIH0gZnJvbSAnLi4vLi4vdXRpbF9jb21wLyc7XG5cbmltcG9ydCAnLi9pbmRleC5zY3NzJztcblxuY29uc3QgRnJhbWUgPSAocHJvcHMpID0+IDxpZnJhbWUgey4uLnByb3BzfSAvPjtcbmNvbnN0IERlc2lnbkZyYW1lID0gV2l0aEd1aWRlTGluZShGcmFtZSk7XG5cbmV4cG9ydCBjbGFzcyBEZXNpZ24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgfTtcblxuICBoYW5kbGVMb2FkZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWdtYS1saXZlXCI+XG4gICAgICAgIDxEZXNpZ25GcmFtZVxuICAgICAgICAgIG9uTG9hZD17dGhpcy5oYW5kbGVMb2FkZWR9XG4gICAgICAgICAgd2lkdGg9XCI4MDBcIiBoZWlnaHQ9XCI0NTBcIlxuICAgICAgICAgIHNyYz17RmlnbWFMaXZlQWRkcn1cbiAgICAgICAgICBkZWxheT17NzAwfVxuICAgICAgICAgIGNvbG9yPXsnI2ZmODg4OCd9XG4gICAgICAgICAgdG9wXG4gICAgICAgICAgbGVmdFxuICAgICAgICAgIHJpZ2h0XG4gICAgICAgICAgYm90dG9tXG4gICAgICAgIC8+XG4gICAgICAgIHt0aGlzLnN0YXRlLmxvYWRpbmcgPyA8VGlja0xvYWRlciBhYnNDZW50ZXIgLz4gOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFRpY2tMb2FkZXIsIElucHV0IH0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJztcbmltcG9ydCAnLi9pbmRleC5zY3NzJztcblxuY2xhc3MgRWRpdG9yIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwYXNzd29yZDogJycsXG4gICAgICBsb2FkaW5nOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICBjb21tYW5kcyA9IFt7XG4gICAgbmFtZTogJ3EnLFxuICAgIGZuOiAoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLm9wZW5NZW51KCk7XG4gICAgfSxcbiAgfSwge1xuICAgIG5hbWU6ICd2b2wnLCAvLyB2aWV3IG9ubGluZVxuICAgIGZuOiAoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLmdvdG9QYWdlKDIpO1xuICAgIH1cbiAgfV07XG5cbiAgaW5zdGFsbCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW1wb3J0KCdAemhvdWppYWhhby9wbScpXG4gICAgICAudGhlbigoeyBkZWZhdWx0OiBlZGl0b3JNb2QgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZWRpdG9yTW9kLmhhbmRsZXIoe1xuICAgICAgICAgIHVzZXI6ICd6QHpqaC5pbScsXG4gICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuc3RhdGUucGFzc3dvcmQsXG4gICAgICAgICAgZG9tOiB0aGlzLmVkaXRvcldyYXBwZXIsXG4gICAgICAgICAgY29tbWFuZHM6IHRoaXMuY29tbWFuZHNcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICB9XG5cbiAgaGFuZGxlUGFzc3dvcmRDaGFuZ2UgPSAoZSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwYXNzd29yZDogZS50YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgcmVuZGVyRm9ybSA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZXlzXCI+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCLpkqXljJlcIlxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVBhc3N3b3JkQ2hhbmdlfVxuICAgICAgICAgIG9uQmx1cj17dGhpcy5pbnN0YWxsfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT17ZmFsc2V9XG4gICAgICAgICAgYXV0b0ZvY3VzPXtmYWxzZX1cbiAgICAgICAgICBhdXRvU2F2ZT17ZmFsc2V9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInBvc3RzLWVkaXRvclwiXG4gICAgICAgIHJlZj17ciA9PiAodGhpcy5lZGl0b3JXcmFwcGVyID0gcil9XG4gICAgICA+XG4gICAgICAgIHt0aGlzLnN0YXRlLmxvYWRpbmcgPyA8VGlja0xvYWRlciAvPiA6IHRoaXMucmVuZGVyRm9ybSgpfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIEVkaXRvclxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtcbiAgVGlja0xvYWRlciBhcyBTcGlubmVyLFxuICBFcnJvckljb24sXG4gIEljb25UZXh0LFxuICBDT0xPUlNcbn0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJ1xuXG5jb25zdCBidWlsZERhdGFQcm92aWRlciA9IChcbiAgcXVlcnlGbiA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICBwYXlsb2FkS2V5ID0gJ3BheWxvYWQnXG4pID0+IHtcbiAgY2xhc3MgUmV0Q29tcCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIHN0YXRlID0ge1xuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIFtwYXlsb2FkS2V5XTogbnVsbCxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHF1ZXJ5Rm4oKVxuICAgICAgICAudGhlbigocGF5bG9hZCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgW3BheWxvYWRLZXldOiBwYXlsb2FkLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBFcnJvclJlbmRlcmVyID0gKGVycm9yKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8SWNvblRleHRcbiAgICAgICAgICBjb2xvcj17Q09MT1JTLiRyZWQzfVxuICAgICAgICAgIGljb249ezxFcnJvckljb24vPn1cbiAgICAgICAgPlxuICAgICAgICAgIHtlcnJvci5tZXNzYWdlIHx8ICdFUlJPUid9XG4gICAgICAgIDwvSWNvblRleHQ+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzcGlubmVyID0gKDxTcGlubmVyIGFic0NlbnRlci8+KSxcbiAgICAgICAgZXJyb3JWaWV3ID0gdGhpcy5FcnJvclJlbmRlcmVyXG4gICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKHNwaW5uZXIgJiYgdGhpcy5zdGF0ZS5sb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiBzcGlubmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyb3JWaWV3ICYmIHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlcnJvclZpZXcgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IGVycm9yVmlldyh0aGlzLnN0YXRlLmVycm9yKVxuICAgICAgICAgIDogZXJyb3JWaWV3O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnN0YXRlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmV0Q29tcDtcbn1cblxuZXhwb3J0IHtcbiAgYnVpbGREYXRhUHJvdmlkZXIsXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyByZXEgfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5cbmltcG9ydCB7IGFwaVVSTCB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBidWlsZERhdGFQcm92aWRlciB9IGZyb20gJy4vY29tcC1mYWN0b3J5JztcblxuY29uc3QgZXh0cmFjdFBob3Rvc1VybCA9IHBob3RvcyA9PiBwaG90b3MubWFwKCh7IHVybCB9KSA9PiB1cmwpO1xuXG5jb25zdCBnZXRQaG90b3NVUkwgPSAoKSA9PiByZXEoYXBpVVJMLnJlcykudGhlbihleHRyYWN0UGhvdG9zVXJsKTtcbmNvbnN0IGdldFBvc3RzID0gKCkgPT4gcmVxKGFwaVVSTC5wb3N0cyk7XG5cbmV4cG9ydCBjb25zdCBQb3N0c1Byb3ZpZGVyID0gYnVpbGREYXRhUHJvdmlkZXIoZ2V0UG9zdHMsICdwb3N0cycpO1xuZXhwb3J0IGNvbnN0IFBob3Rvc1Byb3ZpZGVyID0gYnVpbGREYXRhUHJvdmlkZXIoZ2V0UGhvdG9zVVJMLCAncGhvdG9zJylcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEhUTUwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbF9jb21wL1wiO1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHBvc3QsIGNsYXNzTmFtZVxuICB9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YHBvc3QgJHtjbGFzc05hbWV9YH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtdGl0bGVcIj57cG9zdC50aXRsZX08L2Rpdj5cbiAgICAgIDxIVE1MIG1kPXtwb3N0LmNvbnRlbnR9IGNsYXNzTmFtZT1cInBvc3QtY29udGVudFwiIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtZGF0ZVwiPntwb3N0LmRhdGV9PC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIFRpY2tMb2FkZXIgYXMgU3Bpbm5lcixcbiAgRXJyb3JJY29uLFxuICBJY29uVGV4dCxcbiAgQ09MT1JTXG59IGZyb20gJ0B6aG91amlhaGFvL2JibGVnbydcbmltcG9ydCB7IFBvc3RzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi8uLi9kYXRhLXByb3ZpZGVyJztcbmltcG9ydCB7IE1vdW50T25TY3JvbGxUb0JvdHRvbSB9IGZyb20gJy4uLy4uL3V0aWxfY29tcC8nO1xuaW1wb3J0IFBvc3QgZnJvbSAnLi9wb3N0JztcblxuY2xhc3MgUG9zdExpc3QgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyRXJyb3JWaWV3ID0gKGVycm9yKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxJY29uVGV4dFxuICAgICAgICBjb2xvcj17Q09MT1JTLiRyZWQzfVxuICAgICAgICBpY29uPXs8RXJyb3JJY29uLz59XG4gICAgICA+XG4gICAgICAgIHtlcnJvci5tZXNzYWdlIHx8ICdFUlJPUid9XG4gICAgICA8L0ljb25UZXh0PlxuICAgIClcbiAgfTtcblxuICByZW5kZXJMaXN0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8UG9zdHNQcm92aWRlclxuICAgICAgICBlcnJvclZpZXc9e3RoaXMucmVuZGVyRXJyb3JWaWV3fVxuICAgICAgICBzcGlubmVyPXs8U3Bpbm5lciBhYnNDZW50ZXIgLz59XG4gICAgICA+XG4gICAgICAgIHsoeyBwb3N0cyB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxNb3VudE9uU2Nyb2xsVG9Cb3R0b21cbiAgICAgICAgICAgICAgbW91bnRTaXplPXs1fVxuICAgICAgICAgICAgICBidWZmZXJEaXN0YW5jZT17MTAwfVxuICAgICAgICAgICAgICB3cmFwcGVyU2VsZWN0b3I9XCIucG9zdHMtd3JhcHBlclwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwb3N0cyAmJiBwb3N0cy5zbGljZSgpLnJldmVyc2UoKS5tYXAocCA9PiA8UG9zdCBwb3N0PXtwfS8+KX1cbiAgICAgICAgICAgIDwvTW91bnRPblNjcm9sbFRvQm90dG9tPlxuICAgICAgICAgIClcbiAgICAgICAgfX1cbiAgICAgIDwvUG9zdHNQcm92aWRlcj5cbiAgICApXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnJlbmRlckxpc3QoKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFBvc3RzID0gKCkgPT4gKFxuICA8ZGl2XG4gICAgY2xhc3NOYW1lPVwicG9zdHMtd3JhcHBlclwiXG4gICAgc3R5bGU9e3tcbiAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgIH19XG4gID5cbiAgICA8UG9zdExpc3QgLz5cbiAgPC9kaXY+XG4pO1xuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHtpc01vYmlsZX0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5pbXBvcnQgeyBJbWcgfSBmcm9tIFwiLi4vLi4vdXRpbF9jb21wXCI7XG5pbXBvcnQgeyBjb3ZlckltZ1NyYyB9IGZyb20gXCIuLi8uLi8uLi9jb25maWdcIjtcblxuXG5leHBvcnQgY29uc3QgQ292ZXJJbWFnZSA9ICgpID0+IHtcbiAgY29uc3QgW2xvYWRlZCwgc2V0TG9hZGluZ1N0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oJ2NvdmVyLWltYWdlJywge1xuICAgICAgc2hvd1RhcGU6IGxvYWRlZCAmJiAhaXNNb2JpbGUoKVxuICAgIH0pfT5cbiAgICAgIDxJbWdcbiAgICAgICAgc3JjPXtjb3ZlckltZ1NyY31cbiAgICAgICAgb25Mb2FkPXsoKSA9PiB7XG4gICAgICAgICAgc2V0TG9hZGluZ1N0YXRlKHRydWUpO1xuICAgICAgICB9fVxuICAgICAgICB0b29sdGlwPVwiV2VsY29tZVwiXG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhY2thZ2VJbmZvIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcblxuZXhwb3J0IGNvbnN0IFZlcnNpb24gPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4+XG4gICAgICB7J3YnICsgcGFja2FnZUluZm8udmVyc2lvbn1cbiAgICA8L3NwYW4+XG4gIClcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ292ZXJlZFRleHQsIEljb25UZXh0LCBUYWdJY29uLCBNYWlsSWNvbiwgQ09MT1JTIH0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJztcbmltcG9ydCB7IENvdmVySW1hZ2UgfSBmcm9tIFwiLi9jb3Zlcl9pbWFnZVwiO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gXCIuL3ZlcnNpb25cIjtcblxuZXhwb3J0IGNvbnN0IEFib3V0ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJvdXQgcGMtdmlld1wiPlxuICAgICAgPENvdmVySW1hZ2UgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFjdFwiPlxuICAgICAgICA8SWNvblRleHRcbiAgICAgICAgICBpY29uPXsoPE1haWxJY29uIC8+KX1cbiAgICAgICAgPlxuICAgICAgICAgIDxDb3ZlcmVkVGV4dCB0ZXh0PVwi6YKu566x77ya5ZeoQOW9k+WJjeWfn+WQjVwiIC8+XG4gICAgICAgIDwvSWNvblRleHQ+XG4gICAgICAgIDxJY29uVGV4dFxuICAgICAgICAgIGljb249eyg8VGFnSWNvbiAvPil9XG4gICAgICAgICAgdGV4dD17KDxWZXJzaW9uIC8+KX1cbiAgICAgICAgICBjb2xvcj17Q09MT1JTLiRncmF5NH1cbiAgICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgZ2V0SW1hZ2UgfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5cbmltcG9ydCB7IFBhZ2luZ01hbmFnZXIsIEltZyB9IGZyb20gXCIuLi8uLi91dGlsX2NvbXBcIjtcbmltcG9ydCB7IFBob3Rvc1Byb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2RhdGEtcHJvdmlkZXJcIjtcbmltcG9ydCB7XG4gIHRtcEJsdXJyeVRodW1ibmFpbFVybFN1ZmZpeCwgdG1wV2VicFVybFN1ZmZpeFxufSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XG5cblxuY29uc3QgdG9XZWJwVXJsID0gKHNyYykgPT4gYCR7c3JjfSR7dG1wV2VicFVybFN1ZmZpeH1gO1xuY29uc3QgdG9CbHVycnlJbWdVcmwgPSAoc3JjKSA9PiBgJHtzcmMucmVwbGFjZSh0bXBXZWJwVXJsU3VmZml4LCAnJyl9JHt0bXBCbHVycnlUaHVtYm5haWxVcmxTdWZmaXh9YDtcbmNvbnN0IGNhY2hlSW1nID0gKHNyYykgPT4ge1xuICBnZXRJbWFnZShzcmMpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5pbmZvKCdpbWFnZSBjYWNoZWQnKTtcbiAgICB9KTtcbn1cblxuY29uc3QgcmVuZGVyQmx1cnJ5VGh1bWJuYWlsID0gKG9yaWdpblVybCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxpbWdcbiAgICAgIHNyYz17dG9CbHVycnlJbWdVcmwob3JpZ2luVXJsKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGZpbHRlcjogJ29wYWNpdHkoMC4yKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG5cblxuZXhwb3J0IGNvbnN0IFBob3RvcyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UGhvdG9zUHJvdmlkZXI+XG4gICAgICB7KHsgcGhvdG9zIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UGFnaW5nTWFuYWdlclxuICAgICAgICAgICAgZGF0YT17cGhvdG9zfVxuICAgICAgICAgICAgcGFnZVNpemU9ezF9XG4gICAgICAgICAgICBpbmZpbml0ZUxvb3BNb2RlXG4gICAgICAgICAgPlxuICAgICAgICAgICAgeyh7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VEYXRhLFxuICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgdG90YWxQYWdlcyxcbiAgICAgICAgICAgICAgICBuZXh0UGFnZURhdGEsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VJbmRleCxcbiAgICAgICAgICAgIH0pID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBgJHtjdXJyZW50UGFnZUluZGV4fSAvICR7dG90YWxQYWdlc31gO1xuICAgICAgICAgICAgICBpZiAobmV4dFBhZ2VEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhY2hlSW1nKHRvV2VicFVybChuZXh0UGFnZURhdGFbMF0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17dG9XZWJwVXJsKGN1cnJlbnRQYWdlRGF0YVswXSl9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtuZXh0fVxuICAgICAgICAgICAgICAgICAgdG9vbHRpcD17cHJvZ3Jlc3N9XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nVmlld1JlbmRlcmVyPXtyZW5kZXJCbHVycnlUaHVtYm5haWx9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA8L1BhZ2luZ01hbmFnZXI+XG4gICAgICAgIClcbiAgICAgIH19XG4gICAgPC9QaG90b3NQcm92aWRlcj5cbiAgKSAgXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0ICcuL2xheW91dC5zY3NzJztcblxuZXhwb3J0IGNvbnN0IExheW91dCA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJ0aWNsZS1sYXlvdXRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPntwcm9wcy5sZWZ0fTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0LXRvcFwiPlxuICAgICAgICAgIHtwcm9wcy5yaWdodFRvcH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHQtYm90dG9tXCI+XG4gICAgICAgICAge3Byb3BzLnJpZ2h0Qm90dG9tfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSBcIi4vbGF5b3V0XCI7XG5pbXBvcnQge1xuICBIVE1MLFxuICBQYWdpbmdNYW5hZ2VyXG59IGZyb20gXCIuLi8uLi91dGlsX2NvbXBcIjtcbmltcG9ydCB7IFBvc3RzUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vZGF0YS1wcm92aWRlclwiO1xuXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuXG5jb25zdCB3cmFwVGl0bGUgPSAodGl0bGUgPSAnJykgPT4ge1xuICBjb25zdCBjbGVhblRpdGxlID0gdGl0bGVcbiAgICAucmVwbGFjZSgn44CKJywgJycpXG4gICAgLnJlcGxhY2UoJ+OAiycsICcnKTtcblxuICByZXR1cm4gYOOAiiR7Y2xlYW5UaXRsZX3jgItgO1xufVxuXG5jb25zdCBBY3Rpb25zID0gKHtcbiAgbmV4dCxcbiAgcHJldixcbiAgdG90YWxQYWdlcyxcbiAgY3VycmVudFBhZ2VJbmRleCxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9XCJhY3Rpb25zXCI+XG4gICAgICA8c3BhbiBvbkNsaWNrPXtwcmV2fT7kuIrkuIDnr4c8L3NwYW4+XG4gICAgICA8c3BhbiBvbkNsaWNrPXtuZXh0fT7kuIvkuIDnr4c8L3NwYW4+XG4gICAgICA8c3Bhbj57YCR7Y3VycmVudFBhZ2VJbmRleH0gLyAke3RvdGFsUGFnZXN9YH08L3NwYW4+XG4gICAgPC9zcGFuPlxuICApO1xufVxuXG5jb25zdCBBcnRpY2xlID0gKHsgdGl0bGUsIGNvbnRlbnQsIGFjdGlvbnMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxMYXlvdXRcbiAgICAgIGxlZnQ9e3dyYXBUaXRsZSh0aXRsZSl9XG4gICAgICByaWdodFRvcD17PEhUTUwgbWQ9e2NvbnRlbnR9IC8+fVxuICAgICAgcmlnaHRCb3R0b209e2FjdGlvbnN9XG4gICAgLz5cbiAgKVxufTtcblxuZXhwb3J0IGNvbnN0IEFydGljbGVzID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQb3N0c1Byb3ZpZGVyPlxuICAgICAgeyh7IHBvc3RzIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UGFnaW5nTWFuYWdlclxuICAgICAgICAgICAgZGF0YT17cG9zdHN9XG4gICAgICAgICAgICBwYWdlU2l6ZT17MX1cbiAgICAgICAgICAgIGluZmluaXRlTG9vcE1vZGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7KHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZURhdGEsXG4gICAgICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zdCA9IGN1cnJlbnRQYWdlRGF0YVswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPEFydGljbGVcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucz17PEFjdGlvbnMgey4uLnJlc3R9IC8+fVxuICAgICAgICAgICAgICAgICAgICB7Li4ucG9zdH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA8L1BhZ2luZ01hbmFnZXI+XG4gICAgICAgIClcbiAgICAgIH19XG4gICAgPC9Qb3N0c1Byb3ZpZGVyPlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBSdWxlckljb24sXG4gIFRhZ0ljb24sXG4gIEVkaXRJY29uLFxuICBQb3N0SWNvbixcbiAgQWJvdXRJY29uLFxuICBQaG90b0ljb25cbn0gZnJvbSAnQHpob3VqaWFoYW8vYmJsZWdvJztcbmltcG9ydCB7IGlzTW9iaWxlLCBwaWNrIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCB7IERlc2lnbiB9IGZyb20gJy4vZGVzaWduJztcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJy4vZWRpdG9yJztcbmltcG9ydCB7IFBvc3RzIH0gZnJvbSAnLi9wb3N0X2xpc3QnXG5pbXBvcnQgeyBBYm91dCB9IGZyb20gJy4vYWJvdXQnO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vYWJvdXQvdmVyc2lvbic7XG5pbXBvcnQgeyBQaG90b3MgfSBmcm9tIFwiLi9waG90b3NcIjtcbmltcG9ydCB7IEFydGljbGVzIH0gZnJvbSBcIi4vYXJ0aWNsZVwiO1xuaW1wb3J0IHtCbG9nQ29udGV4dH0gZnJvbSBcIi4uL2NvcmUvYmxvZ19jb250ZXh0XCI7XG5cbmNvbnN0IElTX01PQklMRSA9IGlzTW9iaWxlKCk7XG5cbmNvbnN0IHBhZ2VzID0ge1xuICBkZXNpZ246IHtcbiAgICB0aXRsZTogJ+e+juacr+mDqCcsXG4gICAgaWNvbjogPFJ1bGVySWNvbiAvPixcbiAgICBjb21wb25lbnQ6IDxEZXNpZ24gLz4sXG4gIH0sXG4gIGVkaXRvcjoge1xuICAgIHRpdGxlOiAn57yW6L6R6YOoJyxcbiAgICBpY29uOiA8RWRpdEljb24gLz4sXG4gICAgY29tcG9uZW50OiAoXG4gICAgICA8QmxvZ0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHsodmFsdWUpID0+ICg8RWRpdG9yIHsuLi52YWx1ZX0gLz4pfVxuICAgICAgPC9CbG9nQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICksXG4gIH0sXG4gIHBvc3RzOiB7XG4gICAgdGl0bGU6ICfmnYLorrAnLFxuICAgIGljb246IDxQb3N0SWNvbiAvPixcbiAgICBjb21wb25lbnQ6IDxQb3N0cyAvPixcbiAgfSxcbiAgYXJ0aWNsZXM6IHtcbiAgICB0aXRsZTogJ+adguiusCcsXG4gICAgaWNvbjogPFBvc3RJY29uIC8+LFxuICAgIGNvbXBvbmVudDogPEFydGljbGVzIC8+LFxuICB9LFxuICBwaG90b3M6IHtcbiAgICB0aXRsZTogJ+eFp+eJhycsXG4gICAgaWNvbjogPFBob3RvSWNvbiAvPixcbiAgICBjb21wb25lbnQ6IDxQaG90b3MgLz4sXG4gIH0sXG4gIGFib3V0OiB7XG4gICAgdGl0bGU6ICflhbPkuo4nLFxuICAgIGljb246IDxBYm91dEljb24gLz4sXG4gICAgY29tcG9uZW50OiA8QWJvdXQgLz5cbiAgfVxufTtcblxuY29uc3QgUGNQYWdlcyA9IHBpY2socGFnZXMsIFtcbiAgJ2Rlc2lnbicsXG4gICdlZGl0b3InLFxuICAnYXJ0aWNsZXMnLFxuICAncGhvdG9zJyxcbiAgJ2Fib3V0Jyxcbl0pO1xuXG5jb25zdCBNb2JpbGVQYWdlcyA9IHBpY2socGFnZXMsIFtcbiAgJ3Bvc3RzJyxcbiAgJ2Fib3V0J1xuXSk7XG5cbmV4cG9ydCBjb25zdCBQQUdFUyA9IElTX01PQklMRSA/IE1vYmlsZVBhZ2VzIDogUGNQYWdlcztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQgeyBQQUdFUywgQmxvZyB9IGZyb20gJy4vY29tcG9uZW50cyc7XG5cbmNvbnN0IElTX01PQklMRSA9IGlzTW9iaWxlKCk7XG5cbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIEJsb2cuYWRkUGFnZXMoUEFHRVMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lKCdBcHAnLCB7bW9iaWxlOiBJU19NT0JJTEV9KX0+XG4gICAgICAgIDxCbG9nIGFjdGl2ZVBhZ2VJbmRleD17bnVsbH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgJy4vc3R5bGVzL2luZGV4LnNjc3MnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgkd3JhcHBlcikgPT4ge1xuICAkd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdibG9nJyk7XG4gIFJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCAkd3JhcHBlcik7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==