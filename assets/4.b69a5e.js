(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"0jNN":function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=Array.isArray,i=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),a=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r};e.exports={arrayToObject:a,assign:function(e,t){return Object.keys(t).reduce((function(e,r){return e[r]=t[r],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var i=t[n],a=i.obj[i.prop],s=Object.keys(a),c=0;c<s.length;++c){var u=s[c],f=a[u];"object"==typeof f&&null!==f&&-1===r.indexOf(f)&&(t.push({obj:a,prop:u}),r.push(f))}return function(e){for(;e.length>1;){var t=e.pop(),r=t.obj[t.prop];if(o(r)){for(var n=[],i=0;i<r.length;++i)void 0!==r[i]&&n.push(r[i]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var n=e.replace(/\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,r){if(0===e.length)return e;var n=e;if("symbol"==typeof e?n=Symbol.prototype.toString.call(e):"string"!=typeof e&&(n=String(e)),"iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var o="",a=0;a<n.length;++a){var s=n.charCodeAt(a);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?o+=n.charAt(a):s<128?o+=i[s]:s<2048?o+=i[192|s>>6]+i[128|63&s]:s<55296||s>=57344?o+=i[224|s>>12]+i[128|s>>6&63]+i[128|63&s]:(a+=1,s=65536+((1023&s)<<10|1023&n.charCodeAt(a)),o+=i[240|s>>18]+i[128|s>>12&63]+i[128|s>>6&63]+i[128|63&s])}return o},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,r,i){if(!r)return t;if("object"!=typeof r){if(o(t))t.push(r);else{if(!t||"object"!=typeof t)return[t,r];(i&&(i.plainObjects||i.allowPrototypes)||!n.call(Object.prototype,r))&&(t[r]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(r);var s=t;return o(t)&&!o(r)&&(s=a(t,i)),o(t)&&o(r)?(r.forEach((function(r,o){if(n.call(t,o)){var a=t[o];a&&"object"==typeof a&&r&&"object"==typeof r?t[o]=e(a,r,i):t.push(r)}else t[o]=r})),t):Object.keys(r).reduce((function(t,o){var a=r[o];return n.call(t,o)?t[o]=e(t[o],a,i):t[o]=a,t}),s)}}},"2SVd":function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},"5oMp":function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},"9rSQ":function(e,t,r){"use strict";var n=r("xTJ+");function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},BEtg:function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},CgaS:function(e,t,r){"use strict";var n=r("JEQr"),o=r("xTJ+"),i=r("9rSQ"),a=r("UnBK");function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},o.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,r){return this.request(o.merge(r||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,r,n){return this.request(o.merge(n||{},{method:e,url:t,data:r}))}})),e.exports=s},DfZB:function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},HSsa:function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},JEQr:function(e,t,r){"use strict";(function(t){var n=r("xTJ+"),o=r("yK9s"),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={adapter:("undefined"!=typeof XMLHttpRequest?s=r("tQ2B"):void 0!==t&&(s=r("tQ2B")),s),transformRequest:[function(e,t){return o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){c.headers[e]=n.merge(i)})),e.exports=c}).call(this,r("8oxB"))},LYNF:function(e,t,r){"use strict";var n=r("OH9c");e.exports=function(e,t,r,o,i){var a=new Error(e);return n(a,t,r,o,i)}},Lmem:function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},MLWZ:function(e,t,r){"use strict";var n=r("xTJ+");function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var a=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},OH9c:function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},OTTw:function(e,t,r){"use strict";var n=r("xTJ+");e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},QSc6:function(e,t,r){"use strict";var n=r("0jNN"),o=r("sxOR"),i=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,c=Array.prototype.push,u=function(e,t){c.apply(e,s(t)?t:[t])},f=Date.prototype.toISOString,l=o.default,p={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,format:l,formatter:o.formatters[l],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},d=function e(t,r,o,i,a,c,f,l,d,h,m,y,g){var v,w=t;if("function"==typeof f?w=f(r,w):w instanceof Date?w=h(w):"comma"===o&&s(w)&&(w=w.join(",")),null===w){if(i)return c&&!y?c(r,p.encoder,g,"key"):r;w=""}if("string"==typeof(v=w)||"number"==typeof v||"boolean"==typeof v||"symbol"==typeof v||"bigint"==typeof v||n.isBuffer(w))return c?[m(y?r:c(r,p.encoder,g,"key"))+"="+m(c(w,p.encoder,g,"value"))]:[m(r)+"="+m(String(w))];var b,x=[];if(void 0===w)return x;if(s(f))b=f;else{var S=Object.keys(w);b=l?S.sort(l):S}for(var j=0;j<b.length;++j){var O=b[j];a&&null===w[O]||(s(w)?u(x,e(w[O],"function"==typeof o?o(r,O):r,o,i,a,c,f,l,d,h,m,y,g)):u(x,e(w[O],r+(d?"."+O:"["+O+"]"),o,i,a,c,f,l,d,h,m,y,g)))}return x};e.exports=function(e,t){var r,n=e,c=function(e){if(!e)return p;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||p.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=o.default;if(void 0!==e.format){if(!i.call(o.formatters,e.format))throw new TypeError("Unknown format option provided.");r=e.format}var n=o.formatters[r],a=p.filter;return("function"==typeof e.filter||s(e.filter))&&(a=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:p.addQueryPrefix,allowDots:void 0===e.allowDots?p.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:p.charsetSentinel,delimiter:void 0===e.delimiter?p.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:p.encode,encoder:"function"==typeof e.encoder?e.encoder:p.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:p.encodeValuesOnly,filter:a,formatter:n,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:p.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:p.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:p.strictNullHandling}}(t);"function"==typeof c.filter?n=(0,c.filter)("",n):s(c.filter)&&(r=c.filter);var f,l=[];if("object"!=typeof n||null===n)return"";f=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=a[f];r||(r=Object.keys(n)),c.sort&&r.sort(c.sort);for(var m=0;m<r.length;++m){var y=r[m];c.skipNulls&&null===n[y]||u(l,d(n[y],y,h,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var g=l.join(c.delimiter),v=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?v+="utf8=%26%2310003%3B&":v+="utf8=%E2%9C%93&"),g.length>0?v+g:""}},Qyje:function(e,t,r){"use strict";var n=r("QSc6"),o=r("nmq7"),i=r("sxOR");e.exports={formats:i,parse:o,stringify:n}},"Rn+g":function(e,t,r){"use strict";var n=r("LYNF");e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},UnBK:function(e,t,r){"use strict";var n=r("xTJ+"),o=r("xAGQ"),i=r("Lmem"),a=r("JEQr"),s=r("2SVd"),c=r("5oMp");function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!s(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},XXAI:function(e,t,r){"use strict";r.r(t);var n=r("8RZD"),o=r("q1tI"),i=r.n(o),a=r("i8i4"),s=r.n(a);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),e}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?h(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var v=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return function(r){function n(){var e,t;u(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return g(h(t=p(this,(e=d(n)).call.apply(e,[this].concat(o)))),"state",{component:null}),t}return m(n,r),l(n,[{key:"componentDidMount",value:function(){var t=this;e().then((function(e){t.setState({component:e.default})}))}},{key:"render",value:function(){var e=this.state.component;return e?i.a.createElement(e,this.props):t}}]),n}(o.Component)},w=function(e){var t=e.titles,r=e.activePostIdx,n=e.onTitleClick;return i.a.createElement("ul",null,t.map((function(e,t){var o=r===t;return i.a.createElement("li",{onClick:function(){n(t)},className:"".concat(o?"active":"")},e)})))},b=r("1EKS"),x=r.n(b);function S(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var j=new RegExp("^pm-persistor-"),O=function(e,t){localStorage.setItem("pm-persistor-"+e,JSON.stringify(t))},E=function(e){if(e)return JSON.parse(localStorage.getItem("pm-persistor-"+e))},k=function(e){if(e)return JSON.parse(localStorage.getItem(e))},C=function(){return Object.keys(localStorage).filter((function(e){return j.test(e)}))},T=function(e){localStorage.removeItem("pm-persistor-"+e)},A=function(e){var t=C().map(k),r={};if(e.forEach((function(e){var t=e.id;r[t]=!0})),!e.length)return t;var n=t.filter((function(e){var t=e.id;return!r[t]}));return[].concat(S(n),S(e))};function N(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var R=function(e,t,r){var n=r.active;return[{name:"update",fn:function(r,n){var o=r.error,i=r.success;r.warn;e.update(n.getOption("contentId"),n.doc.getValue()).then((function(e){T(e.id),t((function(t){return t.map((function(t){return t.id===e.id?e:t}))})),i("博文已更新")})).catch((function(){o("博文更新失败")}))}},{name:"deleteThisPostForever",fn:function(r,o){var i=r.error,a=r.success,s=(r.warn,o.getOption("contentId"));T(s),t((function(e){return e.filter((function(e){return e.id!==s}))})),e.delete(s).then((function(){n(0),a("博文永久删除")})).catch((function(){i("博文删除失败")}))}},{name:"publish",fn:function(r,n){var o=r.error,i=r.success,a=(r.warn,n.getOption("newPostTitle")),s=n.getOption("contentId"),c=E(s).title,u=n.doc.getValue();a||c?u?e.create(a||c,u).then((function(e){T(s),t((function(t){return[e].concat(N(t.slice(1)))})),i("博文创建成功")})).catch((function(e){o("博文创建失败")})):o("内容不能为空!"):o("标题不能为空!")}},{name:"new",fn:function(e,r,o){var i=e.error,a=(e.success,e.warn,o.argString&&o.argString.trim());if(a){r.setOption("newPostTitle",a);var s=x()(Date.now()).slice(16),c={title:a,id:s,content:""};O(s,c),t((function(e){return[c].concat(N(e))})),n(0)}else i("标题不能为空: new &lt;title&gt;")}}]};function P(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var B=v((function(){return Promise.all([r.e(5),r.e(10)]).then(r.bind(null,"0BQj"))}),i.a.createElement("div",{style:{width:"calc(50% - 15px)",height:"100%",border:"dotted 1px #000"}})),D=function(e){e.exit;var t,r=e.api,n=e.posts,a=void 0===n?[{}]:n,s=P(Object(o.useState)(0),2),c=s[0],u=s[1],f=P(Object(o.useState)(a),2),l=f[0],p=f[1],d=l[c],h=E(d.id);return i.a.createElement("div",{className:"pane"},i.a.createElement("div",{className:"side-list-col"},i.a.createElement(w,{titles:l.map((function(e){return"".concat(e.title)})),onTitleClick:u,activePostIdx:c})),i.a.createElement("div",{className:(t=h?"changed-file":"normal-file",d.hasOwnProperty("createdAt")||(t="new-file"),"editor-wrapper "+t)},i.a.createElement(B,{value:h&&h.content||d.content||"",contentId:d.id,backgroundColor:"#f2f2f2",onSave:function(e,t){var r=d.title;O(e,{title:r,id:e,content:t})},exArr:R(r,p,{active:u})})))},L=(r("Zse/"),function(e,t){var r=Object(n.a)("#gui");r.classList.add("fullscreen"),s.a.render(i.a.createElement(D,{posts:e,api:t}),r)}),q=r("vDqi"),I=r.n(q),U=r("p46w"),F=r("Qyje");var J=class{constructor(e,t,r){if(this.axios=I.a.create({baseURL:e,paramsSerializer:F.stringify,...r}),this.storeConfig={cookie:{key:"jwt",options:{path:"/"}},localStorage:{key:"jwt"},...t},this.isBrowser()){let e;this.storeConfig.cookie?e=U.get(this.storeConfig.cookie.key):this.storeConfig.localStorage&&(e=JSON.parse(window.localStorage.getItem(this.storeConfig.localStorage.key))),e&&this.setToken(e,!0)}}async request(e,t,r){try{return(await this.axios.request({method:e,url:t,...r})).data}catch(e){throw e.response?new Error(e.response.data.message):e}}async register(e,t,r){this.clearToken();const n=await this.request("post","/auth/local/register",{data:{email:t,password:r,username:e}});return this.setToken(n.jwt),n}async login(e,t){this.clearToken();const r=await this.request("post","/auth/local",{data:{identifier:e,password:t}});return this.setToken(r.jwt),r}async forgotPassword(e,t){this.clearToken(),await this.request("post","/auth/forgot-password",{data:{email:e,url:t}})}async resetPassword(e,t,r){this.clearToken(),await this.request("post","/auth/reset-password",{data:{code:e,password:t,passwordConfirmation:r}})}getProviderAuthenticationUrl(e){return`${this.axios.defaults.baseURL}/connect/${e}`}async authenticateProvider(e,t){this.clearToken(),this.isBrowser()&&(t=F.parse(window.location.search,{ignoreQueryPrefix:!0}));const r=await this.request("get",`/auth/${e}/callback`,{params:t});return this.setToken(r.jwt),r}getEntries(e,t){return this.request("get",`/${e}`,{params:t})}getEntryCount(e,t){return this.request("get",`/${e}/count`,{params:t})}getEntry(e,t){return this.request("get",`/${e}/${t}`)}createEntry(e,t){return this.request("post",`/${e}`,{data:t})}updateEntry(e,t,r){return this.request("put",`/${e}/${t}`,{data:r})}deleteEntry(e,t){return this.request("delete",`/${e}/${t}`)}searchFiles(e){return this.request("get",`/upload/search/${decodeURIComponent(e)}`)}getFiles(e){return this.request("get","/upload/files",{params:e})}getFile(e){return this.request("get",`/upload/files/${e}`)}upload(e,t){return this.request("post","/upload",{data:e,...t})}setToken(e,t){this.axios.defaults.headers.common.Authorization="Bearer "+e,this.isBrowser()&&!t&&(this.storeConfig.localStorage&&window.localStorage.setItem(this.storeConfig.localStorage.key,JSON.stringify(e)),this.storeConfig.cookie&&U.set(this.storeConfig.cookie.key,e,this.storeConfig.cookie.options))}clearToken(){delete this.axios.defaults.headers.common.Authorization,this.isBrowser()&&(this.storeConfig.localStorage&&window.localStorage.removeItem(this.storeConfig.localStorage.key),this.storeConfig.cookie&&U.remove(this.storeConfig.cookie.key,this.storeConfig.cookie.options))}isBrowser(){return"undefined"!=typeof window}},Q="https://api.zjh.im",H="posts",z=function(e){var t=new J(Q,{},{headers:{Authorization:"Bearer ".concat(e)}});return{list:function(){return t.getEntries(H,{_sort:"createdAt:desc",_limit:10})},create:function(e,r){return t.createEntry(H,{title:e,content:r,date:(new Date).toISOString()})},update:function(e,r){return t.updateEntry(H,e,{content:r})},delete:function(e){return t.deleteEntry(H,e)}}};function $(e,t,r,n,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,o)}var _,V,M=Object(n.f)("pm","pm [access token]","posts manager for my blog.");t.default={doc:M,handler:(_=regeneratorRuntime.mark((function e(t,r,n,o){var i,a,s,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((i=o.restParams)&&localStorage.setItem("pm-access-token",i),a=localStorage.getItem("pm-access-token")){e.next=5;break}return e.abrupt("return","access token missing!");case 5:if(!a){e.next=18;break}return s=z(a),e.prev=7,e.next=10,s.list();case 10:c=e.sent,L(A(c),s),Terminal&&Terminal.destroy(),e.next=18;break;case 15:return e.prev=15,e.t0=e.catch(7),e.abrupt("return","Error: Invalid Access Token. \nAnonymous mode is unsupport right now.");case 18:case"end":return e.stop()}}),e,null,[[7,15]])})),V=function(){var e=this,t=arguments;return new Promise((function(r,n){var o=_.apply(e,t);function i(e){$(o,r,n,i,a,"next",e)}function a(e){$(o,r,n,i,a,"throw",e)}i(void 0)}))},function(e,t,r,n){return V.apply(this,arguments)})}},"Zse/":function(e,t,r){},endd:function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},eqyj:function(e,t,r){"use strict";var n=r("xTJ+");e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),n.isString(o)&&s.push("path="+o),n.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},"jfS+":function(e,t,r){"use strict";var n=r("endd");function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},nmq7:function(e,t,r){"use strict";var n=r("0jNN"),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},s=function(e,t,r){if(e){var n=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,a=r.depth>0&&/(\[[^[\]]*])/.exec(n),s=a?n.slice(0,a.index):n,c=[];if(s){if(!r.plainObjects&&o.call(Object.prototype,s)&&!r.allowPrototypes)return;c.push(s)}for(var u=0;r.depth>0&&null!==(a=i.exec(n))&&u<r.depth;){if(u+=1,!r.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!r.allowPrototypes)return;c.push(a[1])}return a&&c.push("["+n.slice(a.index)+"]"),function(e,t,r){for(var n=t,o=e.length-1;o>=0;--o){var i,a=e[o];if("[]"===a&&r.parseArrays)i=[].concat(n);else{i=r.plainObjects?Object.create(null):{};var s="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,c=parseInt(s,10);r.parseArrays||""!==s?!isNaN(c)&&a!==s&&String(c)===s&&c>=0&&r.parseArrays&&c<=r.arrayLimit?(i=[])[c]=n:i[s]=n:i={0:n}}n=i}return n}(c,t,r)}};e.exports=function(e,t){var r=function(e){if(!e)return i;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?i.charset:e.charset;return{allowDots:void 0===e.allowDots?i.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:i.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:i.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:i.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:i.comma,decoder:"function"==typeof e.decoder?e.decoder:i.decoder,delimiter:"string"==typeof e.delimiter||n.isRegExp(e.delimiter)?e.delimiter:i.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:i.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:i.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:i.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:i.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:i.strictNullHandling}}(t);if(""===e||null==e)return r.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var r,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,u=t.parameterLimit===1/0?void 0:t.parameterLimit,f=c.split(t.delimiter,u),l=-1,p=t.charset;if(t.charsetSentinel)for(r=0;r<f.length;++r)0===f[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===f[r]?p="utf-8":"utf8=%26%2310003%3B"===f[r]&&(p="iso-8859-1"),l=r,r=f.length);for(r=0;r<f.length;++r)if(r!==l){var d,h,m=f[r],y=m.indexOf("]="),g=-1===y?m.indexOf("="):y+1;-1===g?(d=t.decoder(m,i.decoder,p,"key"),h=t.strictNullHandling?null:""):(d=t.decoder(m.slice(0,g),i.decoder,p,"key"),h=t.decoder(m.slice(g+1),i.decoder,p,"value")),h&&t.interpretNumericEntities&&"iso-8859-1"===p&&(h=a(h)),h&&t.comma&&h.indexOf(",")>-1&&(h=h.split(",")),o.call(s,d)?s[d]=n.combine(s[d],h):s[d]=h}return s}(e,r):e,u=r.plainObjects?Object.create(null):{},f=Object.keys(c),l=0;l<f.length;++l){var p=f[l],d=s(p,c[p],r);u=n.merge(u,d,r)}return n.compact(u)}},p46w:function(e,t,r){var n,o;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */!function(i){if(void 0===(o="function"==typeof(n=i)?n.call(t,r,t,e):n)||(e.exports=o),!0,e.exports=i(),!!0){var a=window.Cookies,s=window.Cookies=i();s.noConflict=function(){return window.Cookies=a,s}}}((function(){function e(){for(var e=0,t={};e<arguments.length;e++){var r=arguments[e];for(var n in r)t[n]=r[n]}return t}function t(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function r(n){function o(){}function i(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({path:"/"},o.defaults,i)).expires&&(i.expires=new Date(1*new Date+864e5*i.expires)),i.expires=i.expires?i.expires.toUTCString():"";try{var a=JSON.stringify(r);/^[\{\[]/.test(a)&&(r=a)}catch(e){}r=n.write?n.write(r,t):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var s="";for(var c in i)i[c]&&(s+="; "+c,!0!==i[c]&&(s+="="+i[c].split(";")[0]));return document.cookie=t+"="+r+s}}function a(e,r){if("undefined"!=typeof document){for(var o={},i=document.cookie?document.cookie.split("; "):[],a=0;a<i.length;a++){var s=i[a].split("="),c=s.slice(1).join("=");r||'"'!==c.charAt(0)||(c=c.slice(1,-1));try{var u=t(s[0]);if(c=(n.read||n)(c,u)||t(c),r)try{c=JSON.parse(c)}catch(e){}if(o[u]=c,e===u)break}catch(e){}}return e?o[e]:o}}return o.set=i,o.get=function(e){return a(e,!1)},o.getJSON=function(e){return a(e,!0)},o.remove=function(t,r){i(t,"",e(r,{expires:-1}))},o.defaults={},o.withConverter=r,o}((function(){}))}))},sxOR:function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g,i=r("0jNN"),a={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=i.assign({default:a.RFC3986,formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return String(e)}}},a)},tQ2B:function(e,t,r){"use strict";var n=r("xTJ+"),o=r("Rn+g"),i=r("MLWZ"),a=r("w0Vi"),s=r("OTTw"),c=r("LYNF");e.exports=function(e){return new Promise((function(t,u){var f=e.data,l=e.headers;n.isFormData(f)&&delete l["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";l.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,u,n),p=null}},p.onerror=function(){u(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var m=r("eqyj"),y=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;y&&(l[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&n.forEach(l,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete l[t]:p.setRequestHeader(t,e)})),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),u(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},vDqi:function(e,t,r){e.exports=r("zuR4")},w0Vi:function(e,t,r){"use strict";var n=r("xTJ+"),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,a={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}})),a):a}},xAGQ:function(e,t,r){"use strict";var n=r("xTJ+");e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},"xTJ+":function(e,t,r){"use strict";var n=r("HSsa"),o=r("BEtg"),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)u(arguments[n],r);return t},extend:function(e,t,r){return u(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},yK9s:function(e,t,r){"use strict";var n=r("xTJ+");e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},zuR4:function(e,t,r){"use strict";var n=r("xTJ+"),o=r("HSsa"),i=r("CgaS"),a=r("JEQr");function s(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var c=s(a);c.Axios=i,c.create=function(e){return s(n.merge(a,e))},c.Cancel=r("endd"),c.CancelToken=r("jfS+"),c.isCancel=r("Lmem"),c.all=function(e){return Promise.all(e)},c.spread=r("DfZB"),e.exports=c,e.exports.default=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL2FzeW5jLWltcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL3Bvc3QtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL3BlcnNpc3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL21hbmFnZS1wYW5lL2N1c3RvbS1lZGl0b3ItY29tbWFuZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL3BtL2xpYi9tYW5hZ2UtcGFuZS9wYW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvbWFuYWdlLXBhbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmFwaS1zZGstamF2YXNjcmlwdC9idWlsZC9tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmFwaS1zZGstamF2YXNjcmlwdC9idWlsZC9tb2R1bGUvbGliL3Nkay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vcG0vbGliL2Jsb2ctYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9wbS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzLWNvb2tpZS9zcmMvanMuY29va2llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiXSwibmFtZXMiOlsiaGFzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJpc0FycmF5IiwiQXJyYXkiLCJoZXhUYWJsZSIsImFycmF5IiwiaSIsInB1c2giLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwiYXJyYXlUb09iamVjdCIsInNvdXJjZSIsIm9wdGlvbnMiLCJvYmoiLCJwbGFpbk9iamVjdHMiLCJjcmVhdGUiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNzaWduIiwidGFyZ2V0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsImtleSIsImNvbWJpbmUiLCJhIiwiYiIsImNvbmNhdCIsImNvbXBhY3QiLCJ2YWx1ZSIsInF1ZXVlIiwibyIsInByb3AiLCJyZWZzIiwiaXRlbSIsImoiLCJ2YWwiLCJpbmRleE9mIiwicG9wIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwiZGVjb2RlIiwic3RyIiwiZGVjb2RlciIsImNoYXJzZXQiLCJzdHJXaXRob3V0UGx1cyIsInJlcGxhY2UiLCJ1bmVzY2FwZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImUiLCJlbmNvZGUiLCJkZWZhdWx0RW5jb2RlciIsInN0cmluZyIsIlN5bWJvbCIsImNhbGwiLCJTdHJpbmciLCJlc2NhcGUiLCIkMCIsInBhcnNlSW50Iiwic2xpY2UiLCJvdXQiLCJjIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImlzQnVmZmVyIiwiY29uc3RydWN0b3IiLCJpc1JlZ0V4cCIsIm1lcmdlIiwiYWxsb3dQcm90b3R5cGVzIiwibWVyZ2VUYXJnZXQiLCJmb3JFYWNoIiwidGFyZ2V0SXRlbSIsInVybCIsInRlc3QiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJ1dGlscyIsIkludGVyY2VwdG9yTWFuYWdlciIsInRoaXMiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsImRlZmF1bHRzIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNvbmZpZyIsImFyZ3VtZW50cyIsIm1ldGhvZCIsInRvTG93ZXJDYXNlIiwiY2hhaW4iLCJ1bmRlZmluZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJ0aGVuIiwic2hpZnQiLCJkYXRhIiwiY2FsbGJhY2siLCJhcnIiLCJhcHBseSIsInRoaXNBcmciLCJhcmdzIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImlzVW5kZWZpbmVkIiwiYWRhcHRlciIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsInRyYW5zZm9ybVJlcXVlc3QiLCJpc0Zvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsIl9fQ0FOQ0VMX18iLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwib3JpZ2luVVJMIiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJpc1N0cmluZyIsImZvcm1hdHMiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsInByZWZpeCIsImNvbW1hIiwiaW5kaWNlcyIsInJlcGVhdCIsInB1c2hUb0FycmF5IiwidmFsdWVPckFycmF5IiwidG9JU08iLCJEYXRlIiwiZGVmYXVsdEZvcm1hdCIsImFkZFF1ZXJ5UHJlZml4IiwiYWxsb3dEb3RzIiwiY2hhcnNldFNlbnRpbmVsIiwiZGVsaW1pdGVyIiwiZW5jb2RlciIsImVuY29kZVZhbHVlc09ubHkiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJmb3JtYXR0ZXJzIiwic2VyaWFsaXplRGF0ZSIsImRhdGUiLCJza2lwTnVsbHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJvYmplY3QiLCJnZW5lcmF0ZUFycmF5UHJlZml4IiwiZmlsdGVyIiwic29ydCIsIm9iaktleXMiLCJ2YWx1ZXMiLCJvcHRzIiwiVHlwZUVycm9yIiwibm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyIsImFycmF5Rm9ybWF0Iiwiam9pbmVkIiwiY3JlYXRlRXJyb3IiLCJyZWplY3QiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY2FuY2VsVG9rZW4iLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiYXN5bmNDb21wb25lbnQiLCJpbXBvcnRDb21wb25lbnQiLCJsb2FkZXIiLCJjb21wb25lbnQiLCJjbXAiLCJzZXRTdGF0ZSIsIkMiLCJzdGF0ZSIsInByb3BzIiwiQ29tcG9uZW50IiwidGl0bGVzIiwiYWN0aXZlUG9zdElkeCIsIm9uVGl0bGVDbGljayIsIm1hcCIsInRpdGxlIiwiaWR4IiwiaXNBY3RpdmUiLCJvbkNsaWNrIiwiY2xhc3NOYW1lIiwiS0VZX1JFR19FWFAiLCJSZWdFeHAiLCJzZXQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0IiwiZ2V0SXRlbSIsIl9nZXQiLCJfZ2V0UGVyc2lzdG9yS3llcyIsImsiLCJyZW1vdmUiLCJyZW1vdmVJdGVtIiwid2l0aExvY2FsTGlzdCIsImxvY2FsTGlzdCIsImlkTWFwIiwibmV3UG9zdHMiLCJidWlsZEVkaXRvckNvbW1hbmRzIiwiYXBpIiwicG9zdExpc3RVcGRhdGVyIiwiYWN0aXZlIiwibmFtZSIsImNtIiwic3VjY2VzcyIsIndhcm4iLCJ1cGRhdGUiLCJnZXRPcHRpb24iLCJkb2MiLCJnZXRWYWx1ZSIsIm5ld1Bvc3QiLCJQZXJzaXN0b3IiLCJvbGRQb3N0TGlzdCIsInAiLCJwaWQiLCJ0bXBJZCIsInRtcFRpdGxlIiwiY29udGVudCIsImFyZ1N0cmluZyIsInRyaW0iLCJzZXRPcHRpb24iLCJub3ciLCJFZGl0b3IiLCJBc3luY0ltcG9ydCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXIiLCJleGl0IiwidHlwZSIsInBvc3RzIiwidXNlU3RhdGUiLCJwb3N0TGlzdCIsInVwZGF0ZVBvc3RMaXN0IiwiZWRpdGluZ1Bvc3QiLCJsb2NhbENoYW5nZXMiLCJjb250ZW50SWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvblNhdmUiLCJleEFyciIsImJ1aWxkRWRpdG9yRXhBcnIiLCIkZ3VpIiwiJCIsImNsYXNzTGlzdCIsImFkZCIsIlJlYWN0RE9NIiwicmVuZGVyIiwic3RvcmVDb25maWciLCJyZXF1ZXN0Q29uZmlnIiwiYXhpb3MiLCJjb29raWUiLCJwYXRoIiwiaXNCcm93c2VyIiwiZXhpc3RpbmdUb2tlbiIsInNldFRva2VuIiwidXNlcm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiY2xlYXJUb2tlbiIsImF1dGhlbnRpY2F0aW9uIiwiand0IiwiaWRlbnRpZmllciIsInBhc3N3b3JkQ29uZmlybWF0aW9uIiwicHJvdmlkZXIiLCJpZ25vcmVRdWVyeVByZWZpeCIsImNvbnRlbnRUeXBlUGx1cmFsaXplZCIsImNvbnRlbnRUeXBlIiwicXVlcnkiLCJ0b2tlbiIsImNvbWVzRnJvbVN0b3JhZ2UiLCJBdXRob3JpemF0aW9uIiwiQVBJX0NPTkZJRyIsInN0cmFwaSIsIlN0cmFwaSIsImxpc3QiLCJnZXRFbnRyaWVzIiwiX3NvcnQiLCJfbGltaXQiLCJjcmVhdGVFbnRyeSIsInVwZGF0ZUVudHJ5IiwiZGVsZXRlIiwiZGVsZXRlRW50cnkiLCJkb2NUcGwiLCJoYW5kbGVyIiwicGFyYW1zT2JqIiwiY21kU2V0IiwiJHRlcm1pbmFsIiwiYWNjZXNzVG9rZW4iLCJyZXN0UGFyYW1zIiwicG9zdFNESyIsInJ1bk1hbmFnZVBhbmVsIiwiVGVybWluYWwiLCJkZXN0cm95IiwiQ2FuY2VsIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiaXNOdW1iZXIiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJtYXRjaCIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsImNhbmNlbCIsImFycmF5TGltaXQiLCJkZXB0aCIsImludGVycHJldE51bWVyaWNFbnRpdGllcyIsInBhcmFtZXRlckxpbWl0IiwicGFyc2VBcnJheXMiLCJudW1iZXJTdHIiLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUtleXMiLCJnaXZlbktleSIsImNoaWxkIiwic2VnbWVudCIsImV4ZWMiLCJwYXJlbnQiLCJpbmRleCIsImxlYWYiLCJyb290IiwiY2xlYW5Sb290IiwiaXNOYU4iLCIwIiwicGFyc2VPYmplY3QiLCJub3JtYWxpemVQYXJzZU9wdGlvbnMiLCJ0ZW1wT2JqIiwiY2xlYW5TdHIiLCJsaW1pdCIsIkluZmluaXR5Iiwic3BsaXQiLCJza2lwSW5kZXgiLCJwYXJ0IiwiYnJhY2tldEVxdWFsc1BvcyIsInBvcyIsInBhcnNlVmFsdWVzIiwibmV3T2JqIiwiZmFjdG9yeSIsIk9sZENvb2tpZXMiLCJDb29raWVzIiwibm9Db25mbGljdCIsImV4dGVuZCIsInJlc3VsdCIsImF0dHJpYnV0ZXMiLCJzIiwiaW5pdCIsImNvbnZlcnRlciIsInRvVVRDU3RyaW5nIiwic3RyaW5naWZpZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTmFtZSIsImpzb24iLCJqYXIiLCJjb29raWVzIiwiZ2V0SlNPTiIsIndpdGhDb252ZXJ0ZXIiLCJwZXJjZW50VHdlbnRpZXMiLCJ1dGlsIiwiRm9ybWF0IiwiUkZDMTczOCIsIlJGQzM5ODYiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJhdXRoIiwiYnRvYSIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsIm9udGltZW91dCIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImFib3J0Iiwic2VuZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsInN1YnN0ciIsImZucyIsImJpbmQiLCJpc0Z1bmN0aW9uIiwibCIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwibm9ybWFsaXplZE5hbWUiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI2RkFFQSxJQUFJQSxFQUFNQyxPQUFPQyxVQUFVQyxlQUN2QkMsRUFBVUMsTUFBTUQsUUFFaEJFLEVBQVksV0FFWixJQURBLElBQUlDLEVBQVEsR0FDSEMsRUFBSSxFQUFHQSxFQUFJLE1BQU9BLEVBQ3ZCRCxFQUFNRSxLQUFLLE1BQVFELEVBQUksR0FBSyxJQUFNLElBQU1BLEVBQUVFLFNBQVMsS0FBS0MsZUFHNUQsT0FBT0osRUFOSSxHQTRCWEssRUFBZ0IsU0FBdUJDLEVBQVFDLEdBRS9DLElBREEsSUFBSUMsRUFBTUQsR0FBV0EsRUFBUUUs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WSxFQUFNeVUsT0FBT2lFLEVBQVU3WCxFQUFNMUYsVUFBV3NkLEdBR3hDelksRUFBTXlVLE9BQU9pRSxFQUFVRCxHQUVoQkMsRUFJVCxJQUFJOUosRUFBUTJKLEVBQWU1WCxHQUczQmlPLEVBQU0vTixNQUFRQSxFQUdkK04sRUFBTTFTLE9BQVMsU0FBZ0I0RSxHQUM3QixPQUFPeVgsRUFBZXZZLEVBQU1ULE1BQU1vQixFQUFVRyxLQUk5QzhOLEVBQU00QyxPQUFTLEVBQVEsUUFDdkI1QyxFQUFNcUQsWUFBYyxFQUFRLFFBQzVCckQsRUFBTTdGLFNBQVcsRUFBUSxRQUd6QjZGLEVBQU0rSixJQUFNLFNBQWFDLEdBQ3ZCLE9BQU9uWCxRQUFRa1gsSUFBSUMsSUFFckJoSyxFQUFNaUssT0FBUyxFQUFRLFFBRXZCemMsRUFBT0MsUUFBVXVTLEVBR2pCeFMsRUFBT0MsUUFBUXljLFFBQVVsSyIsImZpbGUiOiI0LmI2OWE1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBoZXhUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICBhcnJheS5wdXNoKCclJyArICgoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn0oKSk7XG5cbnZhciBjb21wYWN0UXVldWUgPSBmdW5jdGlvbiBjb21wYWN0UXVldWUocXVldWUpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICB2YXIgY29tcGFjdGVkID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbal0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhY3RlZC5wdXNoKG9ialtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtLm9ialtpdGVtLnByb3BdID0gY29tcGFjdGVkO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSBvcHRpb25zICYmIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyAmJiAob3B0aW9ucy5wbGFpbk9iamVjdHMgfHwgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpKSB8fCAhaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgIWlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBtZXJnZVRhcmdldCA9IGFycmF5VG9PYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SXRlbSA9IHRhcmdldFtpXTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SXRlbSAmJiB0eXBlb2YgdGFyZ2V0SXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gbWVyZ2UodGFyZ2V0SXRlbSwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgICAgIGlmIChoYXMuY2FsbChhY2MsIGtleSkpIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gbWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBtZXJnZVRhcmdldCk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduU2luZ2xlU291cmNlKHRhcmdldCwgc291cmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHRhcmdldCk7XG59O1xuXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHN0ciwgZGVjb2RlciwgY2hhcnNldCkge1xuICAgIHZhciBzdHJXaXRob3V0UGx1cyA9IHN0ci5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIC8vIHVuZXNjYXBlIG5ldmVyIHRocm93cywgbm8gdHJ5Li4uY2F0Y2ggbmVlZGVkOlxuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXMucmVwbGFjZSgvJVswLTlhLWZdezJ9L2dpLCB1bmVzY2FwZSk7XG4gICAgfVxuICAgIC8vIHV0Zi04XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJXaXRob3V0UGx1cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXM7XG4gICAgfVxufTtcblxudmFyIGVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShzdHIsIGRlZmF1bHRFbmNvZGVyLCBjaGFyc2V0KSB7XG4gICAgLy8gVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4gYnkgQnJpYW4gV2hpdGUgKG1zY2RleCkgZm9yIHRoZSBpby5qcyBjb3JlIHF1ZXJ5c3RyaW5nIGxpYnJhcnkuXG4gICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSBzdHI7XG4gICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RyaW5nID0gU3RyaW5nKHN0cik7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICByZXR1cm4gZXNjYXBlKHN0cmluZykucmVwbGFjZSgvJXVbMC05YS1mXXs0fS9naSwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyUyNiUyMycgKyBwYXJzZUludCgkMC5zbGljZSgyKSwgMTYpICsgJyUzQic7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBvdXQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGMgPT09IDB4MkQgLy8gLVxuICAgICAgICAgICAgfHwgYyA9PT0gMHgyRSAvLyAuXG4gICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF9cbiAgICAgICAgICAgIHx8IGMgPT09IDB4N0UgLy8gflxuICAgICAgICAgICAgfHwgKGMgPj0gMHgzMCAmJiBjIDw9IDB4MzkpIC8vIDAtOVxuICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtelxuICAgICAgICAgICAgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4N0EpIC8vIEEtWlxuICAgICAgICApIHtcbiAgICAgICAgICAgIG91dCArPSBzdHJpbmcuY2hhckF0KGkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIGhleFRhYmxlW2NdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHhEODAwIHx8IGMgPj0gMHhFMDAwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhFMCB8IChjID4+IDEyKV0gKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgICBjID0gMHgxMDAwMCArICgoKGMgJiAweDNGRikgPDwgMTApIHwgKHN0cmluZy5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTtcbiAgICAgICAgb3V0ICs9IGhleFRhYmxlWzB4RjAgfCAoYyA+PiAxOCldXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhcnJheVRvT2JqZWN0OiBhcnJheVRvT2JqZWN0LFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgY29tcGFjdDogY29tcGFjdCxcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gICAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBjb21tYTogJ2NvbW1hJyxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xudmFyIHB1c2hUb0FycmF5ID0gZnVuY3Rpb24gKGFyciwgdmFsdWVPckFycmF5KSB7XG4gICAgcHVzaC5hcHBseShhcnIsIGlzQXJyYXkodmFsdWVPckFycmF5KSA/IHZhbHVlT3JBcnJheSA6IFt2YWx1ZU9yQXJyYXldKTtcbn07XG5cbnZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgZGVmYXVsdEZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgIGNoYXJzZXRcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gb2JqLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxpc2hQcmltaXRpdmUob2JqKSB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJykpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSkgOiBwcmVmaXgsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICAgICAgY2hhcnNldFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgICAgICBwcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsga2V5IDogJ1snICsga2V5ICsgJ10nKSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgICAgICBjaGFyc2V0XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiBvcHRzLmVuY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cy5hZGRRdWVyeVByZWZpeCxcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICAgICAgZW5jb2RlOiB0eXBlb2Ygb3B0cy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdHRlcjogZm9ybWF0dGVyLFxuICAgICAgICBzZXJpYWxpemVEYXRlOiB0eXBlb2Ygb3B0cy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0cy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgc2tpcE51bGxzOiB0eXBlb2Ygb3B0cy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdHMuc2tpcE51bGxzIDogZGVmYXVsdHMuc2tpcE51bGxzLFxuICAgICAgICBzb3J0OiB0eXBlb2Ygb3B0cy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5zb3J0IDogbnVsbCxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgb3B0cykge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpO1xuXG4gICAgdmFyIG9iaktleXM7XG4gICAgdmFyIGZpbHRlcjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaiA9IGZpbHRlcignJywgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5hcnJheUZvcm1hdCBpbiBhcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmFycmF5Rm9ybWF0O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiAnaW5kaWNlcycgaW4gb3B0cykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuaW5kaWNlcyA/ICdpbmRpY2VzJyA6ICdyZXBlYXQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gJ2luZGljZXMnO1xuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZUFycmF5UHJlZml4ID0gYXJyYXlQcmVmaXhHZW5lcmF0b3JzW2FycmF5Rm9ybWF0XTtcblxuICAgIGlmICghb2JqS2V5cykge1xuICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIG9iaktleXMuc29ydChvcHRpb25zLnNvcnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5za2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hUb0FycmF5KGtleXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZSA/IG9wdGlvbnMuZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEb3RzLFxuICAgICAgICAgICAgb3B0aW9ucy5zZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzZXRcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihvcHRpb25zLmRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKSwgdGhlIFwibnVtZXJpYyBlbnRpdHlcIiByZXByZXNlbnRhdGlvbiBvZiBhIGNoZWNrbWFya1xuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBhc3luY0NvbXBvbmVudCA9IChpbXBvcnRDb21wb25lbnQsIGxvYWRlciA9IG51bGwpID0+IHtcbiAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgIGNvbXBvbmVudDogbnVsbFxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaW1wb3J0Q29tcG9uZW50KClcbiAgICAgICAgLnRoZW4oY21wID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb21wb25lbnQ6IGNtcC5kZWZhdWx0fSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IEMgPSB0aGlzLnN0YXRlLmNvbXBvbmVudDtcbiAgICAgIHJldHVybiBDID8gPEMgey4uLnRoaXMucHJvcHN9Lz4gOiBsb2FkZXI7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3luY0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0aXRsZXMsXG4gICAgYWN0aXZlUG9zdElkeCxcbiAgICBvblRpdGxlQ2xpY2tcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDx1bD5cbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlcy5tYXAoKHRpdGxlLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gYWN0aXZlUG9zdElkeCA9PT0gaWR4O1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge29uVGl0bGVDbGljayhpZHgpfX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake2lzQWN0aXZlID8gJ2FjdGl2ZScgOiAnJ31gfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIDwvdWw+XG4gIClcbn1cbiIsImNvbnN0IEtFWV9QUkVGSVggPSAncG0tcGVyc2lzdG9yLSc7XG5jb25zdCBLRVlfUkVHX0VYUCA9IG5ldyBSZWdFeHAoJ14nICsgS0VZX1BSRUZJWCk7XG5cbmNvbnN0IHNldCA9IChrZXksIHZhbCkgPT4ge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICBLRVlfUFJFRklYICsga2V5LFxuICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKVxufVxuXG5jb25zdCBnZXQgPSAoa2V5KSA9PiB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFxuICAgIEtFWV9QUkVGSVggKyBrZXlcbiAgKSk7XG59XG5cbmNvbnN0IF9nZXQgPSAoa2V5KSA9PiB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFxuICAgIGtleVxuICApKTtcbn1cblxuY29uc3QgX2dldFBlcnNpc3Rvckt5ZXMgPSAoKSA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpXG4gICAgLmZpbHRlcihrID0+IEtFWV9SRUdfRVhQLnRlc3QoaykpXG59XG5cbmNvbnN0IHJlbW92ZSA9IChrZXkpID0+IHtcbiAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXG4gICAgS0VZX1BSRUZJWCArIGtleVxuICApO1xufVxuXG5jb25zdCBsaXN0ID0gKCkgPT4ge1xuICByZXR1cm4gX2dldFBlcnNpc3Rvckt5ZXMoKS5tYXAoX2dldClcbn1cblxuY29uc3Qgd2l0aExvY2FsTGlzdCA9IChhcnIpID0+IHtcbiAgY29uc3QgbG9jYWxMaXN0ID0gbGlzdCgpO1xuICBjb25zdCBpZE1hcCA9IHt9O1xuICBhcnIuZm9yRWFjaCgoe2lkfSkgPT4ge1xuICAgIGlkTWFwW2lkXSA9IHRydWU7XG4gIH0pXG5cbiAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxvY2FsTGlzdDtcbiAgfVxuXG4gIGNvbnN0IG5ld1Bvc3RzID0gbG9jYWxMaXN0LmZpbHRlcigoeyBpZCB9KSA9PiB7XG4gICAgcmV0dXJuICFpZE1hcFtpZF07XG4gIH0pXG5cbiAgcmV0dXJuIFtcbiAgICAuLi5uZXdQb3N0cyxcbiAgICAuLi5hcnJcbiAgXVxufVxuXG5jb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICBfZ2V0UGVyc2lzdG9yS3llcygpLmZvckVhY2goayA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaylcbiAgfSk7XG59XG5cbmV4cG9ydCB7XG4gIHNldCwgZ2V0LCByZW1vdmUsIGxpc3QsIGRlc3Ryb3ksIHdpdGhMb2NhbExpc3Rcbn1cbiIsImltcG9ydCBoYXNoIGZyb20gJ29iamVjdC1oYXNoJztcbmltcG9ydCAqIGFzIFBlcnNpc3RvciBmcm9tICcuLi8uLi9wZXJzaXN0b3IvJztcblxuY29uc3QgYnVpbGRFZGl0b3JDb21tYW5kcyA9IChhcGksIHBvc3RMaXN0VXBkYXRlciwgeyBhY3RpdmUgfSkgPT4gW3tcbiAgICBuYW1lOiAndXBkYXRlJyxcbiAgICBmbjogKHtlcnJvciwgc3VjY2Vzcywgd2Fybn0sIGNtKSA9PiB7XG4gICAgICBhcGkudXBkYXRlKGNtLmdldE9wdGlvbignY29udGVudElkJyksIGNtLmRvYy5nZXRWYWx1ZSgpKVxuICAgICAgICAudGhlbigobmV3UG9zdCkgPT4ge1xuICAgICAgICAgIFBlcnNpc3Rvci5yZW1vdmUobmV3UG9zdC5pZCk7XG4gICAgICAgICAgcG9zdExpc3RVcGRhdGVyKChvbGRQb3N0TGlzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9sZFBvc3RMaXN0Lm1hcChwID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHAuaWQgPT09IG5ld1Bvc3QuaWRcbiAgICAgICAgICAgICAgICA/IG5ld1Bvc3RcbiAgICAgICAgICAgICAgICA6IHA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgc3VjY2Vzcygn5Y2a5paH5bey5pu05pawJylcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICBlcnJvcign5Y2a5paH5pu05paw5aSx6LSlJylcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAgbmFtZTogJ2RlbGV0ZVRoaXNQb3N0Rm9yZXZlcicsXG4gICAgZm46ICh7ZXJyb3IsIHN1Y2Nlc3MsIHdhcm59LCBjbSkgPT4ge1xuICAgICAgY29uc3QgcGlkID0gY20uZ2V0T3B0aW9uKCdjb250ZW50SWQnKTtcbiAgICAgIFBlcnNpc3Rvci5yZW1vdmUocGlkKTtcbiAgICAgIHBvc3RMaXN0VXBkYXRlcigob2xkUG9zdExpc3QpID0+IHtcbiAgICAgICAgcmV0dXJuIG9sZFBvc3RMaXN0LmZpbHRlcihwID0+IHAuaWQgIT09IHBpZCk7XG4gICAgICB9KTtcblxuICAgICAgYXBpLmRlbGV0ZShwaWQpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBhY3RpdmUoMCk7XG4gICAgICAgICAgc3VjY2Vzcygn5Y2a5paH5rC45LmF5Yig6ZmkJylcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICBlcnJvcign5Y2a5paH5Yig6Zmk5aSx6LSlJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSwgIHtcbiAgICBuYW1lOiAncHVibGlzaCcsXG4gICAgZm46ICh7ZXJyb3IsIHN1Y2Nlc3MsIHdhcm59LCBjbSkgPT4ge1xuICAgICAgY29uc3QgdGl0bGUgPSBjbS5nZXRPcHRpb24oJ25ld1Bvc3RUaXRsZScpO1xuICAgICAgY29uc3QgdG1wSWQgPSBjbS5nZXRPcHRpb24oJ2NvbnRlbnRJZCcpO1xuICAgICAgY29uc3QgdG1wVGl0bGUgPSBQZXJzaXN0b3IuZ2V0KHRtcElkKS50aXRsZTtcblxuICAgICAgY29uc3QgY29udGVudCA9IGNtLmRvYy5nZXRWYWx1ZSgpO1xuICAgICAgaWYgKCEodGl0bGUgfHwgdG1wVGl0bGUpKSB7XG4gICAgICAgIGVycm9yKCfmoIfpopjkuI3og73kuLrnqbohJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICBlcnJvcign5YaF5a655LiN6IO95Li656m6IScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS5jcmVhdGUodGl0bGUgfHwgdG1wVGl0bGUsIGNvbnRlbnQpXG4gICAgICAgIC50aGVuKChuZXdQb3N0KSA9PiB7XG4gICAgICAgICAgUGVyc2lzdG9yLnJlbW92ZSh0bXBJZCk7XG4gICAgICAgICAgcG9zdExpc3RVcGRhdGVyKChvbGRQb3N0TGlzdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgbmV3UG9zdCxcbiAgICAgICAgICAgICAgLi4ub2xkUG9zdExpc3Quc2xpY2UoMSlcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgfSlcbiAgICAgICAgICBzdWNjZXNzKCfljZrmlofliJvlu7rmiJDlip8nKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBlcnJvcign5Y2a5paH5Yib5bu65aSx6LSlJylcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAgbmFtZTogJ25ldycsXG4gICAgZm46ICh7ZXJyb3IsIHN1Y2Nlc3MsIHdhcm59LCBjbSwgcGFyYW1zKSA9PiB7XG4gICAgICBjb25zdCB0aXRsZSA9IHBhcmFtcy5hcmdTdHJpbmcgJiYgcGFyYW1zLmFyZ1N0cmluZy50cmltKCk7XG4gICAgICBpZighdGl0bGUpIHtcbiAgICAgICAgZXJyb3IoJ+agh+mimOS4jeiDveS4uuepujogbmV3ICZsdDt0aXRsZSZndDsnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY20uc2V0T3B0aW9uKCduZXdQb3N0VGl0bGUnLCB0aXRsZSk7XG4gICAgICBjb25zdCB0bXBJZCA9IGhhc2goRGF0ZS5ub3coKSkuc2xpY2UoMTYpO1xuICAgICAgY29uc3QgbmV3UG9zdCA9IHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGlkOiB0bXBJZCxcbiAgICAgICAgY29udGVudDogJydcbiAgICAgIH1cbiAgICAgIFBlcnNpc3Rvci5zZXQodG1wSWQsIG5ld1Bvc3QpO1xuICAgICAgcG9zdExpc3RVcGRhdGVyKChvbGRQb3N0TGlzdCkgPT4ge1xuICAgICAgICByZXR1cm4gW25ld1Bvc3QsIC4uLm9sZFBvc3RMaXN0XTtcbiAgICAgIH0pXG4gICAgICBhY3RpdmUoMCk7XG4gICAgfVxufV07XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkRWRpdG9yQ29tbWFuZHM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBBc3luY0ltcG9ydCBmcm9tICcuL2FzeW5jLWltcG9ydCc7XG5pbXBvcnQgUG9zdExpc3QgZnJvbSAnLi9wb3N0LWxpc3QvJ1xuaW1wb3J0IGJ1aWxkRWRpdG9yRXhBcnIgZnJvbSAnLi9jdXN0b20tZWRpdG9yLWNvbW1hbmRzLydcbmltcG9ydCAqIGFzIFBlcnNpc3RvciBmcm9tICcuLi9wZXJzaXN0b3IvJ1xuXG5jb25zdCBFZGl0b3IgPSBBc3luY0ltcG9ydChcbiAgKCkgPT4ge1xuICAgIHJldHVybiBpbXBvcnQoJ0B6aG91amlhaGFvL2VkaXRvci9saWIvcmVhY3QtY29kZS1taXJyb3InKTtcbiAgfSxcbiAgKFxuICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICdjYWxjKDUwJSAtIDE1cHgpJywgaGVpZ2h0OiAnMTAwJScsIGJvcmRlcjogJ2RvdHRlZCAxcHggIzAwMCd9fSAvPlxuICApXG4pXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGV4aXQsXG4gICAgYXBpLFxuICAgIHBvc3RzID0gW3t9XVxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgW2FjdGl2ZVBvc3RJZHgsIGFjdGl2ZV0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3Bvc3RMaXN0LCB1cGRhdGVQb3N0TGlzdF0gPSB1c2VTdGF0ZShwb3N0cyk7XG5cbiAgY29uc3QgZWRpdGluZ1Bvc3QgPSBwb3N0TGlzdFthY3RpdmVQb3N0SWR4XTtcbiAgY29uc3QgbG9jYWxDaGFuZ2VzID0gUGVyc2lzdG9yLmdldChlZGl0aW5nUG9zdC5pZCk7XG5cbiAgY29uc3QgdGl0bGVGb3JtYXR0ZXIgPSBwID0+IHtcbiAgICByZXR1cm4gYCR7cC50aXRsZX1gO1xuICB9XG5cbiAgY29uc3QgYnVpbGRFZHRDbHMgPSAoKSA9PiB7XG4gICAgbGV0IHR5cGUgPSBsb2NhbENoYW5nZXNcbiAgICAgID8gJ2NoYW5nZWQtZmlsZSdcbiAgICAgIDogJ25vcm1hbC1maWxlJ1xuXG4gICAgaWYgKCFlZGl0aW5nUG9zdC5oYXNPd25Qcm9wZXJ0eSgnY3JlYXRlZEF0JykpIHtcbiAgICAgIHR5cGUgPSAnbmV3LWZpbGUnO1xuICAgIH1cblxuICAgIHJldHVybiBcImVkaXRvci13cmFwcGVyIFwiICsgdHlwZTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWxpc3QtY29sXCI+XG4gICAgICAgIDxQb3N0TGlzdFxuICAgICAgICAgIHRpdGxlcz17cG9zdExpc3QubWFwKHRpdGxlRm9ybWF0dGVyKX1cbiAgICAgICAgICBvblRpdGxlQ2xpY2s9e2FjdGl2ZX1cbiAgICAgICAgICBhY3RpdmVQb3N0SWR4PXthY3RpdmVQb3N0SWR4fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YnVpbGRFZHRDbHMoKX0gPlxuICAgICAgICA8RWRpdG9yXG4gICAgICAgICAgdmFsdWU9e1xuICAgICAgICAgICAgKGxvY2FsQ2hhbmdlcyAmJiBsb2NhbENoYW5nZXMuY29udGVudClcbiAgICAgICAgICAgICAgfHwgZWRpdGluZ1Bvc3QuY29udGVudFxuICAgICAgICAgICAgICB8fCAnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZW50SWQ9e2VkaXRpbmdQb3N0LmlkfVxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIiNmMmYyZjJcIlxuICAgICAgICAgIG9uU2F2ZT17KGlkLCBjb250ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHRpdGxlIH0gPSBlZGl0aW5nUG9zdDtcbiAgICAgICAgICAgIFBlcnNpc3Rvci5zZXQoaWQsIHtcbiAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBjb250ZW50XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH19XG4gICAgICAgICAgZXhBcnI9e2J1aWxkRWRpdG9yRXhBcnIoYXBpLCB1cGRhdGVQb3N0TGlzdCwge1xuICAgICAgICAgICAgYWN0aXZlXG4gICAgICAgICAgfSl9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgeyAkIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuXG5pbXBvcnQgUGFuZSBmcm9tICcuL3BhbmUnO1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCAocG9zdHMsIGFwaSkgPT4ge1xuICBjb25zdCAkZ3VpID0gJCgnI2d1aScpXG4gICRndWkuY2xhc3NMaXN0LmFkZCgnZnVsbHNjcmVlbicpO1xuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgPFBhbmUgcG9zdHM9e3Bvc3RzfSBhcGk9e2FwaX0gLz4sXG4gICAgJGd1aVxuICApXG59XG4iLCJpbXBvcnQgU3RyYXBpIGZyb20gJy4vbGliL3Nkayc7XG5leHBvcnQgZGVmYXVsdCBTdHJhcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhOUVVGTkxFMUJRVTBzVjBGQlZ5eERRVUZETzBGQlF5OUNMR1ZCUVdVc1RVRkJUU3hEUVVGREluMD0iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0ICogYXMgQ29va2llcyBmcm9tICdqcy1jb29raWUnO1xuaW1wb3J0ICogYXMgcXMgZnJvbSAncXMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyYXBpIHtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yLlxuICAgICAqIEBwYXJhbSBiYXNlVVJMIFlvdXIgU3RyYXBpIGhvc3QuXG4gICAgICogQHBhcmFtIGF4aW9zQ29uZmlnIEV4dGVuZCBBeGlvcyBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJhc2VVUkwsIHN0b3JlQ29uZmlnLCByZXF1ZXN0Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTCxcbiAgICAgICAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IHFzLnN0cmluZ2lmeSxcbiAgICAgICAgICAgIC4uLnJlcXVlc3RDb25maWdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmVDb25maWcgPSB7XG4gICAgICAgICAgICBjb29raWU6IHtcbiAgICAgICAgICAgICAgICBrZXk6ICdqd3QnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogJy8nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZToge1xuICAgICAgICAgICAgICAgIGtleTogJ2p3dCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5zdG9yZUNvbmZpZ1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5pc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nVG9rZW47XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5jb29raWUpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1Rva2VuID0gQ29va2llcy5nZXQodGhpcy5zdG9yZUNvbmZpZy5jb29raWUua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdUb2tlbiA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlLmtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRva2VuKGV4aXN0aW5nVG9rZW4sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF4aW9zIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gbWV0aG9kIFJlcXVlc3QgbWV0aG9kXG4gICAgICogQHBhcmFtIHVybCBTZXJ2ZXIgVVJMXG4gICAgICogQHBhcmFtIHJlcXVlc3RDb25maWcgQ3VzdG9tIEF4aW9zIGNvbmZpZ1xuICAgICAqL1xuICAgIGFzeW5jIHJlcXVlc3QobWV0aG9kLCB1cmwsIHJlcXVlc3RDb25maWcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5heGlvcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIC4uLnJlcXVlc3RDb25maWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgbmV3IHVzZXIuXG4gICAgICogQHBhcmFtIHVzZXJuYW1lXG4gICAgICogQHBhcmFtIGVtYWlsXG4gICAgICogQHBhcmFtIHBhc3N3b3JkXG4gICAgICogQHJldHVybnMgQXV0aGVudGljYXRpb24gVXNlciB0b2tlbiBhbmQgcHJvZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIHJlZ2lzdGVyKHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uID0gYXdhaXQgdGhpcy5yZXF1ZXN0KCdwb3N0JywgJy9hdXRoL2xvY2FsL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHVzZXJuYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFRva2VuKGF1dGhlbnRpY2F0aW9uLmp3dCk7XG4gICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9naW4gYnkgZ2V0dGluZyBhbiBhdXRoZW50aWNhdGlvbiB0b2tlbi5cbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBDYW4gZWl0aGVyIGJlIGFuIGVtYWlsIG9yIGEgdXNlcm5hbWUuXG4gICAgICogQHBhcmFtIHBhc3N3b3JkXG4gICAgICogQHJldHVybnMgQXV0aGVudGljYXRpb24gVXNlciB0b2tlbiBhbmQgcHJvZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIGxvZ2luKGlkZW50aWZpZXIsIHBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUb2tlbigpO1xuICAgICAgICBjb25zdCBhdXRoZW50aWNhdGlvbiA9IGF3YWl0IHRoaXMucmVxdWVzdCgncG9zdCcsICcvYXV0aC9sb2NhbCcsIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFRva2VuKGF1dGhlbnRpY2F0aW9uLmp3dCk7XG4gICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gZW1haWwgdG8gYSB1c2VyIHdpdGggdGhlIGxpbmsgb2YgeW91ciByZXNldCBwYXNzd29yZCBwYWdlLlxuICAgICAqIFRoaXMgbGluayBjb250YWlucyBhbiBVUkwgcGFyYW0gY29kZSB3aGljaCBpcyByZXF1aXJlZCB0byByZXNldCB1c2VyIHBhc3N3b3JkLlxuICAgICAqIFJlY2VpdmVkIGxpbmsgdXJsIGZvcm1hdCBodHRwczovL215LWRvbWFpbi5jb20vcmVzdC1wYXNzd29yZD9jb2RlPXByaXZhdGVDb2RlLlxuICAgICAqIEBwYXJhbSBlbWFpbFxuICAgICAqIEBwYXJhbSB1cmwgTGluayB0aGF0IHVzZXIgd2lsbCByZWNlaXZlLlxuICAgICAqL1xuICAgIGFzeW5jIGZvcmdvdFBhc3N3b3JkKGVtYWlsLCB1cmwpIHtcbiAgICAgICAgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdCgncG9zdCcsICcvYXV0aC9mb3Jnb3QtcGFzc3dvcmQnLCB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgdXJsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgdXNlciBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0gY29kZSBJcyB0aGUgdXJsIHBhcmFtcyByZWNlaXZlZCBmcm9tIHRoZSBlbWFpbCBsaW5rIChzZWUgZm9yZ290IHBhc3N3b3JkKS5cbiAgICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmRDb25maXJtYXRpb25cbiAgICAgKi9cbiAgICBhc3luYyByZXNldFBhc3N3b3JkKGNvZGUsIHBhc3N3b3JkLCBwYXNzd29yZENvbmZpcm1hdGlvbikge1xuICAgICAgICB0aGlzLmNsZWFyVG9rZW4oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5yZXF1ZXN0KCdwb3N0JywgJy9hdXRoL3Jlc2V0LXBhc3N3b3JkJywge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmRDb25maXJtYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBjb25uZWN0IHByb3ZpZGVyIFVSTFxuICAgICAqIEBwYXJhbSBwcm92aWRlclxuICAgICAqL1xuICAgIGdldFByb3ZpZGVyQXV0aGVudGljYXRpb25VcmwocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuYXhpb3MuZGVmYXVsdHMuYmFzZVVSTH0vY29ubmVjdC8ke3Byb3ZpZGVyfWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZSB0aGUgdXNlciB3aXRoIHRoZSB0b2tlbiBwcmVzZW50IG9uIHRoZSBVUkwgKGZvciBicm93c2VyKSBvciBpbiBgcGFyYW1zYCAob24gTm9kZS5qcylcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXJcbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICovXG4gICAgYXN5bmMgYXV0aGVudGljYXRlUHJvdmlkZXIocHJvdmlkZXIsIHBhcmFtcykge1xuICAgICAgICB0aGlzLmNsZWFyVG9rZW4oKTtcbiAgICAgICAgLy8gSGFuZGxpbmcgYnJvd3NlciBxdWVyeVxuICAgICAgICBpZiAodGhpcy5pc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgcGFyYW1zID0gcXMucGFyc2Uod2luZG93LmxvY2F0aW9uLnNlYXJjaCwgeyBpZ25vcmVRdWVyeVByZWZpeDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdXRoZW50aWNhdGlvbiA9IGF3YWl0IHRoaXMucmVxdWVzdCgnZ2V0JywgYC9hdXRoLyR7cHJvdmlkZXJ9L2NhbGxiYWNrYCwge1xuICAgICAgICAgICAgcGFyYW1zXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFRva2VuKGF1dGhlbnRpY2F0aW9uLmp3dCk7XG4gICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBlbnRyaWVzXG4gICAgICogQHBhcmFtIGNvbnRlbnRUeXBlUGx1cmFsaXplZFxuICAgICAqIEBwYXJhbSBwYXJhbXMgRmlsdGVyIGFuZCBvcmRlciBxdWVyaWVzLlxuICAgICAqL1xuICAgIGdldEVudHJpZXMoY29udGVudFR5cGVQbHVyYWxpemVkLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0JywgYC8ke2NvbnRlbnRUeXBlUGx1cmFsaXplZH1gLCB7XG4gICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG90YWwgY291bnQgb2YgZW50cmllcyB3aXRoIHRoZSBwcm92aWRlZCBjcml0ZXJpYVxuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVxuICAgICAqIEBwYXJhbSBwYXJhbXMgRmlsdGVyIGFuZCBvcmRlciBxdWVyaWVzLlxuICAgICAqL1xuICAgIGdldEVudHJ5Q291bnQoY29udGVudFR5cGUsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCBgLyR7Y29udGVudFR5cGV9L2NvdW50YCwge1xuICAgICAgICAgICAgcGFyYW1zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzcGVjaWZpYyBlbnRyeVxuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVBsdXJhbGl6ZWQgVHlwZSBvZiBlbnRyeSBwbHVyYWxpemVkXG4gICAgICogQHBhcmFtIGlkIElEIG9mIGVudHJ5XG4gICAgICovXG4gICAgZ2V0RW50cnkoY29udGVudFR5cGVQbHVyYWxpemVkLCBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCBgLyR7Y29udGVudFR5cGVQbHVyYWxpemVkfS8ke2lkfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgZGF0YVxuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVBsdXJhbGl6ZWQgVHlwZSBvZiBlbnRyeSBwbHVyYWxpemVkXG4gICAgICogQHBhcmFtIGRhdGEgTmV3IGVudHJ5XG4gICAgICovXG4gICAgY3JlYXRlRW50cnkoY29udGVudFR5cGVQbHVyYWxpemVkLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ3Bvc3QnLCBgLyR7Y29udGVudFR5cGVQbHVyYWxpemVkfWAsIHtcbiAgICAgICAgICAgIGRhdGFcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBkYXRhXG4gICAgICogQHBhcmFtIGNvbnRlbnRUeXBlUGx1cmFsaXplZCBUeXBlIG9mIGVudHJ5IHBsdXJhbGl6ZWRcbiAgICAgKiBAcGFyYW0gaWQgSUQgb2YgZW50cnlcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIHVwZGF0ZUVudHJ5KGNvbnRlbnRUeXBlUGx1cmFsaXplZCwgaWQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgncHV0JywgYC8ke2NvbnRlbnRUeXBlUGx1cmFsaXplZH0vJHtpZH1gLCB7XG4gICAgICAgICAgICBkYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZW50cnlcbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVQbHVyYWxpemVkIFR5cGUgb2YgZW50cnkgcGx1cmFsaXplZFxuICAgICAqIEBwYXJhbSBpZCBJRCBvZiBlbnRyeVxuICAgICAqL1xuICAgIGRlbGV0ZUVudHJ5KGNvbnRlbnRUeXBlUGx1cmFsaXplZCwgaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZGVsZXRlJywgYC8ke2NvbnRlbnRUeXBlUGx1cmFsaXplZH0vJHtpZH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhcmNoIGZvciBmaWxlc1xuICAgICAqIEBwYXJhbSBxdWVyeSBLZXl3b3Jkc1xuICAgICAqL1xuICAgIHNlYXJjaEZpbGVzKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldCcsIGAvdXBsb2FkL3NlYXJjaC8ke2RlY29kZVVSSUNvbXBvbmVudChxdWVyeSl9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBmaWxlc1xuICAgICAqIEBwYXJhbSBwYXJhbXMgRmlsdGVyIGFuZCBvcmRlciBxdWVyaWVzXG4gICAgICogQHJldHVybnMgT2JqZWN0W10gRmlsZXMgZGF0YVxuICAgICAqL1xuICAgIGdldEZpbGVzKHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCAnL3VwbG9hZC9maWxlcycsIHtcbiAgICAgICAgICAgIHBhcmFtc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGZpbGVcbiAgICAgKiBAcGFyYW0gaWQgSUQgb2YgZW50cnlcbiAgICAgKi9cbiAgICBnZXRGaWxlKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldCcsIGAvdXBsb2FkL2ZpbGVzLyR7aWR9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwbG9hZCBmaWxlc1xuICAgICAqXG4gICAgICogIyMjIEJyb3dzZXIgZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAqIGZvcm0uYXBwZW5kKCdmaWxlcycsIGZpbGVJbnB1dEVsZW1lbnQuZmlsZXNbMF0sICdmaWxlLW5hbWUuZXh0Jyk7XG4gICAgICogZm9ybS5hcHBlbmQoJ2ZpbGVzJywgZmlsZUlucHV0RWxlbWVudC5maWxlc1sxXSwgJ2ZpbGUtMi1uYW1lLmV4dCcpO1xuICAgICAqIGNvbnN0IGZpbGVzID0gYXdhaXQgc3RyYXBpLnVwbG9hZChmb3JtKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyBOb2RlLmpzIGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IEZvcm1EYXRhID0gcmVxdWlyZSgnZm9ybS1kYXRhJyk7XG4gICAgICogY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgICAqIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgKiBmb3JtLmFwcGVuZCgnZmlsZXMnLCBmcy5jcmVhdGVSZWFkU3RyZWFtKCcuL2ZpbGUtbmFtZS5leHQnKSwgJ2ZpbGUtbmFtZS5leHQnKTtcbiAgICAgKiBjb25zdCBmaWxlcyA9IGF3YWl0IHN0cmFwaS51cGxvYWQoZm9ybSwge1xuICAgICAqICAgaGVhZGVyczogZm9ybS5nZXRIZWFkZXJzKClcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIEZvcm1EYXRhXG4gICAgICogQHBhcmFtIHJlcXVlc3RDb25maWdcbiAgICAgKi9cbiAgICB1cGxvYWQoZGF0YSwgcmVxdWVzdENvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdwb3N0JywgJy91cGxvYWQnLCB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgLi4ucmVxdWVzdENvbmZpZ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRva2VuIG9uIEF4aW9zIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcGFyYW0gdG9rZW4gUmV0cmlldmVkIGJ5IHJlZ2lzdGVyIG9yIGxvZ2luXG4gICAgICovXG4gICAgc2V0VG9rZW4odG9rZW4sIGNvbWVzRnJvbVN0b3JhZ2UpIHtcbiAgICAgICAgdGhpcy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICAgIGlmICh0aGlzLmlzQnJvd3NlcigpICYmICFjb21lc0Zyb21TdG9yYWdlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yZUNvbmZpZy5sb2NhbFN0b3JhZ2Uua2V5LCBKU09OLnN0cmluZ2lmeSh0b2tlbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVDb25maWcuY29va2llKSB7XG4gICAgICAgICAgICAgICAgQ29va2llcy5zZXQodGhpcy5zdG9yZUNvbmZpZy5jb29raWUua2V5LCB0b2tlbiwgdGhpcy5zdG9yZUNvbmZpZy5jb29raWUub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRva2VuIGZyb20gQXhpb3MgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIGNsZWFyVG9rZW4oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XG4gICAgICAgIGlmICh0aGlzLmlzQnJvd3NlcigpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5zdG9yZUNvbmZpZy5sb2NhbFN0b3JhZ2Uua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZSkge1xuICAgICAgICAgICAgICAgIENvb2tpZXMucmVtb3ZlKHRoaXMuc3RvcmVDb25maWcuY29va2llLmtleSwgdGhpcy5zdG9yZUNvbmZpZy5jb29raWUub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgaXQgcnVucyBvbiBicm93c2VyXG4gICAgICovXG4gICAgaXNCcm93c2VyKCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJSckxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwyeHBZaTl6WkdzdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVDBGQlR5eExRVUV5UkN4TlFVRk5MRTlCUVU4c1EwRkJRenRCUVVOb1JpeFBRVUZQTEV0QlFVc3NUMEZCVHl4TlFVRk5MRmRCUVZjc1EwRkJRenRCUVVOeVF5eFBRVUZQTEV0QlFVc3NSVUZCUlN4TlFVRk5MRWxCUVVrc1EwRkJRenRCUVRaQ2VrSXNUVUZCVFN4RFFVRkRMRTlCUVU4c1QwRkJUeXhOUVVGTk8wbEJTWHBDT3pzN08wOUJTVWM3U1VGRFNDeFpRVU5GTEU5QlFXVXNSVUZEWml4WFFVRjVRaXhGUVVONlFpeGhRVUZyUXp0UlFVVnNReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkRlRUlzVDBGQlR6dFpRVU5RTEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eFRRVUZUTzFsQlF6bENMRWRCUVVjc1lVRkJZVHRUUVVOcVFpeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSE8xbEJRMnBDTEUxQlFVMHNSVUZCUlR0blFrRkRUaXhIUVVGSExFVkJRVVVzUzBGQlN6dG5Ra0ZEVml4UFFVRlBMRVZCUVVVN2IwSkJRMUFzU1VGQlNTeEZRVUZGTEVkQlFVYzdhVUpCUTFZN1lVRkRSanRaUVVORUxGbEJRVmtzUlVGQlJUdG5Ra0ZEV2l4SFFVRkhMRVZCUVVVc1MwRkJTenRoUVVOWU8xbEJRMFFzUjBGQlJ5eFhRVUZYTzFOQlEyWXNRMEZCUXp0UlFVVkdMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeEZRVUZGTzFsQlEzQkNMRWxCUVVrc1lVRkJZU3hEUVVGRE8xbEJRMnhDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVU3WjBKQlF6TkNMR0ZCUVdFc1IwRkJSeXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJGQlF6RkVPMmxDUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4WlFVRlpMRVZCUVVVN1owSkJRM2hETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVTndSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NRMEZCUXl4SFFVRkhMRU5CUTNoQ0xFTkJRVU1zUTBGQlF6dGhRVU5rTzFsQlEwUXNTVUZCU1N4aFFVRmhMRVZCUVVVN1owSkJRMnBDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEzQkRPMU5CUTBZN1NVRkRTQ3hEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVTnNRaXhOUVVGakxFVkJRMlFzUjBGQlZ5eEZRVU5ZTEdGQlFXdERPMUZCUld4RExFbEJRVWs3V1VGRFJpeE5RVUZOTEZGQlFWRXNSMEZCYTBJc1RVRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXp0blFrRkRka1FzVFVGQlRUdG5Ra0ZEVGl4SFFVRkhPMmRDUVVOSUxFZEJRVWNzWVVGQllUdGhRVU5xUWl4RFFVRkRMRU5CUVVNN1dVRkRTQ3hQUVVGUExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVMEZEZEVJN1VVRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdFpRVU5rTEVsQlFVa3NTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSVHRuUWtGRGJFSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRoUVVNNVF6dHBRa0ZCVFR0blFrRkRUQ3hOUVVGTkxFdEJRVXNzUTBGQlF6dGhRVU5pTzFOQlEwWTdTVUZEU0N4RFFVRkRPMGxCUlVRN096czdPenRQUVUxSE8wbEJRMGtzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZEYmtJc1VVRkJaMElzUlVGRGFFSXNTMEZCWVN4RlFVTmlMRkZCUVdkQ08xRkJSV2hDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVOc1FpeE5RVUZOTEdOQlFXTXNSMEZCYlVJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVU4yUkN4TlFVRk5MRVZCUTA0c2MwSkJRWE5DTEVWQlEzUkNPMWxCUTBVc1NVRkJTU3hGUVVGRk8yZENRVU5LTEV0QlFVczdaMEpCUTB3c1VVRkJVVHRuUWtGRFVpeFJRVUZSTzJGQlExUTdVMEZEUml4RFFVTkdMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOc1F5eFBRVUZQTEdOQlFXTXNRMEZCUXp0SlFVTjRRaXhEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVTm9RaXhWUVVGclFpeEZRVU5zUWl4UlFVRm5RanRSUVVWb1FpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1VVRkRiRUlzVFVGQlRTeGpRVUZqTEVkQlFXMUNMRTFCUVUwc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGRGRrUXNUVUZCVFN4RlFVTk9MR0ZCUVdFc1JVRkRZanRaUVVORkxFbEJRVWtzUlVGQlJUdG5Ra0ZEU2l4VlFVRlZPMmRDUVVOV0xGRkJRVkU3WVVGRFZEdFRRVU5HTEVOQlEwWXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTJ4RExFOUJRVThzWTBGQll5eERRVUZETzBsQlEzaENMRU5CUVVNN1NVRkZSRHM3T3pzN08wOUJUVWM3U1VGRFNTeExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVdFc1JVRkJSU3hIUVVGWE8xRkJRM0JFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVOc1FpeE5RVUZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxIVkNRVUYxUWl4RlFVRkZPMWxCUTJ4RUxFbEJRVWtzUlVGQlJUdG5Ra0ZEU2l4TFFVRkxPMmRDUVVOTUxFZEJRVWM3WVVGRFNqdFRRVU5HTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSkxFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlEzaENMRWxCUVZrc1JVRkRXaXhSUVVGblFpeEZRVU5vUWl4dlFrRkJORUk3VVVGRk5VSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJRMnhDTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzYzBKQlFYTkNMRVZCUVVVN1dVRkRha1FzU1VGQlNTeEZRVUZGTzJkQ1FVTktMRWxCUVVrN1owSkJRMG9zVVVGQlVUdG5Ra0ZEVWl4dlFrRkJiMEk3WVVGRGNrSTdVMEZEUml4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBrc05FSkJRVFJDTEVOQlFVTXNVVUZCYTBJN1VVRkRjRVFzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzV1VGQldTeFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTTVSQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxFdEJRVXNzUTBGQlF5eHZRa0ZCYjBJc1EwRkRMMElzVVVGQmEwSXNSVUZEYkVJc1RVRkJjMEk3VVVGRmRFSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJRMnhDTEhsQ1FVRjVRanRSUVVONlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJSVHRaUVVOd1FpeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRlRVU3VVVGRFJDeE5RVUZOTEdOQlFXTXNSMEZCYlVJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVU4yUkN4TFFVRkxMRVZCUTB3c1UwRkJVeXhSUVVGUkxGZEJRVmNzUlVGRE5VSTdXVUZEUlN4TlFVRk5PMU5CUTFBc1EwRkRSaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGJFTXNUMEZCVHl4alFVRmpMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNTeFZRVUZWTEVOQlEyWXNjVUpCUVRaQ0xFVkJRemRDTEUxQlFYRkRPMUZCUlhKRExFOUJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3h4UWtGQmNVSXNSVUZCUlN4RlFVRkZPMWxCUTNSRUxFMUJRVTA3VTBGRFVDeERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTkpMR0ZCUVdFc1EwRkRiRUlzVjBGQmJVSXNSVUZEYmtJc1RVRkJjVU03VVVGRmNrTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEZkQlFWY3NVVUZCVVN4RlFVRkZPMWxCUTJ4RUxFMUJRVTA3VTBGRFVDeERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTkpMRkZCUVZFc1EwRkJReXh4UWtGQk5rSXNSVUZCUlN4RlFVRlZPMUZCUTNaRUxFOUJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3h4UWtGQmNVSXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRMmhGTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwa3NWMEZCVnl4RFFVTm9RaXh4UWtGQk5rSXNSVUZETjBJc1NVRkJaME03VVVGRmFFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEhGQ1FVRnhRaXhGUVVGRkxFVkJRVVU3V1VGRGRrUXNTVUZCU1R0VFFVTk1MRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5KTEZkQlFWY3NRMEZEYUVJc2NVSkJRVFpDTEVWQlF6ZENMRVZCUVZVc1JVRkRWaXhKUVVGblF6dFJRVVZvUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NjVUpCUVhGQ0xFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVTdXVUZETlVRc1NVRkJTVHRUUVVOTUxFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwa3NWMEZCVnl4RFFVTm9RaXh4UWtGQk5rSXNSVUZETjBJc1JVRkJWVHRSUVVWV0xFOUJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3h4UWtGQmNVSXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRMjVGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNTeFhRVUZYTEVOQlFVTXNTMEZCWVR0UlFVTTVRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMR3RDUVVGclFpeHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZETlVVc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTU3hSUVVGUkxFTkJRVU1zVFVGQmNVTTdVVUZEYmtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4bFFVRmxMRVZCUVVVN1dVRkRNVU1zVFVGQlRUdFRRVU5RTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU1N4UFFVRlBMRU5CUVVNc1JVRkJWVHRSUVVOMlFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxHbENRVUZwUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRM0JFTEVOQlFVTTdTVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMDlCZDBKSE8wbEJRMGtzVFVGQlRTeERRVU5ZTEVsQlFXTXNSVUZEWkN4aFFVRnJRenRSUVVWc1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUlVGQlJUdFpRVU55UXl4SlFVRkpPMWxCUTBvc1IwRkJSeXhoUVVGaE8xTkJRMnBDTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU1N4UlFVRlJMRU5CUVVNc1MwRkJZU3hGUVVGRkxHZENRVUV3UWp0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUjBGQlJ5eFRRVUZUTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTNKRkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVWQlFVVTdXVUZEZWtNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlR0blFrRkRha01zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUTNwQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1JVRkRha01zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkRkRUlzUTBGQlF6dGhRVU5JTzFsQlEwUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJUdG5Ra0ZETTBJc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGRFZDeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRek5DTEV0QlFVc3NSVUZEVEN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlEyaERMRU5CUVVNN1lVRkRTRHRUUVVOR08wbEJRMGdzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBrc1ZVRkJWVHRSUVVObUxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZEZUVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVTdXVUZEY0VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlR0blFrRkRha01zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1lVRkRia1U3V1VGRFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRk8yZENRVU16UWl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVOYUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkRNMElzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVOb1F5eERRVUZETzJGQlEwZzdVMEZEUmp0SlFVTklMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5MTEZOQlFWTTdVVUZEWml4UFFVRlBMRTlCUVU4c1RVRkJUU3hMUVVGTExGZEJRVmNzUTBGQlF6dEpRVU4yUXl4RFFVRkRPME5CUTBZaWZRPT0iLCJpbXBvcnQgU3RyYXBpIGZyb20gJ3N0cmFwaS1zZGstamF2YXNjcmlwdCc7XG5cbmNvbnN0IEFQSV9DT05GSUcgPSB7XG4gIGJhc2VVUkw6ICdodHRwczovL2FwaS56amguaW0nLFxuICBjb250ZW50VHlwZTogJ3Bvc3RzJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgKHRva2VuKSA9PiB7XG4gIGNvbnN0IHN0cmFwaSA9IG5ldyBTdHJhcGkoXG4gICAgQVBJX0NPTkZJRy5iYXNlVVJMLFxuICAgIHt9LFxuICAgIHtcbiAgICAgIGhlYWRlcnM6IHtBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YH0sXG4gICAgfVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgbGlzdDogKCkgPT4ge1xuICAgICAgcmV0dXJuIHN0cmFwaS5nZXRFbnRyaWVzKEFQSV9DT05GSUcuY29udGVudFR5cGUsIHtcbiAgICAgICAgX3NvcnQ6ICdjcmVhdGVkQXQ6ZGVzYycsXG4gICAgICAgIF9saW1pdDogMTBcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY3JlYXRlOiAodGl0bGUsIGNvbnRlbnQpID0+IHtcbiAgICAgIHJldHVybiBzdHJhcGkuY3JlYXRlRW50cnkoQVBJX0NPTkZJRy5jb250ZW50VHlwZSwge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgZGF0ZTogKG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogKGlkLCBjb250ZW50KSA9PiB7XG4gICAgICByZXR1cm4gc3RyYXBpLnVwZGF0ZUVudHJ5KEFQSV9DT05GSUcuY29udGVudFR5cGUsIGlkLCB7XG4gICAgICAgIGNvbnRlbnQsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogKGlkKSA9PiB7XG4gICAgICByZXR1cm4gc3RyYXBpLmRlbGV0ZUVudHJ5KEFQSV9DT05GSUcuY29udGVudFR5cGUsIGlkKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGRvY1RwbCB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuaW1wb3J0IHJ1bk1hbmFnZVBhbmVsIGZyb20gJy4vbWFuYWdlLXBhbmUnO1xuaW1wb3J0IHBvc3RTREsgZnJvbSAnLi9ibG9nLWFwaS8nO1xuaW1wb3J0IHsgd2l0aExvY2FsTGlzdCB9IGZyb20gJy4vcGVyc2lzdG9yLyc7XG5cbmNvbnN0IGRvYyA9IGRvY1RwbCgncG0nLCAncG0gW2FjY2VzcyB0b2tlbl0nLCAncG9zdHMgbWFuYWdlciBmb3IgbXkgYmxvZy4nKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZG9jLFxuICBoYW5kbGVyOiBhc3luYyAoXG4gICAgcGFyYW1zT2JqLFxuICAgIGNtZFNldCxcbiAgICAkdGVybWluYWwsXG4gICAge1xuICAgICAgcmVzdFBhcmFtczogYWNjZXNzVG9rZW5cbiAgICB9XG4gICkgPT4ge1xuICAgIGlmIChhY2Nlc3NUb2tlbikge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BtLWFjY2Vzcy10b2tlbicsIGFjY2Vzc1Rva2VuKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwbS1hY2Nlc3MtdG9rZW4nKTtcblxuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHJldHVybiAnYWNjZXNzIHRva2VuIG1pc3NpbmchJztcbiAgICB9XG5cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGNvbnN0IGFwaSA9IHBvc3RTREsodG9rZW4pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcG9zdHMgPSBhd2FpdCBhcGkubGlzdCgpO1xuICAgICAgICBydW5NYW5hZ2VQYW5lbCh3aXRoTG9jYWxMaXN0KHBvc3RzKSwgYXBpKTtcbiAgICAgICAgVGVybWluYWwgJiYgVGVybWluYWwuZGVzdHJveSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gXCJFcnJvcjogSW52YWxpZCBBY2Nlc3MgVG9rZW4uIFxcbkFub255bW91cyBtb2RlIGlzIHVuc3VwcG9ydCByaWdodCBub3cuXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLFxuICAgIGFycmF5TGltaXQ6IDIwLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBjb21tYTogZmFsc2UsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBhcnNlQXJyYXlzOiB0cnVlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGludGVycHJldE51bWVyaWNFbnRpdGllcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxcZCspOy9nLCBmdW5jdGlvbiAoJDAsIG51bWJlclN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7XG4gICAgfSk7XG59O1xuXG4vLyBUaGlzIGlzIHdoYXQgYnJvd3NlcnMgd2lsbCBzdWJtaXQgd2hlbiB0aGUg4pyTIGNoYXJhY3RlciBvY2N1cnMgaW4gYW5cbi8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZ1xuLy8gdGhlIGZvcm0gaXMgaXNvLTg4NTktMSwgb3Igd2hlbiB0aGUgc3VibWl0dGVkIGZvcm0gaGFzIGFuIGFjY2VwdC1jaGFyc2V0XG4vLyBhdHRyaWJ1dGUgb2YgaXNvLTg4NTktMS4gUHJlc3VtYWJseSBhbHNvIHdpdGggb3RoZXIgY2hhcnNldHMgdGhhdCBkbyBub3QgY29udGFpblxuLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuXG52YXIgaXNvU2VudGluZWwgPSAndXRmOD0lMjYlMjMxMDAwMyUzQic7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKVxuXG4vLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnQtZW5jb2RlZCB1dGYtOCBvY3RldHMgcmVwcmVzZW50aW5nIGEgY2hlY2ttYXJrLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgYWN0dWFsbHkgaXMgdXRmLTggZW5jb2RlZC5cbnZhciBjaGFyc2V0U2VudGluZWwgPSAndXRmOD0lRTIlOUMlOTMnOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG5cbnZhciBwYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMoc3RyLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICB2YXIgbGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQ7XG4gICAgdmFyIHBhcnRzID0gY2xlYW5TdHIuc3BsaXQob3B0aW9ucy5kZWxpbWl0ZXIsIGxpbWl0KTtcbiAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kXG4gICAgdmFyIGk7XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldDtcbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uaW5kZXhPZigndXRmOD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IGlzb1NlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAnaXNvLTg4NTktMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXBJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaSA9IHBhcnRzLmxlbmd0aDsgLy8gVGhlIGVzbGludCBzZXR0aW5ncyBkbyBub3QgYWxsb3cgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcblxuICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTtcbiAgICAgICAgdmFyIHBvcyA9IGJyYWNrZXRFcXVhbHNQb3MgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBicmFja2V0RXF1YWxzUG9zICsgMTtcblxuICAgICAgICB2YXIga2V5LCB2YWw7XG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZShwb3MgKyAxKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuY29tbWEgJiYgdmFsLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWwuc3BsaXQoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zKSB7XG4gICAgdmFyIGxlYWYgPSB2YWw7XG5cbiAgICBmb3IgKHZhciBpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIG9iajtcbiAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTtcblxuICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7XG4gICAgICAgICAgICBvYmogPSBbXS5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGNsZWFuUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IG9wdGlvbnMuZGVwdGggPiAwICYmIGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChvcHRpb25zLmRlcHRoID4gMCAmJiAoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG52YXIgbm9ybWFsaXplUGFyc2VPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmRlY29kZXIgIT09IG51bGwgJiYgb3B0cy5kZWNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZWNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuY2hhcnNldCA6IG9wdHMuY2hhcnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hOiB0eXBlb2Ygb3B0cy5jb21tYSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jb21tYSA6IGRlZmF1bHRzLmNvbW1hLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMi4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyO1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKCFyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIpIHtcblx0XHR2YXIgT2xkQ29va2llcyA9IHdpbmRvdy5Db29raWVzO1xuXHRcdHZhciBhcGkgPSB3aW5kb3cuQ29va2llcyA9IGZhY3RvcnkoKTtcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5Db29raWVzID0gT2xkQ29va2llcztcblx0XHRcdHJldHVybiBhcGk7XG5cdFx0fTtcblx0fVxufShmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlIChzKSB7XG5cdFx0cmV0dXJuIHMucmVwbGFjZSgvKCVbMC05QS1aXXsyfSkrL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkoKSB7fVxuXG5cdFx0ZnVuY3Rpb24gc2V0IChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGF0dHJpYnV0ZXMgPSBleHRlbmQoe1xuXHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdH0sIGFwaS5kZWZhdWx0cywgYXR0cmlidXRlcyk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXR0cmlidXRlcy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpICogMSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlJ3JlIHVzaW5nIFwiZXhwaXJlc1wiIGJlY2F1c2UgXCJtYXgtYWdlXCIgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gYXR0cmlidXRlcy5leHBpcmVzID8gYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdFx0aWYgKC9eW1xce1xcW10vLnRlc3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXG5cdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSA/XG5cdFx0XHRcdGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KSA6XG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDNBfDNDfDNFfDNEfDJGfDNGfDQwfDVCfDVEfDVFfDYwfDdCfDdEfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpXG5cdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpXG5cdFx0XHRcdC5yZXBsYWNlKC9bXFwoXFwpXS9nLCBlc2NhcGUpO1xuXG5cdFx0XHR2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG5cdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXHRcdFx0XHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29uc2lkZXJzIFJGQyA2MjY1IHNlY3Rpb24gNS4yOlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0Ly8gMy4gIElmIHRoZSByZW1haW5pbmcgdW5wYXJzZWQtYXR0cmlidXRlcyBjb250YWlucyBhICV4M0IgKFwiO1wiKVxuXHRcdFx0XHQvLyAgICAgY2hhcmFjdGVyOlxuXHRcdFx0XHQvLyBDb25zdW1lIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHVwIHRvLFxuXHRcdFx0XHQvLyBub3QgaW5jbHVkaW5nLCB0aGUgZmlyc3QgJXgzQiAoXCI7XCIpIGNoYXJhY3Rlci5cblx0XHRcdFx0Ly8gLi4uXG5cdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnNwbGl0KCc7JylbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgdmFsdWUgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldCAoa2V5LCBqc29uKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBqYXIgPSB7fTtcblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLlxuXHRcdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuXHRcdFx0XHRpZiAoIWpzb24gJiYgY29va2llLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzWzBdKTtcblx0XHRcdFx0XHRjb29raWUgPSAoY29udmVydGVyLnJlYWQgfHwgY29udmVydGVyKShjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRkZWNvZGUoY29va2llKTtcblxuXHRcdFx0XHRcdGlmIChqc29uKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb29raWUgPSBKU09OLnBhcnNlKGNvb2tpZSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGphcltuYW1lXSA9IGNvb2tpZTtcblxuXHRcdFx0XHRcdGlmIChrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGtleSA/IGphcltrZXldIDogamFyO1xuXHRcdH1cblxuXHRcdGFwaS5zZXQgPSBzZXQ7XG5cdFx0YXBpLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCBmYWxzZSAvKiByZWFkIGFzIHJhdyAqLyk7XG5cdFx0fTtcblx0XHRhcGkuZ2V0SlNPTiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCB0cnVlIC8qIHJlYWQgYXMganNvbiAqLyk7XG5cdFx0fTtcblx0XHRhcGkucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgYXR0cmlidXRlcykge1xuXHRcdFx0c2V0KGtleSwgJycsIGV4dGVuZChhdHRyaWJ1dGVzLCB7XG5cdFx0XHRcdGV4cGlyZXM6IC0xXG5cdFx0XHR9KSk7XG5cdFx0fTtcblxuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLndpdGhDb252ZXJ0ZXIgPSBpbml0O1xuXG5cdFx0cmV0dXJuIGFwaTtcblx0fVxuXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWwuYXNzaWduKFxuICAgIHtcbiAgICAgICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICAgICAgZm9ybWF0dGVyczoge1xuICAgICAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBGb3JtYXRcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iXSwic291cmNlUm9vdCI6IiJ9