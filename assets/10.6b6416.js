(this.webpackJsonp=this.webpackJsonp||[]).push([[10],{Rf5Z:function(t,n,e){"use strict";e.r(n);var r=e("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,e,r){return r.fromPipe||r.restParams},man:{handler:function(t,n,e,i){var u=i.restParams;if(!n)return!1;if(!u)return Object(r.b)(n.man.doc);if(u&&n[u.trim()]){var c=n[u.trim()];return"object"===o(c)&&Object(r.b)(c.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var e;return"Available commands: \n"+Object.keys(n).sort().map((e="- ",function(t){return e+t})).join("\n")}},u="\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n",c=(Symbol(),Symbol(),function(t,n){n||(n={});var e={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(e.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?e.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach((function(t){e.bools[t]=!0}));var r={};Object.keys(n.alias||{}).forEach((function(t){r[t]=[].concat(n.alias[t]),r[t].forEach((function(n){r[n]=[t].concat(r[t].filter((function(t){return n!==t})))}))})),[].concat(n.string).filter(Boolean).forEach((function(t){e.strings[t]=!0,r[t]&&(e.strings[r[t]]=!0)}));var o=n.default||{},i={_:[]};Object.keys(e.bools).forEach((function(t){c(t,void 0!==o[t]&&o[t])}));var u=[];function c(t,n,o){if(!o||!e.unknownFn||function(t,n){return e.allBools&&/^--[^=]+$/.test(n)||e.strings[t]||e.bools[t]||r[t]}(t,o)||!1!==e.unknownFn(o)){var u=!e.strings[t]&&a(n)?Number(n):n;s(i,t.split("."),u),(r[t]||[]).forEach((function(t){s(i,t.split("."),u)}))}}function s(t,n,r){var o=t;n.slice(0,-1).forEach((function(t){void 0===o[t]&&(o[t]={}),o=o[t]}));var i=n[n.length-1];void 0===o[i]||e.bools[i]||"boolean"==typeof o[i]?o[i]=r:Array.isArray(o[i])?o[i].push(r):o[i]=[o[i],r]}function l(t){return r[t].some((function(t){return e.bools[t]}))}-1!==t.indexOf("--")&&(u=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var f=0;f<t.length;f++){var p=t[f];if(/^--.+=/.test(p)){var b=p.match(/^--([^=]+)=([\s\S]*)$/),d=b[1],h=b[2];e.bools[d]&&(h="false"!==h),c(d,h,p)}else if(/^--no-.+/.test(p)){c(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var v=p.match(/^--(.+)/)[1],y=t[f+1];void 0===y||/^-/.test(y)||e.bools[v]||e.allBools||r[v]&&l(v)?/^(true|false)$/.test(y)?(c(v,"true"===y,p),f++):c(v,!e.strings[v]||"",p):(c(v,y,p),f++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),g=!1,O=0;O<m.length;O++){var j=p.slice(O+2);if("-"!==j){if(/[A-Za-z]/.test(m[O])&&/=/.test(j)){c(m[O],j.split("=")[1],p),g=!0;break}if(/[A-Za-z]/.test(m[O])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(j)){c(m[O],j,p),g=!0;break}if(m[O+1]&&m[O+1].match(/\W/)){c(m[O],p.slice(O+2),p),g=!0;break}c(m[O],!e.strings[m[O]]||"",p)}else c(m[O],j,p)}var w=p.slice(-1)[0];g||"-"===w||(!t[f+1]||/^(-|--)[^-]/.test(t[f+1])||e.bools[w]||r[w]&&l(w)?t[f+1]&&/true|false/.test(t[f+1])?(c(w,"true"===t[f+1],p),f++):c(w,!e.strings[w]||"",p):(c(w,t[f+1],p),f++))}else if(e.unknownFn&&!1===e.unknownFn(p)||i._.push(e.strings._||!a(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(f+1));break}}return Object.keys(o).forEach((function(t){var n,e,u;n=i,e=t.split("."),u=n,e.slice(0,-1).forEach((function(t){u=u[t]||{}})),e[e.length-1]in u||(s(i,t.split("."),o[t]),(r[t]||[]).forEach((function(n){s(i,n.split("."),o[t])})))})),n["--"]?(i["--"]=new Array,u.forEach((function(t){i["--"].push(t)}))):u.forEach((function(t){i._.push(t)})),i});function a(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var s=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var e=n.trim().split(/\s+/),r=e[0];if(!r)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(r,"").trim();if(!o.includes(r))return{restParams:i,userInput:n,errorInfo:"".concat(r," 不是合法命令")};var u=t[r],a=e.slice(1),s={};try{s=c(a)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:s}};return function(t){if(t.includes("|")){var e=t.split("|");return e.length<2?n(e[0]):{isMultiResult:!0,userInput:t,parsedResults:e.map((function(t){return n(t.trim())}))}}return n(t)}},l=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],f={a:"a",enter:"Enter"},p='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',b="12px",d=function(t){var n=t.cursorColor,e=void 0===n?"#000":n,r=t.blinkSpeed,o=void 0===r?"1s":r;return"\n        @keyframes cursor-blink {\n          from {\n             background: ".concat(e,";\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: ").concat(o,";\n          animation-name: cursor-blink;\n          animation-iteration-count: infinite\n        }\n    ")},h=e("K9Ia"),v=e("nkY7"),y=e("IUTb"),m=e("JF+6");var g=e("p0ib");function O(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}var j=new h.a,w=function(t){return function(n){j.next({input:t,output:n})}},S=function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal,i=n.userInput;j.next({input:i,loading:!0,output:""}),Object(r.s)(n.parsedResults.map((function(t){return function(){var n,r=(n=regeneratorRuntime.mark((function n(r){var i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=r,n.abrupt("return",i(t.paramsObj,e,o,t));case 5:case"end":return n.stop()}}),n)})),function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function u(t){O(i,r,o,u,c,"next",t)}function c(t){O(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return r.apply(this,arguments)}}()}))).then((function(t){j.next({output:t,input:i})})).catch(w(i))},k={in:function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal;if(n)if(n.isMultiResult)S({parsedResult:n,cmdSet:e,$terminal:o});else{var i=n.userInput;if(n.errorInfo)j.next({input:i,output:n.errorInfo});else{var u=n.command.handler||n.command,c="";try{c=u(n.paramsObj,e,o,n,function(t){return function(n,e){j.next({loading:!0,print:!0,input:t,output:e?Object(r.r)()+" "+n:n})}}(i))}catch(t){return void w(i)(t)}"string"!=typeof c?(j.next({input:i,loading:!0,output:""}),Promise.resolve(c).then((function(t){j.next({output:t,input:i})})).catch(w(i))):j.next({input:i,output:c})}}else j.next(null)},out$:j},x=e("mrSG"),P=e("FFOo");function E(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new R(t,n,e))}}var R=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new A(t,this.accumulator,this.seed,this.hasSeed))},t}(),A=function(t){function n(n,e,r,o){var i=t.call(this,n)||this;return i.accumulator=e,i._seed=r,i.hasSeed=o,i.index=0,i}return x.a(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(P.a),I=e("67Y/"),_=e("MGBS"),$=e("zotm");function D(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new F(r,e))}}var F=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new M(t,this.observables,this.project))},t}(),M=function(t){function n(n,e,r){var o=t.call(this,n)||this;o.observables=e,o.project=r,o.toRespond=[];var i=e.length;o.values=new Array(i);for(var u=0;u<i;u++)o.toRespond.push(u);for(u=0;u<i;u++){var c=e[u];o.add(Object($.a)(o,c,c,u))}return o}return x.a(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.values[e]=n;var i=this.toRespond;if(i.length>0){var u=i.indexOf(e);-1!==u&&i.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(_.a),C=e("VnD/"),N=e("bne5"),z=e("8g8A"),B=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return x.a(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new z.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(h.a),L=e("isby"),T={};function H(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Object(v.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(L.a)(t[0])&&(t=t[0]),Object(y.a)(t,r).lift(new J(e))}var J=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new q(t,this.resultSelector))},t}(),q=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return x.a(n,t),n.prototype._next=function(t){this.values.push(T),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object($.a)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,o){var i=this.values,u=i[e],c=this.toRespond?u===T?--this.toRespond:this.toRespond:0;i[e]=n,0===c&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(_.a);function Y(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(I.a)(function(t,n){return function(e){for(var r=e,o=0;o<n;o++){var i=r[t[o]];if(void 0===i)return;r=i}return r}}(t,e))(n)}}var Z=e("ad02"),V=function(){var t=document.createElement("input");return t.style.height="20px",t.style.position="fixed",t.style.zIndex="-1",t.style.outline="none",t.style.border="none",t.style.top="0",t.style.left="0",t.style.opacity="0",screen.width<500&&(t.style.transform="scale(0)"),t.style.color="transparent",t.setAttribute("autocomplete","off"),t.onblur=function(){setTimeout((function(){t.focus()}))},t},G=function(t,n){var e=t.getBoundingClientRect(),r=e.left,o=e.top;n.style.left="".concat(r,"px"),n.style.top="".concat(o,"px")},U=function(t,n){return G(t,n),function(e){G(t,n);var r=e.start!==e.end,o=""===e.inputStr,i=e.inputStr.split("").map((function(t){return" "===t?"&nbsp;":t}));r&&!o||i.push("&nbsp;"),t.innerHTML=i.map((function(t,n){return function(t){for(var n=arguments.length,e=new Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return'<span class="'.concat(e.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":r&&i>=e.start&&i<=e.end?"highlight":i===e.start?"blink":""));var i})).join("")}},K=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(r.l)(d(e)),t.style.fontFamily=p,t.style.fontSize=b,t.style.wordBreak="break-all",U(t,n)({inputStr:"",start:0,end:0})};function W(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Q(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?W(Object(e),!0).forEach((function(n){X(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):W(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function X(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function tt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var nt=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"Input wrapper element missing.";var e=V();document.body.appendChild(e),e.focus(),K(t,e,n);var o=Object(N.a)(e,"input"),i=Object(N.a)(e,"select"),u=Object(N.a)(e,"keyup"),c=new B("");o.pipe(Y("target","value")).subscribe((function(t){return c.next(t)}));var a=u.pipe(Object(C.a)((function(t){return l.includes(t.key)}))),s=u.pipe(Object(C.a)((function(t){return t.key===f.enter})),Object(C.a)((function(t){return!t.target.disabled})),D(c),Object(I.a)((function(t){var n=tt(t,2);n[0];return n[1]})),Object(C.a)((function(t){return!!t}))),p=Object(g.a)(o,a,i),b=p.pipe(Object(I.a)((function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}}))),d=H(c,b).pipe(Object(I.a)((function(t){var n=tt(t,2);return Q({inputStr:n[0]},n[1])})),Object(Z.a)((function(t,n){return JSON.stringify(t)===JSON.stringify(n)}))),h=U(t,e);return d.subscribe(h),{enter$:s,input$:o,get target(){return e},set value(n){e.value=n,c.next(n),""===n&&G(t,e),Object(r.y)(e,l[0])},set disabled(n){var r=t.querySelector(".blink");n?(e.setAttribute("disabled",!0),r.classList.add("disabled")):(r.classList.remove("disabled"),e.removeAttribute("disabled"),e.focus())}}};function et(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function rt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function ot(t){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var it=Object(r.p)(),ut=function(t){var n=document.querySelector("#hist-sess"),e=document.querySelector("#curr-sess"),o=(document.querySelector("#curr-sess .input .prompt"),Object(r.i)(t)),i=o&&o.loading,u=function(n,e){var r=t[n-1];return r&&r.print&&r.input===e.input},c=i?'<span class="blink">&nbsp;</span>':"";t.length<1?n.innerHTML="":(n.innerHTML=t.map((function(t,n){return function(t){var n,e,r=t.input,o=t.output,i=t.shouldHideInput,u=t.print;if("string"==typeof o)n=o;else if("object"===ot(o))try{n=o.html||JSON.stringify(o),o.html&&(e=!0)}catch(t){e=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var c=o.message,a=o.stack;n="".concat(c,"\n\n").concat(a)}var s=e?n:'<pre style="'.concat(u?"margin: 0":"",'">').concat(n||"","</pre>"),l='\n      <div class="input">\n          <span class="prompt">$</span>\n          <span class="cmd">\n            '.concat(r||"","\n          </span>\n      </div>\n    ");return'<div class="session">\n            '.concat(i?"":l,'\n            <div class="output">\n                ').concat(s,"\n            </div>\n        </div>")}(function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?et(Object(e),!0).forEach((function(n){rt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):et(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}({},t,{shouldHideInput:u(n,t)}))})).join("")+c,i?e.style.display="none":(it(!1),e.style.display="block"))},ct=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(r.l)(u),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var e=t.firstElementChild,o=document.querySelector("#input"),i=nt(o,n),c=14;return e.style.height="calc(100% - 10px)",e.style.overflow="auto",e.style.fontFamily=p,e.style.background=n.background||"unset",e.style.color=n.color||"#000",e.style.fontSize=b,e.addEventListener("click",(function(t){var n=i.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<c)&&i.target.focus()}),{capture:!1}),{$terminal:e,input:i}};function at(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var st=[],lt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return st=[].concat(at(st),at(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(at(st),at(t)),i=o.map((function(t,n){return Object(r.c)(" ")(n+1,o.length+1)+". "+t.input})).join("\n");return t.push({input:e,output:i}),t;default:return t}};function ft(t,n,e,r,o,i,u){try{var c=t[i](u),a=c.value}catch(t){return void e(t)}c.done?n(a):Promise.resolve(a).then(r,o)}function pt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function bt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function dt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?bt(Object(e),!0).forEach((function(n){ht(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):bt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function ht(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function vt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"wrapper element not found";var e=ct(t,n),o=e.$terminal,u=e.input,c=new h.a,a=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(v.a)(e)?(t.pop(),Object(m.a)(t,e)):Object(y.a)(t)}(i),l=Object(g.a)(c,a).pipe(E((function(t,n){return dt({},n,{},t)}),{}),Object(I.a)((function(t){return dt({},t,{},i)}))),p=u.enter$.pipe(D(l),Object(I.a)((function(t){var n=pt(t,2),e=n[0],r=n[1];return{parsedResult:s(r)(e),cmdSet:r,$terminal:o}})),Object(I.a)(k.in)).subscribe((function(){u.target.blur()})),b=k.out$.pipe(Object(C.a)((function(t){return t})),E((function(t,n){var e=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var e=i[t].handler||i[t];try{return n=""===e()}catch(t){return!1}}(e))return lt(t&&t.slice(),e,n.input);var r=t.slice().pop();return r&&r.loading&&!r.print&&t.pop(),t.push(n),t}),[])).subscribe((function(t){var n=Object(r.i)(t);ut(t),Object(r.v)(o),u.disabled=n&&n.loading,u.value=""}));u.input$.subscribe((function(){Object(r.v)(o)}));var d=function(){var t,n=(t=regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(r.v)(o),t.next=3,Object(r.k)(n,(function(t){return u.value=t}),50);case 3:return t.abrupt("return",new Promise((function(t,e){k.out$.pipe(Object(C.a)((function(t){return t})),Object(C.a)((function(t){return!0!==t.loading}))).subscribe((function(e){e.input===n&&t()})),Object(r.y)(u.target,f.enter)})));case 4:case"end":return t.stop()}}),t)})),function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function u(t){ft(i,r,o,u,c,"next",t)}function c(t){ft(i,r,o,u,c,"throw",t)}u(void 0)}))});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){u.disabled=t},set commands(t){c.next(t)},set currentInput(t){u.value=t},destroy:function(){b.unsubscribe(),p.unsubscribe(),o.remove(),u.target.remove()},addCommands:function(t){c.next(t)},input:function(t,n){if(n)return Object(r.k)(t,(function(t){u.value=t}));u.value=t},humanizerExec:d,humanizerExecCmdArr:function(t){var n=t.map((function(t){return function(){return d(t)}}));return Object(r.s)(n)},exec:function(t){u.value=t,Object(r.y)(u.target,f.enter)}}}e.d(n,"default",(function(){return vt}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,