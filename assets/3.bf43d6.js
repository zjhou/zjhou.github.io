(this.webpackJsonp=this.webpackJsonp||[]).push([[3],{"+eFp":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n("q1tI")),i=c(n("17x9")),a=c(n("UnXY")),s=c(n("zB99")),u=n("xfxO");function c(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}u.nameShape.isRequired,i.default.bool,i.default.bool,i.default.bool,(0,u.transitionTimeout)("Appear"),(0,u.transitionTimeout)("Enter"),(0,u.transitionTimeout)("Leave");var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),u=0;u<i;u++)a[u]=arguments[u];return n=r=l(this,e.call.apply(e,[this].concat(a))),r._wrapChild=function(e){return o.default.createElement(s.default,{name:r.props.transitionName,appear:r.props.transitionAppear,enter:r.props.transitionEnter,leave:r.props.transitionLeave,appearTimeout:r.props.transitionAppearTimeout,enterTimeout:r.props.transitionEnterTimeout,leaveTimeout:r.props.transitionLeaveTimeout},e)},l(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.default.createElement(a.default,r({},this.props,{childFactory:this._wrapChild}))},t}(o.default.Component);f.displayName="CSSTransitionGroup",f.propTypes={},f.defaultProps={transitionAppear:!1,transitionEnter:!0,transitionLeave:!0},t.default=f,e.exports=t.default},"+u0c":function(e,t,n){},"1zZr":function(e,t,n){},"2lpH":function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function o(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=o;var i={},a={};function s(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=c(e,(0|e)<0?-1:0,!0),o&&(a[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=i[e])?r:(n=c(e,e<0?-1:0,!1),o&&(i[e]=n),n)}function u(e,t){if(isNaN(e))return t?v:g;if(t){if(e<0)return v;if(e>=d)return w}else{if(e<=-y)return A;if(e+1>=y)return O}return e<0?u(-e,t).neg():c(e%h|0,e/h|0,t)}function c(e,t,n){return new r(e,t,n)}r.fromInt=s,r.fromNumber=u,r.fromBits=c;var l=Math.pow;function f(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return f(e.substring(1),t,n).neg();for(var o=u(l(n,8)),i=g,a=0;a<e.length;a+=8){var s=Math.min(8,e.length-a),c=parseInt(e.substring(a,a+s),n);if(s<8){var p=u(l(n,s));i=i.mul(p).add(u(c))}else i=(i=i.mul(o)).add(u(c))}return i.unsigned=t,i}function p(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?f(e,t):c(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=f,r.fromValue=p;var h=4294967296,d=h*h,y=d/2,b=s(1<<24),g=s(0);r.ZERO=g;var v=s(0,!0);r.UZERO=v;var m=s(1);r.ONE=m;var _=s(1,!0);r.UONE=_;var E=s(-1);r.NEG_ONE=E;var O=c(-1,2147483647,!1);r.MAX_VALUE=O;var w=c(-1,-1,!0);r.MAX_UNSIGNED_VALUE=w;var A=c(0,-2147483648,!1);r.MIN_VALUE=A;var S=r.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(A)){var t=u(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var o=u(l(e,6),this.unsigned),i=this,a="";;){var s=i.div(o),c=(i.sub(s.mul(o)).toInt()>>>0).toString(e);if((i=s).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(A)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return o(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(o(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(A)?A:this.not().add(m)},S.neg=S.negate,S.add=function(e){o(e)||(e=p(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=65535&this.low,a=e.high>>>16,s=65535&e.high,u=e.low>>>16,l=0,f=0,h=0,d=0;return h+=(d+=i+(65535&e.low))>>>16,f+=(h+=r+u)>>>16,l+=(f+=n+s)>>>16,l+=t+a,c((h&=65535)<<16|(d&=65535),(l&=65535)<<16|(f&=65535),this.unsigned)},S.subtract=function(e){return o(e)||(e=p(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(o(e)||(e=p(e)),n)return c(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(A))return e.isOdd()?A:g;if(e.eq(A))return this.isOdd()?A:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(b)&&e.lt(b))return u(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,i=this.low>>>16,a=65535&this.low,s=e.high>>>16,l=65535&e.high,f=e.low>>>16,h=65535&e.low,d=0,y=0,v=0,m=0;return v+=(m+=a*h)>>>16,y+=(v+=i*h)>>>16,v&=65535,y+=(v+=a*f)>>>16,d+=(y+=r*h)>>>16,y&=65535,d+=(y+=i*f)>>>16,y&=65535,d+=(y+=a*l)>>>16,d+=t*h+r*f+i*l+a*s,c((v&=65535)<<16|(m&=65535),(d&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(o(e)||(e=p(e)),e.isZero())throw Error("division by zero");var t,r,i;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?c((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?v:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return v;if(e.gt(this.shru(1)))return _;i=v}else{if(this.eq(A))return e.eq(m)||e.eq(E)?A:e.eq(A)?m:(t=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?m:E:(r=this.sub(e.mul(t)),i=t.add(r.div(e)));if(e.eq(A))return this.unsigned?v:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=g}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(t)/Math.LN2),s=a<=48?1:l(2,a-48),f=u(t),h=f.mul(e);h.isNegative()||h.gt(r);)h=(f=u(t-=s,this.unsigned)).mul(e);f.isZero()&&(f=m),i=i.add(f),r=r.sub(h)}return i},S.div=S.divide,S.modulo=function(e){return o(e)||(e=p(e)),n?c((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return c(~this.low,~this.high,this.unsigned)},S.and=function(e){return o(e)||(e=p(e)),c(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return o(e)||(e=p(e)),c(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return o(e)||(e=p(e)),c(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):c(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):c(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(o(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?c(this.low>>>e|t<<32-e,t>>>e,this.unsigned):c(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?c(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:c(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},"49sm":function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},"6DQo":function(e,t,n){"use strict";e.exports=function(){}},"8PcY":function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e){if(!e)return e;var t={};return r.Children.map(e,(function(e){return e})).forEach((function(e){t[e.key]=e})),t},t.mergeChildMappings=function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var r={},o=[];for(var i in e)t.hasOwnProperty(i)?o.length&&(r[i]=o,o=[]):o.push(i);var a=void 0,s={};for(var u in t){if(r.hasOwnProperty(u))for(a=0;a<r[u].length;a++){var c=r[u][a];s[r[u][a]]=n(c)}s[u]=n(u)}for(a=0;a<o.length;a++)s[o[a]]=n(o[a]);return s};var r=n("q1tI")},"8zDj":function(e,t,n){},A21b:function(e,t,n){},AAEI:function(e,t,n){},AE4m:function(e,t,n){},AdgS:function(e,t,n){},Bp9Y:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},DXLO:function(e,t,n){},Dk2R:function(e,t,n){},ETDC:function(e,t,n){},GtDr:function(e,t,n){},H7XF:function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=c(e),a=r[0],s=r[1],u=new i(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),l=0,f=s>0?a-4:a;for(n=0;n<f;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===s&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,u[l++]=255&t);1===s&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var o,i,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},HAps:function(e,t,n){},HDXh:function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n("H7XF"),o=n("kVK+"),i=n("49sm");function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=s(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,n);case"utf8":case"utf-8":return N(this,t,n);case"ascii":return I(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function g(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:v(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):v(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){f=!1;break}if(f)return i}return-1}function m(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function _(e,t,n,r){return Y(F(t,e.length-n),e,n,r)}function E(e,t,n,r){return Y(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function O(e,t,n,r){return E(e,t,n,r)}function w(e,t,n,r){return Y(z(t),e,n,r)}function A(e,t,n,r){return Y(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function N(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?N(this,0,e):y.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(i,a),c=this.slice(r,o),l=e.slice(t,n),f=0;f<s;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return m(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return E(this,e,t,n);case"latin1":case"binary":return O(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function I(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function R(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=$(e[i]);return o}function B(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function j(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function U(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function C(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function x(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,i){return i||x(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function L(e,t,n,r,i){return i||x(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||D(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||D(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||D(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||D(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||D(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||j(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||j(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):U(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):U(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):C(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);j(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);j(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):U(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):U(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):C(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||j(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:F(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var M=/[^+\/0-9A-Za-z-_]/g;function $(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(M,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n("yLpj"))},KUuw:function(e){e.exports={_from:"@zhoujiahao/blog@^1.7.5",_id:"@zhoujiahao/blog@1.7.6",_inBundle:!1,_integrity:"sha512-Z+HHjjJCyDXxQNIQPFnT3GRCyV93X+D3YR4Q8DAqPbcM3ewhcPz+DhtAAIrTw98d0X59IQOWy+UL3JXcHaggFA==",_location:"/@zhoujiahao/blog",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"@zhoujiahao/blog@^1.7.5",name:"@zhoujiahao/blog",escapedName:"@zhoujiahao%2fblog",scope:"@zhoujiahao",rawSpec:"^1.7.5",saveSpec:null,fetchSpec:"^1.7.5"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/blog/-/blog-1.7.6.tgz",_shasum:"448a243ce05702457acc58375d04517fcf94c03f",_spec:"@zhoujiahao/blog@^1.7.5",_where:"/home/travis/build/zjhou/zjh.im/src",author:{name:"zjhou",email:"z@zjh.im"},bundleDependencies:!1,dependencies:{"@zhoujiahao/comp-factory":"^1.0.7","@zhoujiahao/utils":"^1.0.34","react-transition-group":"^1.2.1"},deprecated:!1,description:"my react blog",devDependencies:{"@babel/core":"^7.2.0","@babel/plugin-proposal-class-properties":"^7.3.0","@babel/plugin-syntax-dynamic-import":"^7.2.0","@babel/preset-env":"^7.2.0","@babel/preset-react":"^7.0.0","babel-loader":"^8.0.4","css-loader":"^1.0.1","node-sass":"^4.11.0","sass-loader":"^7.1.0","style-loader":"^0.23.1",webpack:"^4.19.0","webpack-bundle-analyzer":"^3.0.4","webpack-cli":"^3.2.1"},directories:{lib:"lib",test:"__tests__"},gitHead:"ffc9e3d925db1e357bcfb2d9cc0fce4b1c642120",homepage:"",keywords:["blog"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/blog",peerDependencies:{"@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},version:"1.7.6"}},O5PD:function(e,t,n){},OgkG:function(e,t,n){},Qrca:function(e,t){e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(0!==(t=t.filter((function(e){return null!=e}))).length)return 1===t.length?t[0]:t.reduce((function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}))}},SjWX:function(e,t,n){(function(t){function n(e){var t=i([["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]]).filter((function(t){return t.rule&&t.rule.test(e)}))[0];return t?t.name:null}function r(){return void 0!==t&&t.version&&{name:"node",version:t.version.slice(1),os:t.platform}}function o(e){var t=i([["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/]]);if(!e)return null;var r=t.map((function(t){var n=t.rule.exec(e),r=n&&n[1].split(/[._]/).slice(0,3);return r&&r.length<3&&(r=r.concat(1==r.length?[0,0]:[0])),n&&{name:t.name,version:r.join(".")}})).filter(Boolean)[0]||null;return r&&(r.os=n(e)),/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/i.test(e)&&((r=r||{}).bot=!0),r}function i(e){return e.map((function(e){return{name:e[0],rule:e[1]}}))}e.exports={detect:function(){return"undefined"!=typeof navigator?o(navigator.userAgent):r()},detectOS:n,getNodeVersion:r,parseUserAgent:o}}).call(this,n("8oxB"))},TqRt:function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},UnXY:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n("Qrca")),i=u(n("q1tI")),a=u(n("17x9")),s=(u(n("6DQo")),n("8PcY"));function u(e){return e&&e.__esModule?e:{default:e}}a.default.any,a.default.func,a.default.node;var c=function(e){function t(n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,o));return i.performAppear=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(i._handleDoneAppearing.bind(i,e,t)):i._handleDoneAppearing(e,t)},i._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete i.currentlyTransitioningKeys[e];var n=(0,s.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performEnter=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(i._handleDoneEntering.bind(i,e,t)):i._handleDoneEntering(e,t)},i._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete i.currentlyTransitioningKeys[e];var n=(0,s.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performLeave=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(i._handleDoneLeaving.bind(i,e,t)):i._handleDoneLeaving(e,t)},i._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete i.currentlyTransitioningKeys[e];var n=(0,s.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)?i.keysToEnter.push(e):i.setState((function(t){var n=r({},t.children);return delete n[e],{children:n}}))},i.childRefs=Object.create(null),i.state={children:(0,s.getChildMapping)(n.children)},i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,s.getChildMapping)(e.children),n=this.state.children;for(var r in this.setState({children:(0,s.mergeChildMappings)(n,t)}),t){var o=n&&n.hasOwnProperty(r);!t[r]||o||this.currentlyTransitioningKeys[r]||this.keysToEnter.push(r)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach((function(t){return e.performEnter(t,e.childRefs[t])}));var n=this.keysToLeave;this.keysToLeave=[],n.forEach((function(t){return e.performLeave(t,e.childRefs[t])}))},t.prototype.render=function(){var e=this,t=[],n=function(n){var r=e.state.children[n];if(r){var a="string"!=typeof r.ref,s=e.props.childFactory(r),u=function(t){e.childRefs[n]=t};s===r&&a&&(u=(0,o.default)(r.ref,u)),t.push(i.default.cloneElement(s,{key:n,ref:u}))}};for(var a in this.state.children)n(a);var s=r({},this.props);return delete s.transitionLeave,delete s.transitionName,delete s.transitionAppear,delete s.transitionEnter,delete s.childFactory,delete s.transitionLeaveTimeout,delete s.transitionEnterTimeout,delete s.transitionAppearTimeout,delete s.component,i.default.createElement(this.props.component,s,t)},t}(i.default.Component);c.displayName="TransitionGroup",c.propTypes={},c.defaultProps={component:"span",childFactory:function(e){return e}},t.default=c,e.exports=t.default},VOcB:function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},b3vB:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),o=n.n(r),i=n("i8i4"),a=n.n(i),s=n("8RZD"),u=n("lTCR"),c=n.n(u),l=n("4KRT"),f=function(e){var t=e.reverse,n=e.top,r=e.down,i=e.ratio,a=void 0===i?.618:i,s={display:"flex",position:"relative",flexDirection:t?"column-reverse":"column",height:"100%",width:"100%"},u="".concat(100*a,"%"),c="".concat(100*(1-a),"%");return o.a.createElement("div",{style:s},o.a.createElement("div",{style:{height:c}},n),o.a.createElement("div",{style:{height:u}},r))},p=n("KUuw");function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y={photo:{value:"photo",defaultContentValue:"5cdba0e1476d9c0011cc2984"},story:{value:"story"}},b={cover:{type:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},y)}},g="command",v={ENABLE_UPDATES_ENTRY:"enableUpdatesEntry",ENABLE_NEXT_POST:"enableNextPost",ENABLE_PAGING_NAV_BTN:"enablePagingNavBtn",ENABLE_IMAGES_FLOW:"enableImagesFlow",SHOW_SPACE_GUIDELINE:"showSpaceGuideLine"},m="/stories",_="/about",E="/stories/:id",O="/photos",w="/photos/:id",A="/photo/:id",S="/unread",N="/",T=p.version,I=p.name,P={version:T,name:I,gitURL:"https://github.com/zjhou/toyBox/releases/tag/".concat(I,"@").concat(T)};function R(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query Photo($id: ID!) {\n    photo(id: $id) {\n      _id\n      title\n      date\n      content {\n        url\n      }\n    }\n  }\n"]);return R=function(){return e},e}var B=c()(R()),D=function(e){return o.a.createElement(Ct,{query:B,variables:{id:e.id}},(function(t){var n=t.data;return e.children({url:"https://api.zjh.im"+n.photo.content.url,title:n.photo.title})}))};function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var U=function(e){return"false"!==e&&("true"===e||e)},C=function(){var e={};return Object.entries(v).forEach((function(t){var n=j(t,2)[1];e[n]=U(localStorage.getItem(n))})),e},x=function(e){var t={};return Object.entries(v).forEach((function(n){var r=j(n,2)[1];t[r]=U(e[r])})),t};function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function M(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $=o.a.createContext({resetSpace:function(){},setSideSpaceContent:function(){}}),F=o.a.createContext(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(Object(n),!0).forEach((function(t){M(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},C())),z=function(e){return function(t){return o.a.createElement($.Consumer,null,(function(n){var r=k({},n);return o.a.createElement(e,k({},r,t))}))}},Y=function(e,t){var n=Object(r.useContext)($).setSideSpaceContent;return Object(r.useEffect)((function(){n(e)}),t),Object(r.useEffect)((function(){return function(){n(null)}}),[]),null},q=function(e){var t=Object(r.useContext)(F);return{status:t[e],toggle:function(n){t.setLocalStorageVal(e,n)}}};function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function K(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?W(Object(n),!0).forEach((function(t){Z(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):W(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function J(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function X(e,t){return(X=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Q="cyan",ee=function(e){return function(t){function n(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];return t=function(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?J(e):t}(this,(e=G(n)).call.apply(e,[this].concat(i))),Z(J(t),"handleResize",(function(e){a.a.render(t.renderGuideLines(t.$rootDom.getBoundingClientRect(),e),t.$container)})),Z(J(t),"renderGuideLines",(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.props.showSpaceGuideLine,r=t.props,i=r.top,a=r.bottom,s=r.left,u=r.right,c=r.color,l=void 0===c?Q:c;if(n){var f={position:"fixed",background:l,zIndex:100},p=K({},f,{width:"100%",height:1,left:0}),h=K({},f,{height:"100%",width:1,top:0}),d=e.top,y=e.bottom,b=e.left,g=e.right;return[i&&o.a.createElement("div",{style:K({},p,{top:d})}),a&&o.a.createElement("div",{style:K({},p,{top:y})}),s&&o.a.createElement("div",{style:K({},h,{left:b})}),u&&o.a.createElement("div",{style:K({},h,{left:g})})]}})),t}var r,i,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&X(e,t)}(n,t),r=n,(i=[{key:"componentDidMount",value:function(){var e=this;this.$rootDom=a.a.findDOMNode(this),this.$container=document.createElement("div"),document.body.appendChild(this.$container),this.handleResize(),window.addEventListener("resize",(function(){e.handleResize()}))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize),a.a.unmountComponentAtNode(this.$container),this.$container.remove()}},{key:"componentWillReceiveProps",value:function(e,t){e.showSpaceGuideLine!==this.props.showSpaceGuideLine&&this.handleResize(e.showSpaceGuideLine)}},{key:"render",value:function(){return o.a.createElement(e,this.props)}}])&&H(r.prototype,i),s&&H(r,s),n}(o.a.PureComponent)},te=function(e){return z(ee(e))},ne=n("TSYQ"),re=n.n(ne),oe=(n("HAps"),function(e){var t=e.cols;return o.a.createElement("div",{style:{display:"flex",height:"100%",width:"100%"}},t.map((function(e){return o.a.createElement("div",{style:{flex:"1"}},e)})))}),ie=function(e,t){return function(n){var r=o.a.createElement(e,n);return Object(s.l)()?r:o.a.createElement(Dt,{top:null,down:r,ratio:t})}},ae=.763924,se=n("17x9"),ue=n.n(se),ce=n("K9Ia"),le=n("p0ib"),fe=n("bne5"),pe=n("67Y/"),he=n("VnD/"),de=n("mrSG"),ye=n("MGBS"),be=n("zotm");var ge=function(){function e(e){this.notifier=e}return e.prototype.call=function(e,t){var n=new ve(e),r=Object(be.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),t.subscribe(n)):n},e}(),ve=function(e){function t(t){var n=e.call(this,t)||this;return n.seenValue=!1,n}return de.__extends(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.seenValue=!0,this.complete()},t.prototype.notifyComplete=function(){},t}(ye.a),me=n("Zn8D");n("r8OW");function _e(e){return(_e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Oe(e){return(Oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ne(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Te=function(e){return Ne(Array(e).keys())},Ie=new ce.a,Pe=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=function(e,t){return!t||"object"!==_e(t)&&"function"!=typeof t?we(e):t}(this,(e=Oe(t)).call.apply(e,[this].concat(i))),Se(we(n),"state",{y:6*n.props.current,isDragging:!1}),Se(we(n),"buildProgressStr",(function(){return"".concat((n.state.y-6)/6+1," / ").concat(n.props.total)})),Se(we(n),"updatePointerPos",(function(e){n.setState({y:e})})),Se(we(n),"updateDragStatus",(function(e){n.setState({isDragging:e})})),Se(we(n),"pointerEventHandler",(function(e){Ie.next(e)})),Se(we(n),"renderTickIndicator",(function(){var e=n.props,t=e.total,r=e.current;return o.a.createElement("div",{className:re()("drag-tick-indicator",{absRight:n.props.absRight,isDragging:n.state.isDragging}),ref:function(e){n.indicator=e},onMouseUp:n.pointerEventHandler,onMouseMove:n.pointerEventHandler},Te(t).map((function(e){var t=e===r-1;return o.a.createElement("div",{onClick:function(t){return n.props.onClick(t,e)},className:re()("tick",{active:t})})})),o.a.createElement("div",{className:"pointer","data-progress":n.buildProgressStr(),style:{top:n.state.y},ref:function(e){n.pointer=e},onMouseDown:n.pointerEventHandler}))})),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;document.onselectstart=function(){return!1};var t=this,n=Ie.pipe(Object(he.a)((function(e){return"mousedown"===e.type}))),r=Ie.pipe(Object(he.a)((function(e){return"mousemove"===e.type}))),o=Object(le.a)(Object(fe.a)(document,"mouseup")),i=n.pipe(Object(pe.a)((function(){return r.pipe((e=o,function(t){return t.lift(new ge(e))}));var e})),Object(me.a)(1),(function(e){return Object(pe.a)((function(e){var n=t.indicator&&t.indicator.getBoundingClientRect().y;return e.clientY-n-6}))(e)}),Object(pe.a)((function(e){return 6*Math.round(e/6)})),Object(he.a)((function(t){return t<e.indicator.getBoundingClientRect().height-12&&t>=6})));this.dragNdropSubscribtion=i.subscribe(this.updatePointerPos),this.dragStartSubscribtion=n.subscribe((function(){e.updateDragStatus(!0)})),this.dragEndSubscribtion=o.pipe(Object(pe.a)((function(){var t=e.state.y,n=Math.floor(t/6);return n>=e.props.total?e.props.total:n<=1?1:n})),Object(he.a)((function(){return e.state.isDragging}))).subscribe((function(t){e.props.onDrop(t),e.updateDragStatus(!1)}))}},{key:"componentWillUnmount",value:function(){this.dragEndSubscribtion.unsubscribe(),this.dragStartSubscribtion.unsubscribe(),this.dragNdropSubscribtion.unsubscribe()}},{key:"render",value:function(){return this.props.total<2?null:this.renderTickIndicator()}}])&&Ee(n.prototype,r),i&&Ee(n,i),t}(o.a.Component);function Re(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}Se(Pe,"propTypes",{current:ue.a.number,total:ue.a.number,onClick:ue.a.func,absRight:ue.a.bool}),Se(Pe,"defaultProps",{onDrop:function(){},onClick:function(){},current:1,absRight:!1});var Be=function(e){var t=e.current,n=e.total,r=e.vertical,i=e.onClick,a=void 0===i?function(){}:i,u=e.absRight,c=e.fixedTop;if(n<2)return null;var l,f=function(e){return"".concat(Object(s.d)("0")(e,n)," / ").concat(n)};return o.a.createElement("div",{className:re()("tick-indicator",{"absolute-right":u,"fixed-top":c,vertical:r}),onClick:function(){a(t)}},(l=n,Re(Array(l).keys())).map((function(e){var n=e===t-1;return o.a.createElement("div",{"data-title":f(e+1),className:re()("tick",{active:n})})})))},De=(ie(Be,ae),function(e){var t=e.children;if(!t.length||"string"!=typeof t)return null;var n={"文":!0,"字":!0,"相":!0,"片":!0,"最":!0,"近":!0,"更":!0,"新":!0,"设":!0,"置":!0,"关":!0,"闭":!0,"福":!0};return t.split("").map((function(e){return n[e]?o.a.createElement("i",{className:"icon-".concat(e)}):e}))});n("AE4m");function je(){return(je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ue(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ce=function(e){var t=e.text,n=e.onClick,r=e.children,i=e.disabled,a=Ue(e,["text","onClick","children","disabled"]);return o.a.createElement("div",je({className:re()("base-btn",{disabled:i}),onClick:i?s.n:n},a),t||r)};n("hUxU");function xe(e){return(xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Le(e){return(Le=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Me(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $e(e,t){return($e=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Fe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ze=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==xe(t)&&"function"!=typeof t?Me(e):t}(this,Le(t).call(this,e)),Fe(Me(n),"handleMouseMove",(function(e){var t=e.clientX,r=e.clientY,o=n.self.getBoundingClientRect(),i=o.top,a=o.left;n.setState({x:t-a,y:r-i})})),Fe(Me(n),"setTooltipState",(function(e){n.setState({show:e})})),n.state={x:0,y:0,show:!0},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$e(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.self.getBoundingClientRect(),t=e.bottom,n=e.left;this.setState({x:n,y:t})}},{key:"render",value:function(){var e=this,t="translate3d(".concat(this.state.x+20,"px, ").concat(this.state.y+20,"px, 0)");return o.a.createElement("div",{onMouseMove:this.handleMouseMove,ref:function(t){return e.self=t},className:"tooltip-wrapper"},this.props.children({showTooltip:function(){e.setTooltipState(!0)},hideTooltip:function(){e.setTooltipState(!1)}}),o.a.createElement("div",{key:2,className:"tooltip",style:{transform:t}},this.state.show?this.props.tooltip:null))}}])&&ke(n.prototype,r),i&&ke(n,i),t}(o.a.PureComponent);n("Dk2R");function Ye(){return(Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function qe(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ve=function(e){var t=e.href,n=e.text,r=e.type,i=e.command,a=e.className,s=qe(e,["href","text","type","command","className"]);return r===g?o.a.createElement("span",{className:re()("command base-link",a),"data-cmd":i},n):o.a.createElement("a",Ye({className:re()("base-link",a),href:t,target:"_blank"},s),n)};n("DXLO");function We(){return(We=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ke(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var He=function(e){var t=e.data,n=void 0===t?[]:t,r=e.itemRenderer,i=void 0===r?s.n:r,a=e.emptyRenderer,u=e.beforeRenderer,c=void 0===u?s.n:u,l=e.afterRenderer,f=void 0===l?s.n:l,p=e.className,h=Ke(e,["data","itemRenderer","emptyRenderer","beforeRenderer","afterRenderer","className"]);return n.length?o.a.createElement(o.a.Fragment,null,c(n),o.a.createElement("ul",We({className:re()("base-list",p)},h),n.map((function(e,t){return o.a.createElement("li",{className:"base-list-item"},i({item:e,index:t}))}))),f(n)):a?a():o.a.createElement(St,null)};n("GtDr");function Ge(){return(Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Je(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Xe(e){return(Xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return!t||"object"!==Xe(t)&&"function"!=typeof t?nt(e):t}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rt(e,t){return(rt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ot(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var it=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ot(nt(n=et(this,tt(t).call(this,e))),"getStateByPropsAndCurrentPageIndex",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.currentPageIndex,r=e.pageSize,o=e.data,i=Math.ceil(o.length/r),a=(t-1)*r,s=t*r,u=o.slice(a,s)||[];return{hasNextPage:t<i,hasPrevPage:t>1,currentPageIndex:t,currentPageData:u,totalPages:i}})),ot(nt(n),"next",(function(){(n.state.hasNextPage||n.props.infiniteLoopMode)&&n.setState((function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasNextPage?e.currentPageIndex+1:1)}))})),ot(nt(n),"prev",(function(){(n.state.hasPrevPage||n.props.infiniteLoopMode)&&n.setState((function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasPrevPage?e.currentPageIndex-1:e.totalPages)}))})),ot(nt(n),"isValidProps",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=e.data,r=e.pageSize,o=e.currentPageIndex,i=void 0===o?1:o,a=Math.ceil(t.length/r);return t.length&&r>0&&i>=1&&i<=a})),n.isValidProps(e)?(n.state=n.getStateByPropsAndCurrentPageIndex(),n):et(n)}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&rt(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return this.isValidProps(this.props)&&this.props.children(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ze(Object(n),!0).forEach((function(t){ot(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state,{next:this.next,prev:this.prev}))}}])&&Qe(n.prototype,r),o&&Qe(n,o),t}(o.a.PureComponent);function at(){return(at=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}it.defaultProps={currentPageIndex:1},it.propTypes={data:ue.a.array.isRequired,pageSize:ue.a.number.isRequired,currentPageIndex:ue.a.number,children:ue.a.func.isRequired};var st=function(e){var t=e.pagingOption,n=e.pagingBtnRenderer,r=void 0===n?s.n:n,i=e.listOption;return o.a.createElement(it,t,(function(t){return o.a.createElement(He,at({},i,{data:t.currentPageData,afterRenderer:function(){return r(t)},beforeRenderer:function(){return e.children(t)}}))}))},ut=(Object(s.l)(),function(e){location.hash="#".concat(e)}),ct=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";ut("".concat(m,"/").concat(e))},lt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.prev,r=void 0===n?s.n:n,i=e.next,a=void 0===i?s.n:i,u=e.currentPageIndex,c=e.hasNextPage,l=e.hasPrevPage,f=t.disableAllBtns,p=t.disableListBtn,h=t.disablePrevBtn,d=t.disableNextBtn,y=t.onListBtnClick,b=q(v.ENABLE_PAGING_NAV_BTN),g=b.status,m=[o.a.createElement(Ce,{disabled:h||!l,onClick:r},"上页"),o.a.createElement(Ce,{disabled:p,onClick:y||function(){ct()}},"列表"),o.a.createElement(Ce,{disabled:d||!c,onClick:a},"下页")],_={display:"flex",flexDirection:"column",alignItems:"flex-end",justifyContent:"space-between",height:120,textAlign:"right",padding:"5px 10px"};Y(g&&!f&&o.a.createElement(Dt,{top:null,style:_,down:m}),[u,g])},ft=n("FFOo");var pt=function(){function e(e,t){this.bufferSize=e,this.startBufferEvery=t,this.subscriberClass=t&&e!==t?dt:ht}return e.prototype.call=function(e,t){return t.subscribe(new this.subscriberClass(e,this.bufferSize,this.startBufferEvery))},e}(),ht=function(e){function t(t,n){var r=e.call(this,t)||this;return r.bufferSize=n,r.buffer=[],r}return de.__extends(t,e),t.prototype._next=function(e){var t=this.buffer;t.push(e),t.length==this.bufferSize&&(this.destination.next(t),this.buffer=[])},t.prototype._complete=function(){var t=this.buffer;t.length>0&&this.destination.next(t),e.prototype._complete.call(this)},t}(ft.a),dt=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.bufferSize=n,o.startBufferEvery=r,o.buffers=[],o.count=0,o}return de.__extends(t,e),t.prototype._next=function(e){var t=this.bufferSize,n=this.startBufferEvery,r=this.buffers,o=this.count;this.count++,o%n==0&&r.push([]);for(var i=r.length;i--;){var a=r[i];a.push(e),a.length===t&&(r.splice(i,1),this.destination.next(a))}},t.prototype._complete=function(){for(var t=this.buffers,n=this.destination;t.length>0;){var r=t.shift();r.length>0&&n.next(r)}e.prototype._complete.call(this)},t}(ft.a),yt=n("ad02");function bt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var gt=function(e){var t,n,o=bt(Object(r.useState)("up"),2),i=o[0],a=o[1],s=Object(fe.a)(e||document,"scroll").pipe(Object(pe.a)((function(e){return e.target.scrollTop})),(t=2,void 0===n&&(n=null),function(e){return e.lift(new pt(t,n))}),Object(pe.a)((function(e){var t=bt(e,2);return t[0]-t[1]>0?"UP":"DOWN"})),Object(yt.a)()),u=new ce.a;return s.subscribe(u),Object(r.useEffect)((function(){var e=u.subscribe((function(e){a(e)}));return function(){return e.unsubscribe()}})),[i]};function vt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var mt=function(e,t){var n=vt(Object(r.useState)(!1),2),o=n[0],i=n[1],a=Object(fe.a)(e||document,"scroll").pipe(Object(pe.a)((function(e){var n=e.target;return t?n.scrollTop>=n.scrollHeight-n.offsetHeight-t:n.scrollTop===n.scrollHeight-n.offsetHeight})),Object(yt.a)()),s=new ce.a;return a.subscribe(s),Object(r.useEffect)((function(){var e=s.subscribe((function(e){i(e)}));return function(){return e.unsubscribe()}})),[o]};function _t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Et=function(e){var t=e.wrapperSelector,n=e.children,o=e.mountSize,i=e.bufferDistance;if(n.length<=1)return n;var a=o>0?o:1,u=_t(Object(r.useState)(1*a),2),c=u[0],l=u[1],f=_t(mt(Object(s.a)(t),i),1)[0];return Object(r.useEffect)((function(){f&&l(c+1)}),[f]),n.slice(0,c*a)};n("ETDC");n("vzVe");var Ot=function(e){var t=e.absCenter,n=void 0===t||t,r=e.style;return o.a.createElement("div",{style:r,className:re()("tick-loader",{center:n&&Object(s.l)()})})},wt=function(e){var t=e.sizeStr,n=e.color;return o.a.createElement("div",{className:"logo",style:{paddingLeft:".4em"},dangerouslySetInnerHTML:{__html:Object(s.f)({small:3,middle:4,big:5}[t],null,n)}})},At=function(){return o.a.createElement("div",{style:{display:"flex",height:"100%"}})},St=function(){return o.a.createElement("span",{style:{color:"#ccc"}},"无")},Nt=function(e){return window.converter&&e?window.converter.makeHtml(e):e},Tt=function(e){var t=e.md,n=e.className;return o.a.createElement("div",{dangerouslySetInnerHTML:{__html:Nt(t)},className:n})};function It(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?It(Object(n),!0).forEach((function(t){Rt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):It(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Rt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Bt=te(At),Dt=function(e){var t=e.top,n=e.down,r=e.alignTopItems,i=e.ratio,a=e.padding,s=e.fullHeight,u=e.withGuideLine,c=e.style;return o.a.createElement(f,{ratio:i,top:o.a.createElement(f,{down:o.a.createElement("div",{style:{height:"100%",display:"flex",flexDirection:"column",justifyContent:"flex-end",padding:a,alignItems:r||"unset"}},t),top:u?o.a.createElement(Bt,{top:!0,bottom:!0}):null,reverse:!0}),down:o.a.createElement("div",{style:Pt({padding:a,height:s?"100%":"auto"},c)},n)})},jt=function(e){var t=e.style;return Object(s.l)()?o.a.createElement(Ot,null):o.a.createElement(Dt,{top:null,down:o.a.createElement(Ot,{style:t})})};function Ut(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ct=function(e){var t=e.spinnerAtContent,n=Ut(e,["spinnerAtContent"]),r=e.spinner||(t?o.a.createElement(jt,null):o.a.createElement(Ot,null));return o.a.createElement(l.Query,n,(function(t){var n=t.data,o=t.loading,i=t.error;return i?":(":o?r:e.children({error:i,data:n})}))};function xt(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query {\n    covers {\n      content_id\n      type\n      show\n    }\n  }\n"]);return xt=function(){return e},e}c()(xt());function kt(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  {\n    posts(sort: "date:DESC") {\n      _id\n      title\n      date\n      content\n      photogroup {\n        title\n        _id\n      }\n    }\n  }\n']);return kt=function(){return e},e}c()(kt());function Lt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $t(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Ft(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  {\n    photogroups {\n      _id\n      title\n      date\n      visible\n    }\n  }\n"]);return Ft=function(){return e},e}var zt=c()(Ft()),Yt=function(e){return o.a.createElement(Ct,{query:zt},(function(t){var n=t.data;return e.children(n.photogroups.filter((function(e){return e.visible})).map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lt(Object(n),!0).forEach((function(t){Mt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({id:e._id},$t(e,["_id"]))})))}))};function qt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Wt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Kt(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  query Photogroup($id: ID!) {\n    photogroup(id: $id) {\n      post {\n        _id\n      }\n      photos(sort: "date:DESC") {\n        _id\n        title\n        date\n        content {\n          url \n        }\n      }\n    }\n  }\n']);return Kt=function(){return e},e}var Ht=c()(Kt()),Gt=function(e){return o.a.createElement(Ct,{query:Ht,spinner:e.spinner,variables:{id:e.id}},(function(t){var n=t.data,r=n.photogroup.photos.map((function(e){var t=e.content,n=Wt(e,["content"]);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qt(Object(n),!0).forEach((function(t){Vt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({url:"https://api.zjh.im"+t.url},n)})),o=n.photogroup.post;return e.children({photos:r,post:o})}))};n("OgkG"),n("+u0c");function Jt(e){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zt(e){return(Zt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function en(e,t){return(en=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var tn=function(){var e=window.innerHeight,t=(window.innerWidth-(e-100)*(1+.618))/2;return{display:"flex",width:"calc(100% - ".concat(2*t,"px)"),height:"calc(100% - ".concat(100,"px)"),margin:"".concat(50,"px ").concat(t,"px")}},nn=function(e){function t(e){var n,r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Jt(t)&&"function"!=typeof t?Qt(e):t}(this,Zt(t).call(this,e)),r=Qt(n),i=function(){n.setState({style:tn()})},(o="updateStyle")in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,n.state={style:tn()},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&en(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateStyle)}},{key:"render",value:function(){var e=this.props,t=e.left,n=e.right;return o.a.createElement("div",{className:"container lr",style:this.state.style},o.a.createElement("div",{className:"left",style:{flex:.618+1}},t),o.a.createElement("div",{className:"right",style:{flex:1,overflow:"auto"}},n))}}])&&Xt(n.prototype,r),i&&Xt(n,i),t}(o.a.PureComponent);var rn,on=n("eO8H"),an=n("no5z");!function(e){e[e.ActiveUserChanged=0]="ActiveUserChanged",e[e.ListenerRegistered=1]="ListenerRegistered",e[e.UserAdded=2]="UserAdded",e[e.UserLinked=3]="UserLinked",e[e.UserLoggedIn=4]="UserLoggedIn",e[e.UserLoggedOut=5]="UserLoggedOut",e[e.UserRemoved=6]="UserRemoved"}(rn||(rn={}));var sn,un=function(){function e(e,t,n,r,o,i,a,s){this.userId=e,this.deviceId=t,this.accessToken=n,this.refreshToken=r,this.loggedInProviderType=o,this.loggedInProviderName=i,this.lastAuthActivity=a,this.userProfile=s}return e.empty=function(){return new e(void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0)},Object.defineProperty(e.prototype,"hasUser",{get:function(){return void 0!==this.userId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEmpty",{get:function(){return void 0===this.deviceId},enumerable:!0,configurable:!0}),e.prototype.loggedOut=function(){return new e(this.userId,this.deviceId,void 0,void 0,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},e.prototype.withClearedUser=function(){return new e(void 0,this.deviceId,void 0,void 0,void 0,void 0,void 0,void 0)},e.prototype.withAuthProvider=function(t,n){return new e(this.userId,this.deviceId,this.accessToken,this.refreshToken,t,n,new Date,this.userProfile)},e.prototype.withNewAuthActivityTime=function(){return new e(this.userId,this.deviceId,this.accessToken,this.refreshToken,this.loggedInProviderType,this.loggedInProviderName,new Date,this.userProfile)},Object.defineProperty(e.prototype,"isLoggedIn",{get:function(){return void 0!==this.accessToken&&void 0!==this.refreshToken},enumerable:!0,configurable:!0}),e.prototype.merge=function(t){return new e(void 0===t.userId?this.userId:t.userId,void 0===t.deviceId?this.deviceId:t.deviceId,void 0===t.accessToken?this.accessToken:t.accessToken,void 0===t.refreshToken?this.refreshToken:t.refreshToken,void 0===t.loggedInProviderType?this.loggedInProviderType:t.loggedInProviderType,void 0===t.loggedInProviderName?this.loggedInProviderName:t.loggedInProviderName,void 0===t.lastAuthActivity?this.lastAuthActivity:t.lastAuthActivity,void 0===t.userProfile?this.userProfile:t.userProfile)},e}(),cn=(sn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}sn(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ln=function(e){Error.call(this,e),Error.captureStackTrace&&Error.captureStackTrace(this),this.message=e,this.name=this.constructor.name};ln.prototype=Object.create(Error.prototype);var fn,pn,hn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return cn(t,e),t}(ln);!function(e){e[e.TRANSPORT_ERROR=0]="TRANSPORT_ERROR",e[e.DECODING_ERROR=1]="DECODING_ERROR",e[e.ENCODING_ERROR=2]="ENCODING_ERROR"}(pn||(pn={}));var dn,yn=((fn={})[pn.TRANSPORT_ERROR]="the request transport encountered an error communicating with Stitch",fn[pn.DECODING_ERROR]="an error occurred while decoding a response from Stitch",fn[pn.ENCODING_ERROR]="an error occurred while encoding a request for Stitch",fn),bn=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),gn=function(e){function t(t,n){var r=this,o="("+pn[n]+"): "+yn[n]+": "+t.message;return(r=e.call(this,o)||this).underlyingError=t,r.errorCode=n,r.errorCodeName=pn[n],r}return bn(t,e),t}(hn);!function(e){e[e.MissingAuthReq=0]="MissingAuthReq",e[e.InvalidSession=1]="InvalidSession",e[e.UserAppDomainMismatch=2]="UserAppDomainMismatch",e[e.DomainNotAllowed=3]="DomainNotAllowed",e[e.ReadSizeLimitExceeded=4]="ReadSizeLimitExceeded",e[e.InvalidParameter=5]="InvalidParameter",e[e.MissingParameter=6]="MissingParameter",e[e.TwilioError=7]="TwilioError",e[e.GCMError=8]="GCMError",e[e.HTTPError=9]="HTTPError",e[e.AWSError=10]="AWSError",e[e.MongoDBError=11]="MongoDBError",e[e.ArgumentsNotAllowed=12]="ArgumentsNotAllowed",e[e.FunctionExecutionError=13]="FunctionExecutionError",e[e.NoMatchingRuleFound=14]="NoMatchingRuleFound",e[e.InternalServerError=15]="InternalServerError",e[e.AuthProviderNotFound=16]="AuthProviderNotFound",e[e.AuthProviderAlreadyExists=17]="AuthProviderAlreadyExists",e[e.ServiceNotFound=18]="ServiceNotFound",e[e.ServiceTypeNotFound=19]="ServiceTypeNotFound",e[e.ServiceAlreadyExists=20]="ServiceAlreadyExists",e[e.ServiceCommandNotFound=21]="ServiceCommandNotFound",e[e.ValueNotFound=22]="ValueNotFound",e[e.ValueAlreadyExists=23]="ValueAlreadyExists",e[e.ValueDuplicateName=24]="ValueDuplicateName",e[e.FunctionNotFound=25]="FunctionNotFound",e[e.FunctionAlreadyExists=26]="FunctionAlreadyExists",e[e.FunctionDuplicateName=27]="FunctionDuplicateName",e[e.FunctionSyntaxError=28]="FunctionSyntaxError",e[e.FunctionInvalid=29]="FunctionInvalid",e[e.IncomingWebhookNotFound=30]="IncomingWebhookNotFound",e[e.IncomingWebhookAlreadyExists=31]="IncomingWebhookAlreadyExists",e[e.IncomingWebhookDuplicateName=32]="IncomingWebhookDuplicateName",e[e.RuleNotFound=33]="RuleNotFound",e[e.ApiKeyNotFound=34]="ApiKeyNotFound",e[e.RuleAlreadyExists=35]="RuleAlreadyExists",e[e.RuleDuplicateName=36]="RuleDuplicateName",e[e.AuthProviderDuplicateName=37]="AuthProviderDuplicateName",e[e.RestrictedHost=38]="RestrictedHost",e[e.ApiKeyAlreadyExists=39]="ApiKeyAlreadyExists",e[e.IncomingWebhookAuthFailed=40]="IncomingWebhookAuthFailed",e[e.ExecutionTimeLimitExceeded=41]="ExecutionTimeLimitExceeded",e[e.FunctionNotCallable=42]="FunctionNotCallable",e[e.UserAlreadyConfirmed=43]="UserAlreadyConfirmed",e[e.UserNotFound=44]="UserNotFound",e[e.UserDisabled=45]="UserDisabled",e[e.Unknown=46]="Unknown"}(dn||(dn={}));var vn={APIKeyAlreadyExists:dn.ApiKeyAlreadyExists,APIKeyNotFound:dn.ApiKeyNotFound,AWSError:dn.AWSError,ArgumentsNotAllowed:dn.ArgumentsNotAllowed,AuthProviderAlreadyExists:dn.AuthProviderAlreadyExists,AuthProviderDuplicateName:dn.AuthProviderDuplicateName,AuthProviderNotFound:dn.AuthProviderNotFound,DomainNotAllowed:dn.DomainNotAllowed,ExecutionTimeLimitExceeded:dn.ExecutionTimeLimitExceeded,FunctionAlreadyExists:dn.FunctionAlreadyExists,FunctionDuplicateName:dn.FunctionDuplicateName,FunctionExecutionError:dn.FunctionExecutionError,FunctionInvalid:dn.FunctionInvalid,FunctionNotCallable:dn.FunctionNotCallable,FunctionNotFound:dn.FunctionNotFound,FunctionSyntaxError:dn.FunctionSyntaxError,GCMError:dn.GCMError,HTTPError:dn.HTTPError,IncomingWebhookAlreadyExists:dn.IncomingWebhookAlreadyExists,IncomingWebhookAuthFailed:dn.IncomingWebhookAuthFailed,IncomingWebhookDuplicateName:dn.IncomingWebhookDuplicateName,IncomingWebhookNotFound:dn.IncomingWebhookNotFound,InternalServerError:dn.InternalServerError,InvalidParameter:dn.InvalidParameter,InvalidSession:dn.InvalidSession,MissingAuthReq:dn.MissingAuthReq,MissingParameter:dn.MissingParameter,MongoDBError:dn.MongoDBError,NoMatchingRuleFound:dn.NoMatchingRuleFound,ReadSizeLimitExceeded:dn.ReadSizeLimitExceeded,RestrictedHost:dn.RestrictedHost,RuleAlreadyExists:dn.RuleAlreadyExists,RuleDuplicateName:dn.RuleDuplicateName,RuleNotFound:dn.RuleNotFound,ServiceAlreadyExists:dn.ServiceAlreadyExists,ServiceCommandNotFound:dn.ServiceCommandNotFound,ServiceNotFound:dn.ServiceNotFound,ServiceTypeNotFound:dn.ServiceTypeNotFound,TwilioError:dn.TwilioError,UserAlreadyConfirmed:dn.UserAlreadyConfirmed,UserAppDomainMismatch:dn.UserAppDomainMismatch,UserDisabled:dn.UserDisabled,UserNotFound:dn.UserNotFound,ValueAlreadyExists:dn.ValueAlreadyExists,ValueDuplicateName:dn.ValueDuplicateName,ValueNotFound:dn.ValueNotFound};function mn(e){return e in vn?vn[e]:dn.Unknown}var _n,En,On=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),wn=function(e){function t(t,n){void 0===n&&(n=dn.Unknown);var r=e.call(this,t)||this;return r.message=t,r.errorCode=n,r.errorCodeName=dn[n],r}return On(t,e),t}(hn),An=function(){function e(){}return e.APPLICATION_JSON="application/json",e.TEXT_EVENT_STREAM="text/event-stream",e}(),Sn=function(){function e(){}return e.getAuthorizationBearer=function(t){return e.AUTHORIZATION_BEARER+" "+t},e.CONTENT_TYPE_CANON="Content-Type",e.CONTENT_TYPE=e.CONTENT_TYPE_CANON.toLocaleLowerCase(),e.AUTHORIZATION_CANON="Authorization",e.AUTHORIZATION=e.AUTHORIZATION_CANON.toLocaleLowerCase(),e.ACCEPT_CANON="Accept",e.ACCEPT=e.ACCEPT_CANON.toLocaleLowerCase(),e.AUTHORIZATION_BEARER="Bearer",e}();function Nn(e){return e instanceof hn?e:new gn(e,pn.DECODING_ERROR)}function Tn(e){if(void 0===e.body)throw new wn("received unexpected status code "+e.statusCode,dn.Unknown);var t;try{t=e.body}catch(t){throw new wn("received unexpected status code "+e.statusCode,dn.Unknown)}var n=function(e,t){if(void 0===e.headers[Sn.CONTENT_TYPE]||void 0!==e.headers[Sn.CONTENT_TYPE]&&e.headers[Sn.CONTENT_TYPE]!==An.APPLICATION_JSON)return t;var n=JSON.parse(t);if(!(n instanceof Object))return t;var r=n;if(void 0===r[_n.ERROR])return t;var o=r[_n.ERROR];if(void 0===r[_n.ERROR_CODE])return o;var i=r[_n.ERROR_CODE];throw new wn(o,mn(i))}(e,t);throw new wn(n,dn.Unknown)}!function(e){e.ERROR="error",e.ERROR_CODE="error_code"}(_n||(_n={})),function(e){e.GET="GET",e.POST="POST",e.PUT="PUT",e.DELETE="DELETE",e.HEAD="HEAD",e.OPTIONS="OPTIONS",e.TRACE="TRACE",e.PATCH="PATCH"}(En||(En={}));var In=En,Pn=function(){function e(e,t,n,r,o){this.method=e,this.path=t,this.headers=n,this.body=o,this.startedAt=r}return Object.defineProperty(e.prototype,"builder",{get:function(){return new e.Builder(this)},enumerable:!0,configurable:!0}),e}();!function(e){var t=function(){function t(e){void 0!==e&&(this.method=e.method,this.path=e.path,this.headers=e.headers,this.body=e.body,this.startedAt=e.startedAt)}return t.prototype.withMethod=function(e){return this.method=e,this},t.prototype.withPath=function(e){return this.path=e,this},t.prototype.withHeaders=function(e){return this.headers=e,this},t.prototype.withBody=function(e){return this.body=e,this},t.prototype.build=function(){if(void 0===this.method)throw Error("must set method");if(void 0===this.path)throw Error("must set non-empty path");return void 0===this.startedAt&&(this.startedAt=Date.now()/1e3),new e(this.method,this.path,void 0===this.headers?{}:this.headers,this.startedAt,this.body)},t}();e.Builder=t}(Pn||(Pn={}));var Rn,Bn,Dn=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),jn=function(e){function t(t,n,r){void 0===n&&(n=!1),void 0===r&&(r=!0);var o=e.call(this,t.method,t.path,t.headers,t.startedAt,t.body)||this;return o.useRefreshToken=n,o.shouldRefreshOnFailure=r,o}return Dn(t,e),Object.defineProperty(t.prototype,"builder",{get:function(){return new t.Builder(this)},enumerable:!0,configurable:!0}),t}(Pn);Rn=jn||(jn={}),Bn=function(e){function t(t){return e.call(this,t)||this}return Dn(t,e),t.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},t.prototype.withRefreshToken=function(){return this.useRefreshToken=!0,this},t.prototype.withShouldRefreshOnFailure=function(e){return this.shouldRefreshOnFailure=e,this},t.prototype.build=function(){return this.useRefreshToken&&(this.shouldRefreshOnFailure=!1),new Rn(e.prototype.build.call(this),this.useRefreshToken,this.shouldRefreshOnFailure)},t}(Pn.Builder),Rn.Builder=Bn;var Un=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Cn=function(e){function t(t,n){var r=this;return(r=t instanceof jn?e.call(this,t,t.useRefreshToken,t.shouldRefreshOnFailure)||this:e.call(this,t)||this).document=n,r}return Un(t,e),Object.defineProperty(t.prototype,"builder",{get:function(){return new t.Builder(this)},enumerable:!0,configurable:!0}),t}(jn);!function(e){var t=function(t){function n(e){var n=t.call(this,e)||this;return void 0!==e&&(n.document=e.document,n.useRefreshToken=e.useRefreshToken),n}return Un(n,t),n.prototype.withDocument=function(e){return this.document=e,this},n.prototype.withAccessToken=function(){return this.useRefreshToken=!1,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set: "+this.document);return void 0===this.headers&&this.withHeaders({}),this.headers[Sn.CONTENT_TYPE]=An.APPLICATION_JSON,this.withBody(an.a.stringify(this.document,{relaxed:!1})),new e(t.prototype.build.call(this),this.document)},n}(jn.Builder);e.Builder=t}(Cn||(Cn={}));var xn,kn,Ln=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Mn=function(e){function t(t,n){var r=e.call(this,t.method,t.path,t.headers,t.startedAt,t.body)||this;return r.document=n,r}return Ln(t,e),Object.defineProperty(t.prototype,"builder",{get:function(){return new t.Builder(this)},enumerable:!0,configurable:!0}),t}(Pn);!function(e){var t=function(t){function n(e){var n=t.call(this,e)||this;return void 0!==e&&(n.document=e.document),n}return Ln(n,t),n.prototype.withDocument=function(e){return this.document=e,this},n.prototype.build=function(){if(void 0===this.document||!(this.document instanceof Object))throw new Error("document must be set");return void 0===this.headers&&this.withHeaders({}),this.headers[Sn.CONTENT_TYPE]=An.APPLICATION_JSON,this.withBody(an.a.stringify(this.document,{relaxed:!1})),new e(t.prototype.build.call(this),this.document)},n}(Pn.Builder);e.Builder=t}(Mn||(Mn={})),function(e){e[e.LoggedOutDuringRequest=0]="LoggedOutDuringRequest",e[e.MustAuthenticateFirst=1]="MustAuthenticateFirst",e[e.UserNoLongerValid=2]="UserNoLongerValid",e[e.UserNotFound=3]="UserNotFound",e[e.UserNotLoggedIn=4]="UserNotLoggedIn",e[e.CouldNotLoadPersistedAuthInfo=5]="CouldNotLoadPersistedAuthInfo",e[e.CouldNotPersistAuthInfo=6]="CouldNotPersistAuthInfo",e[e.StreamingNotSupported=7]="StreamingNotSupported",e[e.StreamClosed=8]="StreamClosed",e[e.UnexpectedArguments=9]="UnexpectedArguments"}(kn||(kn={}));var $n,Fn=((xn={})[kn.LoggedOutDuringRequest]="logged out while making a request to Stitch",xn[kn.MustAuthenticateFirst]="method called requires being authenticated",xn[kn.UserNoLongerValid]="user instance being accessed is no longer valid; please get a new user with auth.getUser()",xn[kn.UserNotFound]="user not found in list of users",xn[kn.UserNotLoggedIn]="cannot make the active user a logged out user; please use loginWithCredential() to switch to this user",xn[kn.CouldNotLoadPersistedAuthInfo]="failed to load stored auth information for Stitch",xn[kn.CouldNotPersistAuthInfo]="failed to save auth information for Stitch",xn[kn.StreamingNotSupported]="streaming not supported in this SDK",xn[kn.StreamClosed]="stream is closed",xn[kn.UnexpectedArguments]="function does not accept arguments",xn),zn=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Yn=function(e){function t(t){var n=this,r="("+kn[t]+"): "+Fn[t];return(n=e.call(this,r)||this).errorCode=t,n.errorCodeName=kn[t],n}return zn(t,e),t}(hn),qn=function(){function e(e,t){this.eventName=e,this.data=t}return e.MESSAGE_EVENT="message",e}(),Vn=function(){function e(t,n,r){this.eventName=t,n=n||"";for(var o=[],i=0;i<n.length;i++){var a=n[i];switch(a){case"%":if(i+2>=n.length)break;var s=void 0;switch(n.substring(i+1,i+3)){case"25":s=!0,o.push("%");break;case"0A":s=!0,o.push("\n");break;case"0D":s=!0,o.push("\r");break;default:s=!1}if(s){i+=2;continue}}o.push(a)}var u=o.join("");switch(this.eventName){case e.ERROR_EVENT_NAME:var c=void 0,l=void 0;try{var f=an.a.parse(u,{strict:!1});c=f[$n.Error],l=mn(f[$n.ErrorCode])}catch(e){c=u,l=dn.Unknown}this.error=new wn(c,l);break;case qn.MESSAGE_EVENT:this.data=an.a.parse(u,{strict:!1}),r&&(this.data=r.decode(this.data))}}return e.fromEvent=function(t,n){return new e(t.eventName,t.data,n)},e.ERROR_EVENT_NAME="error",e}();!function(e){e.Error="error",e.ErrorCode="error_code"}($n||($n={}));var Wn=function(){function e(e,t){this.eventStream=e,this.decoder=t,this.listeners=[]}return e.prototype.next=function(){var e=this;return this.eventStream.nextEvent().then((function(t){var n=Vn.fromEvent(t,e.decoder);if(n.eventName===Vn.ERROR_EVENT_NAME)throw n.error;return n.eventName===qn.MESSAGE_EVENT?n.data:e.next()}))},e.prototype.onNext=function(e){var t=this,n={onEvent:function(n){var r=Vn.fromEvent(n,t.decoder);r.eventName===qn.MESSAGE_EVENT&&e(r.data)}};this.eventStream.addListener(n)},e.prototype.onError=function(e){var t=this,n={onEvent:function(n){var r=Vn.fromEvent(n,t.decoder);r.eventName===Vn.ERROR_EVENT_NAME&&e(r.error)}};this.eventStream.addListener(n)},e.prototype.addListener=function(e){var t=this,n={onEvent:function(n){var r=Vn.fromEvent(n,t.decoder);r.eventName===Vn.ERROR_EVENT_NAME?e.onError&&e.onError(r.error):e.onNext&&e.onNext(r.data)}};this.listeners.push([e,n]),this.eventStream.addListener(n)},e.prototype.removeListener=function(e){for(var t=-1,n=0;n<this.listeners.length;n++)if(this.listeners[n][0]===e){t=n;break}if(-1!==t){var r=this.listeners[t][1];this.listeners.splice(t,1),this.eventStream.removeListener(r)}},e.prototype.isOpen=function(){return this.eventStream.isOpen()},e.prototype.close=function(){this.eventStream.close()},e}(),Kn=function(){function e(){}return e.TYPE="anon-user",e.DEFAULT_NAME="anon-user",e}(),Hn=function(e,t,n,r){this.authInfo=e,this.providerType=t,this.providerName=n,this.asLink=r},Gn=n("H7XF");function Jn(e){var t,n=e.length%4;0!=n?t=e+"=".repeat(4-n):t=e;var r=Object(Gn.toByteArray)(t);return function(e,t,n){var r="",o="";n=Math.min(e.length,n||1/0);for(var i=t=t||0;i<n;i++)e[i]<=127?(r+=Qn(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+Qn(o)}(r,0,r.length)}function Xn(e){var t;return"undefined"==typeof Uint8Array&&(t=Zn(e)),t=new Uint8Array(Zn(e)),Object(Gn.fromByteArray)(t)}function Zn(e){for(var t,n=1/0,r=e.length,o=null,i=[],a=0;a<r;a++){if((t=e.charCodeAt(a))>55295&&t<57344){if(!o){if(t>56319){(n-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(n-=3)>-1&&i.push(239,191,189);continue}o=t;continue}if(t<56320){(n-=3)>-1&&i.push(239,191,189),o=t;continue}t=o-55296<<10|t-56320|65536,o=null}else o&&((n-=3)>-1&&i.push(239,191,189),o=null);if(t<128){if((n-=1)<0)break;i.push(t)}else if(t<2048){if((n-=2)<0)break;i.push(t>>6|192,63&t|128)}else if(t<65536){if((n-=3)<0)break;i.push(t>>12|224,t>>6&63|128,63&t|128)}else{if(!(t<2097152))throw new Error("Invalid code point");if((n-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,63&t|128)}}return i}function Qn(e){try{return decodeURIComponent(e)}catch(e){return String.fromCharCode(65533)}}var er,tr=function(){function e(e,t){this.expires=e,this.issuedAt=t}return e.fromEncoded=function(t){var n=e.splitToken(t),r=JSON.parse(Jn(n[1]));return new e(r.exp,r.iat)},e.splitToken=function(e){var t=e.split(".");if(3!==t.length)throw new Error("Malformed JWT token. The string "+e+" should have 3 parts.");return t},e}(),nr=function(){function e(e){this.auth=e}return e.prototype.shouldRefresh=function(){var e=this.auth;if(void 0===e)return!1;if(!e.isLoggedIn)return!1;var t,n=e.authInfo;if(void 0===n)return!1;if(!n.isLoggedIn)return!1;try{t=tr.fromEncoded(n.accessToken)}catch(e){return console.log(e),!1}return!(Date.now()/1e3<t.expires-300)},e.prototype.run=function(){var e=this;this.shouldRefresh()?this.auth.refreshAccessToken().then((function(){e.nextTimeout=setTimeout((function(){return e.run()}),6e4)})).catch((function(){e.nextTimeout=setTimeout((function(){return e.run()}),6e4)})):this.nextTimeout=setTimeout((function(){return e.run()}),6e4)},e.prototype.stop=function(){clearTimeout(this.nextTimeout)},e}(),rr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.USER_ID="user_id",e.DEVICE_ID="device_id",e.ACCESS_TOKEN="access_token",e.REFRESH_TOKEN="refresh_token"}(er||(er={}));var or,ir=function(e){function t(t,n,r,o){return e.call(this,t,n,r,o)||this}return rr(t,e),t.fromJSON=function(e){return new t(e[er.USER_ID],e[er.DEVICE_ID],e[er.ACCESS_TOKEN],e[er.REFRESH_TOKEN])},t.prototype.toJSON=function(){var e;return(e={})[er.USER_ID]=this.userId,e[er.DEVICE_ID]=this.deviceId,e[er.ACCESS_TOKEN]=this.accessToken,e[er.REFRESH_TOKEN]=this.refreshToken,e},t}(un),ar=function(){function e(){}return e.keyPresent=function(e,t){if(void 0===t[e])throw new Error("expected "+e+" to be present")},e}(),sr=function(){function e(e,t,n){void 0===t&&(t={}),void 0===n&&(n=[]),this.userType=e,this.data=t,this.identities=n}return e.empty=function(){return new e},Object.defineProperty(e.prototype,"name",{get:function(){return this.data.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"email",{get:function(){return this.data.email},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pictureUrl",{get:function(){return this.data.picture},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"firstName",{get:function(){return this.data.first_name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lastName",{get:function(){return this.data.last_name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gender",{get:function(){return this.data.gender},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"birthday",{get:function(){return this.data.birthday},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minAge",{get:function(){var e=this.data.min_age;if(void 0!==e)return e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxAge",{get:function(){var e=this.data.max_age;if(void 0!==e)return e},enumerable:!0,configurable:!0}),e}(),ur=function(e,t){this.id=e,this.providerType=t},cr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.ID="id",e.PROVIDER_TYPE="provider_type"}(or||(or={}));var lr,fr=function(e){function t(t,n){return e.call(this,t,n)||this}return cr(t,e),t.fromJSON=function(e){return new t(e[or.ID],e[or.PROVIDER_TYPE])},t.prototype.toJSON=function(){var e;return(e={})[or.ID]=this.id,e[or.PROVIDER_TYPE]=this.providerType,e},t}(ur),pr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.DATA="data",e.USER_TYPE="type",e.IDENTITIES="identities"}(lr||(lr={}));var hr,dr=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return pr(t,e),t.fromJSON=function(e){return ar.keyPresent(lr.USER_TYPE,e),ar.keyPresent(lr.DATA,e),ar.keyPresent(lr.IDENTITIES,e),new t(e[lr.USER_TYPE],e[lr.DATA],e[lr.IDENTITIES].map(fr.fromJSON))},t.prototype.toJSON=function(){var e;return(e={})[lr.DATA]=this.data,e[lr.USER_TYPE]=this.userType,e[lr.IDENTITIES]=this.identities,e},t}(sr),yr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.ID="id",e.PROVIDER_TYPE="provider_type"}(hr||(hr={}));var br,gr=function(e){function t(t,n){return e.call(this,t,n)||this}return yr(t,e),t.decode=function(e){return new t(e[hr.ID],e[hr.PROVIDER_TYPE])},t.prototype.encode=function(){var e;return(e={})[hr.ID]=this.id,e[hr.PROVIDER_TYPE]=this.providerType,e},t}(ur),vr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.DATA="data",e.USER_TYPE="type",e.IDENTITIES="identities"}(br||(br={}));var mr,_r=function(e){function t(t,n,r){var o=e.call(this,t,n,r)||this;return o.userType=t,o.data=n,o.identities=r,o}return vr(t,e),t.decode=function(e){return e?new t(e[br.USER_TYPE],e[br.DATA],e[br.IDENTITIES].map((function(e){return gr.decode(e)}))):void 0},t.prototype.encode=function(){var e;return(e={})[br.DATA]=this.data,e[br.USER_TYPE]=this.userType,e[br.IDENTITIES]=this.identities.map((function(e){return e.encode()})),e},t}(sr),Er=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function Or(e,t){if(e.isEmpty)t.remove(Sr.ACTIVE_USER_STORAGE_NAME);else{var n=new Sr(e.userId,e.deviceId,e.accessToken,e.refreshToken,e.loggedInProviderType,e.loggedInProviderName,e.lastAuthActivity,e.userProfile?new _r(e.userProfile.userType,e.userProfile.data,e.userProfile.identities.map((function(e){return new gr(e.id,e.providerType)}))):void 0);t.set(Sr.ACTIVE_USER_STORAGE_NAME,JSON.stringify(n.encode()))}}function wr(e,t){var n=[];e.forEach((function(e,t){var r=new Sr(t,e.deviceId,e.accessToken,e.refreshToken,e.loggedInProviderType,e.loggedInProviderName,e.lastAuthActivity,e.userProfile?new _r(e.userProfile.userType,e.userProfile.data,e.userProfile.identities.map((function(e){return new gr(e.id,e.providerType)}))):void 0);n.push(r.encode())})),t.set(Sr.ALL_USERS_STORAGE_NAME,JSON.stringify(n))}!function(e){e.USER_ID="user_id",e.DEVICE_ID="device_id",e.ACCESS_TOKEN="access_token",e.REFRESH_TOKEN="refresh_token",e.LAST_AUTH_ACTIVITY="last_auth_activity",e.LOGGED_IN_PROVIDER_TYPE="logged_in_provider_type",e.LOGGED_IN_PROVIDER_NAME="logged_in_provider_name",e.USER_PROFILE="user_profile"}(mr||(mr={}));var Ar,Sr=function(e){function t(t,n,r,o,i,a,s,u){var c=e.call(this,t,n,r,o,i,a,s,u)||this;return c.userProfile=u,c}return Er(t,e),t.decode=function(e){var n=e[mr.USER_ID],r=e[mr.DEVICE_ID],o=e[mr.ACCESS_TOKEN],i=e[mr.REFRESH_TOKEN],a=e[mr.LOGGED_IN_PROVIDER_TYPE],s=e[mr.LOGGED_IN_PROVIDER_NAME],u=e[mr.USER_PROFILE],c=e[mr.LAST_AUTH_ACTIVITY];return new t(n,r,o,i,a,s,new Date(c),_r.decode(u))},t.prototype.encode=function(){var e={};return e[mr.USER_ID]=this.userId,e[mr.ACCESS_TOKEN]=this.accessToken,e[mr.REFRESH_TOKEN]=this.refreshToken,e[mr.DEVICE_ID]=this.deviceId,e[mr.LOGGED_IN_PROVIDER_NAME]=this.loggedInProviderName,e[mr.LOGGED_IN_PROVIDER_TYPE]=this.loggedInProviderType,e[mr.LAST_AUTH_ACTIVITY]=this.lastAuthActivity?this.lastAuthActivity.getTime():void 0,e[mr.USER_PROFILE]=this.userProfile?this.userProfile.encode():void 0,e},t.ACTIVE_USER_STORAGE_NAME="auth_info",t.ALL_USERS_STORAGE_NAME="all_auth_infos",t}(un),Nr=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},Tr=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},Ir=function(){function e(e,t,n,r){var o,i;void 0===r&&(r=!0),this.requestClient=e,this.authRoutes=t,this.storage=n;try{o=function(e){var t=e.get(Sr.ALL_USERS_STORAGE_NAME);if(!t)return new Map;var n=JSON.parse(t);if(!Array.isArray(n))throw new Yn(kn.CouldNotLoadPersistedAuthInfo);var r=new Map;return n.forEach((function(e){var t=Sr.decode(e);r.set(t.userId,t)})),r}(n)}catch(e){throw new Yn(kn.CouldNotLoadPersistedAuthInfo)}this.allUsersAuthInfo=o;try{i=function(e){var t=e.get(Sr.ACTIVE_USER_STORAGE_NAME);if(t)return Sr.decode(JSON.parse(t))}(n)}catch(e){throw new Yn(kn.CouldNotLoadPersistedAuthInfo)}this.activeUserAuthInfo=void 0===i?un.empty():i,this.activeUserAuthInfo.hasUser&&(this.currentUser=this.prepUser(this.activeUserAuthInfo)),r&&(this.accessTokenRefresher=new nr(this),this.accessTokenRefresher.run())}return Object.defineProperty(e.prototype,"authInfo",{get:function(){return this.activeUserAuthInfo},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLoggedIn",{get:function(){return void 0!==this.currentUser&&this.currentUser.isLoggedIn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"user",{get:function(){return this.currentUser},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasDeviceId",{get:function(){return void 0!==this.activeUserAuthInfo.deviceId&&""!==this.activeUserAuthInfo.deviceId&&"000000000000000000000000"!==this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"deviceId",{get:function(){if(this.hasDeviceId)return this.activeUserAuthInfo.deviceId},enumerable:!0,configurable:!0}),e.prototype.listUsers=function(){var e=this,t=[];return this.allUsersAuthInfo.forEach((function(n){t.push(e.prepUser(n))})),t},e.prototype.doAuthenticatedRequest=function(e,t){var n=this;try{return this.requestClient.doRequest(this.prepareAuthRequest(e,t||this.activeUserAuthInfo)).catch((function(t){return n.handleAuthFailure(t,e)}))}catch(e){return Promise.reject(e)}},e.prototype.doAuthenticatedRequestWithDecoder=function(e,t){return this.doAuthenticatedRequest(e).then((function(e){var n=an.a.parse(e.body,{strict:!1});return t?t.decode(n):n})).catch((function(e){throw Nn(e)}))},e.prototype.openAuthenticatedEventStream=function(e,t){var n=this;if(void 0===t&&(t=!0),!this.isLoggedIn)throw new Yn(kn.MustAuthenticateFirst);var r=e.useRefreshToken?this.activeUserAuthInfo.refreshToken:this.activeUserAuthInfo.accessToken;return this.requestClient.doStreamRequest(e.builder.withPath(e.path+"&stitch_at="+r).build(),t,(function(){return n.openAuthenticatedEventStream(e,!1)})).catch((function(r){return n.handleAuthFailureForEventStream(r,e,t)}))},e.prototype.openAuthenticatedStreamWithDecoder=function(e,t){return this.openAuthenticatedEventStream(e).then((function(e){return new Wn(e,t)}))},e.prototype.refreshAccessToken=function(){var e=this,t=(new jn.Builder).withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(In.POST);return this.doAuthenticatedRequest(t.build()).then((function(t){try{var n=ir.fromJSON(JSON.parse(t.body));e.activeUserAuthInfo=e.activeUserAuthInfo.merge(n)}catch(e){throw new gn(e,pn.DECODING_ERROR)}try{Or(e.activeUserAuthInfo,e.storage),e.allUsersAuthInfo.set(e.activeUserAuthInfo.userId,e.activeUserAuthInfo),wr(e.allUsersAuthInfo,e.storage)}catch(e){throw new Yn(kn.CouldNotPersistAuthInfo)}}))},e.prototype.switchToUserWithId=function(e){var t=this.allUsersAuthInfo.get(e);if(void 0===t)throw new Yn(kn.UserNotFound);if(!t.isLoggedIn)throw new Yn(kn.UserNotLoggedIn);this.activeUserAuthInfo.hasUser&&this.allUsersAuthInfo.set(this.activeUserAuthInfo.userId,this.activeUserAuthInfo.withNewAuthActivityTime());var n=t.withNewAuthActivityTime();this.allUsersAuthInfo.set(e,n),Or(n,this.storage),this.activeUserAuthInfo=n;var r=this.currentUser;return this.currentUser=this.prepUser(n),this.onAuthEvent(),this.dispatchAuthEvent({currentActiveUser:this.currentUser,kind:rn.ActiveUserChanged,previousActiveUser:r}),this.currentUser},e.prototype.loginWithCredentialInternal=function(e){var t,n,r=this;if(e instanceof Hn)return this.processLogin(e,e.authInfo,e.asLink).then((function(e){return r.dispatchAuthEvent({kind:rn.UserLoggedIn,loggedInUser:e}),e}));if(e.providerCapabilities.reusesExistingSession)try{for(var o=Nr(this.allUsersAuthInfo),i=o.next();!i.done;i=o.next()){var a=Tr(i.value,2),s=a[0],u=a[1];if(u.loggedInProviderType===e.providerType){if(u.isLoggedIn)try{return Promise.resolve(this.switchToUserWithId(s))}catch(e){return Promise.reject(e)}void 0!==u.userId&&this.removeUserWithIdInternal(u.userId)}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return this.doLogin(e,!1)},e.prototype.linkUserWithCredentialInternal=function(e,t){return void 0!==this.currentUser&&e.id!==this.currentUser.id?Promise.reject(new Yn(kn.UserNoLongerValid)):this.doLogin(t,!0)},e.prototype.logoutInternal=function(){return this.isLoggedIn&&this.currentUser?this.logoutUserWithIdInternal(this.currentUser.id):Promise.resolve()},e.prototype.logoutUserWithIdInternal=function(e){var t=this,n=this.allUsersAuthInfo.get(e);if(void 0===n)return Promise.reject(new Yn(kn.UserNotFound));if(!n.isLoggedIn)return Promise.resolve();var r=function(){t.clearUserAuthTokens(n.userId),n.loggedInProviderType===Kn.TYPE&&t.removeUserWithIdInternal(n.userId)};return this.doLogout(n).then((function(){r()})).catch((function(){r()}))},e.prototype.removeUserInternal=function(){return this.isLoggedIn&&void 0!==this.currentUser?this.removeUserWithIdInternal(this.currentUser.id):Promise.resolve()},e.prototype.removeUserWithIdInternal=function(e){var t=this,n=this.allUsersAuthInfo.get(e);if(void 0===n)return Promise.reject(new Yn(kn.UserNotFound));var r=function(){t.clearUserAuthTokens(n.userId),t.allUsersAuthInfo.delete(e),wr(t.allUsersAuthInfo,t.storage);var r=t.prepUser(n.loggedOut());t.onAuthEvent(),t.dispatchAuthEvent({kind:rn.UserRemoved,removedUser:r})};return n.isLoggedIn?this.doLogout(n).then((function(){r()})).catch((function(e){r()})):(r(),Promise.resolve())},e.prototype.close=function(){this.accessTokenRefresher&&this.accessTokenRefresher.stop()},e.prototype.prepareAuthRequest=function(e,t){if(!t.isLoggedIn)throw new Yn(kn.MustAuthenticateFirst);var n=e.builder,r=n.headers||{};return e.useRefreshToken?r[Sn.AUTHORIZATION]=Sn.getAuthorizationBearer(t.refreshToken):r[Sn.AUTHORIZATION]=Sn.getAuthorizationBearer(t.accessToken),n.withHeaders(r),n.build()},e.prototype.handleAuthFailureForEventStream=function(e,t,n){var r=this;if(void 0===n&&(n=!0),!(e instanceof wn)||e.errorCode!==dn.InvalidSession)throw e;if(t.useRefreshToken||!t.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),e;return this.tryRefreshAccessToken(t.startedAt).then((function(){return r.openAuthenticatedEventStream(t.builder.withShouldRefreshOnFailure(!1).build(),n)}))},e.prototype.handleAuthFailure=function(e,t){var n=this;if(!(e instanceof wn)||e.errorCode!==dn.InvalidSession)throw e;if(t.useRefreshToken||!t.shouldRefreshOnFailure)throw this.clearActiveUserAuth(),e;return this.tryRefreshAccessToken(t.startedAt).then((function(){return n.doAuthenticatedRequest(t.builder.withShouldRefreshOnFailure(!1).build())}))},e.prototype.tryRefreshAccessToken=function(e){if(!this.isLoggedIn)throw new Yn(kn.LoggedOutDuringRequest);try{if(tr.fromEncoded(this.activeUserAuthInfo.accessToken).issuedAt>=e)return Promise.resolve()}catch(e){}return this.refreshAccessToken()},e.prototype.prepUser=function(e){return this.userFactory.makeUser(e.userId,e.loggedInProviderType,e.loggedInProviderName,e.isLoggedIn,e.lastAuthActivity,e.userProfile)},e.prototype.attachAuthOptions=function(e){var t={};t.device=this.deviceInfo,e.options=t},e.prototype.doLogin=function(e,t){var n=this,r=this.currentUser;return this.doLoginRequest(e,t).then((function(r){return n.processLoginResponse(e,r,t)})).then((function(e){return n.onAuthEvent(),t?n.dispatchAuthEvent({kind:rn.UserLinked,linkedUser:e}):(n.dispatchAuthEvent({kind:rn.UserLoggedIn,loggedInUser:e}),n.dispatchAuthEvent({currentActiveUser:e,kind:rn.ActiveUserChanged,previousActiveUser:r})),e}))},e.prototype.doLoginRequest=function(e,t){var n=new Mn.Builder;n.withMethod(In.POST),t?n.withPath(this.authRoutes.getAuthProviderLinkRoute(e.providerName)):n.withPath(this.authRoutes.getAuthProviderLoginRoute(e.providerName));var r=e.material;if(this.attachAuthOptions(r),n.withDocument(r),!t)return this.requestClient.doRequest(n.build());var o=new Cn(n.build(),n.document);return this.doAuthenticatedRequest(o)},e.prototype.processLogin=function(e,t,n){var r=this,o=this.activeUserAuthInfo,i=this.currentUser;return t=this.activeUserAuthInfo.merge(new un(t.userId,t.deviceId,t.accessToken,t.refreshToken,e.providerType,e.providerName,void 0,void 0)),this.activeUserAuthInfo=t,this.currentUser=this.userFactory.makeUser(this.activeUserAuthInfo.userId,e.providerType,e.providerName,this.activeUserAuthInfo.isLoggedIn,new Date,void 0),this.doGetUserProfile().then((function(n){o.hasUser&&r.allUsersAuthInfo.set(o.userId,o.withNewAuthActivityTime()),t=t.merge(new un(t.userId,t.deviceId,t.accessToken,t.refreshToken,e.providerType,e.providerName,new Date,n));var a=!r.allUsersAuthInfo.has(t.userId);try{Or(t,r.storage),r.allUsersAuthInfo.set(t.userId,t),wr(r.allUsersAuthInfo,r.storage)}catch(e){throw r.activeUserAuthInfo=o,r.currentUser=i,t.userId!==o.userId&&t.userId&&r.allUsersAuthInfo.delete(t.userId),new Yn(kn.CouldNotPersistAuthInfo)}return r.activeUserAuthInfo=t,r.currentUser=r.userFactory.makeUser(r.activeUserAuthInfo.userId,e.providerType,e.providerName,r.activeUserAuthInfo.isLoggedIn,r.activeUserAuthInfo.lastAuthActivity,n),a&&(r.onAuthEvent(),r.dispatchAuthEvent({addedUser:r.currentUser,kind:rn.UserAdded})),r.currentUser})).catch((function(e){if(e instanceof Yn)throw e;if(n||o.hasUser){var t=r.activeUserAuthInfo;r.activeUserAuthInfo=o,r.currentUser=i,n&&(r.activeUserAuthInfo=r.activeUserAuthInfo.withAuthProvider(t.loggedInProviderType,t.loggedInProviderName))}else r.clearActiveUserAuth();throw e}))},e.prototype.processLoginResponse=function(e,t,n){try{if(!t)throw new wn("the login response could not be processed for credential: "+e+";response was undefined");if(!t.body)throw new wn("response with status code "+t.statusCode+" has empty body");return this.processLogin(e,ir.fromJSON(JSON.parse(t.body)),n)}catch(e){throw new gn(e,pn.DECODING_ERROR)}},e.prototype.doGetUserProfile=function(){var e=new jn.Builder;return e.withMethod(In.GET).withPath(this.authRoutes.profileRoute),this.doAuthenticatedRequest(e.build()).then((function(e){return dr.fromJSON(JSON.parse(e.body))})).catch((function(e){throw e instanceof hn?e:new gn(e,pn.DECODING_ERROR)}))},e.prototype.doLogout=function(e){var t=new jn.Builder;return t.withRefreshToken().withPath(this.authRoutes.sessionRoute).withMethod(In.DELETE),this.doAuthenticatedRequest(t.build(),e).then((function(){}))},e.prototype.clearActiveUserAuth=function(){this.isLoggedIn&&this.clearUserAuthTokens(this.activeUserAuthInfo.userId)},e.prototype.clearUserAuthTokens=function(e){var t=this.allUsersAuthInfo.get(e);if(void 0===t){if(this.activeUserAuthInfo.userId!==e)throw new Yn(kn.UserNotFound)}else if(!t.isLoggedIn)return;try{var n=void 0;if(t){var r=t.loggedOut();this.allUsersAuthInfo.set(e,r),wr(this.allUsersAuthInfo,this.storage),n=this.userFactory.makeUser(r.userId,r.loggedInProviderType,r.loggedInProviderName,r.isLoggedIn,r.lastAuthActivity,r.userProfile)}var o=!1;this.activeUserAuthInfo.hasUser&&this.activeUserAuthInfo.userId===e&&(o=!0,this.activeUserAuthInfo=this.activeUserAuthInfo.withClearedUser(),this.currentUser=void 0,Or(this.activeUserAuthInfo,this.storage)),n&&(this.onAuthEvent(),this.dispatchAuthEvent({kind:rn.UserLoggedOut,loggedOutUser:n}),o&&this.dispatchAuthEvent({currentActiveUser:void 0,kind:rn.ActiveUserChanged,previousActiveUser:n}))}catch(e){throw new Yn(kn.CouldNotPersistAuthInfo)}},e}(),Pr=function(){function e(e,t,n,r,o,i){this.id=e,this.loggedInProviderType=t,this.loggedInProviderName=n,this.profile=void 0===i?sr.empty():i,this.isLoggedIn=r,this.lastAuthActivity=o}return Object.defineProperty(e.prototype,"userType",{get:function(){return this.profile.userType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"identities",{get:function(){return this.profile.identities},enumerable:!0,configurable:!0}),e.prototype.equals=function(e){return this.id===e.id&&JSON.stringify(this.identities)===JSON.stringify(e.identities)&&this.isLoggedIn===e.isLoggedIn&&this.loggedInProviderName===e.loggedInProviderName&&this.loggedInProviderType===e.loggedInProviderType&&JSON.stringify(this.profile)===JSON.stringify(e.profile)},e}();!function(e){e.DEVICE_ID="deviceId",e.APP_ID="appId",e.APP_VERSION="appVersion",e.PLATFORM="platform",e.PLATFORM_VERSION="platformVersion",e.SDK_VERSION="sdkVersion"}(Ar||(Ar={}));var Rr,Br=Ar,Dr=function(e){void 0===e&&(e=!1),this.reusesExistingSession=e},jr=function(e){void 0===e&&(e=Kn.DEFAULT_NAME),this.providerType=Kn.TYPE,this.material={},this.providerCapabilities=new Dr(!0),this.providerName=e};!function(){function e(){}e.TYPE="custom-token",e.DEFAULT_NAME="custom-token"}();!function(e){e.TOKEN="token"}(Rr||(Rr={}));var Ur,Cr=function(){function e(){}return e.TYPE="oauth2-facebook",e.DEFAULT_NAME="oauth2-facebook",e}();!function(e){e.ACCESS_TOKEN="accessToken"}(Ur||(Ur={}));!function(){function e(e,t){var n;void 0===t&&(t=Cr.DEFAULT_NAME),this.providerType=Cr.TYPE,this.providerName=t,this.accessToken=e,this.material=((n={})[Ur.ACCESS_TOKEN]=this.accessToken,n)}Object.defineProperty(e.prototype,"providerCapabilities",{get:function(){return new Dr(!1)},enumerable:!0,configurable:!0})}();var xr,kr=function(){function e(){}return e.TYPE="custom-function",e.DEFAULT_NAME="custom-function",e}();(function(){function e(e,t){void 0===t&&(t=kr.DEFAULT_NAME),this.providerType=kr.TYPE,this.providerName=t,this.material=e}Object.defineProperty(e.prototype,"providerCapabilities",{get:function(){return new Dr(!1)},enumerable:!0,configurable:!0})})(),function(){function e(){}e.TYPE="oauth2-google",e.DEFAULT_NAME="oauth2-google"}();!function(e){e.AUTH_CODE="authCode"}(xr||(xr={}));var Lr;!function(){function e(){}e.TYPE="api-key",e.DEFAULT_NAME="api-key"}();!function(e){e.KEY="key"}(Lr||(Lr={}));var Mr,$r=function(e,t,n){this.providerName=e,this.requestClient=t,this.baseRoute=n};!function(e){e.ID="_id",e.KEY="key",e.NAME="name",e.DISABLED="disabled"}(Mr||(Mr={}));var Fr,zr=function(){function e(e,t,n,r){this.id=an.b.ObjectID.createFromHexString(e),this.key=t,this.name=n,this.disabled=r}return e.readFromApi=function(t){var n="string"==typeof t?JSON.parse(t):t;return ar.keyPresent(Mr.ID,n),ar.keyPresent(Mr.NAME,n),ar.keyPresent(Mr.DISABLED,n),new e(n[Mr.ID],n[Mr.KEY],n[Mr.NAME],n[Mr.DISABLED])},e.prototype.toJSON=function(){var e;return(e={})[Mr.ID]=this.id,e[Mr.KEY]=this.key,e[Mr.NAME]=this.name,e[Mr.DISABLED]=this.disabled,e},e}(),Yr=function(){function e(){}return e.TYPE="api-key",e.DEFAULT_NAME="api-key",e}(),qr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.NAME="name"}(Fr||(Fr={}));var Vr,Wr=function(e){function t(t,n){var r=n.baseAuthRoute+"/api_keys",o=Yr.DEFAULT_NAME;return e.call(this,o,t,r)||this}return qr(t,e),t.prototype.createApiKey=function(e){var t,n=new Cn.Builder;return n.withMethod(In.POST).withPath(this.baseRoute).withDocument((t={},t[Fr.NAME]=e,t)).withRefreshToken(),this.requestClient.doAuthenticatedRequest(n.build()).then((function(e){return zr.readFromApi(e.body)})).catch((function(e){throw Nn(e)}))},t.prototype.fetchApiKey=function(e){var t=new jn.Builder;return t.withMethod(In.GET).withPath(this.getApiKeyRoute(e.toHexString())),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then((function(e){return zr.readFromApi(e.body)})).catch((function(e){throw Nn(e)}))},t.prototype.fetchApiKeys=function(){var e=new jn.Builder;return e.withMethod(In.GET).withPath(this.baseRoute),e.withRefreshToken(),this.requestClient.doAuthenticatedRequest(e.build()).then((function(e){var t=JSON.parse(e.body);if(Array.isArray(t))return t.map((function(e){return zr.readFromApi(e)}));throw new gn(new Error("unexpected non-array response from server"),pn.DECODING_ERROR)})).catch((function(e){throw Nn(e)}))},t.prototype.deleteApiKey=function(e){var t=new jn.Builder;return t.withMethod(In.DELETE).withPath(this.getApiKeyRoute(e.toHexString())),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then((function(){}))},t.prototype.enableApiKey=function(e){var t=new jn.Builder;return t.withMethod(In.PUT).withPath(this.getApiKeyEnableRoute(e.toHexString())),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then((function(){}))},t.prototype.disableApiKey=function(e){var t=new jn.Builder;return t.withMethod(In.PUT).withPath(this.getApiKeyDisableRoute(e.toHexString())),t.withRefreshToken(),this.requestClient.doAuthenticatedRequest(t.build()).then((function(){}))},t.prototype.getApiKeyRoute=function(e){return this.baseRoute+"/"+e},t.prototype.getApiKeyEnableRoute=function(e){return this.getApiKeyRoute(e)+"/enable"},t.prototype.getApiKeyDisableRoute=function(e){return this.getApiKeyRoute(e)+"/disable"},t}($r);!function(e){e.KEY="key"}(Vr||(Vr={}));var Kr,Hr,Gr=function(){function e(){}return e.TYPE="local-userpass",e.DEFAULT_NAME="local-userpass",e}(),Jr=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.EMAIL="email",e.PASSWORD="password"}(Kr||(Kr={})),function(e){e.EMAIL="email",e.PASSWORD="password",e.TOKEN="token",e.TOKEN_ID="tokenId",e.ARGS="arguments"}(Hr||(Hr={}));var Xr,Zr=function(e){function t(t,n,r){void 0===t&&(t=Gr.DEFAULT_NAME);var o=r.getAuthProviderRoute(t);return e.call(this,t,n,o)||this}return Jr(t,e),t.prototype.registerWithEmailInternal=function(e,t){var n,r=new Mn.Builder;return r.withMethod(In.POST).withPath(this.getRegisterWithEmailRoute()),r.withDocument(((n={})[Kr.EMAIL]=e,n[Kr.PASSWORD]=t,n)),this.requestClient.doRequest(r.build()).then((function(){}))},t.prototype.confirmUserInternal=function(e,t){var n,r=new Mn.Builder;return r.withMethod(In.POST).withPath(this.getConfirmUserRoute()),r.withDocument(((n={})[Hr.TOKEN]=e,n[Hr.TOKEN_ID]=t,n)),this.requestClient.doRequest(r.build()).then((function(){}))},t.prototype.resendConfirmationEmailInternal=function(e){var t,n=new Mn.Builder;return n.withMethod(In.POST).withPath(this.getResendConfirmationEmailRoute()),n.withDocument(((t={})[Hr.EMAIL]=e,t)),this.requestClient.doRequest(n.build()).then((function(){}))},t.prototype.resetPasswordInternal=function(e,t,n){var r,o=new Mn.Builder;return o.withMethod(In.POST).withPath(this.getResetPasswordRoute()),o.withDocument(((r={})[Hr.TOKEN]=e,r[Hr.TOKEN_ID]=t,r[Hr.PASSWORD]=n,r)),this.requestClient.doRequest(o.build()).then((function(){}))},t.prototype.sendResetPasswordEmailInternal=function(e){var t,n=new Mn.Builder;return n.withMethod(In.POST).withPath(this.getSendResetPasswordEmailRoute()),n.withDocument(((t={})[Hr.EMAIL]=e,t)),this.requestClient.doRequest(n.build()).then((function(){}))},t.prototype.callResetPasswordFunctionInternal=function(e,t,n){var r,o=new Mn.Builder;return o.withMethod(In.POST).withPath(this.getCallResetPasswordFunctionRoute()),o.withDocument(((r={})[Hr.EMAIL]=e,r[Hr.PASSWORD]=t,r[Hr.ARGS]=n,r)),this.requestClient.doRequest(o.build()).then((function(){}))},t.prototype.getRegisterWithEmailRoute=function(){return this.getExtensionRoute("register")},t.prototype.getConfirmUserRoute=function(){return this.getExtensionRoute("confirm")},t.prototype.getResendConfirmationEmailRoute=function(){return this.getExtensionRoute("confirm/send")},t.prototype.getResetPasswordRoute=function(){return this.getExtensionRoute("reset")},t.prototype.getSendResetPasswordEmailRoute=function(){return this.getExtensionRoute("reset/send")},t.prototype.getCallResetPasswordFunctionRoute=function(){return this.getExtensionRoute("reset/call")},t.prototype.getExtensionRoute=function(e){return this.baseRoute+"/"+e},t}($r);!function(e){e.USERNAME="username",e.PASSWORD="password"}(Xr||(Xr={}));var Qr;!function(e){e.Normal="normal",e.Server="server",e.Unknown="unknown"}(Qr||(Qr={}));!function(){function e(e){this.suiteName=e,this.storage={}}e.prototype.get=function(e){return this.storage[this.suiteName+"."+e]},e.prototype.set=function(e,t){this.storage[this.suiteName+"."+e]=t},e.prototype.remove=function(e){delete this.storage[this.suiteName+"."+e]}}();var eo,to=function(){};!function(e){e[e.AUTH_EVENT=0]="AUTH_EVENT"}(eo||(eo={}));var no=function(){function e(e,t,n){this.serviceField="service",this.argumentsField="arguments",this.requestClient=e,this.serviceRoutes=t,this.serviceName=n,this.serviceBinders=[],this.allocatedStreams=[]}return e.prototype.callFunction=function(e,t,n){return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(e,t),n)},e.prototype.streamFunction=function(e,t,n){var r=this;return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(e,t),n).then((function(e){return r.allocatedStreams.push(e),e}))},e.prototype.bind=function(e){this.serviceBinders.push(e)},e.prototype.onRebindEvent=function(e){switch(e.type){case eo.AUTH_EVENT:e.event.kind===rn.ActiveUserChanged&&this.closeAllocatedStreams()}this.serviceBinders.forEach((function(t){t.onRebindEvent(e)}))},e.prototype.getStreamServiceFunctionRequest=function(e,t){var n={name:e};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=t;var r=new jn.Builder;return r.withMethod(In.GET).withPath(this.serviceRoutes.functionCallRoute+"?stitch_request="+encodeURIComponent(Xn(an.a.stringify(n)))),r.build()},e.prototype.getCallServiceFunctionRequest=function(e,t){var n={name:e};void 0!==this.serviceName&&(n[this.serviceField]=this.serviceName),n[this.argumentsField]=t;var r=new Cn.Builder;return r.withMethod(In.POST).withPath(this.serviceRoutes.functionCallRoute),r.withDocument(n),r.build()},e.prototype.closeAllocatedStreams=function(){this.allocatedStreams.forEach((function(e){e.isOpen()&&e.close()})),this.allocatedStreams=[]},e}(),ro=function(){function e(e,t){this.functionService=new no(e,t.serviceRoutes)}return e.prototype.callFunction=function(e,t,n){return this.functionService.callFunction(e,t,n)},e}(),oo=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}},io=function(){function e(e){this.reconnecter=e,this.closed=!1,this.events=[],this.listeners=[],this.lastErr=void 0}return e.prototype.isOpen=function(){return!this.closed},e.prototype.addListener=function(e){var t=this;this.closed?setTimeout((function(){return e.onEvent(new qn(Vn.ERROR_EVENT_NAME,"stream closed"))}),0):void 0===this.lastErr?(this.listeners.push(e),this.poll()):setTimeout((function(){return e.onEvent(new qn(Vn.ERROR_EVENT_NAME,t.lastErr))}),0)},e.prototype.removeListener=function(e){var t=this.listeners.indexOf(e);-1!==t&&this.listeners.splice(t,1)},e.prototype.nextEvent=function(){var e=this;return this.closed?Promise.reject(new qn(Vn.ERROR_EVENT_NAME,"stream closed")):void 0!==this.lastErr?Promise.reject(new qn(Vn.ERROR_EVENT_NAME,this.lastErr)):new Promise((function(t,n){e.listenOnce({onEvent:function(e){t(e)}})}))},e.prototype.close=function(){this.closed||(this.closed=!0,this.afterClose())},e.prototype.reconnect=function(t){var n=this;this.reconnecter?this.reconnecter().then((function(e){n.onReconnect(e)})).catch((function(r){if(!(r instanceof hn&&r instanceof gn))return n.closed=!0,n.events.push(new qn(Vn.ERROR_EVENT_NAME,"stream closed: "+t)),void n.poll();setTimeout((function(){return n.reconnect(r)}),e.RETRY_TIMEOUT_MILLIS)})):this.closed||(this.closed=!0,this.events.push(new qn(Vn.ERROR_EVENT_NAME,"stream closed: "+t)),this.poll())},e.prototype.poll=function(){for(var e,t;0!==this.events.length;){var n=this.events.pop();try{for(var r=oo(this.listeners),o=r.next();!o.done;o=r.next()){var i=o.value;i.onEvent&&i.onEvent(n)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}}},e.prototype.listenOnce=function(e){var t=this;if(this.closed)setTimeout((function(){return e.onEvent(new qn(Vn.ERROR_EVENT_NAME,"stream closed"))}),0);else if(void 0===this.lastErr){var n={onEvent:function(r){t.removeListener(n),e.onEvent(r)}};this.addListener(n)}else setTimeout((function(){return e.onEvent(new qn(Vn.ERROR_EVENT_NAME,t.lastErr))}),0)},e.RETRY_TIMEOUT_MILLIS=5e3,e}(),ao=function(e,t,n,r){this.method=e,this.url=t,this.headers=n,this.body=r};!function(e){var t=function(){function t(e){e&&(this.method=e.method,this.url=e.url,this.headers=e.headers,this.body=e.body)}return t.prototype.withMethod=function(e){return this.method=e,this},t.prototype.withUrl=function(e){return this.url=e,this},t.prototype.withHeaders=function(e){return this.headers=e,this},t.prototype.withBody=function(e){return this.body=e,this},t.prototype.build=function(){if(void 0===this.method)throw new Error("must set method");if(void 0===this.url)throw new Error("must set non-empty url");return new e(this.method,this.url,void 0===this.headers?{}:this.headers,this.body)},t}();e.Builder=t}(ao||(ao={}));var so=function(e,t,n){var r=this;this.statusCode=t,this.body=n,this.headers={},Object.keys(e).map((function(t,n){r.headers[t.toLocaleLowerCase()]=e[t]}))},uo="/api/client/v2.0";function co(e){return uo+"/app/"+e}function lo(e){return co(e)+"/functions/call"}function fo(e,t){return co(e)+"/auth/providers/"+t}function po(e,t){return fo(e,t)+"/login"}var ho,yo=function(){function e(e){var t=this;this.baseAuthRoute=uo+"/auth",this.sessionRoute=t.baseAuthRoute+"/session",this.profileRoute=t.baseAuthRoute+"/profile",this.clientAppId=e}return e.prototype.getAuthProviderRoute=function(e){return fo(this.clientAppId,e)},e.prototype.getAuthProviderLoginRoute=function(e){return po(this.clientAppId,e)},e.prototype.getAuthProviderLinkRoute=function(e){return function(e,t){return po(e,t)+"?link=true"}(this.clientAppId,e)},e.prototype.getAuthProviderExtensionRoute=function(e,t){return this.getAuthProviderRoute(e)+"/"+t},e}();!function(e){e.DEPLOYMENT_MODEL="deployment_model",e.LOCATION="location",e.HOSTNAME="hostname"}(ho||(ho={}));var bo=function(){function e(e,t,n){this.deploymentModel=e,this.location=t,this.hostname=n}return e.fromJSON=function(t){return new e(t[ho.DEPLOYMENT_MODEL],t[ho.LOCATION],t[ho.HOSTNAME])},e.prototype.toJSON=function(){var e;return(e={})[ho.DEPLOYMENT_MODEL]=this.deploymentModel,e[ho.LOCATION]=this.location,e[ho.HOSTNAME]=this.hostname,e},e}();var go=function(){function e(e,t){this.baseUrl=e,this.transport=t}return e.prototype.doRequestToURL=function(e,t){return this.transport.roundTrip(this.buildRequest(e,t)).catch((function(e){throw new gn(e,pn.TRANSPORT_ERROR)})).then((function(e){return(t=e).statusCode>=200&&t.statusCode<300?t:Tn(t);var t}))},e.prototype.doStreamRequestToURL=function(e,t,n,r){return void 0===n&&(n=!0),this.transport.stream(this.buildRequest(e,t),n,r).catch((function(e){if(e instanceof hn)throw e;throw new gn(e,pn.TRANSPORT_ERROR)}))},e.prototype.buildRequest=function(e,t){return(new ao.Builder).withMethod(e.method).withUrl(""+t+e.path).withHeaders(e.headers).withBody(e.body).build()},e}(),vo=function(e){this.clientAppId=e,this.functionCallRoute=lo(e)},mo=function(e){this.clientAppId=e,this.authRoutes=new yo(e),this.serviceRoutes=new vo(e),this.appMetadataRoute=function(e){return co(e)+"/location"}(e),this.functionCallRoute=lo(e)},_o=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Eo=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))},Oo=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},wo=function(e){function t(t,n,r){var o=e.call(this,n,r)||this;return o.clientAppId=t,o.routes=new mo(t),o}return _o(t,e),t.prototype.doRequest=function(t){var n=this;return this.initAppMetadata().then((function(r){return e.prototype.doRequestToURL.call(n,t,r.hostname)}))},t.prototype.doStreamRequest=function(t,n,r){var o=this;return void 0===n&&(n=!0),this.initAppMetadata().then((function(i){return e.prototype.doStreamRequestToURL.call(o,t,i.hostname,n,r)}))},t.prototype.getBaseURL=function(){return Eo(this,void 0,void 0,(function(){return Oo(this,(function(e){return[2,this.initAppMetadata().then((function(e){return e.hostname}))]}))}))},t.prototype.initAppMetadata=function(){var t=this;if(this.appMetadata)return Promise.resolve(this.appMetadata);var n=(new Pn.Builder).withMethod(In.GET).withPath(this.routes.appMetadataRoute).build();return e.prototype.doRequestToURL.call(this,n,this.baseUrl).then((function(e){return t.appMetadata=bo.fromJSON(an.a.parse(e.body)),t.appMetadata}))},t}(go),Ao=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),So=(function(e){function t(t,n){return e.call(this,t,n)||this}Ao(t,e),t.prototype.doRequest=function(t){return e.prototype.doRequestToURL.call(this,t,this.baseUrl)},t.prototype.doStreamRequest=function(t,n,r){return void 0===n&&(n=!0),e.prototype.doStreamRequestToURL.call(this,t,this.baseUrl,n,r)},t.prototype.getBaseURL=function(){return Promise.resolve(this.baseUrl)}}(go),function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),No=function(e){function t(t){var n=e.call(this)||this;return n.type=eo.AUTH_EVENT,n.event=t,n}return So(t,e),t}(to),To=function(){function e(e,t,n,r){this.baseUrl=e,this.storage=t,this.dataDirectory=n,this.transport=r}return e.prototype.builder=function(){return new e.Builder(this)},e}();!function(e){var t=function(){function t(e){e&&(this.baseUrl=e.baseUrl,this.storage=e.storage,this.dataDirectory=e.dataDirectory,this.transport=e.transport)}return t.prototype.withBaseUrl=function(e){return this.baseUrl=e,this},t.prototype.withStorage=function(e){return this.storage=e,this},t.prototype.withDataDirectory=function(e){return this.dataDirectory=e,this},t.prototype.withTransport=function(e){return this.transport=e,this},t.prototype.build=function(){return new e(this.baseUrl,this.storage,this.dataDirectory,this.transport)},t}();e.Builder=t}(To||(To={}));var Io=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Po=function(e){function t(t,n,r){var o=e.call(this,t.baseUrl,t.storage,t.dataDirectory,t.transport)||this;return o.localAppVersion=r,o.localAppName=n,o}return Io(t,e),t.prototype.builder=function(){return new t.Builder(this)},t}(To);!function(e){var t=function(t){function n(e){var n=t.call(this,e)||this;return e&&(n.localAppVersion=e.localAppVersion,n.localAppName=e.localAppName),n}return Io(n,t),n.prototype.withLocalAppName=function(e){return this.localAppName=e,this},n.prototype.withLocalAppVersion=function(e){return this.localAppVersion=e,this},n.prototype.build=function(){var n=t.prototype.build.call(this);return new e(n,this.localAppName,this.localAppVersion)},n}(To.Builder);e.Builder=t}(Po||(Po={}));var Ro,Bo=function(e,t,n,r){this.clientAppId=e,this.dataDirectory=t,this.localAppName=n,this.localAppVersion=r},Do=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),jo=function(e){function t(t,n){return e.call(this,t,n)||this}return Do(t,e),t.prototype.createApiKey=function(t){return e.prototype.createApiKey.call(this,t)},t.prototype.fetchApiKey=function(t){return e.prototype.fetchApiKey.call(this,t)},t.prototype.fetchApiKeys=function(){return e.prototype.fetchApiKeys.call(this)},t.prototype.deleteApiKey=function(t){return e.prototype.deleteApiKey.call(this,t)},t.prototype.enableApiKey=function(t){return e.prototype.enableApiKey.call(this,t)},t.prototype.disableApiKey=function(t){return e.prototype.disableApiKey.call(this,t)},t}(Wr);(Ro||(Ro={})).factory=new(function(){function e(){}return e.prototype.getClient=function(e,t,n){return new jo(e,n)},e}());var Uo,Co=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),xo=function(e){function t(t,n){return e.call(this,Gr.DEFAULT_NAME,t,n)||this}return Co(t,e),t.prototype.registerWithEmail=function(t,n){return e.prototype.registerWithEmailInternal.call(this,t,n)},t.prototype.confirmUser=function(t,n){return e.prototype.confirmUserInternal.call(this,t,n)},t.prototype.resendConfirmationEmail=function(t){return e.prototype.resendConfirmationEmailInternal.call(this,t)},t.prototype.resetPassword=function(t,n,r){return e.prototype.resetPasswordInternal.call(this,t,n,r)},t.prototype.sendResetPasswordEmail=function(t){return e.prototype.sendResetPasswordEmailInternal.call(this,t)},t.prototype.callResetPasswordFunction=function(t,n,r){return e.prototype.callResetPasswordFunctionInternal.call(this,t,n,r)},t}(Zr);(Uo||(Uo={})).factory=new(function(){function e(){}return e.prototype.getClient=function(e,t,n){return new xo(t,n)},e}());var ko={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(ko.arrayBuffer)var Lo=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],Mo=ArrayBuffer.isView||function(e){return e&&Lo.indexOf(Object.prototype.toString.call(e))>-1};function $o(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function Fo(e){return"string"!=typeof e&&(e=String(e)),e}function zo(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return ko.iterable&&(t[Symbol.iterator]=function(){return t}),t}function Yo(e){this.map={},e instanceof Yo?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function qo(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function Vo(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function Wo(e){var t=new FileReader,n=Vo(t);return t.readAsArrayBuffer(e),n}function Ko(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function Ho(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:ko.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:ko.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:ko.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():ko.arrayBuffer&&ko.blob&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=Ko(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):ko.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||Mo(e))?this._bodyArrayBuffer=Ko(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):ko.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},ko.blob&&(this.blob=function(){var e=qo(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?qo(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(Wo)}),this.text=function(){var e,t,n,r=qo(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=Vo(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},ko.formData&&(this.formData=function(){return this.text().then(Xo)}),this.json=function(){return this.text().then(JSON.parse)},this}Yo.prototype.append=function(e,t){e=$o(e),t=Fo(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},Yo.prototype.delete=function(e){delete this.map[$o(e)]},Yo.prototype.get=function(e){return e=$o(e),this.has(e)?this.map[e]:null},Yo.prototype.has=function(e){return this.map.hasOwnProperty($o(e))},Yo.prototype.set=function(e,t){this.map[$o(e)]=Fo(t)},Yo.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},Yo.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),zo(e)},Yo.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),zo(e)},Yo.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),zo(e)},ko.iterable&&(Yo.prototype[Symbol.iterator]=Yo.prototype.entries);var Go=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function Jo(e,t){var n,r,o=(t=t||{}).body;if(e instanceof Jo){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new Yo(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new Yo(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),Go.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function Xo(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function Zo(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new Yo(t.headers),this.url=t.url||"",this._initBody(e)}Jo.prototype.clone=function(){return new Jo(this,{body:this._bodyInit})},Ho.call(Jo.prototype),Ho.call(Zo.prototype),Zo.prototype.clone=function(){return new Zo(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Yo(this.headers),url:this.url})},Zo.error=function(){var e=new Zo(null,{status:0,statusText:""});return e.type="error",e};var Qo=[301,302,303,307,308];Zo.redirect=function(e,t){if(-1===Qo.indexOf(t))throw new RangeError("Invalid status code");return new Zo(null,{status:t,headers:{location:e}})};var ei=self.DOMException;try{new ei}catch(e){(ei=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),ei.prototype.constructor=ei}function ti(e,t){return new Promise((function(n,r){var o=new Jo(e,t);if(o.signal&&o.signal.aborted)return r(new ei("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var e,t,r={status:i.status,statusText:i.statusText,headers:(e=i.getAllResponseHeaders()||"",t=new Yo,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}})),t)};r.url="responseURL"in i?i.responseURL:r.headers.get("X-Request-URL");var o="response"in i?i.response:i.responseText;n(new Zo(o,r))},i.onerror=function(){r(new TypeError("Network request failed"))},i.ontimeout=function(){r(new TypeError("Network request failed"))},i.onabort=function(){r(new ei("Aborted","AbortError"))},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&ko.blob&&(i.responseType="blob"),o.headers.forEach((function(e,t){i.setRequestHeader(t,e)})),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send(void 0===o._bodyInit?null:o._bodyInit)}))}ti.polyfill=!0,self.fetch||(self.fetch=ti,self.Headers=Yo,self.Request=Jo,self.Response=Zo);var ni,ri=function(){function e(){}return e.prototype.roundTrip=function(e){var t=ti(e.url,{body:e.body,headers:e.headers,method:e.method,mode:"cors"}),n=t.then((function(e){return e.text()}));return Promise.all([t,n]).then((function(e){var t=e[0],n=e[1],r={};return t.headers.forEach((function(e,t){r[t]=e})),new so(r,t.status,n)}))},e.prototype.stream=function(e,t,n){throw void 0===t&&(t=!0),new Yn(kn.StreamingNotSupported)},e}(),oi=function(){function e(e){this.suiteName=e}return e.prototype.get=function(e){return localStorage.getItem(this.getKey(e))},e.prototype.set=function(e,t){localStorage.setItem(this.getKey(e),t)},e.prototype.remove=function(e){localStorage.removeItem(this.getKey(e))},e.prototype.getKey=function(e){return"__stitch.client."+this.suiteName+"."+e},e}(),ii=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ai=function(e){function t(t,n,r,o){var i=e.call(this,o)||this;return i.evtSrc=t,i.onOpenError=r,i.openedOnce=!1,i.evtSrc.onopen=function(e){n(i),i.openedOnce=!0},i.reset(),i}return ii(t,e),t.prototype.open=function(){if(this.closed)throw new Yn(kn.StreamClosed)},t.prototype.afterClose=function(){this.evtSrc.close()},t.prototype.onReconnect=function(e){this.evtSrc=e.evtSrc,this.reset(),this.events=e.events.concat(this.events)},t.prototype.reset=function(){var e=this;this.evtSrc.onmessage=function(t){e.events.push(new qn(qn.MESSAGE_EVENT,t.data)),e.poll()},this.evtSrc.onerror=function(t){return t instanceof MessageEvent?(e.lastErr=t.data,e.events.push(new qn(Vn.ERROR_EVENT_NAME,e.lastErr)),e.close(),void e.poll()):e.openedOnce?(e.evtSrc.close(),void e.reconnect()):(e.close(),void e.onOpenError(new Error("event source failed to open and will not reconnect; check network log for more details")))}},t}(io),si=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ui=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ci=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return si(t,e),t.prototype.stream=function(e,t,n){void 0===t&&(t=!0);var r=ui({},e.headers);return r[Sn.ACCEPT]=An.TEXT_EVENT_STREAM,r[Sn.CONTENT_TYPE]=An.TEXT_EVENT_STREAM,ti(e.url+"&stitch_validate=true",{body:e.body,headers:r,method:e.method,mode:"cors"}).then((function(t){var r={};return t.headers.forEach((function(e,t){r[t]=e})),t.status<200||t.status>=300?t.text().then((function(e){return Tn(new so(r,t.status,e))})):new Promise((function(t,r){return new ai(new EventSource(e.url),(function(e){return t(e)}),(function(e){return r(e)}),n?function(){return n().then((function(e){return e}))}:void 0)}))}))},t}(ri),li=function(){function e(e){this.proxy=e}return e.prototype.callFunction=function(e,t,n){return this.proxy.callFunction(e,t,n)},e.prototype.streamFunction=function(e,t,n){return this.proxy.streamFunction(e,t,n)},e}(),fi=n("SjWX");!function(e){e.StitchError="_stitch_error",e.State="_stitch_state",e.UserAuth="_stitch_ua",e.LinkUser="_stitch_link_user",e.StitchLink="_stitch_link",e.ClientAppId="_stitch_client_app_id"}(ni||(ni={}));var pi,hi=ni;!function(e){e.ProviderName="_stitch_redirect_provider_name",e.ProviderType="_stitch_redirect_provider_type",e.State="_stitch_redirect_state"}(pi||(pi={}));var di=pi,yi=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),bi=function(e){function t(t){return e.call(this,t)||this}return yi(t,e),t}(hn),gi=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),vi=function(e){function t(t,n,r,o,i,a,s){var u=e.call(this,t,n,r,o,i,a)||this;return u.auth=s,u}return gi(t,e),t.prototype.linkWithCredential=function(e){return this.auth.linkWithCredential(this,e)},t.prototype.linkUserWithRedirect=function(e){return this.auth.linkWithRedirectInternal(this,e)},t}(Pr),mi=function(){function e(e){this.auth=e}return e.prototype.makeUser=function(e,t,n,r,o,i){return new vi(e,t,n,r,o,i,this.auth)},e}(),_i=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ei=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},Oi="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",wi=function(e){function t(t,n,r,o,i){void 0===i&&(i=window);var a=e.call(this,t,n,r)||this;return a.browserAuthRoutes=n,a.authStorage=r,a.appInfo=o,a.jsdomWindow=i,a.listeners=new Set,a.synchronousListeners=new Set,a}return _i(t,e),Object.defineProperty(t.prototype,"userFactory",{get:function(){return new mi(this)},enumerable:!0,configurable:!0}),t.prototype.getProviderClient=function(e,t){return function(e){return void 0!==e.getClient}(e)?e.getClient(this,this.requestClient,this.authRoutes):e.getNamedClient(t,this.requestClient,this.authRoutes)},t.prototype.loginWithCredential=function(t){return e.prototype.loginWithCredentialInternal.call(this,t)},t.prototype.loginWithRedirect=function(e){var t=this,n=this.prepareRedirect(e),r=n.redirectUrl,o=n.state;this.requestClient.getBaseURL().then((function(n){t.jsdomWindow.location.replace(n+t.browserAuthRoutes.getAuthProviderRedirectRoute(e,r,o,t.deviceInfo))}))},t.prototype.linkWithRedirectInternal=function(e,n){var r=this;if(void 0!==this.user&&e.id!==this.user.id)return Promise.reject(new Yn(kn.UserNoLongerValid));var o=this.prepareRedirect(n),i=o.redirectUrl,a=o.state;return this.requestClient.getBaseURL().then((function(e){var o=e+r.browserAuthRoutes.getAuthProviderLinkRedirectRoute(n,i,a,r.deviceInfo);return(t.injectedFetch?t.injectedFetch:fetch)(new Request(o,{credentials:"include",headers:{Authorization:"Bearer "+r.authInfo.accessToken},mode:"cors"}))})).then((function(e){r.jsdomWindow.location.replace(e.headers.get("X-Stitch-Location"))}))},t.prototype.hasRedirectResult=function(){var e=!1;try{return e=this.parseRedirect().isValid}catch(e){return!1}finally{e||this.cleanupRedirect()}},t.prototype.handleRedirectResult=function(){try{var e=this.authStorage.get(di.ProviderName),t=this.authStorage.get(di.ProviderType),n=this.parseRedirect();return this.loginWithCredentialInternal(new Hn(this.processRedirectResult(n),t,e,n.asLink)).then((function(e){return e}))}catch(e){return Promise.reject(e)}},t.prototype.linkWithCredential=function(t,n){return e.prototype.linkUserWithCredentialInternal.call(this,t,n)},t.prototype.logout=function(){return arguments.length>0?Promise.reject(new Yn(kn.UnexpectedArguments)):e.prototype.logoutInternal.call(this)},t.prototype.logoutUserWithId=function(t){return e.prototype.logoutUserWithIdInternal.call(this,t)},t.prototype.removeUser=function(){return arguments.length>0?Promise.reject(new Yn(kn.UnexpectedArguments)):e.prototype.removeUserInternal.call(this)},t.prototype.removeUserWithId=function(t){return e.prototype.removeUserWithIdInternal.call(this,t)},Object.defineProperty(t.prototype,"deviceInfo",{get:function(){var e={};this.hasDeviceId&&(e[Br.DEVICE_ID]=this.deviceId),void 0!==this.appInfo.localAppName&&(e[Br.APP_ID]=this.appInfo.localAppName),void 0!==this.appInfo.localAppVersion&&(e[Br.APP_VERSION]=this.appInfo.localAppVersion);var t=Object(fi.detect)();return t?(e[Br.PLATFORM]=t.name,e[Br.PLATFORM_VERSION]=t.version):(e[Br.PLATFORM]="web",e[Br.PLATFORM_VERSION]="0.0.0"),e[Br.SDK_VERSION]="4.7.1",e},enumerable:!0,configurable:!0}),t.prototype.addAuthListener=function(e){this.listeners.add(e),this.onAuthEvent(e),this.dispatchAuthEvent({kind:rn.ListenerRegistered})},t.prototype.addSynchronousAuthListener=function(e){this.listeners.add(e),this.onAuthEvent(e),this.dispatchAuthEvent({kind:rn.ListenerRegistered})},t.prototype.removeAuthListener=function(e){this.listeners.delete(e)},t.prototype.onAuthEvent=function(e){var t=this;if(e)new Promise((function(n){e.onAuthEvent&&e.onAuthEvent(t),n(void 0)}));else this.listeners.forEach((function(e){t.onAuthEvent(e)}))},t.prototype.dispatchAuthEvent=function(e){var t=this;switch(e.kind){case rn.ActiveUserChanged:this.dispatchBlockToListeners((function(n){n.onActiveUserChanged&&n.onActiveUserChanged(t,e.currentActiveUser,e.previousActiveUser)}));break;case rn.ListenerRegistered:this.dispatchBlockToListeners((function(e){e.onListenerRegistered&&e.onListenerRegistered(t)}));break;case rn.UserAdded:this.dispatchBlockToListeners((function(n){n.onUserAdded&&n.onUserAdded(t,e.addedUser)}));break;case rn.UserLinked:this.dispatchBlockToListeners((function(n){n.onUserLinked&&n.onUserLinked(t,e.linkedUser)}));break;case rn.UserLoggedIn:this.dispatchBlockToListeners((function(n){n.onUserLoggedIn&&n.onUserLoggedIn(t,e.loggedInUser)}));break;case rn.UserLoggedOut:this.dispatchBlockToListeners((function(n){n.onUserLoggedOut&&n.onUserLoggedOut(t,e.loggedOutUser)}));break;case rn.UserRemoved:this.dispatchBlockToListeners((function(n){n.onUserRemoved&&n.onUserRemoved(t,e.removedUser)}));break;default:return this.assertNever(e)}},t.prototype.assertNever=function(e){throw new Error("unexpected object: "+e)},t.prototype.dispatchBlockToListeners=function(e){this.synchronousListeners.forEach(e),this.listeners.forEach((function(t){new Promise((function(n){e(t),n(void 0)}))}))},t.prototype.cleanupRedirect=function(){this.jsdomWindow.history.replaceState(null,"",this.pageRootUrl()),this.authStorage.remove(di.State),this.authStorage.remove(di.ProviderName),this.authStorage.remove(di.ProviderType)},t.prototype.parseRedirect=function(){if(void 0===this.jsdomWindow)throw new bi("running in a non-browser environment");if(!this.jsdomWindow.location||!this.jsdomWindow.location.hash)throw new bi("window location hash was undefined");var e=this.authStorage.get(di.State);return function(e,t,n){var r=e.split("&"),o=new Ai;return r.forEach((function(e){var r=e.split("=");switch(decodeURIComponent(r[0])){case hi.StitchError:o.lastError=decodeURIComponent(r[1]);break;case hi.UserAuth:try{o.authInfo=function(e){var t=e.split("$");if(4!==t.length)throw new bi("invalid user auth data provided while marshalling user authentication data: "+e);var n=Ei(t,4),r=n[0],o=n[1],i=n[2],a=n[3];return new un(i,a,r,o)}(decodeURIComponent(r[1]))}catch(e){o.lastError=e}break;case hi.StitchLink:"ok"===r[1]&&(o.asLink=!0);break;case hi.State:var i=decodeURIComponent(r[1]);t===i&&(o.stateValid=!0);break;case hi.ClientAppId:var a=decodeURIComponent(r[1]);n===a&&(o.clientAppIdValid=!0)}})),o}(this.jsdomWindow.location.hash.substring(1),e,this.appInfo.clientAppId)},t.prototype.processRedirectResult=function(e){try{if(!e.isValid)throw new bi("invalid redirect result");if(e.lastError)throw new bi("error handling redirect: "+e.lastError);if(!e.authInfo)throw new bi("no user auth value was found: it could not be decoded from fragment")}catch(e){throw e}finally{this.cleanupRedirect()}return e.authInfo},t.prototype.prepareRedirect=function(e){this.authStorage.set(di.ProviderName,e.providerName),this.authStorage.set(di.ProviderType,e.providerType);var t=e.redirectUrl;void 0===t&&(t=this.pageRootUrl());var n=function(){for(var e="",t=0;t<64;++t)e+=Oi.charAt(Math.floor(Math.random()*Oi.length));return e}();return this.authStorage.set(di.State,n),{redirectUrl:t,state:n}},t.prototype.pageRootUrl=function(){return[this.jsdomWindow.location.protocol,"//",this.jsdomWindow.location.host,this.jsdomWindow.location.pathname].join("")},t}(Ir);var Ai=function(){function e(){this.stateValid=!1,this.clientAppIdValid=!1,this.asLink=!1}return Object.defineProperty(e.prototype,"isValid",{get:function(){return this.stateValid&&this.clientAppIdValid},enumerable:!0,configurable:!0}),e}();var Si=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ni=function(e){function t(t){return e.call(this,t)||this}return Si(t,e),t.prototype.getAuthProviderRedirectRoute=function(e,t,n,r){return this.getAuthProviderLoginRoute(e.providerName)+"?redirect="+encodeURI(t)+"&state="+n+"&device="+this.uriEncodeObject(r)},t.prototype.getAuthProviderLinkRedirectRoute=function(e,t,n,r){return this.getAuthProviderLoginRoute(e.providerName)+"?redirect="+encodeURI(t)+"&state="+n+"&device="+this.uriEncodeObject(r)+"&link=true&providerRedirectHeader=true"},t.prototype.uriEncodeObject=function(e){return encodeURIComponent(Xn(JSON.stringify(e)))},t}(yo),Ti=function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ii=function(e){function t(t){var n=e.call(this,t)||this;return n.authRoutes=new Ni(t),n}return Ti(t,e),t}(mo),Pi=function(){function e(e,t){this.info=new Bo(e,t.dataDirectory,t.localAppName,t.localAppVersion),this.routes=new Ii(this.info.clientAppId);var n=new wo(e,t.baseUrl,t.transport);this.auth=new wi(n,this.routes.authRoutes,t.storage,this.info),this.coreClient=new ro(this.auth,this.routes),this.serviceClients=[],this.auth.addSynchronousAuthListener(this)}return e.prototype.getServiceClient=function(e,t){if(function(e){return void 0!==e.getClient}(e)){var n=new no(this.auth,this.routes.serviceRoutes,"");return this.bindServiceClient(n),e.getClient(n,this.info)}n=new no(this.auth,this.routes.serviceRoutes,t);return this.bindServiceClient(n),e.getNamedClient(n,this.info)},e.prototype.getGeneralServiceClient=function(e){var t=new no(this.auth,this.routes.serviceRoutes,e);return this.bindServiceClient(t),new li(t)},e.prototype.callFunction=function(e,t){return this.coreClient.callFunction(e,t)},e.prototype.onActiveUserChanged=function(e,t,n){this.onRebindEvent(new No({currentActiveUser:t,kind:rn.ActiveUserChanged,previousActiveUser:n}))},e.prototype.bindServiceClient=function(e){this.serviceClients.push(e)},e.prototype.onRebindEvent=function(e){this.serviceClients.forEach((function(t){t.onRebindEvent(e)}))},e}();var Ri,Bi={},Di=function(){function e(){}return Object.defineProperty(e,"defaultAppClient",{get:function(){if(void 0===e.defaultClientAppId)throw new Error("default app client has not yet been initialized/set");return Bi[e.defaultClientAppId]},enumerable:!0,configurable:!0}),e.getAppClient=function(e){if(void 0===Bi[e])throw new Error("client for app '"+e+"' has not yet been initialized");return Bi[e]},e.hasAppClient=function(e){return void 0!==Bi[e]},e.initializeDefaultAppClient=function(t,n){if(void 0===n&&(n=(new Po.Builder).build()),void 0===t||""===t)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==e.defaultClientAppId)throw new Error("default app can only be set once; currently set to '"+e.defaultClientAppId+"'");var r=e.initializeAppClient(t,n);return e.defaultClientAppId=t,r},e.initializeAppClient=function(t,n){if(void 0===n&&(n=(new Po.Builder).build()),void 0===t||""===t)throw new Error("clientAppId must be set to a non-empty string");if(void 0!==Bi[t])throw new Error("client for app '"+t+"' has already been initialized");var r=n.builder?n.builder():new Po.Builder(n);void 0===r.storage&&r.withStorage(new oi(t)),void 0===r.transport&&(window.EventSource?r.withTransport(new ci):r.withTransport(new ri)),void 0!==r.baseUrl&&""!==r.baseUrl||r.withBaseUrl("https://stitch.mongodb.com"),void 0!==r.localAppName&&""!==r.localAppName||r.withLocalAppName(e.localAppName),void 0!==r.localAppVersion&&""!==r.localAppVersion||r.withLocalAppVersion(e.localAppVersion);var o=new Pi(t,r.build());return Bi[t]=o,o},e.clearApps=function(){Bi={}},e}(),ji=function(){function e(e,t,n,r){this.command=e,this.args=t,this.service=n,r&&(this.collectionDecoder=new(function(){function e(){}return e.prototype.decode=function(e){return e instanceof Array?e.map((function(e){return r.decode(e)})):[r.decode(e)]},e}()))}return e.prototype.iterator=function(){return this.executeRead().then((function(e){return e[Symbol.iterator]()}))},e.prototype.first=function(){return this.executeRead().then((function(e){return e[0]}))},e.prototype.toArray=function(){return this.executeRead()},e.prototype.asArray=function(){return this.toArray()},e.prototype.executeRead=function(){return this.service.callFunction(this.command,[this.args],this.collectionDecoder)},e}();function Ui(e){switch(e){case"insert":return Ri.Insert;case"delete":return Ri.Delete;case"replace":return Ri.Replace;case"update":return Ri.Update;default:return Ri.Unknown}}!function(e){e.Insert="insert",e.Delete="delete",e.Replace="replace",e.Update="update",e.Unknown="unknown"}(Ri||(Ri={}));var Ci,xi,ki,Li,Mi,$i,Fi,zi=function(e){var t={};e.forEach((function(e,n){t[n]=e})),this.insertedIds=t};!function(e){e.InsertedIds="insertedIds"}(Ci||(Ci={})),function(e){e.InsertedId="insertedId"}(xi||(xi={})),function(e){e.MatchedCount="matchedCount",e.ModifiedCount="modifiedCount",e.UpsertedId="upsertedId"}(ki||(ki={})),function(e){e.DeletedCount="deletedCount"}(Li||(Li={})),function(e){e.UpdatedFields="updatedFields",e.RemovedFields="removedFields"}(Mi||(Mi={})),function(e){e.Id="_id",e.OperationType="operationType",e.FullDocument="fullDocument",e.DocumentKey="documentKey",e.Namespace="ns",e.NamespaceDb="db",e.NamespaceColl="coll",e.UpdateDescription="updateDescription"}($i||($i={})),function(e){e.OperationType="ot",e.FullDocument="fd",e.DocumentKey="dk",e.UpdateDescription="ud",e.StitchDocumentVersion="sdv",e.StitchDocumentHash="sdh"}(Fi||(Fi={}));var Yi=function(){function e(){}return e.prototype.decode=function(e){return new zi(e[Ci.InsertedIds])},e}(),qi=function(){function e(){}return e.prototype.decode=function(e){return{insertedId:e[xi.InsertedId]}},e}(),Vi=function(){function e(){}return e.prototype.decode=function(e){return{matchedCount:e[ki.MatchedCount],modifiedCount:e[ki.ModifiedCount],upsertedId:e[ki.UpsertedId]}},e}(),Wi=function(){function e(){}return e.prototype.decode=function(e){return{deletedCount:e[Li.DeletedCount]}},e}(),Ki=function(){function e(){}return e.prototype.decode=function(e){return ar.keyPresent(Mi.UpdatedFields,e),ar.keyPresent(Mi.RemovedFields,e),{removedFields:e[Mi.RemovedFields],updatedFields:e[Mi.UpdatedFields]}},e}();function Hi(e,t,n,r){var o,i;return o=t in e?Zi.updateDescriptionDecoder.decode(e[t]):void 0,n in e?(i=e[n],r&&(i=r.decode(i))):i=void 0,{updateDescription:o,fullDocument:i}}var Gi,Ji=function(){function e(e){this.decoder=e}return e.prototype.decode=function(e){ar.keyPresent($i.Id,e),ar.keyPresent($i.OperationType,e),ar.keyPresent($i.Namespace,e),ar.keyPresent($i.DocumentKey,e);var t=e[$i.Namespace],n=Hi(e,$i.UpdateDescription,$i.FullDocument,this.decoder),r=n.updateDescription,o=n.fullDocument;return{documentKey:e[$i.DocumentKey],fullDocument:o,id:e[$i.Id],namespace:{collection:t[$i.NamespaceColl],database:t[$i.NamespaceDb]},operationType:Ui(e[$i.OperationType]),updateDescription:r}},e}(),Xi=function(){function e(e){this.decoder=e}return e.prototype.decode=function(e){ar.keyPresent(Fi.OperationType,e),ar.keyPresent(Fi.DocumentKey,e);var t,n,r=Hi(e,Fi.UpdateDescription,Fi.FullDocument,this.decoder),o=r.updateDescription,i=r.fullDocument;return t=Fi.StitchDocumentVersion in e?e[Fi.StitchDocumentVersion]:void 0,n=Fi.StitchDocumentHash in e?e[Fi.StitchDocumentHash]:void 0,{documentKey:e[Fi.DocumentKey],fullDocument:i,operationType:Ui(e[Fi.OperationType]),stitchDocumentHash:n,stitchDocumentVersion:t,updateDescription:o}},e}(),Zi=function(){function e(){}return e.remoteInsertManyResultDecoder=new Yi,e.remoteInsertOneResultDecoder=new qi,e.remoteUpdateResultDecoder=new Vi,e.remoteDeleteResultDecoder=new Wi,e.updateDescriptionDecoder=new Ki,e.ChangeEventDecoder=Ji,e.CompactChangeEventDecoder=Xi,e}(),Qi=Zi,ea=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ta=function(){function e(e,t,n,r){var o=this;this.name=e,this.databaseName=t,this.service=n,this.codec=r,this.namespace=this.databaseName+"."+this.name,this.baseOperationArgs={collection:o.name,database:o.databaseName}}return e.prototype.withCollectionType=function(t){return new e(this.name,this.databaseName,this.service,t)},e.prototype.find=function(e,t){void 0===e&&(e={});var n=ea({},this.baseOperationArgs);return n.query=e,t&&(t.limit&&(n.limit=t.limit),t.projection&&(n.project=t.projection),t.sort&&(n.sort=t.sort)),new ji("find",n,this.service,this.codec)},e.prototype.findOne=function(e,t){void 0===e&&(e={});var n=ea({},this.baseOperationArgs);return n.query=e,t&&(t.projection&&(n.project=t.projection),t.sort&&(n.sort=t.sort)),this.service.callFunction("findOne",[n],this.codec)},e.prototype.findOneAndUpdate=function(e,t,n){var r=ea({},this.baseOperationArgs);return r.filter=e,r.update=t,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndUpdate",[r],this.codec)},e.prototype.findOneAndReplace=function(e,t,n){var r=ea({},this.baseOperationArgs);return r.filter=e,r.update=t,n&&(n.projection&&(r.projection=n.projection),n.sort&&(r.sort=n.sort),n.upsert&&(r.upsert=!0),n.returnNewDocument&&(r.returnNewDocument=!0)),this.service.callFunction("findOneAndReplace",[r],this.codec)},e.prototype.findOneAndDelete=function(e,t){var n=ea({},this.baseOperationArgs);return n.filter=e,t&&(t.projection&&(n.projection=t.projection),t.sort&&(n.sort=t.sort)),this.service.callFunction("findOneAndDelete",[n],this.codec)},e.prototype.aggregate=function(e){var t=ea({},this.baseOperationArgs);return t.pipeline=e,new ji("aggregate",t,this.service,this.codec)},e.prototype.count=function(e,t){void 0===e&&(e={});var n=ea({},this.baseOperationArgs);return n.query=e,t&&t.limit&&(n.limit=t.limit),this.service.callFunction("count",[n])},e.prototype.insertOne=function(e){var t=ea({},this.baseOperationArgs);return t.document=this.generateObjectIdIfMissing(this.codec?this.codec.encode(e):e),this.service.callFunction("insertOne",[t],Qi.remoteInsertOneResultDecoder)},e.prototype.insertMany=function(e){var t=this,n=ea({},this.baseOperationArgs);return n.documents=e.map((function(e){return t.generateObjectIdIfMissing(t.codec?t.codec.encode(e):e)})),this.service.callFunction("insertMany",[n],Qi.remoteInsertManyResultDecoder)},e.prototype.deleteOne=function(e){return this.executeDelete(e,!1)},e.prototype.deleteMany=function(e){return this.executeDelete(e,!0)},e.prototype.updateOne=function(e,t,n){return this.executeUpdate(e,t,n,!1)},e.prototype.updateMany=function(e,t,n){return this.executeUpdate(e,t,n,!0)},e.prototype.watch=function(e){var t=ea({},this.baseOperationArgs);return void 0!==e&&(e instanceof Array?0!==e.length&&(t.ids=e):e instanceof Object&&(t.filter=e)),t.useCompactEvents=!1,this.service.streamFunction("watch",[t],new Qi.ChangeEventDecoder(this.codec))},e.prototype.watchCompact=function(e){var t=ea({},this.baseOperationArgs);return t.ids=e,t.useCompactEvents=!0,this.service.streamFunction("watch",[t],new Qi.CompactChangeEventDecoder(this.codec))},e.prototype.executeDelete=function(e,t){var n=ea({},this.baseOperationArgs);return n.query=e,this.service.callFunction(t?"deleteMany":"deleteOne",[n],Qi.remoteDeleteResultDecoder)},e.prototype.executeUpdate=function(e,t,n,r){void 0===r&&(r=!1);var o=ea({},this.baseOperationArgs);return o.query=e,o.update=t,n&&n.upsert&&(o.upsert=n.upsert),this.service.callFunction(r?"updateMany":"updateOne",[o],Qi.remoteUpdateResultDecoder)},e.prototype.generateObjectIdIfMissing=function(e){if(!e._id){var t=e;return t._id=new an.b.ObjectID,t}return e},e}(),na=function(){function e(e,t){this.name=e,this.service=t}return e.prototype.collection=function(e,t){return new ta(e,this.name,this.service,t)},e}(),ra=function(){function e(e){this.service=e}return e.prototype.db=function(e){return new na(e,this.service)},e}(),oa=function(){function e(e){this.proxy=e}return e.prototype.next=function(){return Promise.resolve(this.proxy.next().value)},e}(),ia=function(){function e(e){this.proxy=e}return e.prototype.first=function(){return this.proxy.first()},e.prototype.toArray=function(){return this.proxy.toArray()},e.prototype.asArray=function(){return this.toArray()},e.prototype.iterator=function(){return this.proxy.iterator().then((function(e){return new oa(e)}))},e}(),aa=function(){function e(e){this.proxy=e,this.namespace=this.proxy.namespace}return e.prototype.withCollectionType=function(t){return new e(this.proxy.withCollectionType(t))},e.prototype.count=function(e,t){return this.proxy.count(e,t)},e.prototype.find=function(e,t){return new ia(this.proxy.find(e,t))},e.prototype.findOne=function(e,t){return this.proxy.findOne(e,t)},e.prototype.findOneAndUpdate=function(e,t,n){return this.proxy.findOneAndUpdate(e,t,n)},e.prototype.findOneAndReplace=function(e,t,n){return this.proxy.findOneAndReplace(e,t,n)},e.prototype.findOneAndDelete=function(e,t){return this.proxy.findOneAndDelete(e,t)},e.prototype.aggregate=function(e){return new ia(this.proxy.aggregate(e))},e.prototype.insertOne=function(e){return this.proxy.insertOne(e)},e.prototype.insertMany=function(e){return this.proxy.insertMany(e)},e.prototype.deleteOne=function(e){return this.proxy.deleteOne(e)},e.prototype.deleteMany=function(e){return this.proxy.deleteMany(e)},e.prototype.updateOne=function(e,t,n){return this.proxy.updateOne(e,t,n)},e.prototype.updateMany=function(e,t,n){return this.proxy.updateMany(e,t,n)},e.prototype.watch=function(e){return this.proxy.watch(e)},e.prototype.watchCompact=function(e){return this.proxy.watchCompact(e)},e}(),sa=function(){function e(e){this.proxy=e,this.name=this.proxy.name}return e.prototype.collection=function(e,t){return new aa(this.proxy.collection(e,t))},e}(),ua=function(){function e(e){this.proxy=e}return e.prototype.db=function(e){return new sa(this.proxy.db(e))},e}();(Gi||(Gi={})).factory=new(function(){function e(){}return e.prototype.getNamedClient=function(e,t){return new ua(new ra(e))},e}());var ca,la,fa,pa=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),{id:t._id.toString(),title:t.title,content:t.content}},ha={appID:"blog-tjxya",dbName:"blog",postsCollectionName:"posts"},da=Di.initializeDefaultAppClient(ha.appID),ya=da.getServiceClient(Gi.factory,"mongodb-atlas").db(ha.dbName),ba=(la=(ca={db:ya,client:da}).db,fa=ca.client,function(e){return new Promise((function(t,n){fa.auth.loginWithCredential(new jr).then((function(){return la.collection("posts").find({type:"text",last_modified:{$gt:e||0}}).asArray()})).then((function(e){t(e.map((function(e){return new pa(e)})))})).catch(n)}))});function ga(e){return(ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function va(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ma(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _a(e,t,n){return t&&ma(e.prototype,t),n&&ma(e,n),e}function Ea(e,t){return!t||"object"!==ga(t)&&"function"!=typeof t?wa(e):t}function Oa(e){return(Oa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Aa(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sa(e,t)}function Sa(e,t){return(Sa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Na(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ta,Ia,Pa,Ra=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return Promise.resolve()},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"payload",n=function(n){function r(){var e,n,o;va(this,r);for(var i=arguments.length,a=new Array(i),s=0;s<i;s++)a[s]=arguments[s];return Na(wa(o=Ea(this,(e=Oa(r)).call.apply(e,[this].concat(a)))),"state",(Na(n={loading:!0},t,null),Na(n,"error",null),n)),o}return Aa(r,n),_a(r,[{key:"componentDidMount",value:function(){var n=this;e().then((function(e){var r;n.setState((Na(r={},t,e),Na(r,"loading",!1),r))})).catch((function(e){n.setState({error:e,loading:!1})}))}},{key:"render",value:function(){var e=this.props,t=e.spinner,n=e.errorView;return t&&this.state.loading?t:n&&this.state.error?n:this.props.children(this.state)}}]),r}(o.a.PureComponent);return n}((Ta=ba,function(){if(Ta){var e=Ta.apply(this,arguments);return Pa=Ia||e,Ta=null,e}return Pa}),"posts");function Ba(e){return(Ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Da(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ja(e,t){return!t||"object"!==Ba(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ua(e){return(Ua=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ca(e,t){return(Ca=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var xa=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=ja(this,Ua(t).call(this,e))).state={hasError:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ca(e,t)}(t,e),n=t,(r=[{key:"componentDidCatch",value:function(e,t){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?null:this.props.children}}])&&Da(n.prototype,r),o&&Da(n,o),t}(o.a.Component),ka=n("+eFp"),La=n.n(ka);n("O5PD");function Ma(e){return(Ma="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fa(e){return(Fa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function za(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ya(e,t){return(Ya=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var qa=function(e){function t(e){var n,r,i,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Ma(t)&&"function"!=typeof t?za(e):t}(this,Fa(t).call(this,e)),r=za(n),a=function(){return n.props.disableAnimation||Object(s.l)()?o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style}):o.a.createElement(La.a,{component:o.a.Fragment,transitionName:"example",transitionEnterTimeout:300,transitionLeaveTimeout:300},o.a.createElement(ze,{tooltip:n.props.tooltip},(function(e){var t=e.showTooltip,r=e.hideTooltip;return o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style,onMouseEnter:t,onMouseLeave:r})})))},(i="renderImg")in r?Object.defineProperty(r,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[i]=a;var u=s.s.get(e.url);return n.state={loading:!u,error:null},n.loadImage=n.loadImage.bind(za(n)),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ya(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.loadImage(this.props.src)}},{key:"componentWillReceiveProps",value:function(e){this.props.src!==e.src&&this.loadImage(e.src)}},{key:"loadImage",value:function(e){var t=this,n=this.props.onLoad||s.n;if(s.s.get(e))return n(e),void this.setState({loading:!1});this.setState({loading:!0}),Object(s.g)(e).then((function(){n(e),t.setState({loading:!1})})).catch((function(e){t.setState({loading:!1,error:e})}))}},{key:"render",value:function(){return this.state.error?":(":this.state.loading&&!this.props.loaded?!this.props.hideSpinner&&o.a.createElement(Ot,null):this.renderImg()}}])&&$a(n.prototype,r),i&&$a(n,i),t}(o.a.Component);function Va(){return(Va=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Wa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ka(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ha=function(e){var t=e.photo,n=e.className,i=e.showTitle,a=Ka(e,["photo","className","showTitle"]),s=Wa(Object(r.useState)(!0),2),u=s[0],c=s[1];return o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-content"},o.a.createElement(qa,Va({src:t.url,onLoad:function(){c(!1)}},a,{tooltip:t.title}),o.a.createElement("div",{className:"image-title",style:{color:"#fff"}},t.title)),i&&!u&&o.a.createElement("div",{className:"photo-title"},t.title||"-")))};function Ga(){return(Ga=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ja(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Xa=ie((function(e){var t=e.id,n=e.match,r=Ja(e,["id","match"]);return o.a.createElement(D,{id:t||n.params.id},(function(e){return o.a.createElement(Ha,Ga({photo:e},r))}))}),ae);n("1zZr"),n("8zDj");function Za(e){return(Za="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function es(e){return(es=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ts(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ns(e,t){return(ns=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function rs(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var os=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Za(t)&&"function"!=typeof t?ts(e):t}(this,es(t).call(this,e)),rs(ts(n),"renderTick",(function(){var e=n.state.currentIndex,t=n.props.photos,r=n.props.post&&n.props.post._id,i=t.length,a=function(e){var t=e.id;return o.a.createElement("div",{className:"link-to-post"},o.a.createElement("div",{onClick:function(){ct(t)}}))},u=ie((function(e){return[n.props.post?o.a.createElement(a,{id:r}):null,o.a.createElement(Pe,e)]}),ae);n.props.setSideSpaceContent(o.a.createElement(u,{current:e+1,total:i,onDrop:Object(s.t)(n.goto,300),onClick:Object(s.t)(n.next,300),absRight:!0}))})),rs(ts(n),"handleCurrentImgLoad",(function(){n.setState({isCurrentImgReady:!0},(function(){n.props.thumbnailMode||n.renderTick()}))})),rs(ts(n),"preLoadPhotos",(function(e){e.map(s.g)})),rs(ts(n),"nextIndex",(function(e){return e+1<=n.props.photos.length-1?e+1:0})),rs(ts(n),"goto",(function(e){console.log("goto"),n.props.photos.length&&n.setState({currentIndex:e-1},n.renderTick)})),rs(ts(n),"next",(function(){if(console.log("next"),n.props.photos.length){n.setState({isCurrentImgReady:!1});var e=n.props.photos.length;n.state.currentIndex<e-1?n.setState((function(e){return{currentIndex:e.currentIndex+1}}),n.renderTick):n.setState({currentIndex:0},n.renderTick)}})),n.state={currentIndex:0,isCurrentImgReady:!1},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ns(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props.photos.map((function(e){return e.url}));this.preLoadPhotos(e)}},{key:"componentWillUnmount",value:function(){this.props.setSideSpaceContent(null)}},{key:"render",value:function(){var e=this.state.currentIndex,t=this.props.photos,n=t.length,r=n>1;return t&&t.length?o.a.createElement("div",{className:"photos",style:{maxWidth:this.props.thumbnailMode?30:"unset"},"data-prog":"".concat(e+1," of ").concat(t.length)},o.a.createElement(Ha,{photo:t[e],onLoad:this.handleCurrentImgLoad,onClick:r?Object(s.t)(this.next,300):s.n,style:{cursor:r?"pointer":"default"},hideSpinner:this.props.hideSpinner}),this.props.showNextThumbnail&&r&&this.state.isCurrentImgReady&&o.a.createElement("div",{className:"thumbnail-progress-wrapper"},o.a.createElement(Ha,{photo:t[this.nextIndex(e)],className:re()("thumbnail",{hide:!this.state.isCurrentImgReady}),disableAnimation:!0,onClick:r?Object(s.t)(this.next,300):s.n,style:{cursor:r?"pointer":"default"},hideSpinner:!0}),Object(s.l)()&&o.a.createElement(Be,{current:e+1,total:n}))):":( not found"}}])&&Qa(n.prototype,r),i&&Qa(n,i),t}(o.a.Component),is=z(os);function as(){return(as=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ss(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var us=function(e){var t=e.id,n=e.match,r=ss(e,["id","match"]),i=q(v.ENABLE_IMAGES_FLOW).status&&!e.thumbnailMode||Object(s.l)();return o.a.createElement(Gt,{id:t||n.params.id,spinner:r.spinner},(function(e){var t=e.photos,n=e.post;return i?t.map((function(e){return o.a.createElement(Ha,{className:"photo-in-waterfall",disableAnimation:!0,showTitle:!0,photo:e})})):o.a.createElement(is,as({post:n,photos:t,showNextThumbnail:!0},r))}))},cs=ie(us,ae),ls=function(e){var t=e.id,n=ss(e,["id"]);return o.a.createElement(us,as({id:t,showNextThumbnail:!1,thumbnailMode:!0},n))};function fs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ps(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var hs=function(e){return o.a.createElement("div",{className:"photos-attachment",onClick:function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";ut("".concat(O,"/").concat(e))}(e.id)}},o.a.createElement(ls,{id:e.id,hideSpinner:Object(s.l)(),spinner:o.a.createElement(Ot,{absCenter:!1})}))},ds=function(e){var t=e.post,n=e.className,r=e.totalLen,i=e.index,a=e.next,u=e.disableTick;return Object(s.l)()?o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-title"},t.title),o.a.createElement("div",{className:"post-content markdown-body"},o.a.createElement(Tt,{md:t.content})),o.a.createElement("div",{className:"post-date"},t.date)):(lt(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fs(Object(n),!0).forEach((function(t){ps(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{currentPageIndex:i}),{disableAllBtns:u}),o.a.createElement(Dt,{top:[t.title,!u&&o.a.createElement(Be,{total:r,current:i,onClick:a,fixedTop:!0})],padding:"0 10px",down:o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement(Tt,{md:t.content,className:"post-content"}),o.a.createElement("div",{className:"post-date"},t.date),t.photogroupId&&o.a.createElement(hs,{id:t.photogroupId}))}))};function ys(){return(ys=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function bs(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var gs,vs=function(e){var t=e.id,n=e.classNames,r=e.match,i=t||r.params.id;return o.a.createElement(Ra,{id:i,spinner:o.a.createElement(jt,{style:{paddingLeft:10}})},(function(e){var t=e.posts,a=(e.loading,t.findIndex((function(e){return e.id===i})));return o.a.createElement(it,{data:t,pageSize:1,currentPageIndex:a+1,infiniteLoopMode:!0},(function(e){var t=e.currentPageData,i=e.currentPageIndex,a=e.totalPages,s=e.next,u=bs(e,["currentPageData","currentPageIndex","totalPages","next"]);return o.a.createElement(ds,ys({next:s,totalLen:a,index:i,post:t[0],className:n,disableTick:!r},u))}))}))};function ms(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}ms(gs={},b.cover.type.photo.value,(function(e){var t=e.id;return Object(s.l)()?o.a.createElement("div",{className:"mobile-cover"},o.a.createElement(Xa,{id:t})):o.a.createElement(Xa,{id:t,className:"cover-image"})})),ms(gs,b.cover.type.story.value,(function(e){var t=e.id;return o.a.createElement(vs,{id:t,className:"cover-story"})}));var _s=function(){return null};n("A21b");function Es(e){return(Es="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Os(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ws(e){return(ws=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function As(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ss(e,t){return(Ss=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ns=function(e){var t=e.item;return o.a.createElement(ds,{post:t})},Ts=function(e){var t=e.item;return o.a.createElement(on.Link,{key:t.id,to:"".concat(m,"/").concat(t.id)},t.title)},Is=function(){return o.a.createElement(Ra,{spinner:o.a.createElement(jt,null)},(function(e){var t=e.posts;e.loading;return o.a.createElement(He,{className:"post-list mobile-posts",data:t,itemRenderer:Ns})}))},Ps=function(e){var t=e.currentPageIndex,n=e.totalPages,r=e.next;return lt(e,{disableListBtn:!0}),o.a.createElement(Be,{current:t,total:n,onClick:r,fixedTop:!0})},Rs=function(e){function t(){var e,n,r,i,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var s=arguments.length,u=new Array(s),c=0;c<s;c++)u[c]=arguments[c];return n=function(e,t){return!t||"object"!==Es(t)&&"function"!=typeof t?As(e):t}(this,(e=ws(t)).call.apply(e,[this].concat(u))),r=As(n),a=function(){return o.a.createElement(Ra,{spinner:o.a.createElement(jt,null)},(function(e){var t=e.posts;return e.loading,e.error,o.a.createElement(on.HashRouter,null,o.a.createElement(st,{pagingOption:{data:t,pageSize:10,infiniteLoopMode:!0},listOption:{className:"post-list pc",itemRenderer:Ts}},(function(e){return o.a.createElement(Ps,e)})))}))},(i="renderList")in r?Object.defineProperty(r,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[i]=a,n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ss(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(Dt,{top:"文字",down:this.renderList(),padding:"0 10px"})}}])&&Os(n.prototype,r),i&&Os(n,i),t}(o.a.PureComponent),Bs=function(){return Object(s.l)()?o.a.createElement(Is,null):o.a.createElement(Rs,null)},Ds=function(){return o.a.createElement(vs,{id:"5d920090a589b4121dd2be60"})},js=function(e){var t=e.customItemRenderer,n=function(e){var t=e.item;return o.a.createElement(on.Link,{key:t.id,to:"".concat(O,"/").concat(t.id)},t.title)};return o.a.createElement(Yt,null,(function(e){return o.a.createElement(on.HashRouter,null,o.a.createElement(He,{data:e,className:"photo-group-title-list",itemRenderer:t||n}))}))},Us=function(){return o.a.createElement(Yt,null,(function(e){return o.a.createElement(Et,{wrapperSelector:".menu-panel:nth-child(3) .panel",bufferDistance:500},e.map((function(e){var t=e.id;return o.a.createElement(us,{id:t})})))}))},Cs=function(){return Object(s.l)()?o.a.createElement("div",{className:"photo-group-title-list"},o.a.createElement(Us,null)):o.a.createElement(Dt,{top:"相片",down:o.a.createElement(js,null),padding:"0 10px"})};function xs(){return(xs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ks(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ls=function(e){var t=e.to,n=e.onClick,r=ks(e,["to","onClick"]);return o.a.createElement(on.Route,{path:t,children:function(e){var i=e.match;return o.a.createElement("li",{className:i?"active":"",onClick:n||function(){}},o.a.createElement(on.Link,xs({to:t},r)))}})};n("AdgS");function Ms(){return(Ms=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}n("gy2t"),n("AAEI");var Fs=Object(s.l)()?function(){var e=$s(Object(r.useState)(!0),2),t=e[0],n=e[1],i=t?{"data-close":!0}:{},a=function(){n(!0)};return o.a.createElement(on.HashRouter,null,o.a.createElement("div",{className:re()("top-bar",{close:t})},o.a.createElement(on.Link,{to:N},o.a.createElement("div",{className:"logo",dangerouslySetInnerHTML:{__html:Object(s.f)()},onClick:a})),o.a.createElement("ul",Ms({className:"mobile nav"},i,{onClick:function(e){e.stopPropagation(),t&&n(!1)}}),o.a.createElement(Ls,{onClick:a,to:O},"JPG"),o.a.createElement(Ls,{onClick:a,to:m},"TXT"))))}:function(){var e=[{text:o.a.createElement(De,null,"福福"),href:"https://fufu.im",className:"license"}],t=[{type:"link",text:o.a.createElement(De,null,"文字"),route:m}];Object(r.useContext)(F)[v.ENABLE_UPDATES_ENTRY]&&t.push({type:"link",text:o.a.createElement(De,null,"最近更新"),route:S});var n=o.a.createElement(He,{data:e,className:"footer",itemRenderer:function(e){var t=e.item;return t.customRenderer?t.customRenderer():o.a.createElement(Ve,t)}});return o.a.createElement(Dt,{alignTopItems:"center",withGuideLine:!0,fullHeight:!0,top:o.a.createElement("div",{className:"logo-wrapper"},o.a.createElement(on.HashRouter,null,o.a.createElement(on.Link,{to:N},o.a.createElement(wt,null)))),down:o.a.createElement(on.HashRouter,null,o.a.createElement("div",{className:"nav pc"},o.a.createElement(He,{top:!0,data:t,itemRenderer:function(e){var t=e.item;return o.a.createElement(Ls,{to:t.route},t.text)}}),n))})},zs=function(e){return function(t){return o.a.createElement(xa,null,o.a.createElement(e,t))}},Ys=function(){return o.a.createElement(on.HashRouter,null,o.a.createElement(xa,null,o.a.createElement(on.Route,{path:A,component:Xa}),o.a.createElement(on.Route,{path:E,component:vs})))},qs=function(){return o.a.createElement(on.HashRouter,null,o.a.createElement(xa,null,o.a.createElement(on.Route,{exact:!0,path:N,component:function(){return o.a.createElement(on.Redirect,{to:m})}}),o.a.createElement(on.Route,{path:m,exact:!0,component:Bs}),o.a.createElement(on.Route,{path:O,exact:!0,component:zs(Cs)}),o.a.createElement(on.Route,{path:w,component:zs(cs)}),o.a.createElement(on.Route,{path:A,component:zs(Xa)}),o.a.createElement(on.Route,{path:E,component:vs}),o.a.createElement(on.Route,{path:_,component:zs(Ds)})))},Vs=n("SsKX");n("dj+h");function Ws(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Ks=function(e){var t=e.onClick,n=e.className,r=document.querySelector(".menu-panel.active .panel"),i=Ws(gt(r),1)[0];return o.a.createElement("button",{type:"button",className:re()("menu-button",n,{hidden:"DOWN"===i}),onClick:t,onTouchStart:""})};Ks.propTypes={onClick:ue.a.func.isRequired,className:ue.a.string.isRequired};var Hs=function(e){var t=e.children,n=e.titles,i=e.activePanelIndex;if(!t.length)return null;var a=Ws(Object(r.useState)(!1),2),s=a[0],u=a[1],c=Ws(Object(r.useState)(i),2),l=c[0],f=c[1],p=(window.innerWidth-100)/t.length;return o.a.createElement("div",{"data-active-panel":l,className:re()("menu-panel-container",{open:s})},t.map((function(e,r){var i,a=r===t.length-1,c=s?r*p:0;return i=null!==l?l===r?{top:0,left:0}:{top:"calc(100% + 20px)",left:r*p}:{top:c,left:c},o.a.createElement("div",{tabIndex:-1,role:"button",className:re()("menu-panel",{last:a,active:l===r}),onTouchStart:"",onClick:function(){f(r),setTimeout((function(){u(!1)}),700)},onKeyPress:function(){},style:i},o.a.createElement("div",{className:"panel"},o.a.createElement("div",{className:"panel-title"},n[r]),(l===r||a)&&e))})),o.a.createElement(Ks,{className:re()({hidden:s}),onClick:function(){if(!s){setTimeout((function(){f(null),u(!s)}),300)}}}))};Hs.propTypes={titles:ue.a.arrayOf(ue.a.string)},Hs.defaultProps={titles:[]};var Gs=Hs,Js=function(){var e=location.hash.replace("#",""),t=Object(Vs.default)(e,{path:A})||Object(Vs.default)(e,{path:E});return o.a.createElement(Gs,{activePanelIndex:t?0:null,titles:["","关于","照片","文章","封面"]},o.a.createElement(Ys,null),o.a.createElement("div",null,o.a.createElement(Ve,{className:"version",text:"v"+P.version,href:P.gitURL}),o.a.createElement(Ds,null)),o.a.createElement(Cs,null),o.a.createElement(Bs,null),o.a.createElement(_s,null))};function Xs(e){return(Xs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zs(Object(n),!0).forEach((function(t){ou(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function eu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function tu(e){return(tu=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nu(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ru(e,t){return(ru=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ou(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var iu=te(nn),au=te(Fs),su=te(At),uu=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=function(e,t){return!t||"object"!==Xs(t)&&"function"!=typeof t?nu(e):t}(this,(e=tu(t)).call.apply(e,[this].concat(i))),ou(nu(n),"state",Qs({sideSpaceContent:null,leftSpaceContent:null},C())),ou(nu(n),"toggleSpaceGuideLine",(function(e){n.setState({showSpaceGuideLine:e},(function(){localStorage.setItem(v.SHOW_SPACE_GUIDELINE,e)}))})),ou(nu(n),"setSpaceContext",(function(e,t){n.setState(ou({},e,t))})),ou(nu(n),"setLocalStorageVal",(function(e,t){n.setState(ou({},e,t),(function(){localStorage.setItem(e,t)}))})),ou(nu(n),"getLocalStorageVal",(function(e){return n.state[e]})),ou(nu(n),"providerLayer",(function(e){return o.a.createElement($.Provider,{value:{setLeftSpaceContent:function(e){n.setSpaceContext("leftSpaceContent",e)},setSideSpaceContent:function(e){n.setSpaceContext("sideSpaceContent",e)},destroyAllSpace:function(){n.props.exit()},toggleSpaceGuideLine:n.toggleSpaceGuideLine,showSpaceGuideLine:n.state.showSpaceGuideLine}},o.a.createElement(F.Provider,{value:Qs({},x(n.state),{getLocalStorageVal:n.getLocalStorageVal,setLocalStorageVal:n.setLocalStorageVal})},e))})),ou(nu(n),"renderPcView",(function(){var e=te((function(){return n.state.sideSpaceContent}));return n.providerLayer(o.a.createElement(iu,{top:!0,bottom:!0,left:o.a.createElement(oe,{cols:[n.state.leftSpaceContent,o.a.createElement(au,{right:!0,left:!0}),n.state.sideSpaceContent?o.a.createElement(e,{right:!0}):o.a.createElement(su,{right:!0})]}),right:o.a.createElement(qs,null)}))})),ou(nu(n),"renderMobileView",(function(){return n.providerLayer(o.a.createElement(Js,null))})),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ru(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=Object(s.l)();return o.a.createElement("div",{className:re()("App",{mobile:e})},e?this.renderMobileView():this.renderPcView())}}])&&eu(n.prototype,r),i&&eu(n,i),t}(r.Component),cu=function(e){var t=e.exit;return o.a.createElement(uu,{exit:t})},lu=function(e,t,n){t?a.a.unmountComponentAtNode(e):a.a.render(o.a.createElement(cu,{exit:n}),e)};t.default={shortopts:"e",handler:function(){var e,t,n,r,o=arguments;return regeneratorRuntime.async((function(i){for(;;)switch(i.prev=i.next){case 0:if(e=o.length>0&&void 0!==o[0]?o[0]:{},o.length>1?o[1]:void 0,o.length>2?o[2]:void 0,o.length>3?o[3]:void 0,o.length>4?o[4]:void 0,t=e.e,n=Object(s.a)("#gui"),r=document.body,!t){i.next=15;break}return lu(n,t),n.classList.remove("blog"),r.classList.remove("white-bg"),i.abrupt("return","Goodbye");case 15:if(!Object(s.k)(n)){i.next=19;break}return r.classList.add("white-bg"),n.classList.add("blog"),i.abrupt("return",new Promise((function(e,t){lu(n,null,(function(){e(),setTimeout((function(){Terminal.exec("blog -e")}))}))})));case 19:case"end":return i.stop()}}))}}},"dj+h":function(e,t,n){},gy2t:function(e,t,n){},hUxU:function(e,t,n){},"kVK+":function(e,t){t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,f=n?o-1:0,p=n?-1:1,h=e[t+f];for(f+=p,i=h&(1<<-l)-1,h>>=-l,l+=s;l>0;i=256*i+e[t+f],f+=p,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+f],f+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),i-=c}return(h?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+h]=255&s,h+=d,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+h]=255&a,h+=d,a/=256,c-=8);e[n+h-d]|=128*y}},no5z:function(module,__webpack_exports__,__webpack_require__){"use strict";(function(global,Buffer){__webpack_require__.d(__webpack_exports__,"a",(function(){return bson_54}));var long__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("2lpH"),long__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__),buffer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("HDXh"),buffer__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__),commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var map=createCommonjsModule((function(e){if(void 0!==commonjsGlobal.Map)e.exports=commonjsGlobal.Map,e.exports.Map=commonjsGlobal.Map;else{var t=function(e){this._keys=[],this._values={};for(var t=0;t<e.length;t++)if(null!=e[t]){var n=e[t],r=n[0],o=n[1];this._keys.push(r),this._values[r]={v:o,i:this._keys.length-1}}};t.prototype.clear=function(){this._keys=[],this._values={}},t.prototype.delete=function(e){var t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)},t.prototype.entries=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?[n,e._values[n].v]:void 0,done:void 0===n}}}},t.prototype.forEach=function(e,t){t=t||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];e.call(t,this._values[r].v,r,t)}},t.prototype.get=function(e){return this._values[e]?this._values[e].v:void 0},t.prototype.has=function(e){return null!=this._values[e]},t.prototype.keys=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?n:void 0,done:void 0===n}}}},t.prototype.set=function(e,t){return this._values[e]?(this._values[e].v=t,this):(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1},this)},t.prototype.values=function(){var e=this,t=0;return{next:function(){var n=e._keys[t++];return{value:void 0!==n?e._values[n].v:void 0,done:void 0===n}}}},Object.defineProperty(t.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),e.exports=t}})),map_1=map.Map;long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.toExtendedJSON=function(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}},long__WEBPACK_IMPORTED_MODULE_0___default.a.fromExtendedJSON=function(e,t){var n=long__WEBPACK_IMPORTED_MODULE_0___default.a.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n},Object.defineProperty(long__WEBPACK_IMPORTED_MODULE_0___default.a.prototype,"_bsontype",{value:"Long"});var long_1=long__WEBPACK_IMPORTED_MODULE_0___default.a;function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Double=function(){function e(t){_classCallCheck(this,e),this.value=t}return _createClass(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseFloat(t.$numberDouble):new e(parseFloat(t.$numberDouble))}}]),e}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Timestamp=function(e){function t(e,n){var r;return _classCallCheck$1(this,t),r=long_1.isLong(e)?_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e.low,e.high)):_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e,n)),_possibleConstructorReturn(r)}return _inherits(t,e),_createClass$1(t,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(e){return new t(long_1.fromInt(e))}},{key:"fromNumber",value:function(e){return new t(long_1.fromNumber(e))}},{key:"fromBits",value:function(e,n){return new t(e,n)}},{key:"fromString",value:function(e,n){return new t(long_1.fromString(e,n))}},{key:"fromExtendedJSON",value:function(e){return new t(e.$timestamp.i,e.$timestamp.t)}}]),t}(long_1);Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,require$$0={};function normalizedFunctionString(e){return e.toString().replace("function(","function (")}function insecureRandomBytes(e){for(var t=new Uint8Array(e),n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(e){return window.crypto.getRandomValues(new Uint8Array(e))};else{try{randomBytes=require$$0.randomBytes}catch(e){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}"function"==typeof global.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global.clearTimeout&&(cachedClearTimeout=clearTimeout);var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)}function Item(e,t){this.fun=e,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,env={},argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()};function hrtime(e){var t=.001*performanceNow.call(performance),n=Math.floor(t),r=Math.floor(t%1*1e9);return e&&(n-=e[0],(r-=e[1])<0&&(n--,r+=1e9)),[n,r]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime},inherits;inherits="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e};var inherits$1=inherits;function _typeof$1(e){return(_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var formatRegExp=/%[sdj%]/g;function format(e){if(!isString(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(inspect(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,i=String(e).replace(formatRegExp,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),a=r[n];n<o;a=r[++n])isNull(a)||!isObject(a)?i+=" "+a:i+=" "+inspect(a);return i}function deprecate(e,t){if(isUndefined(global.process))return function(){return deprecate(e,t).apply(this,arguments)};var n=!1;return function(){return n||(console.error(t),n=!0),e.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){debugs[e]=function(){var t=format.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else debugs[e]=function(){};return debugs[e]}function inspect(e,t){var n={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),isBoolean(t)?n.showHidden=t:t&&_extend(n,t),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,e,n.depth)}function stylizeWithColor(e,t){var n=inspect.styles[t];return n?"["+inspect.colors[n][0]+"m"+e+"["+inspect.colors[n][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}function formatValue(e,t,n){if(e.customInspect&&t&&isFunction(t.inspect)&&t.inspect!==inspect&&(!t.constructor||t.constructor.prototype!==t)){var r=t.inspect(n,e);return isString(r)||(r=formatValue(e,r,n)),r}var o=formatPrimitive(e,t);if(o)return o;var i=Object.keys(t),a=arrayToHash(i);if(e.showHidden&&(i=Object.getOwnPropertyNames(t)),isError(t)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return formatError(t);if(0===i.length){if(isFunction(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(isRegExp(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(isDate(t))return e.stylize(Date.prototype.toString.call(t),"date");if(isError(t))return formatError(t)}var u,c="",l=!1,f=["{","}"];(isArray(t)&&(l=!0,f=["[","]"]),isFunction(t))&&(c=" [Function"+(t.name?": "+t.name:"")+"]");return isRegExp(t)&&(c=" "+RegExp.prototype.toString.call(t)),isDate(t)&&(c=" "+Date.prototype.toUTCString.call(t)),isError(t)&&(c=" "+formatError(t)),0!==i.length||l&&0!=t.length?n<0?isRegExp(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=l?formatArray(e,t,n,a,i):i.map((function(r){return formatProperty(e,t,n,a,r,l)})),e.seen.pop(),reduceToSingleString(u,c,f)):f[0]+c+f[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,t,n,r,o){for(var i=[],a=0,s=t.length;a<s;++a)hasOwnProperty(t,String(a))?i.push(formatProperty(e,t,n,r,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(formatProperty(e,t,n,r,o,!0))})),i}function formatProperty(e,t,n,r,o,i){var a,s,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),hasOwnProperty(r,o)||(a="["+o+"]"),s||(e.seen.indexOf(u.value)<0?(s=isNull(n)?formatValue(e,u.value,null):formatValue(e,u.value,n-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),isUndefined(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function reduceToSingleString(e,t,n){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"===_typeof$1(e)}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"===_typeof$1(e)&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof$1(e)||void 0===e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var e=new Date,t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],t].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(e,t){if(!t||!isObject(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog};function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),e}var Buffer$1=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(e){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(e){return e.toString("hex")}function makeObjectIdError(e,t){var n=e[t];return new TypeError('ObjectId string "'.concat(e,'" contains invalid character "').concat(n,'" with character code (').concat(e.charCodeAt(t),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function e(t){if(_classCallCheck$2(this,e),t instanceof e)return t;if(null==t||"number"==typeof t)return this.id=e.generate(t),void(e.cacheHexString&&(this.__id=this.toString("hex")));var n=e.isValid(t);if(!n&&null!=t)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(n&&"string"==typeof t&&24===t.length&&hasBufferType)return new e(Buffer$1.from(t,"hex"));if(n&&"string"==typeof t&&24===t.length)return e.createFromHexString(t);if(null==t||12!==t.length){if(null!=t&&t.toHexString)return e.createFromHexString(t.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=t,e.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(e,[{key:"toHexString",value:function(){if(e.cacheHexString&&this.__id)return this.__id;var t="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return t=convertToHex(this.id),e.cacheHexString&&(this.__id=t),t;for(var n=0;n<this.id.length;n++){var r=hexTable[this.id.charCodeAt(n)];if("string"!=typeof r)throw makeObjectIdError(this.id,n);t+=r}return e.cacheHexString&&(this.__id=t),t}},{key:"toString",value:function(e){return this.id&&this.id.copy?this.id.toString("string"==typeof e?e:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(t){return t instanceof e?this.toString()===t.toString():"string"==typeof t&&e.isValid(t)&&12===t.length&&this.id instanceof _Buffer?t===this.id.toString("binary"):"string"==typeof t&&e.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&e.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof e||t.toHexString))&&t.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return e.index=(e.index+1)%16777215}},{key:"generate",value:function(t){"number"!=typeof t&&(t=~~(Date.now()/1e3));var n=e.getInc(),r=Buffer$1.alloc(12);return r[3]=255&t,r[2]=t>>8&255,r[1]=t>>16&255,r[0]=t>>24&255,r[4]=PROCESS_UNIQUE[0],r[5]=PROCESS_UNIQUE[1],r[6]=PROCESS_UNIQUE[2],r[7]=PROCESS_UNIQUE[3],r[8]=PROCESS_UNIQUE[4],r[11]=255&n,r[10]=n>>8&255,r[9]=n>>16&255,r}},{key:"createPk",value:function(){return new e}},{key:"createFromTime",value:function(t){var n=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return n[3]=255&t,n[2]=t>>8&255,n[1]=t>>16&255,n[0]=t>>24&255,new e(n)}},{key:"createFromHexString",value:function(t){if(void 0===t||null!=t&&24!==t.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new e(Buffer$1.from(t,"hex"));for(var n=new _Buffer(12),r=0,o=0;o<24;)n[r++]=decodeLookup[t.charCodeAt(o++)]<<4|decodeLookup[t.charCodeAt(o++)];return new e(n)}},{key:"isValid",value:function(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&checkForHexRegExp.test(t):t instanceof e||(t instanceof _Buffer&&12===t.length||!!t.toHexString&&(12===t.id.length||24===t.id.length&&checkForHexRegExp.test(t.id)))))}},{key:"fromExtendedJSON",value:function(t){return new e(t.$oid)}}]),e}();ObjectId.get_inc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1((function(){return ObjectId.getInc()}),"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1((function(e){return ObjectId.generate(e)}),"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(e){this.id[3]=255&e,this.id[2]=e>>8&255,this.id[1]=e>>16&255,this.id[0]=e>>24&255}}),ObjectId.prototype[util.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),e}function alphabetize(e){return e.split("").sort().join("")}var BSONRegExp=function(){function e(t,n){_classCallCheck$3(this,e),this.pattern=t||"",this.options=n?alphabetize(n):"";for(var r=0;r<this.options.length;r++)if("i"!==this.options[r]&&"m"!==this.options[r]&&"x"!==this.options[r]&&"l"!==this.options[r]&&"s"!==this.options[r]&&"u"!==this.options[r])throw new Error("The regular expression option [".concat(this.options[r],"] is not supported"))}return _createClass$3(e,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$regularExpression.pattern,t.$regularExpression.options.split("").sort().join(""))}}]),e}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$4(e,t,n){return t&&_defineProperties$4(e.prototype,t),n&&_defineProperties$4(e,n),e}var BSONSymbol=function(){function e(t){_classCallCheck$4(this,e),this.value=t}return _createClass$4(e,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$symbol)}}]),e}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$5(e,t,n){return t&&_defineProperties$5(e.prototype,t),n&&_defineProperties$5(e,n),e}var Int32=function(){function e(t){_classCallCheck$5(this,e),this.value=t}return _createClass$5(e,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(t,n){return n&&n.relaxed?parseInt(t.$numberInt,10):new e(t.$numberInt)}}]),e}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$6(e,t,n){return t&&_defineProperties$6(e.prototype,t),n&&_defineProperties$6(e,n),e}var Code=function(){function e(t,n){_classCallCheck$6(this,e),this.code=t,this.scope=n}return _createClass$6(e,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(t){return new e(t.$code,t.$scope)}}]),e}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(e){return!isNaN(parseInt(e,10))}function divideu128(e){var t=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function multiply64x2(e,t){if(!e&&!t)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=e.shiftRightUnsigned(32),r=new long_1(e.getLowBits(),0),o=t.shiftRightUnsigned(32),i=new long_1(t.getLowBits(),0),a=n.multiply(o),s=n.multiply(i),u=r.multiply(o),c=r.multiply(i);return a=a.add(s.shiftRightUnsigned(32)),s=new long_1(s.getLowBits(),0).add(u).add(c.shiftRightUnsigned(32)),{high:a=a.add(s.shiftRightUnsigned(32)),low:c=s.shiftLeft(32).add(new long_1(c.getLowBits(),0))}}function lessThan(e,t){var n=e.high>>>0,r=t.high>>>0;return n<r||n===r&&e.low>>>0<t.low>>>0}function invalidErr(e,t){throw new TypeError('"'.concat(e,'" is not a valid Decimal128 string - ').concat(t))}function Decimal128(e){this.bytes=e}Decimal128.fromString=function(e){var t,n=!1,r=!1,o=!1,i=0,a=0,s=0,u=0,c=0,l=[0],f=0,p=0,h=0,d=0,y=0,b=0,g=[0,0],v=[0,0],m=0;if(e.length>=7e3)throw new TypeError(e+" not a valid Decimal128 string");var _=e.match(PARSE_STRING_REGEXP),E=e.match(PARSE_INF_REGEXP),O=e.match(PARSE_NAN_REGEXP);if(!_&&!E&&!O||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(_){var w=_[2],A=_[4],S=_[5],N=_[6];A&&void 0===N&&invalidErr(e,"missing exponent power"),A&&void 0===w&&invalidErr(e,"missing exponent base"),void 0===A&&(S||N)&&invalidErr(e,"missing e before exponent")}if("+"!==e[m]&&"-"!==e[m]||(n="-"===e[m++]),!isDigit(e[m])&&"."!==e[m]){if("i"===e[m]||"I"===e[m])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(e[m])||"."===e[m];)"."!==e[m]?(f<34&&("0"!==e[m]||o)&&(o||(c=a),o=!0,l[p++]=parseInt(e[m],10),f+=1),o&&(s+=1),r&&(u+=1),a+=1,m+=1):(r&&invalidErr(e,"contains multiple periods"),r=!0,m+=1);if(r&&!a)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[m]||"E"===e[m]){var T=e.substr(++m).match(EXPONENT_REGEX);if(!T||!T[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));y=parseInt(T[0],10),m+=T[0].length}if(e[m])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(h=0,f){if(d=f-1,1!==(i=s))for(;"0"===e[c+i-1];)i-=1}else h=0,d=0,l[0]=0,s=1,f=1,i=0;for(y<=u&&u-y>16384?y=EXPONENT_MIN:y-=u;y>EXPONENT_MAX;){if((d+=1)-h>MAX_DIGITS){if(l.join("").match(/^0+$/)){y=EXPONENT_MAX;break}invalidErr(e,"overflow")}y-=1}for(;y<EXPONENT_MIN||f<s;){if(0===d&&i<f){y=EXPONENT_MIN,i=0;break}if(f<s?s-=1:d-=1,y<EXPONENT_MAX)y+=1;else{if(l.join("").match(/^0+$/)){y=EXPONENT_MAX;break}invalidErr(e,"overflow")}}if(d-h+1<i){var I=a;r&&(c+=1,I+=1),n&&(c+=1,I+=1);var P=parseInt(e[c+d+1],10),R=0;if(P>=5&&(R=1,5===P))for(R=l[d]%2==1,b=c+d+2;b<I;b++)if(parseInt(e[b],10)){R=1;break}if(R)for(var B=d;B>=0;B--)if(++l[B]>9&&(l[B]=0,0===B)){if(!(y<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));y+=1,l[B]=1}}if(g=long_1.fromNumber(0),v=long_1.fromNumber(0),0===i)g=long_1.fromNumber(0),v=long_1.fromNumber(0);else if(d-h<17){var D=h;for(v=long_1.fromNumber(l[D++]),g=new long_1(0,0);D<=d;D++)v=(v=v.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[D]))}else{var j=h;for(g=long_1.fromNumber(l[j++]);j<=d-17;j++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[j]));for(v=long_1.fromNumber(l[j++]);j<=d;j++)v=(v=v.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(l[j]))}var U=multiply64x2(g,long_1.fromString("100000000000000000"));U.low=U.low.add(v),lessThan(U.low,v)&&(U.high=U.high.add(long_1.fromNumber(1))),t=y+EXPONENT_BIAS;var C={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};U.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(C.high=C.high.or(long_1.fromNumber(3).shiftLeft(61)),C.high=C.high.or(long_1.fromNumber(t).and(long_1.fromNumber(16383).shiftLeft(47))),C.high=C.high.or(U.high.and(long_1.fromNumber(0x7fffffffffff)))):(C.high=C.high.or(long_1.fromNumber(16383&t).shiftLeft(49)),C.high=C.high.or(U.high.and(long_1.fromNumber(562949953421311)))),C.low=U.low,n&&(C.high=C.high.or(long_1.fromString("9223372036854775808")));var x=Buffer$2.alloc(16);return m=0,x[m++]=255&C.low.low,x[m++]=C.low.low>>8&255,x[m++]=C.low.low>>16&255,x[m++]=C.low.low>>24&255,x[m++]=255&C.low.high,x[m++]=C.low.high>>8&255,x[m++]=C.low.high>>16&255,x[m++]=C.low.high>>24&255,x[m++]=255&C.high.low,x[m++]=C.high.low>>8&255,x[m++]=C.high.low>>16&255,x[m++]=C.high.low>>24&255,x[m++]=255&C.high.high,x[m++]=C.high.high>>8&255,x[m++]=C.high.high>>16&255,x[m++]=C.high.high>>24&255,new Decimal128(x)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var e,t,n,r,o,i,a=0,s=new Array(36),u=0;u<s.length;u++)s[u]=0;var c,l,f,p,h,d=0,y=!1,b={parts:new Array(4)},g=[];d=0;var v=this.bytes;if(r=v[d++]|v[d++]<<8|v[d++]<<16|v[d++]<<24,n=v[d++]|v[d++]<<8|v[d++]<<16|v[d++]<<24,t=v[d++]|v[d++]<<8|v[d++]<<16|v[d++]<<24,e=v[d++]|v[d++]<<8|v[d++]<<16|v[d++]<<24,d=0,{low:new long_1(r,n),high:new long_1(t,e)}.high.lessThan(long_1.ZERO)&&g.push("-"),(o=e>>26&COMBINATION_MASK)>>3==3){if(o===COMBINATION_INFINITY)return g.join("")+"Infinity";if(o===COMBINATION_NAN)return"NaN";i=e>>15&EXPONENT_MASK,f=8+(e>>14&1)}else f=e>>14&7,i=e>>17&EXPONENT_MASK;if(c=i-EXPONENT_BIAS,b.parts[0]=(16383&e)+((15&f)<<14),b.parts[1]=t,b.parts[2]=n,b.parts[3]=r,0===b.parts[0]&&0===b.parts[1]&&0===b.parts[2]&&0===b.parts[3])y=!0;else for(h=3;h>=0;h--){var m=0,_=divideu128(b);if(b=_.quotient,m=_.rem.low)for(p=8;p>=0;p--)s[9*h+p]=m%10,m=Math.floor(m/10)}if(y)a=1,s[d]=0;else for(a=36;!s[d];)a-=1,d+=1;if((l=a-1+c)>=34||l<=-7||c>0){if(a>34)return g.push(0),c>0?g.push("E+"+c):c<0&&g.push("E"+c),g.join("");g.push(s[d++]),(a-=1)&&g.push(".");for(var E=0;E<a;E++)g.push(s[d++]);g.push("E"),l>0?g.push("+"+l):g.push(l)}else if(c>=0)for(var O=0;O<a;O++)g.push(s[d++]);else{var w=a+c;if(w>0)for(var A=0;A<w;A++)g.push(s[d++]);else g.push("0");for(g.push(".");w++<0;)g.push("0");for(var S=0;S<a-Math.max(w-1,0);S++)g.push(s[d++])}return g.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(e){return Decimal128.fromString(e.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$7(e,t,n){return t&&_defineProperties$7(e.prototype,t),n&&_defineProperties$7(e,n),e}var MinKey=function(){function e(){_classCallCheck$7(this,e)}return _createClass$7(e,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$8(e,t,n){return t&&_defineProperties$8(e.prototype,t),n&&_defineProperties$8(e,n),e}var MaxKey=function(){function e(){_classCallCheck$8(this,e)}return _createClass$8(e,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$9(e,t,n){return t&&_defineProperties$9(e.prototype,t),n&&_defineProperties$9(e,n),e}var DBRef=function(){function e(t,n,r,o){_classCallCheck$9(this,e);var i=t.split(".");2===i.length&&(r=i.shift(),t=i.shift()),this.collection=t,this.oid=n,this.db=r,this.fields=o||{}}return _createClass$9(e,[{key:"toJSON",value:function(){var e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}},{key:"toExtendedJSON",value:function(){var e={$ref:this.collection,$id:this.oid};return this.db&&(e.$db=this.db),e=Object.assign(e,this.fields)}}],[{key:"fromExtendedJSON",value:function(t){var n=Object.assign({},t);return["$ref","$id","$db"].forEach((function(e){return delete n[e]})),new e(t.$ref,t.$id,t.$db,n)}}]),e}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(e){this.collection=e},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$a(e,t,n){return t&&_defineProperties$a(e.prototype,t),n&&_defineProperties$a(e,n),e}var Buffer$3=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,Binary=function(){function e(t,n){if(_classCallCheck$a(this,e),!(null==t||"string"==typeof t||Buffer$3.isBuffer(t)||t instanceof Uint8Array||Array.isArray(t)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==n?BSON_BINARY_SUBTYPE_DEFAULT:n,this.position=0,null==t||t instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(e.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE)):this.buffer=new Array(e.BUFFER_SIZE);else{if("string"==typeof t)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(t);else{if("undefined"==typeof Uint8Array&&!Array.isArray(t))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(t)}else this.buffer=t;this.position=t.length}}return _createClass$a(e,[{key:"put",value:function(t){if(null!=t.length&&"number"!=typeof t&&1!==t.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof t&&t<0||t>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var n=null;if(n="string"==typeof t?t.charCodeAt(0):null!=t.length?t[0]:t,this.buffer.length>this.position)this.buffer[this.position++]=n;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var r=Buffer$3.alloc(e.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=n}else{var o=null;o=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(e.BUFFER_SIZE+this.buffer.length)):new Array(e.BUFFER_SIZE+this.buffer.length);for(var i=0;i<this.buffer.length;i++)o[i]=this.buffer[i];this.buffer=o,this.buffer[this.position++]=n}}},{key:"write",value:function(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+e.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+e.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(e)&&Buffer$3.isBuffer(this.buffer))e.copy(this.buffer,t,0,e.length),this.position=t+e.length>this.position?t+e.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof e&&Buffer$3.isBuffer(this.buffer))this.buffer.write(e,t,"binary"),this.position=t+e.length>this.position?t+e.length:this.position;else if(isUint8Array(e)||Array.isArray(e)&&"string"!=typeof e){for(var o=0;o<e.length;o++)this.buffer[t++]=e[o];this.position=t>this.position?t:this.position}else if("string"==typeof e){for(var i=0;i<e.length;i++)this.buffer[t++]=e.charCodeAt(i);this.position=t>this.position?t:this.position}}},{key:"read",value:function(e,t){if(t=t&&t>0?t:this.position,this.buffer.slice)return this.buffer.slice(e,e+t);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t)):new Array(t),r=0;r<t;r++)n[r]=this.buffer[e++];return n}},{key:"value",value:function(e){if((e=null!=e&&e)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(e){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var t=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)t[n]=this.buffer[n];return t}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(e){return null!=this.buffer?this.buffer.slice(0,this.position).toString(e):""}},{key:"toExtendedJSON",value:function(){var e=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),t=Number(this.sub_type).toString(16);return{$binary:{base64:e,subType:1===t.length?"0"+t:t}}}}],[{key:"fromExtendedJSON",value:function(t){var n=t.$binary.subType?parseInt(t.$binary.subType,16):0;return new e(Buffer$3.from(t.$binary.base64,"base64"),n)}}]),e}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)}function writeStringToArray(e){for(var t="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e.length)):new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function convertArraytoUtf8BinaryString(e,t,n){for(var r="",o=t;o<n;o++)r+=String.fromCharCode(e[o]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(e){return(_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(e,t,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(n>=BSON_INT32_MIN&&n<=BSON_INT32_MAX)return new int_32(n);if(n>=BSON_INT64_MIN&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var o=Object.keys(n).filter((function(e){return e.startsWith("$")&&null!=n[e]})),i=0;i<o.length;i++){var a=keysToCodecs[o[i]];if(a)return a.fromExtendedJSON(n,r)}if(null!=n.$date){var s=n.$date,u=new Date;return"string"==typeof s?u.setTime(Date.parse(s)):long_1.isLong(s)?u.setTime(s.toNumber()):"number"==typeof s&&r.relaxed&&u.setTime(s),u}if(null!=n.$code){var c=Object.assign({},n);return n.$scope&&(c.$scope=deserializeValue(e,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var l=n.$ref?n:n.$dbPointer;if(l instanceof db_ref)return l;var f=Object.keys(l).filter((function(e){return e.startsWith("$")})),p=!0;if(f.forEach((function(e){-1===["$ref","$id","$db"].indexOf(e)&&(p=!1)})),p)return db_ref.fromExtendedJSON(l)}return n}function parse(e,t){var n=this;return"boolean"==typeof(t=Object.assign({},{relaxed:!0},t)).relaxed&&(t.strict=!t.relaxed),"boolean"==typeof t.strict&&(t.relaxed=!t.strict),JSON.parse(e,(function(e,r){return deserializeValue(n,e,r,t)}))}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(e,t,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==t||"object"!==_typeof$2(t)||Array.isArray(t)||(r=t,t=null,n=0),r=Object.assign({},{relaxed:!0},r);var o=Array.isArray(e)?serializeArray(e,r):serializeDocument(e,r);return JSON.stringify(o,t,n)}function serialize(e,t){return t=t||{},JSON.parse(stringify(e,t))}function deserialize(e,t){return t=t||{},parse(JSON.stringify(e),t)}function serializeArray(e,t){return e.map((function(e){return serializeValue(e,t)}))}function getISOString(e){var t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function serializeValue(e,t){if(Array.isArray(e))return serializeArray(e,t);if(void 0===e)return null;if(e instanceof Date){var n=e.getTime(),r=n>-1&&n<2534023188e5;return t.relaxed&&r?{$date:getISOString(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){var o=e>=BSON_INT64_MIN&&e<=BSON_INT64_MAX;if(e>=BSON_INT32_MIN&&e<=BSON_INT32_MAX)return{$numberInt:e.toString()};if(o)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){var i=e.flags;return void 0===i&&(i=e.toString().match(/[gimuy]*$/)[0]),new regexp(e.source,i).toExtendedJSON()}return null!=e&&"object"===_typeof$2(e)?serializeDocument(e,t):e}var BSON_TYPE_MAPPINGS={Binary:function(e){return new binary(e.value(),e.subtype)},Code:function(e){return new code(e.code,e.scope)},DBRef:function(e){return new db_ref(e.collection||e.namespace,e.oid,e.db,e.fields)},Decimal128:function(e){return new decimal128(e.bytes)},Double:function(e){return new double_1(e.value)},Int32:function(e){return new int_32(e.value)},Long:function(e){return long_1.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(e){return new objectid(e)},ObjectId:function(e){return new objectid(e)},BSONRegExp:function(e){return new regexp(e.pattern,e.options)},Symbol:function(e){return new symbol(e.value)},Timestamp:function(e){return timestamp.fromBits(e.low,e.high)}};function serializeDocument(e,t){if(null==e||"object"!==_typeof$2(e))throw new Error("not an object instance");var n=e._bsontype;if(void 0===n){var r={};for(var o in e)r[o]=serializeValue(e[o],t);return r}if("string"==typeof n){var i=e;if("function"!=typeof i.toExtendedJSON){var a=BSON_TYPE_MAPPINGS[n];if(!a)throw new TypeError("Unrecognized or invalid _bsontype: "+n);i=a(i)}return"Code"===n&&i.scope?i=new code(i.code,serializeValue(i.scope,t)):"DBRef"===n&&i.oid&&(i=new db_ref(i.collection,serializeValue(i.oid,t),i.db,i.fields)),i.toExtendedJSON(t)}throw new Error("_bsontype must be a string, but was: "+_typeof$2(n))}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(e,t,n){for(var r=0,o=t;o<n;o+=1){var i=e[o];if(r){if((i&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(i&FIRST_BIT)if((i&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((i&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((i&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(e,t,n){var r=(t=null==t?{}:t)&&t.index?t.index:0,o=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(o<5)throw new Error("bson size must be >= 5, is ".concat(o));if(t.allowObjectSmallerThanBufferSize&&e.length<o)throw new Error("buffer length ".concat(e.length," must be >= bson size ").concat(o));if(!t.allowObjectSmallerThanBufferSize&&e.length!==o)throw new Error("buffer length ".concat(e.length," must === bson size ").concat(o));if(o+r>e.length)throw new Error("(bson size ".concat(o," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(e),")"));if(0!==e[r+o-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(e,r,t,n)}function deserializeObject(e,t,n,r){var o=null!=n.evalFunctions&&n.evalFunctions,i=null!=n.cacheFunctions&&n.cacheFunctions,a=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!a)var s=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,c=null!=n.raw&&n.raw,l="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,f=null!=n.promoteBuffers&&n.promoteBuffers,p=null==n.promoteLongs||n.promoteLongs,h=null==n.promoteValues||n.promoteValues,d=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(y<5||y>e.length)throw new Error("corrupt bson message");for(var b=r?[]:{},g=0;;){var v=e[t++];if(0===v)break;for(var m=t;0!==e[m]&&m<e.length;)m++;if(m>=Buffer$4.byteLength(e))throw new Error("Bad BSON Document: illegal CString");var _=r?g++:e.toString("utf8",t,m);if(t=m+1,v===constants.BSON_DATA_STRING){var E=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(E<=0||E>e.length-t||0!==e[t+E-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+E-1))throw new Error("Invalid UTF-8 string in BSON document");var O=e.toString("utf8",t,t+E-1);b[_]=O,t+=E}else if(v===constants.BSON_DATA_OID){var w=Buffer$4.alloc(12);e.copy(w,0,t,t+12),b[_]=new objectid(w),t+=12}else if(v===constants.BSON_DATA_INT&&!1===h)b[_]=new int_32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(v===constants.BSON_DATA_INT)b[_]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(v===constants.BSON_DATA_NUMBER&&!1===h)b[_]=new double_1(e.readDoubleLE(t)),t+=8;else if(v===constants.BSON_DATA_NUMBER)b[_]=e.readDoubleLE(t),t+=8;else if(v===constants.BSON_DATA_DATE){var A=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,S=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;b[_]=new Date(new long_1(A,S).toNumber())}else if(v===constants.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");b[_]=1===e[t++]}else if(v===constants.BSON_DATA_OBJECT){var N=t,T=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(T<=0||T>e.length-t)throw new Error("bad embedded document length in bson");b[_]=c?e.slice(t,t+T):deserializeObject(e,N,n,!1),t+=T}else if(v===constants.BSON_DATA_ARRAY){var I=t,P=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,R=n,B=t+P;if(u&&u[_]){for(var D in R={},n)R[D]=n[D];R.raw=!0}if(b[_]=deserializeObject(e,I,R,!0),0!==e[(t+=P)-1])throw new Error("invalid array terminator byte");if(t!==B)throw new Error("corrupted array bson")}else if(v===constants.BSON_DATA_UNDEFINED)b[_]=void 0;else if(v===constants.BSON_DATA_NULL)b[_]=null;else if(v===constants.BSON_DATA_LONG){var j=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,U=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,C=new long_1(j,U);b[_]=p&&!0===h&&C.lessThanOrEqual(JS_INT_MAX_LONG)&&C.greaterThanOrEqual(JS_INT_MIN_LONG)?C.toNumber():C}else if(v===constants.BSON_DATA_DECIMAL128){var x=Buffer$4.alloc(16);e.copy(x,0,t,t+16),t+=16;var k=new decimal128(x);b[_]=k.toObject?k.toObject():k}else if(v===constants.BSON_DATA_BINARY){var L=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,M=L,$=e[t++];if(L<0)throw new Error("Negative binary type element size found");if(L>Buffer$4.byteLength(e))throw new Error("Binary type size larger than document size");if(null!=e.slice){if($===binary.SUBTYPE_BYTE_ARRAY){if((L=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(L>M-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(L<M-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}b[_]=f&&h?e.slice(t,t+L):new binary(e.slice(t,t+L),$)}else{var F="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(L)):new Array(L);if($===binary.SUBTYPE_BYTE_ARRAY){if((L=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(L>M-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(L<M-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(m=0;m<L;m++)F[m]=e[t+m];b[_]=f&&h?F:new binary(F,$)}t+=L}else if(v===constants.BSON_DATA_REGEXP&&!1===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var z=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var Y=e.toString("utf8",t,m);t=m+1;var q=new Array(Y.length);for(m=0;m<Y.length;m++)switch(Y[m]){case"m":q[m]="m";break;case"s":q[m]="g";break;case"i":q[m]="i"}b[_]=new RegExp(z,q.join(""))}else if(v===constants.BSON_DATA_REGEXP&&!0===l){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var V=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");var W=e.toString("utf8",t,m);t=m+1,b[_]=new regexp(V,W)}else if(v===constants.BSON_DATA_SYMBOL){var K=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(K<=0||K>e.length-t||0!==e[t+K-1])throw new Error("bad string length in bson");b[_]=e.toString("utf8",t,t+K-1),t+=K}else if(v===constants.BSON_DATA_TIMESTAMP){var H=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,G=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;b[_]=new timestamp(H,G)}else if(v===constants.BSON_DATA_MIN_KEY)b[_]=new min_key;else if(v===constants.BSON_DATA_MAX_KEY)b[_]=new max_key;else if(v===constants.BSON_DATA_CODE){var J=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(J<=0||J>e.length-t||0!==e[t+J-1])throw new Error("bad string length in bson");var X=e.toString("utf8",t,t+J-1);if(o)if(i){var Z=a?s(X):X;b[_]=isolateEvalWithHash(functionCache,Z,X,b)}else b[_]=isolateEval(X);else b[_]=new code(X);t+=J}else if(v===constants.BSON_DATA_CODE_W_SCOPE){var Q=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var ee=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ee<=0||ee>e.length-t||0!==e[t+ee-1])throw new Error("bad string length in bson");var te=e.toString("utf8",t,t+ee-1),ne=t+=ee,re=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,oe=deserializeObject(e,ne,n,!1);if(t+=re,Q<8+re+ee)throw new Error("code_w_scope total size is to short, truncating scope");if(Q>8+re+ee)throw new Error("code_w_scope total size is to long, clips outer document");if(o){if(i){var ie=a?s(te):te;b[_]=isolateEvalWithHash(functionCache,ie,te,b)}else b[_]=isolateEval(te);b[_].scope=oe}else b[_]=new code(te,oe)}else{if(v!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+v.toString(16)+' for fieldname "'+_+'", are you using the latest BSON parser?');var ae=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ae<=0||ae>e.length-t||0!==e[t+ae-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+ae-1))throw new Error("Invalid UTF-8 string in BSON document");var se=e.toString("utf8",t,t+ae-1);t+=ae;var ue=Buffer$4.alloc(12);e.copy(ue,0,t,t+12);var ce=new objectid(ue);t+=12,b[_]=new db_ref(se,ce)}}if(y!==t-d){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var le=Object.keys(b).filter((function(e){return e.startsWith("$")})),fe=!0;if(le.forEach((function(e){-1===["$ref","$id","$db"].indexOf(e)&&(fe=!1)})),!fe)return b;if(null!=b.$id&&null!=b.$ref){var pe=Object.assign({},b);return delete pe.$ref,delete pe.$id,delete pe.$db,new db_ref(b.$ref,b.$id,b.$db||null,pe)}return b}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(e,t,n,r,o){var i,a,s="big"===n,u=8*o-r-1,c=(1<<u)-1,l=c>>1,f=-7,p=s?0:o-1,h=s?1:-1,d=e[t+p];for(p+=h,i=d&(1<<-f)-1,d>>=-f,f+=u;f>0;i=256*i+e[t+p],p+=h,f-=8);for(a=i&(1<<-f)-1,i>>=-f,f+=r;f>0;a=256*a+e[t+p],p+=h,f-=8);if(0===i)i=1-l;else{if(i===c)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=l}return(d?-1:1)*a*Math.pow(2,i-r)}function writeIEEE754(e,t,n,r,o,i){var a,s,u,c="big"===r,l=8*i-o-1,f=(1<<l)-1,p=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=c?i-1:0,y=c?-1:1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=f):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(a++,u/=2),a+p>=f?(s=0,a=f):a+p>=1?(s=(t*u-1)*Math.pow(2,o),a+=p):(s=t*Math.pow(2,p-1)*Math.pow(2,o),a=0)),isNaN(t)&&(s=0);o>=8;)e[n+d]=255&s,d+=y,s/=256,o-=8;for(a=a<<o|s,isNaN(t)&&(a+=8),l+=o;l>0;)e[n+d]=255&a,d+=y,a/=256,l-=8;e[n+d-y]|=128*b}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(e){return(_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$5=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(e){return"object"===_typeof$3(e)&&"[object Date]"===Object.prototype.toString.call(e)},isRegExp$1=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function serializeString(e,t,n,r,o){e[r++]=constants.BSON_DATA_STRING;var i=o?e.write(t,r,"ascii"):e.write(t,r,"utf8");e[(r=r+i+1)-1]=0;var a=e.write(n,r+4,"utf8");return e[r+3]=a+1>>24&255,e[r+2]=a+1>>16&255,e[r+1]=a+1>>8&255,e[r]=a+1&255,r=r+4+a,e[r++]=0,r}function serializeNumber(e,t,n,r,o){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)e[r++]=constants.BSON_DATA_INT,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){e[r++]=constants.BSON_DATA_NUMBER,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8}else{e[r++]=constants.BSON_DATA_LONG,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=long_1.fromNumber(n),a=i.getLowBits(),s=i.getHighBits();e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255}else e[r++]=constants.BSON_DATA_NUMBER,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8;return r}function serializeNull(e,t,n,r,o){return e[r++]=constants.BSON_DATA_NULL,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeBoolean(e,t,n,r,o){return e[r++]=constants.BSON_DATA_BOOLEAN,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function serializeDate(e,t,n,r,o){e[r++]=constants.BSON_DATA_DATE,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=long_1.fromNumber(n.getTime()),a=i.getLowBits(),s=i.getHighBits();return e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function serializeRegExp(e,t,n,r,o){if(e[r++]=constants.BSON_DATA_REGEXP,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=e.write(n.source,r,"utf8"),e[r++]=0,n.ignoreCase&&(e[r++]=105),n.global&&(e[r++]=115),n.multiline&&(e[r++]=109),e[r++]=0,r}function serializeBSONRegExp(e,t,n,r,o){if(e[r++]=constants.BSON_DATA_REGEXP,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=e.write(n.pattern,r,"utf8"),e[r++]=0,r+=e.write(n.options.split("").sort().join(""),r,"utf8"),e[r++]=0,r}function serializeMinMax(e,t,n,r,o){return null===n?e[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=constants.BSON_DATA_MIN_KEY:e[r++]=constants.BSON_DATA_MAX_KEY,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeObjectId(e,t,n,r,o){if(e[r++]=constants.BSON_DATA_OID,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function serializeBuffer(e,t,n,r,o){e[r++]=constants.BSON_DATA_BINARY,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=n.length;return e[r++]=255&i,e[r++]=i>>8&255,e[r++]=i>>16&255,e[r++]=i>>24&255,e[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(e,r,0,i),r+=i}function serializeObject(e,t,n,r,o,i,a,s,u,c){for(var l=0;l<c.length;l++)if(c[l]===n)throw new Error("cyclic dependency detected");c.push(n),e[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var f=serializeInto(e,n,o,r,i+1,a,s,c);return c.pop(),f}function serializeDecimal128(e,t,n,r,o){return e[r++]=constants.BSON_DATA_DECIMAL128,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function serializeLong(e,t,n,r,o){e[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=n.getLowBits(),a=n.getHighBits();return e[r++]=255&i,e[r++]=i>>8&255,e[r++]=i>>16&255,e[r++]=i>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function serializeInt32(e,t,n,r,o){return e[r++]=constants.BSON_DATA_INT,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function serializeDouble(e,t,n,r,o){return e[r++]=constants.BSON_DATA_NUMBER,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n.value,r,"little",52,8),r+=8}function serializeFunction(e,t,n,r,o,i,a){e[r++]=constants.BSON_DATA_CODE,r+=a?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var s=normalizedFunctionString$1(n),u=e.write(s,r+4,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function serializeCode(e,t,n,r,o,i,a,s,u){if(n.scope&&"object"===_typeof$3(n.scope)){e[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var c=r,l="string"==typeof n.code?n.code:n.code.toString();r+=4;var f=e.write(l,r+4,"utf8")+1;e[r]=255&f,e[r+1]=f>>8&255,e[r+2]=f>>16&255,e[r+3]=f>>24&255,e[r+4+f-1]=0,r=r+f+4;var p=serializeInto(e,n.scope,o,r,i+1,a,s);r=p-1;var h=p-c;e[c++]=255&h,e[c++]=h>>8&255,e[c++]=h>>16&255,e[c++]=h>>24&255,e[r++]=0}else{e[r++]=constants.BSON_DATA_CODE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var d=n.code.toString(),y=e.write(d,r+4,"utf8")+1;e[r]=255&y,e[r+1]=y>>8&255,e[r+2]=y>>16&255,e[r+3]=y>>24&255,r=r+4+y-1,e[r++]=0}return r}function serializeBinary(e,t,n,r,o){e[r++]=constants.BSON_DATA_BINARY,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=n.value(!0),a=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(a+=4),e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,e[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(a-=4,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255),i.copy(e,r,0,n.position),r+=n.position}function serializeSymbol(e,t,n,r,o){e[r++]=constants.BSON_DATA_SYMBOL,r+=o?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var i=e.write(n.value,r+4,"utf8")+1;return e[r]=255&i,e[r+1]=i>>8&255,e[r+2]=i>>16&255,e[r+3]=i>>24&255,r=r+4+i-1,e[r++]=0,r}function serializeDBRef(e,t,n,r,o,i,a){e[r++]=constants.BSON_DATA_OBJECT,r+=a?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var s,u=r,c={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(c.$db=n.db);var l=(s=serializeInto(e,c=Object.assign(c,n.fields),!1,r,o+1,i))-u;return e[u++]=255&l,e[u++]=l>>8&255,e[u++]=l>>16&255,e[u++]=l>>24&255,s}function serializeInto(e,t,n,r,o,i,a,s){r=r||0,(s=s||[]).push(t);var u=r+4;if(Array.isArray(t))for(var c=0;c<t.length;c++){var l=""+c,f=t[c];if(f&&f.toBSON){if("function"!=typeof f.toBSON)throw new TypeError("toBSON is not a function");f=f.toBSON()}var p=_typeof$3(f);if("string"===p)u=serializeString(e,l,f,u,!0);else if("number"===p)u=serializeNumber(e,l,f,u,!0);else if("boolean"===p)u=serializeBoolean(e,l,f,u,!0);else if(f instanceof Date||isDate$1(f))u=serializeDate(e,l,f,u,!0);else if(void 0===f)u=serializeNull(e,l,f,u,!0);else if(null===f)u=serializeNull(e,l,f,u,!0);else if("ObjectId"===f._bsontype||"ObjectID"===f._bsontype)u=serializeObjectId(e,l,f,u,!0);else if(Buffer$5.isBuffer(f))u=serializeBuffer(e,l,f,u,!0);else if(f instanceof RegExp||isRegExp$1(f))u=serializeRegExp(e,l,f,u,!0);else if("object"===p&&null==f._bsontype)u=serializeObject(e,l,f,u,n,o,i,a,!0,s);else if("object"===p&&"Decimal128"===f._bsontype)u=serializeDecimal128(e,l,f,u,!0);else if("Long"===f._bsontype||"Timestamp"===f._bsontype)u=serializeLong(e,l,f,u,!0);else if("Double"===f._bsontype)u=serializeDouble(e,l,f,u,!0);else if("function"==typeof f&&i)u=serializeFunction(e,l,f,u,n,o,i,!0);else if("Code"===f._bsontype)u=serializeCode(e,l,f,u,n,o,i,a,!0);else if("Binary"===f._bsontype)u=serializeBinary(e,l,f,u,!0);else if("Symbol"===f._bsontype)u=serializeSymbol(e,l,f,u,!0);else if("DBRef"===f._bsontype)u=serializeDBRef(e,l,f,u,o,i,!0);else if("BSONRegExp"===f._bsontype)u=serializeBSONRegExp(e,l,f,u,!0);else if("Int32"===f._bsontype)u=serializeInt32(e,l,f,u,!0);else if("MinKey"===f._bsontype||"MaxKey"===f._bsontype)u=serializeMinMax(e,l,f,u,!0);else if(void 0!==f._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+f._bsontype)}else if(t instanceof map)for(var h=t.entries(),d=!1;!d;){var y=h.next();if(!(d=y.done)){var b=y.value[0],g=y.value[1],v=_typeof$3(g);if("string"==typeof b&&!ignoreKeys.has(b)){if(null!=b.match(regexp$1))throw Error("key "+b+" must not contain null bytes");if(n){if("$"===b[0])throw Error("key "+b+" must not start with '$'");if(~b.indexOf("."))throw Error("key "+b+" must not contain '.'")}}if("string"===v)u=serializeString(e,b,g,u);else if("number"===v)u=serializeNumber(e,b,g,u);else if("boolean"===v)u=serializeBoolean(e,b,g,u);else if(g instanceof Date||isDate$1(g))u=serializeDate(e,b,g,u);else if(null===g||void 0===g&&!1===a)u=serializeNull(e,b,g,u);else if("ObjectId"===g._bsontype||"ObjectID"===g._bsontype)u=serializeObjectId(e,b,g,u);else if(Buffer$5.isBuffer(g))u=serializeBuffer(e,b,g,u);else if(g instanceof RegExp||isRegExp$1(g))u=serializeRegExp(e,b,g,u);else if("object"===v&&null==g._bsontype)u=serializeObject(e,b,g,u,n,o,i,a,!1,s);else if("object"===v&&"Decimal128"===g._bsontype)u=serializeDecimal128(e,b,g,u);else if("Long"===g._bsontype||"Timestamp"===g._bsontype)u=serializeLong(e,b,g,u);else if("Double"===g._bsontype)u=serializeDouble(e,b,g,u);else if("Code"===g._bsontype)u=serializeCode(e,b,g,u,n,o,i,a);else if("function"==typeof g&&i)u=serializeFunction(e,b,g,u,n,o,i);else if("Binary"===g._bsontype)u=serializeBinary(e,b,g,u);else if("Symbol"===g._bsontype)u=serializeSymbol(e,b,g,u);else if("DBRef"===g._bsontype)u=serializeDBRef(e,b,g,u,o,i);else if("BSONRegExp"===g._bsontype)u=serializeBSONRegExp(e,b,g,u);else if("Int32"===g._bsontype)u=serializeInt32(e,b,g,u);else if("MinKey"===g._bsontype||"MaxKey"===g._bsontype)u=serializeMinMax(e,b,g,u);else if(void 0!==g._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+g._bsontype)}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!==_typeof$3(t))throw new TypeError("toBSON function did not return an object")}for(var m in t){var _=t[m];if(_&&_.toBSON){if("function"!=typeof _.toBSON)throw new TypeError("toBSON is not a function");_=_.toBSON()}var E=_typeof$3(_);if("string"==typeof m&&!ignoreKeys.has(m)){if(null!=m.match(regexp$1))throw Error("key "+m+" must not contain null bytes");if(n){if("$"===m[0])throw Error("key "+m+" must not start with '$'");if(~m.indexOf("."))throw Error("key "+m+" must not contain '.'")}}if("string"===E)u=serializeString(e,m,_,u);else if("number"===E)u=serializeNumber(e,m,_,u);else if("boolean"===E)u=serializeBoolean(e,m,_,u);else if(_ instanceof Date||isDate$1(_))u=serializeDate(e,m,_,u);else if(void 0===_)!1===a&&(u=serializeNull(e,m,_,u));else if(null===_)u=serializeNull(e,m,_,u);else if("ObjectId"===_._bsontype||"ObjectID"===_._bsontype)u=serializeObjectId(e,m,_,u);else if(Buffer$5.isBuffer(_))u=serializeBuffer(e,m,_,u);else if(_ instanceof RegExp||isRegExp$1(_))u=serializeRegExp(e,m,_,u);else if("object"===E&&null==_._bsontype)u=serializeObject(e,m,_,u,n,o,i,a,!1,s);else if("object"===E&&"Decimal128"===_._bsontype)u=serializeDecimal128(e,m,_,u);else if("Long"===_._bsontype||"Timestamp"===_._bsontype)u=serializeLong(e,m,_,u);else if("Double"===_._bsontype)u=serializeDouble(e,m,_,u);else if("Code"===_._bsontype)u=serializeCode(e,m,_,u,n,o,i,a);else if("function"==typeof _&&i)u=serializeFunction(e,m,_,u,n,o,i);else if("Binary"===_._bsontype)u=serializeBinary(e,m,_,u);else if("Symbol"===_._bsontype)u=serializeSymbol(e,m,_,u);else if("DBRef"===_._bsontype)u=serializeDBRef(e,m,_,u,o,i);else if("BSONRegExp"===_._bsontype)u=serializeBSONRegExp(e,m,_,u);else if("Int32"===_._bsontype)u=serializeInt32(e,m,_,u);else if("MinKey"===_._bsontype||"MaxKey"===_._bsontype)u=serializeMinMax(e,m,_,u);else if(void 0!==_._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+_._bsontype)}}s.pop(),e[u++]=0;var O=u-r;return e[r++]=255&O,e[r++]=O>>8&255,e[r++]=O>>16&255,e[r++]=O>>24&255,u}var serializer=serializeInto;function _typeof$4(e){return(_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Buffer$6=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(e){return"object"===_typeof$4(e)&&"[object Date]"===Object.prototype.toString.call(e)}function calculateObjectSize(e,t,n){var r=5;if(Array.isArray(e))for(var o=0;o<e.length;o++)r+=calculateElement(o.toString(),e[o],t,!0,n);else for(var i in e.toBSON&&(e=e.toBSON()),e)r+=calculateElement(i,e[i],t,!1,n);return r}function calculateElement(e,t,n,r,o){switch(t&&t.toBSON&&(t=t.toBSON()),_typeof$4(t)){case"string":return 1+Buffer$6.byteLength(e,"utf8")+1+4+Buffer$6.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=constants.JS_INT_MIN&&t<=constants.JS_INT_MAX&&t>=constants.BSON_INT32_MIN&&t<=constants.BSON_INT32_MAX?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+5:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;case"undefined":return r||!o?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||isDate$2(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+6+t.length;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&Object.keys(t.scope).length>0?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1+calculateObjectSize(t.scope,n,o):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+Buffer$6.byteLength(t.value,"utf8")+4+1+1;if("DBRef"===t._bsontype){var i=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(i.$db=t.db),(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+calculateObjectSize(i,n,o)}return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.pattern,"utf8")+1+Buffer$6.byteLength(t.options,"utf8")+1:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+calculateObjectSize(t,n,o)+1;case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(n&&null!=t.scope&&Object.keys(t.scope).length>0)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1+calculateObjectSize(t.scope,n,o);if(n)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,ensure_buffer=function(e){if(e instanceof Buffer$7)return e;if(e instanceof Uint8Array)return Buffer$7.from(e.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer__WEBPACK_IMPORTED_MODULE_1___default.a.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(e){buffer$1.length<e&&(buffer$1=Buffer$8.alloc(e))}function serialize$1(e,t){var n="boolean"==typeof(t=t||{}).checkKeys&&t.checkKeys,r="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,o="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,i="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:MAXSIZE;buffer$1.length<i&&(buffer$1=Buffer$8.alloc(i));var a=serializer(buffer$1,e,n,0,0,r,o,[]),s=Buffer$8.alloc(a);return buffer$1.copy(s,0,0,s.length),s}function serializeWithBufferAndIndex(e,t,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,o="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,i="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,a="number"==typeof n.index?n.index:0,s=serializer(buffer$1,e,r,0,0,o,i);return buffer$1.copy(t,a,0,s),a+s-1}function deserialize$2(e,t){return e=ensure_buffer(e),deserializer(e,t)}function calculateObjectSize$1(e,t){var n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return calculate_size(e,n,r)}function deserializeStream(e,t,n,r,o,i){i=Object.assign({allowObjectSmallerThanBufferSize:!0},i),e=ensure_buffer(e);for(var a=t,s=0;s<n;s++){var u=e[a]|e[a+1]<<8|e[a+2]<<16|e[a+3]<<24;i.index=a,r[o+s]=deserializer(e,i),a+=u}return a}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;__webpack_exports__.b=bson}).call(this,__webpack_require__("yLpj"),__webpack_require__("HDXh").Buffer)},"q5+k":function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=void 0;var o,i=r(n("Bp9Y")),a="clearTimeout",s=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-c)),r=setTimeout(e,n);return c=t,r},u=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};i.default&&["","webkit","moz","o","ms"].some((function(e){var t=u(e,"request");if(t in window)return a=u(e,"cancel"),s=function(e){return window[t](e)}}));var c=(new Date).getTime();(o=function(e){return s(e)}).cancel=function(e){window[a]&&"function"==typeof window[a]&&window[a](e)};var l=o;t.default=l,e.exports=t.default},r8OW:function(e,t,n){},vzVe:function(e,t,n){},xU8c:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,i,a,s,u,c,l,f,p,h,d,y=r(n("Bp9Y")),b="transform";if(t.transform=b,t.animationEnd=a,t.transitionEnd=i,t.transitionDelay=l,t.transitionTiming=c,t.transitionDuration=u,t.transitionProperty=s,t.animationDelay=d,t.animationTiming=h,t.animationDuration=p,t.animationName=f,y.default){var g=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),i="",a=0;a<o.length;a++){var s=o[a];if(s+"TransitionProperty"in n){i="-"+s.toLowerCase(),e=r[s]("TransitionEnd"),t=r[s]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:i}}();o=g.prefix,t.transitionEnd=i=g.transitionEnd,t.animationEnd=a=g.animationEnd,t.transform=b=o+"-"+b,t.transitionProperty=s=o+"-transition-property",t.transitionDuration=u=o+"-transition-duration",t.transitionDelay=l=o+"-transition-delay",t.transitionTiming=c=o+"-transition-timing-function",t.animationName=f=o+"-animation-name",t.animationDuration=p=o+"-animation-duration",t.animationTiming=h=o+"-animation-delay",t.animationDelay=d=o+"-animation-timing-function"}var v={transform:b,end:i,property:s,timing:c,delay:l,duration:u};t.default=v},xfxO:function(e,t,n){"use strict";t.__esModule=!0,t.nameShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};o(n("q1tI"));var r=o(n("17x9"));function o(e){return e&&e.__esModule?e:{default:e}}t.nameShape=r.default.oneOfType([r.default.string,r.default.shape({enter:r.default.string,leave:r.default.string,active:r.default.string}),r.default.shape({enter:r.default.string,enterActive:r.default.string,leave:r.default.string,leaveActive:r.default.string,appear:r.default.string,appearActive:r.default.string})])},yD6e:function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},ycFn:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n("yD6e"));e.exports=t.default},zB99:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=p(n("ycFn")),i=p(n("VOcB")),a=p(n("q5+k")),s=n("xU8c"),u=p(n("q1tI")),c=p(n("17x9")),l=n("i8i4"),f=n("xfxO");function p(e){return e&&e.__esModule?e:{default:e}}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=[];s.transitionEnd&&d.push(s.transitionEnd),s.animationEnd&&d.push(s.animationEnd);c.default.node,f.nameShape.isRequired,c.default.bool,c.default.bool,c.default.bool,c.default.number,c.default.number,c.default.number;var y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=h(this,e.call.apply(e,[this].concat(i))),r.componentWillAppear=function(e){r.props.appear?r.transition("appear",e,r.props.appearTimeout):e()},r.componentWillEnter=function(e){r.props.enter?r.transition("enter",e,r.props.enterTimeout):e()},r.componentWillLeave=function(e){r.props.leave?r.transition("leave",e,r.props.leaveTimeout):e()},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach((function(e){clearTimeout(e)})),this.classNameAndNodeQueue.length=0},t.prototype.transition=function(e,t,n){var r=(0,l.findDOMNode)(this);if(r){var a=this.props.name[e]||this.props.name+"-"+e,u=this.props.name[e+"Active"]||a+"-active",c=null,f=void 0;(0,o.default)(r,a),this.queueClassAndNode(u,r);var p=function(e){e&&e.target!==r||(clearTimeout(c),f&&f(),(0,i.default)(r,a),(0,i.default)(r,u),f&&f(),t&&t())};n?(c=setTimeout(p,n),this.transitionTimeouts.push(c)):s.transitionEnd&&(f=function(e,t){return d.length?d.forEach((function(n){return e.addEventListener(n,t,!1)})):setTimeout(t,0),function(){d.length&&d.forEach((function(n){return e.removeEventListener(n,t,!1)}))}}(r,p))}else t&&t()},t.prototype.queueClassAndNode=function(e,t){var n=this;this.classNameAndNodeQueue.push({className:e,node:t}),this.rafHandle||(this.rafHandle=(0,a.default)((function(){return n.flushClassNameAndNodeQueue()})))},t.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach((function(e){e.node.scrollTop,(0,o.default)(e.node,e.className)})),this.classNameAndNodeQueue.length=0,this.rafHandle=null},t.prototype.render=function(){var e=r({},this.props);return delete e.name,delete e.appear,delete e.enter,delete e.leave,delete e.appearTimeout,delete e.enterTimeout,delete e.leaveTimeout,delete e.children,u.default.cloneElement(u.default.Children.only(this.props.children),e)},t}(u.default.Component);y.displayName="CSSTransitionGroupChild",y.propTypes={},t.default=y,e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,