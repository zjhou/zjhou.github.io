(this.webpackJsonp=this.webpackJsonp||[]).push([[10],{Rf5Z:function(t,n,e){"use strict";e.r(n);var r=e("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,e,r){return r.fromPipe||r.restParams},man:{handler:function(t,n,e,i){var u=i.restParams;if(!n)return!1;if(!u)return Object(r.b)(n.man.doc);if(u&&n[u.trim()]){var a=n[u.trim()];return"object"===o(a)&&Object(r.b)(a.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var e;return"Available commands: \n"+Object.keys(n).sort().map((e="- ",function(t){return e+t})).join("\n")}},u="\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n",a=(Symbol(),Symbol(),function(t,n){n||(n={});var e={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(e.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?e.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach((function(t){e.bools[t]=!0}));var r={};Object.keys(n.alias||{}).forEach((function(t){r[t]=[].concat(n.alias[t]),r[t].forEach((function(n){r[n]=[t].concat(r[t].filter((function(t){return n!==t})))}))})),[].concat(n.string).filter(Boolean).forEach((function(t){e.strings[t]=!0,r[t]&&(e.strings[r[t]]=!0)}));var o=n.default||{},i={_:[]};Object.keys(e.bools).forEach((function(t){a(t,void 0!==o[t]&&o[t])}));var u=[];function a(t,n,o){if(!o||!e.unknownFn||function(t,n){return e.allBools&&/^--[^=]+$/.test(n)||e.strings[t]||e.bools[t]||r[t]}(t,o)||!1!==e.unknownFn(o)){var u=!e.strings[t]&&c(n)?Number(n):n;s(i,t.split("."),u),(r[t]||[]).forEach((function(t){s(i,t.split("."),u)}))}}function s(t,n,r){var o=t;n.slice(0,-1).forEach((function(t){void 0===o[t]&&(o[t]={}),o=o[t]}));var i=n[n.length-1];void 0===o[i]||e.bools[i]||"boolean"==typeof o[i]?o[i]=r:Array.isArray(o[i])?o[i].push(r):o[i]=[o[i],r]}function l(t){return r[t].some((function(t){return e.bools[t]}))}-1!==t.indexOf("--")&&(u=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var f=0;f<t.length;f++){var p=t[f];if(/^--.+=/.test(p)){var b=p.match(/^--([^=]+)=([\s\S]*)$/),d=b[1],h=b[2];e.bools[d]&&(h="false"!==h),a(d,h,p)}else if(/^--no-.+/.test(p)){a(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var v=p.match(/^--(.+)/)[1],y=t[f+1];void 0===y||/^-/.test(y)||e.bools[v]||e.allBools||r[v]&&l(v)?/^(true|false)$/.test(y)?(a(v,"true"===y,p),f++):a(v,!e.strings[v]||"",p):(a(v,y,p),f++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),g=!1,O=0;O<m.length;O++){var j=p.slice(O+2);if("-"!==j){if(/[A-Za-z]/.test(m[O])&&/=/.test(j)){a(m[O],j.split("=")[1],p),g=!0;break}if(/[A-Za-z]/.test(m[O])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(j)){a(m[O],j,p),g=!0;break}if(m[O+1]&&m[O+1].match(/\W/)){a(m[O],p.slice(O+2),p),g=!0;break}a(m[O],!e.strings[m[O]]||"",p)}else a(m[O],j,p)}var w=p.slice(-1)[0];g||"-"===w||(!t[f+1]||/^(-|--)[^-]/.test(t[f+1])||e.bools[w]||r[w]&&l(w)?t[f+1]&&/true|false/.test(t[f+1])?(a(w,"true"===t[f+1],p),f++):a(w,!e.strings[w]||"",p):(a(w,t[f+1],p),f++))}else if(e.unknownFn&&!1===e.unknownFn(p)||i._.push(e.strings._||!c(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(f+1));break}}return Object.keys(o).forEach((function(t){var n,e,u;n=i,e=t.split("."),u=n,e.slice(0,-1).forEach((function(t){u=u[t]||{}})),e[e.length-1]in u||(s(i,t.split("."),o[t]),(r[t]||[]).forEach((function(n){s(i,n.split("."),o[t])})))})),n["--"]?(i["--"]=new Array,u.forEach((function(t){i["--"].push(t)}))):u.forEach((function(t){i._.push(t)})),i});function c(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var s=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var e=n.trim().split(/\s+/),r=e[0];if(!r)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(r,"").trim();if(!o.includes(r))return{restParams:i,userInput:n,errorInfo:"".concat(r," 不是合法命令")};var u=t[r],c=e.slice(1),s={};try{s=a(c)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:s}};return function(t){if(t.includes("|")){var e=t.split("|");return e.length<2?n(e[0]):{isMultiResult:!0,userInput:t,parsedResults:e.map((function(t){return n(t.trim())}))}}return n(t)}},l=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],f="Enter",p='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',b="12px",d=function(t){var n=t.cursorColor,e=void 0===n?"#000":n,r=t.blinkSpeed,o=void 0===r?"1s":r;return"\n        @keyframes cursor-blink {\n          from {\n             background: ".concat(e,";\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: ").concat(o,";\n          animation-name: cursor-blink;\n          animation-iteration-count: infinite\n        }\n    ")},h=e("K9Ia"),v=e("nkY7"),y=e("IUTb"),m=e("JF+6");function g(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(v.a)(e)?(t.pop(),Object(m.a)(t,e)):Object(y.a)(t)}var O=e("p0ib");function j(t,n,e,r,o,i,u){try{var a=t[i](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,o)}var w=new h.a,S=function(t){return function(n){w.next({input:t,output:n})}},x=function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal,i=n.userInput;w.next({input:i,loading:!0,output:""}),Object(r.s)(n.parsedResults.map((function(t){return function(){var n,r=(n=regeneratorRuntime.mark((function n(r){var i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=r,n.abrupt("return",i(t.paramsObj,e,o,t));case 5:case"end":return n.stop()}}),n)})),function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function u(t){j(i,r,o,u,a,"next",t)}function a(t){j(i,r,o,u,a,"throw",t)}u(void 0)}))});return function(t){return r.apply(this,arguments)}}()}))).then((function(t){w.next({output:t,input:i})})).catch(S(i))},k={in:function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal;if(n)if(n.isMultiResult)x({parsedResult:n,cmdSet:e,$terminal:o});else{var i=n.userInput;if(n.errorInfo)w.next({input:i,output:n.errorInfo});else{var u=n.command.handler||n.command,a="";try{a=u(n.paramsObj,e,o,n,function(t){return function(n,e){w.next({loading:!0,print:!0,input:t,output:e?Object(r.r)()+" "+n:n})}}(i))}catch(t){return void S(i)(t)}"string"!=typeof a?(w.next({input:i,loading:!0,output:""}),Promise.resolve(a).then((function(t){w.next({output:t,input:i})})).catch(S(i))):w.next({input:i,output:a})}}else w.next(null)},out$:w},P=e("mrSG"),A=e("FFOo");function E(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new I(t,n,e))}}var I=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new R(t,this.accumulator,this.seed,this.hasSeed))},t}(),R=function(t){function n(n,e,r,o){var i=t.call(this,n)||this;return i.accumulator=e,i._seed=r,i.hasSeed=o,i.index=0,i}return P.a(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(A.a),_=e("67Y/"),$=e("MGBS"),D=e("zotm");function M(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new C(r,e))}}var C=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new F(t,this.observables,this.project))},t}(),F=function(t){function n(n,e,r){var o=t.call(this,n)||this;o.observables=e,o.project=r,o.toRespond=[];var i=e.length;o.values=new Array(i);for(var u=0;u<i;u++)o.toRespond.push(u);for(u=0;u<i;u++){var a=e[u];o.add(Object(D.a)(o,a,a,u))}return o}return P.a(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.values[e]=n;var i=this.toRespond;if(i.length>0){var u=i.indexOf(e);-1!==u&&i.splice(u,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}($.a),N=e("VnD/"),z=e("bne5"),B=e("8g8A"),L=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return P.a(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new B.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(h.a),T=e("isby"),H={};function J(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Object(v.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(T.a)(t[0])&&(t=t[0]),Object(y.a)(t,r).lift(new q(e))}var q=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new U(t,this.resultSelector))},t}(),U=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return P.a(n,t),n.prototype._next=function(t){this.values.push(H),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object(D.a)(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,o){var i=this.values,u=i[e],a=this.toRespond?u===H?--this.toRespond:this.toRespond:0;i[e]=n,0===a&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}($.a);function Y(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(_.a)(Z(t,e))(n)}}function Z(t,n){return function(e){for(var r=e,o=0;o<n;o++){var i=null!=r?r[t[o]]:void 0;if(void 0===i)return;r=i}return r}}var V=e("ad02"),G=function(){var t=document.createElement("input");return t.style.height="20px",t.style.position="fixed",t.style.zIndex="-1",t.style.outline="none",t.style.border="none",t.style.top="0",t.style.left="0",t.style.opacity="0",screen.width<500&&(t.style.transform="scale(0)"),t.style.color="transparent",t.setAttribute("autocomplete","off"),t.onblur=function(){setTimeout((function(){t.focus()}))},t},K=function(t,n){var e=t.getBoundingClientRect(),r=e.left,o=e.top;n.style.left="".concat(r,"px"),n.style.top="".concat(o,"px")},W=function(t,n){return K(t,n),function(e){K(t,n);var r=e.start!==e.end,o=""===e.inputStr,i=e.inputStr.split("").map((function(t){return" "===t?"&nbsp;":t}));r&&!o||i.push("&nbsp;"),t.innerHTML=i.map((function(t,n){return function(t){for(var n=arguments.length,e=new Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return'<span class="'.concat(e.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":r&&i>=e.start&&i<=e.end?"highlight":i===e.start?"blink":""));var i})).join("")}},Q=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(r.l)(d(e)),t.style.fontFamily=p,t.style.fontSize=b,t.style.wordBreak="break-all",W(t,n)({inputStr:"",start:0,end:0})};function X(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function tt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?X(Object(e),!0).forEach((function(n){nt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):X(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function nt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function et(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return rt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return rt(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var ot=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"Input wrapper element missing.";var e=G();document.body.appendChild(e),e.focus(),Q(t,e,n);var o=Object(z.a)(e,"input"),i=Object(z.a)(e,"select"),u=Object(z.a)(e,"keyup"),a=new L("");o.pipe(Y("target","value")).subscribe((function(t){return a.next(t)}));var c=u.pipe(Object(N.a)((function(t){return l.includes(t.key)}))),s=u.pipe(Object(N.a)((function(t){return t.key===f})),Object(N.a)((function(t){return!t.target.disabled})),M(a),Object(_.a)((function(t){var n=et(t,2);n[0];return n[1]})),Object(N.a)((function(t){return!!t}))),p=Object(O.a)(o,c,i),b=p.pipe(Object(_.a)((function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}}))),d=J(a,b).pipe(Object(_.a)((function(t){var n=et(t,2);return tt({inputStr:n[0]},n[1])})),Object(V.a)((function(t,n){return JSON.stringify(t)===JSON.stringify(n)}))),h=W(t,e);return d.subscribe(h),{enter$:s,input$:o,get target(){return e},set value(n){e.value=n,a.next(n),""===n&&K(t,e),Object(r.x)(e,l[0])},set disabled(n){var r=t.querySelector(".blink");n?(e.setAttribute("disabled",!0),r.classList.add("disabled")):(r.classList.remove("disabled"),e.removeAttribute("disabled"),e.focus())}}};function it(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function ut(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?it(Object(e),!0).forEach((function(n){at(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):it(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function at(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function ct(t){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var st=Object(r.p)(),lt=function(t){var n=document.querySelector("#hist-sess"),e=document.querySelector("#curr-sess"),o=(document.querySelector("#curr-sess .input .prompt"),Object(r.i)(t)),i=o&&o.loading,u=function(n,e){var r=t[n-1];return r&&r.print&&r.input===e.input},a=i?'<span class="blink">&nbsp;</span>':"";t.length<1?n.innerHTML="":(n.innerHTML=t.map((function(t,n){return function(t){var n,e,r=t.input,o=t.output,i=t.shouldHideInput,u=t.print;if("string"==typeof o)n=o;else if("object"===ct(o))try{n=o.html||JSON.stringify(o),o.html&&(e=!0)}catch(t){e=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var a=o.message,c=o.stack;n="".concat(a,"\n\n").concat(c)}var s=e?n:'<pre style="'.concat(u?"margin: 0":"",'">').concat(n||"","</pre>"),l='\n      <div class="input">\n          <span class="prompt">$</span>\n          <span class="cmd">\n            '.concat(r||"","\n          </span>\n      </div>\n    ");return'<div class="session">\n            '.concat(i?"":l,'\n            <div class="output">\n                ').concat(s,"\n            </div>\n        </div>")}(ut(ut({},t),{},{shouldHideInput:u(n,t)}))})).join("")+a,i?e.style.display="none":(st(!1),e.style.display="block"))},ft=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(r.l)(u),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var e=t.firstElementChild,o=document.querySelector("#input"),i=ot(o,n),a=14;return e.style.height="calc(100% - 10px)",e.style.overflow="auto",e.style.fontFamily=p,e.style.background=n.background||"unset",e.style.color=n.color||"#000",e.style.fontSize=b,e.addEventListener("click",(function(t){var n=i.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<a)&&i.target.focus()}),{capture:!1}),{$terminal:e,input:i}};function pt(t){return function(t){if(Array.isArray(t))return bt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,n){if(!t)return;if("string"==typeof t)return bt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return bt(t,n)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var dt=[],ht=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return dt=[].concat(pt(dt),pt(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(pt(dt),pt(t)),i=o.map((function(t,n){return Object(r.c)(" ")(n+1,o.length+1)+". "+t.input})).join("\n");return t.push({input:e,output:i}),t;default:return t}};function vt(t,n,e,r,o,i,u){try{var a=t[i](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,o)}function yt(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function u(t){vt(i,r,o,u,a,"next",t)}function a(t){vt(i,r,o,u,a,"throw",t)}u(void 0)}))}}function mt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return gt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return gt(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function Ot(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function jt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?Ot(Object(e),!0).forEach((function(n){wt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):Ot(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function wt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function St(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"wrapper element not found";var e=ft(t,n),o=e.$terminal,u=e.input,a=new h.a,c=g(i),l=Object(O.a)(a,c).pipe(E((function(t,n){return jt(jt({},n),t)}),{}),Object(_.a)((function(t){return jt(jt({},t),i)}))),p=u.enter$.pipe(M(l),Object(_.a)((function(t){var n=mt(t,2),e=n[0],r=n[1];return{parsedResult:s(r)(e),cmdSet:r,$terminal:o}})),Object(_.a)(k.in)).subscribe((function(){u.target.blur()})),b=k.out$.pipe(Object(N.a)((function(t){return t})),E((function(t,n){var e=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var e=i[t].handler||i[t];try{return n=""===e()}catch(t){return!1}}(e))return ht(t&&t.slice(),e,n.input);var r=t.slice().pop();return r&&r.loading&&!r.print&&t.pop(),t.push(n),t}),[])),d=b.subscribe((function(t){var n=Object(r.i)(t);lt(t),Object(r.v)(o),u.disabled=n&&n.loading,u.value=""}));u.input$.subscribe((function(){Object(r.v)(o)}));var v=function(){var t=yt(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(r.v)(o),t.next=3,Object(r.k)(n,(function(t){return u.value=t}),50);case 3:return t.abrupt("return",new Promise((function(t,e){k.out$.pipe(Object(N.a)((function(t){return t})),Object(N.a)((function(t){return!0!==t.loading}))).subscribe((function(e){e.input===n&&t()})),Object(r.x)(u.target,f)})));case 4:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}();return{set disabled(t){u.disabled=t},set commands(t){a.next(t)},set currentInput(t){u.value=t},destroy:function(){d.unsubscribe(),p.unsubscribe(),o.remove(),u.target.remove()},addCommands:function(t){a.next(t)},input:function(t,n){if(n)return Object(r.k)(t,(function(t){u.value=t}));u.value=t},humanizerExec:v,humanizerExecCmdArr:function(t){var n=t.map((function(t){return function(){return v(t)}}));return Object(r.s)(n)},exec:function(t){u.value=t,Object(r.x)(u.target,f)}}}e.d(n,"default",(function(){return St}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,