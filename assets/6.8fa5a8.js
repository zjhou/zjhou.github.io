(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{Rf5Z:function(t,n,r){"use strict";r.r(n);var e=r("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,r,e){return e.fromPipe||e.restParams},man:{handler:function(t,n,r,i){var s=i.restParams;if(!n)return!1;if(!s)return Object(e.c)(n.man.doc);if(s&&n[s.trim()]){var u=n[s.trim()];return"object"===o(u)&&Object(e.c)(u.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var r;return"Available commands: \n"+Object.keys(n).sort().map((r="- ",function(t){return r+t})).join("\n")}},s="\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n",u=(Symbol(),Symbol(),function(t,n){n||(n={});var r={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(r.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?r.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach(function(t){r.bools[t]=!0});var e={};Object.keys(n.alias||{}).forEach(function(t){e[t]=[].concat(n.alias[t]),e[t].forEach(function(n){e[n]=[t].concat(e[t].filter(function(t){return n!==t}))})}),[].concat(n.string).filter(Boolean).forEach(function(t){r.strings[t]=!0,e[t]&&(r.strings[e[t]]=!0)});var o=n.default||{},i={_:[]};Object.keys(r.bools).forEach(function(t){u(t,void 0!==o[t]&&o[t])});var s=[];function u(t,n,o){if(!o||!r.unknownFn||function(t,n){return r.allBools&&/^--[^=]+$/.test(n)||r.strings[t]||r.bools[t]||e[t]}(t,o)||!1!==r.unknownFn(o)){var s=!r.strings[t]&&c(n)?Number(n):n;a(i,t.split("."),s),(e[t]||[]).forEach(function(t){a(i,t.split("."),s)})}}function a(t,n,e){var o=t;n.slice(0,-1).forEach(function(t){void 0===o[t]&&(o[t]={}),o=o[t]});var i=n[n.length-1];void 0===o[i]||r.bools[i]||"boolean"==typeof o[i]?o[i]=e:Array.isArray(o[i])?o[i].push(e):o[i]=[o[i],e]}function f(t){return e[t].some(function(t){return r.bools[t]})}-1!==t.indexOf("--")&&(s=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var l=0;l<t.length;l++){var p=t[l];if(/^--.+=/.test(p)){var h=p.match(/^--([^=]+)=([\s\S]*)$/),d=h[1],b=h[2];r.bools[d]&&(b="false"!==b),u(d,b,p)}else if(/^--no-.+/.test(p)){u(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var y=p.match(/^--(.+)/)[1],v=t[l+1];void 0===v||/^-/.test(v)||r.bools[y]||r.allBools||e[y]&&f(y)?/^(true|false)$/.test(v)?(u(y,"true"===v,p),l++):u(y,!r.strings[y]||"",p):(u(y,v,p),l++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),w=!1,g=0;g<m.length;g++){var _=p.slice(g+2);if("-"!==_){if(/[A-Za-z]/.test(m[g])&&/=/.test(_)){u(m[g],_.split("=")[1],p),w=!0;break}if(/[A-Za-z]/.test(m[g])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){u(m[g],_,p),w=!0;break}if(m[g+1]&&m[g+1].match(/\W/)){u(m[g],p.slice(g+2),p),w=!0;break}u(m[g],!r.strings[m[g]]||"",p)}else u(m[g],_,p)}var x=p.slice(-1)[0];w||"-"===x||(!t[l+1]||/^(-|--)[^-]/.test(t[l+1])||r.bools[x]||e[x]&&f(x)?t[l+1]&&/true|false/.test(t[l+1])?(u(x,"true"===t[l+1],p),l++):u(x,!r.strings[x]||"",p):(u(x,t[l+1],p),l++))}else if(r.unknownFn&&!1===r.unknownFn(p)||i._.push(r.strings._||!c(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(l+1));break}}return Object.keys(o).forEach(function(t){var n,r,s;n=i,r=t.split("."),s=n,r.slice(0,-1).forEach(function(t){s=s[t]||{}}),r[r.length-1]in s||(a(i,t.split("."),o[t]),(e[t]||[]).forEach(function(n){a(i,n.split("."),o[t])}))}),n["--"]?(i["--"]=new Array,s.forEach(function(t){i["--"].push(t)})):s.forEach(function(t){i._.push(t)}),i});function c(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var a=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var r=n.trim().split(/\s+/),e=r[0];if(!e)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(e,"").trim();if(!o.includes(e))return{restParams:i,userInput:n,errorInfo:"".concat(e," 不是合法命令")};var s=t[e],c=r.slice(1),a={};try{a=u(c)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:s,paramsObj:a}};return function(t){if(t.includes("|")){var r=t.split("|");return r.length<2?n(r[0]):{isMultiResult:!0,userInput:t,parsedResults:r.map(function(t){return n(t.trim())})}}return n(t)}},f=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],l={a:"a",enter:"Enter"},p='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',h="12px",d=function(t){var n=t.cursorColor,r=void 0===n?"#000":n,e=t.blinkSpeed,o=void 0===e?"1s":e;return"\n        @keyframes blink {\n          from {\n             background: ".concat(r,";\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: ").concat(o,";\n          animation-name: blink;\n          animation-iteration-count: infinite\n        }\n    ")},b=r("mrSG");function y(t){return"function"==typeof t}var v=!1,m={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;v=t},get useDeprecatedSynchronousErrorHandling(){return v}};function w(t){setTimeout(function(){throw t},0)}var g={closed:!0,next:function(t){},error:function(t){if(m.useDeprecatedSynchronousErrorHandling)throw t;w(t)},complete:function(){}},_=Array.isArray||function(t){return t&&"number"==typeof t.length};function x(t){return null!==t&&"object"==typeof t}function S(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}S.prototype=Object.create(Error.prototype);var E=S,O=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var n;if(!this.closed){var r=this._parentOrParents,e=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var i=0;i<r.length;++i){r[i].remove(this)}if(y(e))try{e.call(this)}catch(t){n=t instanceof E?j(t.errors):[t]}if(_(o)){i=-1;for(var s=o.length;++i<s;){var u=o[i];if(x(u))try{u.unsubscribe()}catch(t){n=n||[],t instanceof E?n=n.concat(j(t.errors)):n.push(t)}}}if(n)throw new E(n)}},t.prototype.add=function(n){var r=n;if(!n)return t.EMPTY;switch(typeof n){case"function":r=new t(n);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var e=r;(r=new t)._subscriptions=[e]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function j(t){return t.reduce(function(t,n){return t.concat(n instanceof E?n.errors:n)},[])}var k="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),P=function(t){function n(r,e,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=g;break;case 1:if(!r){i.destination=g;break}if("object"==typeof r){r instanceof n?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new I(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new I(i,r,e,o)}return i}return b.__extends(n,t),n.prototype[k]=function(){return this},n.create=function(t,r,e){var o=new n(t,r,e);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(O),I=function(t){function n(n,r,e,o){var i,s=t.call(this)||this;s._parentSubscriber=n;var u=s;return y(r)?i=r:r&&(i=r.next,e=r.error,o=r.complete,r!==g&&(y((u=Object.create(r)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=e,s._complete=o,s}return b.__extends(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;m.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,r=m.useDeprecatedSynchronousErrorHandling;if(this._error)r&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)r?(n.syncErrorValue=t,n.syncErrorThrown=!0):w(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;w(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};m.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),m.useDeprecatedSynchronousErrorHandling)throw t;w(t)}},n.prototype.__tryOrSetError=function(t,n,r){if(!m.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,r)}catch(n){return m.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(w(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(P);var T="function"==typeof Symbol&&Symbol.observable||"@@observable";function A(){}function R(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:A}var N=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var r=new t;return r.source=this,r.operator=n,r},t.prototype.subscribe=function(t,n,r){var e=this.operator,o=function(t,n,r){if(t){if(t instanceof P)return t;if(t[k])return t[k]()}return t||n||r?new P(t,n,r):new P(g)}(t,n,r);if(e?o.add(e.call(o,this.source)):o.add(this.source||m.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),m.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){m.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,r=n.closed,e=n.destination,o=n.isStopped;if(r||o)return!1;t=e&&e instanceof P?e:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var r=this;return new(n=D(n))(function(n,e){var o;o=r.subscribe(function(n){try{t(n)}catch(t){e(t),o&&o.unsubscribe()}},e,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[T]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:R(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=D(t))(function(t,r){var e;n.subscribe(function(t){return e=t},function(t){return r(t)},function(){return t(e)})})},t.create=function(n){return new t(n)},t}();function D(t){if(t||(t=m.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function $(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}$.prototype=Object.create(Error.prototype);var C=$,L=function(t){function n(n,r){var e=t.call(this)||this;return e.subject=n,e.subscriber=r,e.closed=!1,e}return b.__extends(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var r=n.indexOf(this.subscriber);-1!==r&&n.splice(r,1)}}},n}(O),M=function(t){function n(n){var r=t.call(this,n)||this;return r.destination=n,r}return b.__extends(n,t),n}(P),H=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return b.__extends(n,t),n.prototype[k]=function(){return new M(this)},n.prototype.lift=function(t){var n=new Y(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new C;if(!this.isStopped)for(var n=this.observers,r=n.length,e=n.slice(),o=0;o<r;o++)e[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new C;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,r=n.length,e=n.slice(),o=0;o<r;o++)e[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new C;this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),e=0;e<n;e++)r[e].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new C;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new C;return this.hasError?(t.error(this.thrownError),O.EMPTY):this.isStopped?(t.complete(),O.EMPTY):(this.observers.push(t),new L(this,t))},n.prototype.asObservable=function(){var t=new N;return t.source=this,t},n.create=function(t,n){return new Y(t,n)},n}(N),Y=function(t){function n(n,r){var e=t.call(this)||this;return e.destination=n,e.source=r,e}return b.__extends(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):O.EMPTY},n}(H);function F(t){return t&&"function"==typeof t.schedule}var V=function(t){return function(n){for(var r=0,e=t.length;r<e&&!n.closed;r++)n.next(t[r]);n.complete()}};function z(t,n){return new N(function(r){var e=new O,o=0;return e.add(n.schedule(function(){o!==t.length?(r.next(t[o++]),r.closed||e.add(this.schedule())):r.complete()})),e})}function B(t,n){return n?z(t,n):new N(V(t))}var U=function(t){function n(n,r,e){var o=t.call(this)||this;return o.parent=n,o.outerValue=r,o.outerIndex=e,o.index=0,o}return b.__extends(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(P);function q(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var J=q(),Z=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function K(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var G=function(t){if(t&&"function"==typeof t[T])return e=t,function(t){var n=e[T]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(Z(t))return V(t);if(K(t))return r=t,function(t){return r.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,w),t};if(t&&"function"==typeof t[J])return n=t,function(t){for(var r=n[J]();;){var e=r.next();if(e.done){t.complete();break}if(t.next(e.value),t.closed)break}return"function"==typeof r.return&&t.add(function(){r.return&&r.return()}),t};var n,r,e,o=x(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function W(t,n,r,e,o){if(void 0===o&&(o=new U(t,r,e)),!o.closed)return n instanceof N?n.subscribe(o):G(n)(o)}var Q=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return b.__extends(n,t),n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(P);function X(t,n){return function(r){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new tt(t,n))}}var tt=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.project,this.thisArg))},t}(),nt=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.project=r,o.count=0,o.thisArg=e||o,o}return b.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(P);function rt(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[T]}(t))return function(t,n){return new N(function(r){var e=new O;return e.add(n.schedule(function(){var o=t[T]();e.add(o.subscribe({next:function(t){e.add(n.schedule(function(){return r.next(t)}))},error:function(t){e.add(n.schedule(function(){return r.error(t)}))},complete:function(){e.add(n.schedule(function(){return r.complete()}))}}))})),e})}(t,n);if(K(t))return function(t,n){return new N(function(r){var e=new O;return e.add(n.schedule(function(){return t.then(function(t){e.add(n.schedule(function(){r.next(t),e.add(n.schedule(function(){return r.complete()}))}))},function(t){e.add(n.schedule(function(){return r.error(t)}))})})),e})}(t,n);if(Z(t))return z(t,n);if(function(t){return t&&"function"==typeof t[J]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new N(function(r){var e,o=new O;return o.add(function(){e&&"function"==typeof e.return&&e.return()}),o.add(n.schedule(function(){e=t[J](),o.add(n.schedule(function(){if(!r.closed){var t,n;try{var o=e.next();t=o.value,n=o.done}catch(t){return void r.error(t)}n?r.complete():(r.next(t),this.schedule())}}))})),o})}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function et(t,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(e){return e.pipe(et(function(r,e){return(o=t(r,e),i?rt(o,i):o instanceof N?o:new N(G(o))).pipe(X(function(t,o){return n(r,t,e,o)}));var o,i},r))}:("number"==typeof n&&(r=n),function(n){return n.lift(new ot(t,r))})}var ot=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.project,this.concurrent))},t}(),it=function(t){function n(n,r,e){void 0===e&&(e=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=r,o.concurrent=e,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return b.__extends(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,r=this.index++;try{n=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,r)},n.prototype._innerSub=function(t,n,r){var e=new U(this,void 0,void 0);this.destination.add(e),W(this,t,n,r,e)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,r,e,o){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(Q);function st(t){return t}function ut(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Number.POSITIVE_INFINITY,e=null,o=t[t.length-1];return F(o)?(e=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(r=t.pop())):"number"==typeof o&&(r=t.pop()),null===e&&1===t.length&&t[0]instanceof N?t[0]:function(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),et(st,t)}(r)(B(t,e))}function ct(t,n,r,e,o,i,s){try{var u=t[i](s),c=u.value}catch(t){return void r(t)}u.done?n(c):Promise.resolve(c).then(e,o)}var at=new H,ft=function(t){return function(n){at.next({input:t,output:n})}},lt=function(t){var n=t.parsedResult,r=t.cmdSet,o=t.$terminal,i=n.userInput;at.next({input:i,loading:!0,output:""}),Object(e.t)(n.parsedResults.map(function(t){return n=regeneratorRuntime.mark(function n(e){var i;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!t.errorInfo){n.next=2;break}throw t.errorInfo;case 2:return i=t.command.handler||t.command,t.fromPipe=e,n.abrupt("return",i(t.paramsObj,r,o,t));case 5:case"end":return n.stop()}},n)}),e=function(){var t=this,r=arguments;return new Promise(function(e,o){var i=n.apply(t,r);function s(t){ct(i,e,o,s,u,"next",t)}function u(t){ct(i,e,o,s,u,"throw",t)}s(void 0)})},function(t){return e.apply(this,arguments)};var n,e})).then(function(t){at.next({output:t,input:i})}).catch(ft(i))},pt={in:function(t){var n=t.parsedResult,r=t.cmdSet,e=t.$terminal;if(n)if(n.isMultiResult)lt({parsedResult:n,cmdSet:r,$terminal:e});else{var o=n.userInput;if(n.errorInfo)at.next({input:o,output:n.errorInfo});else{var i=n.command.handler||n.command,s="";try{s=i(n.paramsObj,r,e,n)}catch(t){return void ft(o)(t)}"string"!=typeof s?(at.next({input:o,loading:!0,output:""}),Promise.resolve(s).then(function(t){at.next({output:t,input:o})}).catch(ft(o))):at.next({input:o,output:s})}}else at.next(null)},out$:at};function ht(t,n){var r=!1;return arguments.length>=2&&(r=!0),function(e){return e.lift(new dt(t,n,r))}}var dt=function(){function t(t,n,r){void 0===r&&(r=!1),this.accumulator=t,this.seed=n,this.hasSeed=r}return t.prototype.call=function(t,n){return n.subscribe(new bt(t,this.accumulator,this.seed,this.hasSeed))},t}(),bt=function(t){function n(n,r,e,o){var i=t.call(this,n)||this;return i.accumulator=r,i._seed=e,i.hasSeed=o,i.index=0,i}return b.__extends(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,r=this.index++;try{n=this.accumulator(this.seed,t,r)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(P);function yt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var r;"function"==typeof t[t.length-1]&&(r=t.pop());var e=t;return n.lift(new vt(e,r))}}var vt=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new mt(t,this.observables,this.project))},t}(),mt=function(t){function n(n,r,e){var o=t.call(this,n)||this;o.observables=r,o.project=e,o.toRespond=[];var i=r.length;o.values=new Array(i);for(var s=0;s<i;s++)o.toRespond.push(s);for(s=0;s<i;s++){var u=r[s];o.add(W(o,u,u,s))}return o}return b.__extends(n,t),n.prototype.notifyNext=function(t,n,r,e,o){this.values[r]=n;var i=this.toRespond;if(i.length>0){var s=i.indexOf(r);-1!==s&&i.splice(s,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(Q);function wt(t,n){return function(r){return r.lift(new gt(t,n))}}var gt=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new _t(t,this.predicate,this.thisArg))},t}(),_t=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.predicate=r,o.thisArg=e,o.count=0,o}return b.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(P);Object.prototype.toString;function xt(t,n,r,e){return y(r)&&(e=r,r=void 0),e?xt(t,n,r).pipe(X(function(t){return _(t)?e.apply(void 0,t):e(t)})):new N(function(e){!function t(n,r,e,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var u=n;n.addEventListener(r,e,i),s=function(){return u.removeEventListener(r,e,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(r,e),s=function(){return c.off(r,e)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var a=n;n.addListener(r,e),s=function(){return a.removeListener(r,e)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,l=n.length;f<l;f++)t(n[f],r,e,o,i)}o.add(s)}(t,n,function(t){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(t)},e,r)})}var St=function(t){function n(n){var r=t.call(this)||this;return r._value=n,r}return b.__extends(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var r=t.prototype._subscribe.call(this,n);return r&&!r.closed&&n.next(this._value),r},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new C;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(H),Et={};function Ot(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=null,e=null;return F(t[t.length-1])&&(e=t.pop()),"function"==typeof t[t.length-1]&&(r=t.pop()),1===t.length&&_(t[0])&&(t=t[0]),B(t,e).lift(new jt(r))}var jt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new kt(t,this.resultSelector))},t}(),kt=function(t){function n(n,r){var e=t.call(this,n)||this;return e.resultSelector=r,e.active=0,e.values=[],e.observables=[],e}return b.__extends(n,t),n.prototype._next=function(t){this.values.push(Et),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var r=0;r<n;r++){var e=t[r];this.add(W(this,e,e,r))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,r,e,o){var i=this.values,s=i[r],u=this.toRespond?s===Et?--this.toRespond:this.toRespond:0;i[r]=n,0===u&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(Q);function Pt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length;if(0===r)throw new Error("list of properties cannot be empty.");return function(n){return X(function(t,n){return function(r){for(var e=r,o=0;o<n;o++){var i=e[t[o]];if(void 0===i)return;e=i}return e}}(t,r))(n)}}function It(t,n){return function(r){return r.lift(new Tt(t,n))}}var Tt=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new At(t,this.compare,this.keySelector))},t}(),At=function(t){function n(n,r,e){var o=t.call(this,n)||this;return o.keySelector=e,o.hasKey=!1,"function"==typeof r&&(o.compare=r),o}return b.__extends(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var r=this.keySelector;n=r?r(t):t}catch(t){return this.destination.error(t)}var e=!1;if(this.hasKey)try{e=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;e||(this.key=n,this.destination.next(t))},n}(P),Rt=function(){var t=document.createElement("input");return t.style.height="20px",t.style.position="fixed",t.style.zIndex="-1",t.style.outline="none",t.style.border="none",t.style.top="0",t.style.left="0",t.style.opacity="0",screen.width<500&&(t.style.transform="scale(0)"),t.style.color="transparent",t.setAttribute("autocomplete","off"),t.onblur=function(){setTimeout(function(){t.focus()})},t},Nt=function(t,n){var r=t.getBoundingClientRect(),e=r.left,o=r.top;n.style.left="".concat(e,"px"),n.style.top="".concat(o,"px")},Dt=function(t,n){return Nt(t,n),function(r){Nt(t,n);var e=r.start!==r.end,o=""===r.inputStr,i=r.inputStr.split("").map(function(t){return" "===t?"&nbsp;":t});e&&!o||i.push("&nbsp;"),t.innerHTML=i.map(function(t,n){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),e=1;e<n;e++)r[e-1]=arguments[e];return'<span class="'.concat(r.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":e&&i>=r.start&&i<=r.end?"highlight":i===r.start?"blink":""));var i}).join("")}},$t=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(e.n)(d(r)),t.style.fontFamily=p,t.style.fontSize=h,t.style.wordBreak="break-all",Dt(t,n)({inputStr:"",start:0,end:0})};function Ct(t,n){var r=Object.keys(t);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(t)),n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),r}function Lt(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?Ct(r,!0).forEach(function(n){Mt(t,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ct(r).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))})}return t}function Mt(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function Ht(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=[],e=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(e=(s=u.next()).done)&&(r.push(s.value),!n||r.length!==n);e=!0);}catch(t){o=!0,i=t}finally{try{e||null==u.return||u.return()}finally{if(o)throw i}}return r}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Yt=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"Input wrapper element missing.";var r=Rt();document.body.appendChild(r),r.focus(),$t(t,r,n);var o=xt(r,"input"),i=xt(r,"select"),s=xt(r,"keyup"),u=new St("");o.pipe(Pt("target","value")).subscribe(function(t){return u.next(t)});var c=s.pipe(wt(function(t){return f.includes(t.key)})),a=s.pipe(wt(function(t){return t.key===l.enter}),wt(function(t){return!t.target.disabled}),yt(u),X(function(t){var n=Ht(t,2);n[0];return n[1]}),wt(function(t){return!!t})),p=ut(o,c,i),h=p.pipe(X(function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}})),d=Ot(u,h).pipe(X(function(t){var n=Ht(t,2);return Lt({inputStr:n[0]},n[1])}),It(function(t,n){return JSON.stringify(t)===JSON.stringify(n)})),b=Dt(t,r);return d.subscribe(b),{enter$:a,input$:o,get target(){return r},set value(n){r.value=n,u.next(n),""===n&&Nt(t,r),Object(e.A)(r,f[0])},set disabled(t){var n=document.querySelector(".blink");t?(r.setAttribute("disabled",!0),n.classList.add("disabled")):(n.classList.remove("disabled"),r.removeAttribute("disabled"),r.focus())}}};function Ft(t){return(Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Vt=Object(e.r)(),zt=function(t){var n,r,e=t.input,o=t.output;if("string"==typeof o)n=o;else if("object"===Ft(o))try{n=o.html||JSON.stringify(o),o.html&&(r=!0)}catch(t){r=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var i=o.message,s=o.stack;n="".concat(i,"\n\n").concat(s)}var u=r?n:"<pre>".concat(n||"","</pre>");return'<div class="session">\n            <div class="input">\n                <span class="prompt">$</span>\n                <span class="cmd">\n                    '.concat(e||"",'\n                </span>\n            </div>\n            <div class="output">\n                ').concat(u,"\n            </div>\n        </div>")},Bt=function(t){var n=document.querySelector("#hist-sess"),r=document.querySelector("#curr-sess"),o=Object(e.k)(t),i=o&&o.loading;if(t.length<1)n.innerHTML="";else{n.innerHTML=t.map(zt).join("");var s=n.querySelector(".session:last-child > .output");i?(Vt(!0,s),r.style.display="none"):(Vt(!1),r.style.display="block")}},Ut=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(e.n)(s),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var r=t.firstElementChild,o=document.querySelector("#input"),i=Yt(o,n),u=14;return r.style.height="calc(100% - 10px)",r.style.overflow="auto",r.style.fontFamily=p,r.style.background=n.background||"unset",r.style.color=n.color||"#000",r.style.fontSize=h,r.addEventListener("click",function(t){var n=i.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<u)&&i.target.focus()},{capture:!1}),{$terminal:r,input:i}};function qt(t){return function(t){if(Array.isArray(t)){for(var n=0,r=new Array(t.length);n<t.length;n++)r[n]=t[n];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Jt=[],Zt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,r=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return Jt=[].concat(qt(Jt),qt(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(qt(Jt),qt(t)),i=o.map(function(t,n){return Object(e.e)(" ")(n+1,o.length+1)+". "+t.input}).join("\n");return t.push({input:r,output:i}),t;default:return t}};function Kt(t,n,r,e,o,i,s){try{var u=t[i](s),c=u.value}catch(t){return void r(t)}u.done?n(c):Promise.resolve(c).then(e,o)}function Gt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=[],e=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(e=(s=u.next()).done)&&(r.push(s.value),!n||r.length!==n);e=!0);}catch(t){o=!0,i=t}finally{try{e||null==u.return||u.return()}finally{if(o)throw i}}return r}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Wt(t,n){var r=Object.keys(t);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(t)),n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),r}function Qt(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?Wt(r,!0).forEach(function(n){Xt(t,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Wt(r).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))})}return t}function Xt(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function tn(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t)throw"wrapper element not found";var r=Ut(t,n),o=r.$terminal,s=r.input,u=new H,c=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t[t.length-1];return F(r)?(t.pop(),z(t,r)):B(t)}(i),f=ut(u,c).pipe(ht(function(t,n){return Qt({},n,{},t)},{}),X(function(t){return Qt({},t,{},i)})),p=s.enter$.pipe(yt(f),X(function(t){var n=Gt(t,2),r=n[0],e=n[1];return{parsedResult:a(e)(r),cmdSet:e,$terminal:o}}),X(pt.in)).subscribe(function(){s.target.blur()}),h=pt.out$.pipe(wt(function(t){return t}),ht(function(t,n){var r=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var r=i[t].handler||i[t];try{return n=""===r()}catch(t){return!1}}(r))return Zt(t&&t.slice(),r,n.input);var e=t.slice().pop();return e&&e.loading&&t.pop(),t.push(n),t},[])).subscribe(function(t){var n=Object(e.k)(t);Bt(t),Object(e.w)(o),s.disabled=n&&n.loading,s.value=""});s.input$.subscribe(function(){Object(e.w)(o)});var d=function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return Object(e.w)(o),t.next=3,Object(e.m)(n,function(t){return s.value=t},50);case 3:return t.abrupt("return",new Promise(function(t,r){pt.out$.pipe(wt(function(t){return t}),wt(function(t){return!0!==t.loading})).subscribe(function(r){r.input===n&&t()}),Object(e.A)(s.target,l.enter)}));case 4:case"end":return t.stop()}},t)}),function(){var n=this,r=arguments;return new Promise(function(e,o){var i=t.apply(n,r);function s(t){Kt(i,e,o,s,u,"next",t)}function u(t){Kt(i,e,o,s,u,"throw",t)}s(void 0)})});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){s.disabled=t},set commands(t){u.next(t)},set currentInput(t){s.value=t},destroy:function(){h.unsubscribe(),p.unsubscribe(),o.remove(),s.target.remove()},addCommands:function(t){u.next(t)},input:function(t,n){if(n)return Object(e.m)(t,function(t){s.value=t});s.value=t},humanizerExec:d,humanizerExecCmdArr:function(t){var n=t.map(function(t){return function(){return d(t)}});return Object(e.t)(n)},exec:function(t){s.value=t,Object(e.A)(s.target,l.enter)}}}r.d(n,"default",function(){return tn})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,