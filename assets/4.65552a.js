(this.webpackJsonp=this.webpackJsonp||[]).push([[4],{"8oxB":function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&d())}function d(){if(!f){var e=c(p);f=!0;for(var t=s.length;t;){for(u=s,s=[];++l<t;)u&&u[l].run();l=-1,t=s.length}u=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||f||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},N0Pr:function(e){e.exports={_from:"@zhoujiahao/pm@1.0.37",_id:"@zhoujiahao/pm@1.0.37",_inBundle:!1,_integrity:"sha512-sVA/7woqtCQenNAXCmry89zQ5FY5Q0X/wcduJGm5nqli62mHaK4YkivzpyCUN0l7Qlr97ry455u+BWRCsvoOng==",_location:"/@zhoujiahao/pm",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"@zhoujiahao/pm@1.0.37",name:"@zhoujiahao/pm",escapedName:"@zhoujiahao%2fpm",scope:"@zhoujiahao",rawSpec:"1.0.37",saveSpec:null,fetchSpec:"1.0.37"},_requiredBy:["/@zhoujiahao/blog"],_resolved:"https://registry.npmjs.org/@zhoujiahao/pm/-/pm-1.0.37.tgz",_shasum:"ccb79a53d778fc92a3b6de201e2ca3428ae2e985",_spec:"@zhoujiahao/pm@1.0.37",_where:"/home/runner/work/playground/playground/node_modules/@zhoujiahao/blog",author:{name:"ZjHOU",email:"z@zjh.im"},bugs:{url:"https://github.com/zjhou/toyBox/issues"},bundleDependencies:!1,dependencies:{"@zhoujiahao/editor":"^1.1.11",imer:"^0.0.1","strapi-sdk-javascript":"^0.3.3"},deprecated:!1,description:"zjh.im - post manager",directories:{lib:"lib",test:"__tests__"},files:["lib"],gitHead:"965f9f595d00270b663b0d0cdaf1a0d438a8f412",homepage:"https://github.com/zjhou/toyBox#readme",keywords:["post","manager","pane.","editor.","code","mirror"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/pm",peerDependencies:{"@zhoujiahao/utils":"^1.0.14","@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},repository:{type:"git",url:"git+https://github.com/zjhou/toyBox.git"},scripts:{test:'echo "Error: run tests from root" && exit 1'},version:"1.0.37"}},"V/h/":function(e,t,n){"use strict";(function(e){var n,r,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c="undefined"!=typeof Symbol?Symbol("immer-nothing"):(o=!0,(r="immer-nothing")in(n={})?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,n),u="undefined"!=typeof Symbol?Symbol("immer-state"):"__$immer_state";function s(e){return!!e&&!!e[u]}function f(e){if(!e)return!1;if("object"!==(void 0===e?"undefined":i(e)))return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var l=Object.assign||function(e,t){for(var n in t)h(t,n)&&(e[n]=t[n]);return e};function p(e){if(Array.isArray(e))return e.slice();var t=void 0===e.__proto__?Object.create(null):{};return l(t,e)}function d(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++)t(n,e[n],e);else for(var r in e)t(r,e[r],e)}function h(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function y(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function m(e,t,n,r){Array.isArray(e.base)?function(e,t,n,r){for(var o=e.base,i=e.copy,a=e.assigned,c=Math.min(o.length,i.length),u=0;u<c;u++)if(a[u]&&o[u]!==i[u]){var s=t.concat(u);n.push({op:"replace",path:s,value:i[u]}),r.push({op:"replace",path:s,value:o[u]})}if(c<i.length){for(var f=c;f<i.length;f++)n.push({op:"add",path:t.concat(f),value:i[f]});r.push({op:"replace",path:t.concat("length"),value:o.length})}else if(c<o.length){n.push({op:"replace",path:t.concat("length"),value:i.length});for(var l=c;l<o.length;l++)r.push({op:"add",path:t.concat(l),value:o[l]})}}(e,t,n,r):function(e,t,n,r){var o=e.base,i=e.copy;d(e.assigned,(function(e,a){var c=o[e],u=i[e],s=a?e in o?"replace":"add":"remove";if(c!==o||"replace"!==s){var f=t.concat(e);n.push("remove"===s?{op:s,path:f}:{op:s,path:f,value:u}),r.push("add"===s?{op:"remove",path:f}:"remove"===s?{op:"add",path:f,value:c}:{op:"replace",path:f,value:c})}}))}(e,t,n,r)}var v={},b=[],g=function(){return b[b.length-1]};function w(e,t){var n=void 0;if(s(e)){var r=e[u];r.finalizing=!0,n=p(r.draft),r.finalizing=!1}else n=p(e);d(e,(function(e){Object.defineProperty(n,""+e,function(e){return v[e]||(v[e]={configurable:!0,enumerable:!0,get:function(){return function(e,t){E(e);var n=j(e)[t];if(!e.finalizing&&n===e.base[t]&&f(n))return S(e),e.copy[t]=w(n,e);return n}(this[u],e)},set:function(t){!function(e,t,n){if(E(e),e.assigned[t]=!0,!e.modified){if(y(j(e)[t],n))return;P(e),S(e)}e.copy[t]=n}(this[u],e,t)}})}(""+e))}));var o={scope:t?t.scope:g(),modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:n,copy:null,revoke:O,revoked:!1};return function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})}(n,u,o),o.scope.push(o),n}function O(){this.revoked=!0}function j(e){return e.copy||e.base}function P(e){e.modified||(e.modified=!0,e.parent&&P(e.parent))}function S(e){e.copy||(e.copy=p(e.base))}function E(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(e.copy||e.base))}function z(e){for(var t=e.base,n=e.draft,r=Object.keys(n),o=r.length-1;o>=0;o--)if(void 0===t[r[o]]&&!h(t,r[o]))return!0;return r.length!==Object.keys(t).length}function T(e){var t=e.draft;if(t.length!==e.base.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var k=Object.freeze({scopes:b,currentScope:g,willFinalize:function(e,t,n){var r=g();r.forEach((function(e){return e.finalizing=!0})),void 0!==e&&e!==t||(n&&function e(t){if(!t||"object"!==(void 0===t?"undefined":i(t)))return;var n=t[u];if(!n)return;var r=n.base,o=n.draft,a=n.assigned;if(Array.isArray(t)){if(T(n)){if(P(n),a.length=!0,o.length<r.length)for(var c=o.length;c<r.length;c++)a[c]=!1;else for(var s=r.length;s<o.length;s++)a[s]=!0;for(var f=0;f<o.length;f++)void 0===a[f]&&e(o[f])}}else Object.keys(o).forEach((function(t){void 0!==r[t]||h(r,t)?a[t]||e(o[t]):(a[t]=!0,P(n))})),Object.keys(r).forEach((function(e){void 0!==o[e]||h(o,e)||(a[e]=!1,P(n))}))}(t),function(e){for(var t=e.length-1;t>=0;t--){var n=e[t];!1===n.modified&&(Array.isArray(n.base)?T(n)&&P(n):z(n)&&P(n))}}(r))},createDraft:w}),x=[],_=function(){return x[x.length-1]};function A(e,t){var n={scope:t?t.scope:_(),modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},r=Array.isArray(e)?Proxy.revocable([n],C):Proxy.revocable(n,I),o=r.revoke,i=r.proxy;return n.draft=i,n.revoke=o,n.scope.push(n),i}var I={get:function(e,t){if(t===u)return e;var n=e.drafts;if(!e.modified&&h(n,t))return n[t];var r=L(e)[t];if(e.finalized||!f(r))return r;if(e.modified){if(r!==e.base[t])return r;n=e.copy}return n[t]=A(r,e)},has:function(e,t){return t in L(e)},ownKeys:function(e){return Reflect.ownKeys(L(e))},set:function(e,t,n){if(!e.modified){if(n?y(e.base[t],n)||n===e.drafts[t]:y(e.base[t],n)&&t in e.base)return!0;D(e)}return e.assigned[t]=!0,e.copy[t]=n,!0},deleteProperty:function(e,t){(void 0!==e.base[t]||t in e.base)&&(e.assigned[t]=!1,D(e));e.copy&&delete e.copy[t];return!0},getOwnPropertyDescriptor:function(e,t){var n=e.modified?e.copy:h(e.drafts,t)?e.drafts:e.base,r=Reflect.getOwnPropertyDescriptor(n,t);!r||Array.isArray(n)&&"length"===t||(r.configurable=!0);return r},defineProperty:function(){throw new Error("Immer does not support defining properties on draft objects.")},setPrototypeOf:function(){throw new Error("Immer does not support `setPrototypeOf()`.")}},C={};function L(e){return e.copy||e.base}function D(e){e.modified||(e.modified=!0,e.copy=l(p(e.base),e.drafts),e.drafts=null,e.parent&&D(e.parent))}d(I,(function(e,t){C[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),C.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer does not support deleting properties from arrays: "+t);return I.deleteProperty.call(this,e[0],t)},C.set=function(e,t,n){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer does not support setting non-numeric properties on arrays: "+t);return I.set.call(this,e[0],t,n)};var R=Object.freeze({scopes:x,currentScope:_,willFinalize:function(){},createDraft:A});var N={useProxies:"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},F=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,N,t),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this)}return a(e,[{key:"produce",value:function(e,t,n){var r=this;if("function"==typeof e&&"function"!=typeof t){var o=t;return t=e,function(){for(var e=arguments.length,n=Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o;return r.produce(a,(function(e){var r;return(r=t).call.apply(r,[e,e].concat(n))}))}}if("function"!=typeof t)throw new Error("if first argument is not a function, the second argument to produce should be a function");if(void 0!==n&&"function"!=typeof n)throw new Error("the third argument of a producer should not be set or a function");var i=void 0;if(f(e))if(s(e)){if(void 0===(i=t.call(e,e)))return e}else{this.scopes.push([]);var a=this.createDraft(e);try{i=t.call(a,a),this.willFinalize(i,a,!!n);var l=n&&[],p=n&&[];if(void 0===i||i===a)i=this.finalize(a,[],l,p);else{if(a[u].modified)throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");f(i)&&(i=this.finalize(i)),n&&(l.push({op:"replace",path:[],value:i}),p.push({op:"replace",path:[],value:e}))}}finally{this.currentScope().forEach((function(e){return e.revoke()})),this.scopes.pop()}n&&n(l,p)}else if(void 0===(i=t(e)))return e;return i===c?void 0:i}},{key:"setAutoFreeze",value:function(e){this.autoFreeze=e}},{key:"setUseProxies",value:function(e){this.useProxies=e,l(this,e?R:k)}},{key:"finalize",value:function(e,t,n,r){var o=e[u];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e);if(o.scope!==this.currentScope())return e;if(!o.modified)return o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,n,r),this.onDelete){var i=o.assigned;for(var a in i)i[a]||this.onDelete(o,a)}this.onCopy&&this.onCopy(o),this.autoFreeze&&1===this.scopes.length&&Object.freeze(o.copy),n&&m(o,t,n,r)}return o.copy}},{key:"finalizeTree",value:function(e,t,n,r){var o=this,i=e[u];i&&(e=this.useProxies?i.copy:i.copy=p(i.draft));var a=this.onAssign;return d(e,(function c(u,l,p){var h=!!i&&p===e;if(s(l)){if(p[u]=l=n&&h&&!i.assigned[u]?o.finalize(l,t.concat(u),n,r):o.finalize(l),h&&l===i.base[u])return}else{if(h&&y(l,i.base[u]))return;f(l)&&!Object.isFrozen(l)&&d(l,c)}h&&a&&a(i,u,l)})),e}}]),e}()),U=F.produce;U((function(e,t){for(var n=0;n<t.length;n++){var r=t[n],o=r.path;if(0===o.length&&"replace"===r.op)e=r.value;else{for(var a=e,c=0;c<o.length-1;c++)if(!(a=a[o[c]])||"object"!==(void 0===a?"undefined":i(a)))throw new Error("Cannot apply patch, path doesn't resolve: "+o.join("/"));var u=o[o.length-1];switch(r.op){case"replace":case"add":a[u]=r.value;break;case"remove":if(Array.isArray(a)){if(u!==a.length-1)throw new Error("Only the last index of an array can be removed, index: "+u+", length: "+a.length);a.length-=1}else delete a[u];break;default:throw new Error("Unsupported patch operation: "+r.op)}}}return e}));t.a=U}).call(this,n("8oxB"))},XXAI:function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"set",(function(){return D})),n.d(r,"get",(function(){return R})),n.d(r,"remove",(function(){return U})),n.d(r,"list",(function(){return J})),n.d(r,"destroy",(function(){return q})),n.d(r,"withLocalList",(function(){return B}));var o=n("8RZD"),i=n("q1tI"),a=n.n(i),c=n("i8i4"),u=n.n(c),s=n("V/h/");function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&p(e.prototype,t),n&&p(e,n),e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=g(e);if(t){var o=g(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?b(e):t}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return function(n){h(o,n);var r=m(o);function o(){var e;l(this,o);for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return w(b(e=r.call.apply(r,[this].concat(n))),"state",{component:null}),e}return d(o,[{key:"componentDidMount",value:function(){var t=this;e().then((function(e){t.setState({component:e.default})}))}},{key:"render",value:function(){var e=this.state.component;return e?a.a.createElement(e,this.props):t}}]),o}(i.Component)},j=function(e){var t=e.posts,n=e.activePostIdx,r=e.onTitleClick;return a.a.createElement("ul",null,t.map((function(e,t){var o=e.title,i=(e.id,e.postType,e.attachment_url,n===t);return a.a.createElement("li",{onClick:function(){r(t)},className:"".concat(i?"active":"")},a.a.createElement("span",{className:"title"},o))})))},P=function(e,t){var n=e.Persistor,r=e.postListUpdater,o=e.api,i=e.active;return function(e,a){var c=e.error,u=e.success,s=(e.warn,a.getOption("contentId"));n.remove(s),r((function(e){return e.filter((function(e){return e.id!==s}))})),"draft"!==t?o.delete(s).then((function(){i(0),u("博文永久删除")})).catch((function(e){c("博文删除失败")})):u("博文已经删除")}},S=function(e){var t=e.Persistor,n=e.api,r=e.postListUpdater,o=e.loading;return function(e,i){var a=e.error,c=e.success,u=(e.warn,i.getOption("newPostTitle")),s=i.getOption("contentId"),f=t.get(s).title,l=i.doc.getValue();u||f?l?(o(!0),n.create(u||f,l).then((function(e){t.remove(s),r((function(t){t[0]=e,t[0].postType="published"})),c("博文创建成功")})).catch((function(e){a("博文创建失败")})).finally((function(){o(!1)}))):a("内容不能为空!"):a("标题不能为空!")}},E=n("1EKS"),z=n.n(E),T=function(e){var t=e.Persistor,n=e.postListUpdater,r=e.active;return function(e,o,i){var a=e.error,c=(e.success,e.warn,i.argString&&i.argString.trim());if(c){o.setOption("newPostTitle",c);var u=z()(Date.now()).slice(16),s={title:c,id:u,postType:"draft",content:""};t.set(u,s),n((function(e){e.unshift(s)}),(function(){r(0)}))}else a("标题不能为空: new &lt;title&gt;")}},k=function(e,t){var n,r,o,i,a,c,u,s=e.exit,f=e.select,l=function(e,n){return{draft:["publish"],published:["update"]}[t].includes(n)?e:function(e){(0,e.error)("非法命令")}};return[{name:"update",fn:l((n=e,r=n.api,o=n.postListUpdater,i=n.Persistor,a=n.editingPost,c=n.refresh,u=n.loading,function(e,t){var n=e.error,s=e.success;e.warn,u(!0),r.update(t.getOption("contentId"),t.doc.getValue(),a.title).then((function(e){i.remove(e.id),c(),e.postType="published",o((function(t){t.find((function(t){return t.id===e.id})).content=e.content})),s("博文已更新")})).catch((function(){n("博文更新失败")})).finally((function(){u(!1)}))}),"update")},{name:"deleteThisPostForever",fn:P(e,t)},{name:"publish",fn:l(S(e),"publish")},{name:"exit",fn:function(){s()}},{name:"new",fn:T(e)},{name:"upload",fn:f}]};function x(e){return function(e){if(Array.isArray(e))return _(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function A(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?A(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):A(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L=new RegExp("^pm-persistor-"),D=function(e,t){localStorage.setItem("pm-persistor-"+e,JSON.stringify(t)),localStorage.setItem("pm-time-stamp",Date.now())},R=function(e){if(e)return JSON.parse(localStorage.getItem("pm-persistor-"+e))},N=function(e){if(e)return JSON.parse(localStorage.getItem(e))},F=function(){return Object.keys(localStorage).filter((function(e){return L.test(e)}))},U=function(e){localStorage.removeItem("pm-persistor-"+e)},J=function(){return F().map(N)},B=function(e){var t=J(),n={};if(e.forEach((function(e){var t=e.id;n[t]=!0})),!e.length)return t.map((function(e){return I({postType:"draft"},e)}));var r=t.filter((function(e){var t=e.id;return!n[t]}));return[].concat(x(r.map((function(e){return I({postType:"draft"},e)}))),x(e.map((function(e){return I({postType:"published"},e)}))))},q=function(){F().forEach((function(e){localStorage.removeItem(e)}))},Q=(n("isNF"),n("o5JI"),function(e){var t=e.size,n=void 0===t?3:t;return a.a.createElement("div",{className:"bg-blink-dot",style:{width:n,height:n}})}),V=function(e){navigator.clipboard?navigator.clipboard.writeText(e):console.log(e)};function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function H(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return G(this,n)}}function G(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?Y(e):t}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}(c,e);var t,n,r,i=H(c);function c(){var e;M(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return W(Y(e=i.call.apply(i,[this].concat(n))),"state",{file:null,uploading:!1}),W(Y(e),"uploadFile",(function(t){var n="".concat(e.props.fileId||Object(o.k)(),"-").concat(t.name);e.setState({uploading:!0}),Object(o.j)("https://api.zjh.im/upload",t,"file",{id:n}).then((function(){e.setState({uploading:!1});var t=e.props.onSuccess||function(){},r="https://images-repo.sgp1.digitaloceanspaces.com/".concat(n);t(r),V(r)})).catch((function(){e.setState({uploading:!1})}))})),W(Y(e),"handleOnChooseFile",(function(){e.fileInput&&e.fileInput.click()})),W(Y(e),"handleFileSelect",(function(t){var n=t.target.files[0];n&&e.uploadFile(n)})),e}return t=c,(n=[{key:"render",value:function(){var e=this;return[a.a.createElement("input",{ref:function(t){return e.fileInput=t},type:"file",accept:this.props.accept,className:"file-input",onChange:this.handleFileSelect,onClick:function(e){e.target.value=null}}),this.props.children({select:this.handleOnChooseFile,uploading:this.state.uploading})]}}])&&X(t.prototype,n),r&&X(t,r),c}(a.a.PureComponent);function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function oe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ce(e);if(t){var o=ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ie(this,n)}}function ie(e,t){return!t||"object"!==te(t)&&"function"!=typeof t?ae(e):t}function ae(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ce(e){return(ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ue(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var se="v".concat(n("N0Pr").version),fe=O((function(){return n.e(3).then(n.bind(null,"0BQj"))}),a.a.createElement("div",{style:{width:"calc(50% - 15px)",height:"100%",border:"dotted 1px #000",background:"#f0f0f0"}})),le=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(c,e);var t,n,o,i=oe(c);function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),ue(ae(t=i.call(this,e)),"active",(function(e){t.setState({activePostIdx:e})})),ue(ae(t),"loading",(function(e){t.setState({bgTaskRunning:e})})),ue(ae(t),"updatePostList",(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return null};Array.isArray(e)?t.setState({postList:e}):t.setState((function(t){return{postList:Object(s.a)(t.postList,e)}}),n)})),ue(ae(t),"buildEdtCls",(function(){var e=t.state.postList[t.state.activePostIdx]||t.state.postList[0],n=!!R(e.id),r="normal-file";return"draft"===e.postType&&n&&(r="new-file"),"published"===e.postType&&n&&(r="changed-file"),"editor-wrapper "+r})),ue(ae(t),"titleFormatter",(function(e){return"".concat(e.title)})),ue(ae(t),"refresh",(function(){t.setState({updateStamp:Date.now()})})),ue(ae(t),"getEditingPostTitle",(function(){return(t.state.postList[t.state.activePostIdx]||t.state.postList[0]).title})),ue(ae(t),"handleEditorContentChange",(function(e,n){var r=t.state.postList[t.state.activePostIdx]||t.state.postList[0];D(e,{title:t.getEditingPostTitle(),postType:r.type,id:e,content:n})})),ue(ae(t),"handleUploadFile",(function(e){return function(n){t.props.api.update(e,"","",n).then((function(){t.updatePostList((function(t){t.find((function(t){var n=t.id;return e===n})).attachment_url=n})),t.refresh()}))}})),ue(ae(t),"renderTitleList",(function(){return a.a.createElement("div",{className:"side-list-col"},a.a.createElement(j,{titles:t.state.postList.map(t.titleFormatter),update:t.props.api.update,postListUpdater:t.updatePostList,refresh:t.refresh,posts:t.state.postList,onTitleClick:t.active,activePostIdx:t.state.activePostIdx}))})),ue(ae(t),"renderUploadingIndicator",(function(){return a.a.createElement("span",{className:"actions"},a.a.createElement(Q,null))})),ue(ae(t),"renderEditor",(function(){var e=t.state.postList[t.state.activePostIdx]||t.state.postList[0],n=R(e.id),o=n&&void 0!==n.content?n.content:e.content||"";return a.a.createElement("div",{className:t.buildEdtCls(),"data-v":se},a.a.createElement(ee,{onSuccess:t.handleUploadFile(e.id)},(function(n){var i=n.select,c=n.uploading;return[a.a.createElement(fe,{value:o,contentId:e.id,backgroundColor:"#f2f2f2",onSave:t.handleEditorContentChange,exArr:k({select:i,api:t.props.api,postListUpdater:t.updatePostList,editingPost:e,refresh:t.refresh,active:t.active,exit:t.props.exit,Persistor:r,loading:t.loading},e.postType)}),(c||t.state.bgTaskRunning)&&t.renderUploadingIndicator()]})),e.attachment_url&&a.a.createElement("img",{src:e.attachment_url}))})),t.state={activePostIdx:0,updateStamp:Date.now(),postList:t.props.posts,bgTaskRunning:!1},t}return t=c,(n=[{key:"render",value:function(){return a.a.createElement("div",{className:"pane"},this.renderTitleList(),this.renderEditor())}}])&&ne(t.prototype,n),o&&ne(t,o),c}(a.a.PureComponent),pe=(n("Zse/"),function(e){u.a.unmountComponentAtNode(e||Object(o.a)("#gui"))}),de=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=r.dom||Object(o.a)("#gui");i.classList.add("fullscreen"),u.a.render(a.a.createElement(le,{posts:e,api:t,exit:n}),i)};function he(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?he(Object(n),!0).forEach((function(t){me(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):he(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ve="https://api.zjh.im/z",be={create:"".concat(ve,"/post/create"),update:"".concat(ve,"/post/update"),delete:"".concat(ve,"/post/delete"),list:"".concat(ve,"/posts")},ge=function(e){var t=e?{create:function(t,n){return Object(o.g)(be.create,"POST",ye({title:t,content:n},e))},update:function(t,n,r,i){return Object(o.g)(be.update,"POST",ye({id:t,title:r,content:n,attachment_url:i},e))},delete:function(t){return Object(o.g)(be.delete,"POST",ye({id:t},e))}}:{create:function(){return Promise.reject()},update:function(){return Promise.reject()},delete:function(){return Promise.reject()}};return ye({list:function(){return Object(o.h)(be.list)}},t)};function we(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}var Oe,je,Pe=Object(o.c)("pm","pm [access token]","posts manager for my blog."),Se=function(e){localStorage.setItem("p-c-key",JSON.stringify(e))};t.default={doc:Pe,shortopts:"e",handler:(Oe=regeneratorRuntime.mark((function e(t){var n,r,i,a,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.e){e.next=3;break}return pe(),e.abrupt("return","Goodbye");case 3:return n=t.user&&t.password?{user:t.user,password:t.password}:JSON.parse(localStorage.getItem("p-c-key"))||null,Se(n),r=ge(n),e.next=9,r.list();case 9:return i=e.sent,a=B(i),c=t.dom||Object(o.a)("#gui"),e.abrupt("return",new Promise((function(e,t){try{de(a.slice().reverse(),r,(function(){e(),c.classList.remove("fullscreen"),setTimeout((function(){Terminal&&Terminal.exec("pm -e")}))}),{dom:c})}catch(e){return"Fail to render posts"}})));case 13:case"end":return e.stop()}}),e)})),je=function(){var e=this,t=arguments;return new Promise((function(n,r){var o=Oe.apply(e,t);function i(e){we(o,n,r,i,a,"next",e)}function a(e){we(o,n,r,i,a,"throw",e)}i(void 0)}))},function(e){return je.apply(this,arguments)})}},"Zse/":function(e,t,n){},isNF:function(e,t,n){},o5JI:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,