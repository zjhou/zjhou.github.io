(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"+eFp":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n("q1tI")),a=l(n("17x9")),i=l(n("UnXY")),c=l(n("zB99")),u=n("xfxO");function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}u.nameShape.isRequired,a.default.bool,a.default.bool,a.default.bool,(0,u.transitionTimeout)("Appear"),(0,u.transitionTimeout)("Enter"),(0,u.transitionTimeout)("Leave");var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),u=0;u<a;u++)i[u]=arguments[u];return n=r=s(this,e.call.apply(e,[this].concat(i))),r._wrapChild=function(e){return o.default.createElement(c.default,{name:r.props.transitionName,appear:r.props.transitionAppear,enter:r.props.transitionEnter,leave:r.props.transitionLeave,appearTimeout:r.props.transitionAppearTimeout,enterTimeout:r.props.transitionEnterTimeout,leaveTimeout:r.props.transitionLeaveTimeout},e)},s(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.default.createElement(i.default,r({},this.props,{childFactory:this._wrapChild}))},t}(o.default.Component);f.displayName="CSSTransitionGroup",f.propTypes={},f.defaultProps={transitionAppear:!1,transitionEnter:!0,transitionLeave:!0},t.default=f,e.exports=t.default},"+u0c":function(e,t,n){},"1zZr":function(e,t,n){},"6DQo":function(e,t,n){"use strict";e.exports=function(){}},"8PcY":function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e){if(!e)return e;var t={};return r.Children.map(e,(function(e){return e})).forEach((function(e){t[e.key]=e})),t},t.mergeChildMappings=function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var r={},o=[];for(var a in e)t.hasOwnProperty(a)?o.length&&(r[a]=o,o=[]):o.push(a);var i=void 0,c={};for(var u in t){if(r.hasOwnProperty(u))for(i=0;i<r[u].length;i++){var l=r[u][i];c[r[u][i]]=n(l)}c[u]=n(u)}for(i=0;i<o.length;i++)c[o[i]]=n(o[i]);return c};var r=n("q1tI")},"8zDj":function(e,t,n){},A21b:function(e,t,n){},AAEI:function(e,t,n){},AE4m:function(e,t,n){},AdgS:function(e,t,n){},Bp9Y:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},DXLO:function(e,t,n){},DeO4:function(e,t,n){},Dk2R:function(e,t,n){},ETDC:function(e,t,n){},GtDr:function(e,t,n){},HAps:function(e,t,n){},KUuw:function(e){e.exports={_from:"@zhoujiahao/blog@^1.5.37",_id:"@zhoujiahao/blog@1.5.38",_inBundle:!1,_integrity:"sha512-fBJW9bC6jxIITr0wOYg7P/5u6/NsTbMnm72/Ov0lPPQSC9wlvcvbQkk2tK+TwgqrTFhIhgn+umTnjp67eEwdZQ==",_location:"/@zhoujiahao/blog",_phantomChildren:{},_requested:{type:"range",registry:!0,raw:"@zhoujiahao/blog@^1.5.37",name:"@zhoujiahao/blog",escapedName:"@zhoujiahao%2fblog",scope:"@zhoujiahao",rawSpec:"^1.5.37",saveSpec:null,fetchSpec:"^1.5.37"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/@zhoujiahao/blog/-/blog-1.5.38.tgz",_shasum:"5996d307904b1c7b60c23d141cb9d8631d33cb84",_spec:"@zhoujiahao/blog@^1.5.37",_where:"/home/travis/build/zjhou/zjh.im/src",author:{name:"zjhou",email:"z@zjh.im"},bundleDependencies:!1,dependencies:{"@zhoujiahao/utils":"^1.0.28","react-transition-group":"^1.2.1"},deprecated:!1,description:"my react blog",devDependencies:{"@babel/core":"^7.2.0","@babel/plugin-proposal-class-properties":"^7.3.0","@babel/plugin-syntax-dynamic-import":"^7.2.0","@babel/preset-env":"^7.2.0","@babel/preset-react":"^7.0.0","babel-loader":"^8.0.4","css-loader":"^1.0.1","node-sass":"^4.11.0","sass-loader":"^7.1.0","style-loader":"^0.23.1",webpack:"^4.19.0","webpack-bundle-analyzer":"^3.0.4","webpack-cli":"^3.2.1"},directories:{lib:"lib",test:"__tests__"},gitHead:"10d2a240e19f8ac8de31a705866b0896182f8db8",homepage:"",keywords:["blog"],license:"ISC",main:"lib/index.js",name:"@zhoujiahao/blog",peerDependencies:{"@zhoujiahao/vendor":"^1.0.0"},publishConfig:{access:"public"},version:"1.5.38"}},O5PD:function(e,t,n){},OgkG:function(e,t,n){},Qrca:function(e,t){e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(0!==(t=t.filter((function(e){return null!=e}))).length)return 1===t.length?t[0]:t.reduce((function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}))}},TqRt:function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},UnXY:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n("Qrca")),a=u(n("q1tI")),i=u(n("17x9")),c=(u(n("6DQo")),n("8PcY"));function u(e){return e&&e.__esModule?e:{default:e}}i.default.any,i.default.func,i.default.node;var l=function(e){function t(n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,o));return a.performAppear=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(a._handleDoneAppearing.bind(a,e,t)):a._handleDoneAppearing(e,t)},a._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete a.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performEnter=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(a._handleDoneEntering.bind(a,e,t)):a._handleDoneEntering(e,t)},a._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete a.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performLeave=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(a._handleDoneLeaving.bind(a,e,t)):a._handleDoneLeaving(e,t)},a._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete a.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)?a.keysToEnter.push(e):a.setState((function(t){var n=r({},t.children);return delete n[e],{children:n}}))},a.childRefs=Object.create(null),a.state={children:(0,c.getChildMapping)(n.children)},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,c.getChildMapping)(e.children),n=this.state.children;for(var r in this.setState({children:(0,c.mergeChildMappings)(n,t)}),t){var o=n&&n.hasOwnProperty(r);!t[r]||o||this.currentlyTransitioningKeys[r]||this.keysToEnter.push(r)}for(var a in n){var i=t&&t.hasOwnProperty(a);!n[a]||i||this.currentlyTransitioningKeys[a]||this.keysToLeave.push(a)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach((function(t){return e.performEnter(t,e.childRefs[t])}));var n=this.keysToLeave;this.keysToLeave=[],n.forEach((function(t){return e.performLeave(t,e.childRefs[t])}))},t.prototype.render=function(){var e=this,t=[],n=function(n){var r=e.state.children[n];if(r){var i="string"!=typeof r.ref,c=e.props.childFactory(r),u=function(t){e.childRefs[n]=t};c===r&&i&&(u=(0,o.default)(r.ref,u)),t.push(a.default.cloneElement(c,{key:n,ref:u}))}};for(var i in this.state.children)n(i);var c=r({},this.props);return delete c.transitionLeave,delete c.transitionName,delete c.transitionAppear,delete c.transitionEnter,delete c.childFactory,delete c.transitionLeaveTimeout,delete c.transitionEnterTimeout,delete c.transitionAppearTimeout,delete c.component,a.default.createElement(this.props.component,c,t)},t}(a.default.Component);l.displayName="TransitionGroup",l.propTypes={},l.defaultProps={component:"span",childFactory:function(e){return e}},t.default=l,e.exports=t.default},VOcB:function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},b3vB:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),o=n.n(r),a=n("i8i4"),i=n.n(a),c=n("I+5T"),u=n("4KRT"),l=n("8RZD"),s=n("lTCR"),f=n.n(s),p=function(e){var t=e.reverse,n=e.top,r=e.down,a=e.ratio,i=void 0===a?.618:a,c={display:"flex",position:"relative",flexDirection:t?"column-reverse":"column",height:"100%",width:"100%"},u="".concat(100*i,"%"),l="".concat(100*(1-i),"%");return o.a.createElement("div",{style:c},o.a.createElement("div",{style:{height:l}},n),o.a.createElement("div",{style:{height:u}},r))},d=n("KUuw");function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m={photo:{value:"photo",defaultContentValue:"5cdba0e1476d9c0011cc2984"},story:{value:"story"}},h={cover:{type:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(n,!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},m)}},v="command",g=["5cd6cfbec9f11d0011742e55","5cd6f51ec9f11d0011742e59","5cd78b2034d1dd00116c2012","5cdba101476d9c0011cc2987","5d67cb4a1bc1380020ad7c56","5d69f1dc1bc1380020ad7c57"],O={ENABLE_UPDATES_ENTRY:"enableUpdatesEntry",ENABLE_NEXT_POST:"enableNextPost",ENABLE_PAGING_NAV_BTN:"enablePagingNavBtn",ENABLE_IMAGES_FLOW:"enableImagesFlow",SHOW_SPACE_GUIDELINE:"showSpaceGuideLine"},E="clientPostList",j="serverPostList",w="/stories",P="/about",S="/stories/:id",x="/photos",_="/photos/:id",T="/photo/:id",k="/unread",N="/",C=d.version,D=d.name,A={version:C,name:D,gitURL:"https://github.com/zjhou/toyBox/releases/tag/".concat(D,"@").concat(C)};function I(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query Photo($id: ID!) {\n    photo(id: $id) {\n      _id\n      title\n      date\n      content {\n        url\n      }\n    }\n  }\n"]);return I=function(){return e},e}var L=f()(I()),R=function(e){return o.a.createElement(Yt,{query:L,variables:{id:e.id}},(function(t){var n=t.data;return e.children({url:"https://api.zjh.im"+n.photo.content.url,title:n.photo.title})}))};function M(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function z(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function B(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var G=function(e){return"false"!==e&&("true"===e||e)},H=function(){var e={};return Object.entries(O).forEach((function(t){var n=B(t,2)[1];e[n]=G(localStorage.getItem(n))})),e},V=function(e){var t={};return Object.entries(O).forEach((function(n){var r=B(n,2)[1];t[r]=G(e[r])})),t},W=function(e,t){return"".concat(e,"_").concat(t)},U=function(e){if(e&&e.data&&e.data.posts.length){var t=e.data.posts.map((function(e){return e._id})),n=localStorage.getItem(E);localStorage.setItem(n?j:E,t)}},F=function(e,t){var n=localStorage.getItem(t);n.includes(e)||localStorage.setItem(t,n+",".concat(e))},$=function(e,t){var n=localStorage.getItem(e),r=localStorage.getItem(t);if(n&&r){var o=n.split(",");return r.split(",").filter((function(e){return!o.includes(e)}))}},Q=function(e){return($(W("client",e),W("server",e))||[]).map((function(t){return{id:t,photoGroupId:e}}))},Y=function(){return[].concat(M($(E,j).map((function(e){return{type:m.story.value,url:"".concat(w,"/").concat(e),id:e}}))),M(Object(l.x)(g.map(Q)).map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?z(n,!0).forEach((function(t){q(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):z(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{type:m.photo.value,url:"/".concat(m.photo.value,"/").concat(e.id)})}))))};function K(){return(K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function X(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function J(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Z=o.a.createContext({resetSpace:function(){},setSideSpaceContent:function(){}}),ee=o.a.createContext(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?X(n,!0).forEach((function(t){J(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):X(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},H())),te=function(e){return function(t){return o.a.createElement(Z.Consumer,null,(function(n){var r=K({},n);return o.a.createElement(e,K({},r,t))}))}},ne=function(e,t){var n=Object(r.useContext)(Z).setSideSpaceContent;return Object(r.useEffect)((function(){n(e)}),t),Object(r.useEffect)((function(){return function(){n(null)}}),[]),null},re=function(e){var t=Object(r.useContext)(ee);return{status:t[e],toggle:function(n){t.setLocalStorageVal(e,n)}}};function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ae(n,!0).forEach((function(t){fe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ae(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function le(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var pe="cyan",de=function(e){return function(t){function n(){var e,t,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var c=arguments.length,u=new Array(c),l=0;l<c;l++)u[l]=arguments[l];return r=this,a=(e=ue(n)).call.apply(e,[this].concat(u)),t=!a||"object"!==oe(a)&&"function"!=typeof a?le(r):a,fe(le(t),"handleResize",(function(e){i.a.render(t.renderGuideLines(t.$rootDom.getBoundingClientRect(),e),t.$container)})),fe(le(t),"renderGuideLines",(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.props.showSpaceGuideLine,r=t.props,a=r.top,i=r.bottom,c=r.left,u=r.right,l=r.color,s=void 0===l?pe:l;if(n){var f={position:"fixed",background:s,zIndex:100},p=ie({},f,{width:"100%",height:1,left:0}),d=ie({},f,{height:"100%",width:1,top:0}),b=e.top,y=e.bottom,m=e.left,h=e.right;return[a&&o.a.createElement("div",{style:ie({},p,{top:b})}),i&&o.a.createElement("div",{style:ie({},p,{top:y})}),c&&o.a.createElement("div",{style:ie({},d,{left:m})}),u&&o.a.createElement("div",{style:ie({},d,{left:h})})]}})),t}var r,a,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(n,t),r=n,(a=[{key:"componentDidMount",value:function(){var e=this;this.$rootDom=i.a.findDOMNode(this),this.$container=document.createElement("div"),document.body.appendChild(this.$container),this.handleResize(),window.addEventListener("resize",(function(){e.handleResize()}))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize),i.a.unmountComponentAtNode(this.$container),this.$container.remove()}},{key:"componentWillReceiveProps",value:function(e,t){e.showSpaceGuideLine!==this.props.showSpaceGuideLine&&this.handleResize(e.showSpaceGuideLine)}},{key:"render",value:function(){return o.a.createElement(e,this.props)}}])&&ce(r.prototype,a),c&&ce(r,c),n}(o.a.PureComponent)},be=function(e){return te(de(e))},ye=n("TSYQ"),me=n.n(ye),he=(n("HAps"),function(e){var t=e.cols;return o.a.createElement("div",{style:{display:"flex",height:"100%",width:"100%"}},t.map((function(e){return o.a.createElement("div",{style:{flex:"1"}},e)})))}),ve=function(e,t){return function(n){var r=o.a.createElement(e,n);return Object(l.o)()?r:o.a.createElement(Ft,{top:null,down:r,ratio:t})}},ge=.763924,Oe=n("17x9"),Ee=n.n(Oe),je=n("K9Ia"),we=n("p0ib"),Pe=n("bne5"),Se=n("67Y/"),xe=n("VnD/"),_e=n("mrSG"),Te=n("MGBS"),ke=n("zotm");var Ne=function(){function e(e){this.notifier=e}return e.prototype.call=function(e,t){var n=new Ce(e),r=Object(ke.a)(n,this.notifier);return r&&!n.seenValue?(n.add(r),t.subscribe(n)):n},e}(),Ce=function(e){function t(t){var n=e.call(this,t)||this;return n.seenValue=!1,n}return _e.__extends(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.seenValue=!0,this.complete()},t.prototype.notifyComplete=function(){},t}(Te.a),De=n("Zn8D");n("r8OW");function Ae(e){return(Ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ie(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Le(e){return(Le=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Re(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Me(e,t){return(Me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ze(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qe(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Be=function(e){return qe(Array(e).keys())},Ge=new je.a,He=function(e){function t(){var e,n,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,c=new Array(i),u=0;u<i;u++)c[u]=arguments[u];return r=this,a=(e=Le(t)).call.apply(e,[this].concat(c)),n=!a||"object"!==Ae(a)&&"function"!=typeof a?Re(r):a,ze(Re(n),"state",{y:6*n.props.current,isDragging:!1}),ze(Re(n),"buildProgressStr",(function(){return"".concat((n.state.y-6)/6+1," / ").concat(n.props.total)})),ze(Re(n),"updatePointerPos",(function(e){n.setState({y:e})})),ze(Re(n),"updateDragStatus",(function(e){n.setState({isDragging:e})})),ze(Re(n),"pointerEventHandler",(function(e){Ge.next(e)})),ze(Re(n),"renderTickIndicator",(function(){var e=n.props,t=e.total,r=e.current;return o.a.createElement("div",{className:me()("drag-tick-indicator",{absRight:n.props.absRight,isDragging:n.state.isDragging}),ref:function(e){n.indicator=e},onMouseUp:n.pointerEventHandler,onMouseMove:n.pointerEventHandler},Be(t).map((function(e){var t=e===r-1;return o.a.createElement("div",{onClick:function(t){return n.props.onClick(t,e)},className:me()("tick",{active:t})})})),o.a.createElement("div",{className:"pointer","data-progress":n.buildProgressStr(),style:{top:n.state.y},ref:function(e){n.pointer=e},onMouseDown:n.pointerEventHandler}))})),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Me(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;document.onselectstart=function(){return!1};var t=this,n=Ge.pipe(Object(xe.a)((function(e){return"mousedown"===e.type}))),r=Ge.pipe(Object(xe.a)((function(e){return"mousemove"===e.type}))),o=Object(we.a)(Object(Pe.a)(document,"mouseup")),a=n.pipe(Object(Se.a)((function(){return r.pipe((e=o,function(t){return t.lift(new Ne(e))}));var e})),Object(De.a)(1),(function(e){return Object(Se.a)((function(e){var n=t.indicator&&t.indicator.getBoundingClientRect().y;return e.clientY-n-6}))(e)}),Object(Se.a)((function(e){return 6*Math.round(e/6)})),Object(xe.a)((function(t){return t<e.indicator.getBoundingClientRect().height-12&&t>=6})));this.dragNdropSubscribtion=a.subscribe(this.updatePointerPos),this.dragStartSubscribtion=n.subscribe((function(){e.updateDragStatus(!0)})),this.dragEndSubscribtion=o.pipe(Object(Se.a)((function(){var t=e.state.y,n=Math.floor(t/6);return n>=e.props.total?e.props.total:n<=1?1:n})),Object(xe.a)((function(){return e.state.isDragging}))).subscribe((function(t){e.props.onDrop(t),e.updateDragStatus(!1)}))}},{key:"componentWillUnmount",value:function(){this.dragEndSubscribtion.unsubscribe(),this.dragStartSubscribtion.unsubscribe(),this.dragNdropSubscribtion.unsubscribe()}},{key:"render",value:function(){return this.props.total<2?null:this.renderTickIndicator()}}])&&Ie(n.prototype,r),a&&Ie(n,a),t}(o.a.Component);function Ve(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}ze(He,"propTypes",{current:Ee.a.number,total:Ee.a.number,onClick:Ee.a.func,absRight:Ee.a.bool}),ze(He,"defaultProps",{onDrop:function(){},onClick:function(){},current:1,absRight:!1});var We=function(e){var t=e.current,n=e.total,r=e.vertical,a=e.onClick,i=void 0===a?function(){}:a,c=e.absRight,u=e.fixedTop;if(n<2)return null;var s,f=function(e){return"".concat(Object(l.d)("0")(e,n)," / ").concat(n)};return o.a.createElement("div",{className:me()("tick-indicator",{"absolute-right":c,"fixed-top":u,vertical:r}),onClick:function(){i(t)}},(s=n,Ve(Array(s).keys())).map((function(e){var n=e===t-1;return o.a.createElement("div",{"data-title":f(e+1),className:me()("tick",{active:n})})})))},Ue=(ve(We,ge),function(e){var t=e.children;if(!t.length||"string"!=typeof t)return null;var n={"文":!0,"字":!0,"相":!0,"片":!0,"最":!0,"近":!0,"更":!0,"新":!0,"设":!0,"置":!0,"关":!0,"闭":!0,"福":!0};return t.split("").map((function(e){return n[e]?o.a.createElement("i",{className:"icon-".concat(e)}):e}))});n("AE4m");function Fe(){return(Fe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $e(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Qe=function(e){var t=e.text,n=e.onClick,r=e.children,a=e.disabled,i=$e(e,["text","onClick","children","disabled"]);return o.a.createElement("div",Fe({className:me()("base-btn",{disabled:a}),onClick:a?l.r:n},i),t||r)};n("hUxU");function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Je(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ze(e,t){return(Ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var tt=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Xe(t).call(this,e),n=!o||"object"!==Ye(o)&&"function"!=typeof o?Je(r):o,et(Je(n),"handleMouseMove",(function(e){var t=e.clientX,r=e.clientY,o=n.self.getBoundingClientRect(),a=o.top,i=o.left;n.setState({x:t-i,y:r-a})})),et(Je(n),"setTooltipState",(function(e){n.setState({show:e})})),n.state={x:0,y:0,show:!0},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ze(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.self.getBoundingClientRect(),t=e.bottom,n=e.left;this.setState({x:n,y:t})}},{key:"render",value:function(){var e=this,t="translate3d(".concat(this.state.x+20,"px, ").concat(this.state.y+20,"px, 0)");return o.a.createElement("div",{onMouseMove:this.handleMouseMove,ref:function(t){return e.self=t},className:"tooltip-wrapper"},this.props.children({showTooltip:function(){e.setTooltipState(!0)},hideTooltip:function(){e.setTooltipState(!1)}}),o.a.createElement("div",{key:2,className:"tooltip",style:{transform:t}},this.state.show?this.props.tooltip:null))}}])&&Ke(n.prototype,r),a&&Ke(n,a),t}(o.a.PureComponent);n("Dk2R");function nt(){return(nt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function rt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ot=function(e){var t=e.href,n=e.text,r=e.type,a=e.command,i=e.className,c=rt(e,["href","text","type","command","className"]);return r===v?o.a.createElement("span",{className:me()("command base-link",i),"data-cmd":a},n):o.a.createElement("a",nt({className:me()("base-link",i),href:t,target:"_blank"},c),n)};n("DXLO");function at(){return(at=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function it(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ct=function(e){var t=e.data,n=void 0===t?[]:t,r=e.itemRenderer,a=void 0===r?l.r:r,i=e.emptyRenderer,c=e.beforeRenderer,u=void 0===c?l.r:c,s=e.afterRenderer,f=void 0===s?l.r:s,p=e.className,d=it(e,["data","itemRenderer","emptyRenderer","beforeRenderer","afterRenderer","className"]);return n.length?o.a.createElement(o.a.Fragment,null,u(n),o.a.createElement("ul",at({className:me()("base-list",p)},d),n.map((function(e,t){return o.a.createElement("li",{className:"base-list-item"},a({item:e,index:t}))}))),f(n)):i?i():o.a.createElement(Gt,null)};n("GtDr");function ut(){return(ut=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function lt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function st(e){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dt(e,t){return!t||"object"!==st(t)&&"function"!=typeof t?yt(e):t}function bt(e){return(bt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function yt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mt(e,t){return(mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ht(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var vt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ht(yt(n=dt(this,bt(t).call(this,e))),"getStateByPropsAndCurrentPageIndex",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.currentPageIndex,r=e.pageSize,o=e.data,a=Math.ceil(o.length/r),i=(t-1)*r,c=t*r,u=o.slice(i,c)||[];return{hasNextPage:t<a,hasPrevPage:t>1,currentPageIndex:t,currentPageData:u,totalPages:a}})),ht(yt(n),"next",(function(){(n.state.hasNextPage||n.props.infiniteLoopMode)&&n.setState((function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasNextPage?e.currentPageIndex+1:1)}))})),ht(yt(n),"prev",(function(){(n.state.hasPrevPage||n.props.infiniteLoopMode)&&n.setState((function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasPrevPage?e.currentPageIndex-1:e.totalPages)}))})),ht(yt(n),"isValidProps",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=e.data,r=e.pageSize,o=e.currentPageIndex,a=void 0===o?1:o,i=Math.ceil(t.length/r);return t.length&&r>0&&a>=1&&a<=i})),n.isValidProps(e)?(n.state=n.getStateByPropsAndCurrentPageIndex(),n):dt(n)}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mt(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return this.isValidProps(this.props)&&this.props.children(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ft(n,!0).forEach((function(t){ht(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ft(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state,{next:this.next,prev:this.prev}))}}])&&pt(n.prototype,r),o&&pt(n,o),t}(o.a.PureComponent);function gt(){return(gt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}vt.defaultProps={currentPageIndex:1},vt.propTypes={data:Ee.a.array.isRequired,pageSize:Ee.a.number.isRequired,currentPageIndex:Ee.a.number,children:Ee.a.func.isRequired};var Ot=function(e){var t=e.pagingOption,n=e.pagingBtnRenderer,r=void 0===n?l.r:n,a=e.listOption;return o.a.createElement(vt,t,(function(t){return o.a.createElement(ct,gt({},a,{data:t.currentPageData,afterRenderer:function(){return r(t)},beforeRenderer:function(){return e.children(t)}}))}))},Et=Object(l.o)()?function(e){var t=e.className,n=lt(e,["className"]);return o.a.createElement(ct,ut({className:me()("letter-paper-list",t)},n))}:ct,jt=function(e){location.hash="#".concat(e)},wt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";jt("".concat(w,"/").concat(e))},Pt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.prev,r=void 0===n?l.r:n,a=e.next,i=void 0===a?l.r:a,c=e.currentPageIndex,u=e.hasNextPage,s=e.hasPrevPage,f=t.disableAllBtns,p=t.disableListBtn,d=t.disablePrevBtn,b=t.disableNextBtn,y=t.onListBtnClick,m=re(O.ENABLE_PAGING_NAV_BTN),h=m.status,v=[o.a.createElement(Qe,{disabled:d||!s,onClick:r},"上页"),o.a.createElement(Qe,{disabled:p,onClick:y||function(){wt()}},"列表"),o.a.createElement(Qe,{disabled:b||!u,onClick:i},"下页")],g={display:"flex",flexDirection:"column",alignItems:"flex-end",justifyContent:"space-between",height:120,textAlign:"right",padding:"5px 10px"};ne(h&&!f&&o.a.createElement(Ft,{top:null,style:g,down:v}),[c,h])},St=n("FFOo");var xt=function(){function e(e,t){this.bufferSize=e,this.startBufferEvery=t,this.subscriberClass=t&&e!==t?Tt:_t}return e.prototype.call=function(e,t){return t.subscribe(new this.subscriberClass(e,this.bufferSize,this.startBufferEvery))},e}(),_t=function(e){function t(t,n){var r=e.call(this,t)||this;return r.bufferSize=n,r.buffer=[],r}return _e.__extends(t,e),t.prototype._next=function(e){var t=this.buffer;t.push(e),t.length==this.bufferSize&&(this.destination.next(t),this.buffer=[])},t.prototype._complete=function(){var t=this.buffer;t.length>0&&this.destination.next(t),e.prototype._complete.call(this)},t}(St.a),Tt=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o.bufferSize=n,o.startBufferEvery=r,o.buffers=[],o.count=0,o}return _e.__extends(t,e),t.prototype._next=function(e){var t=this.bufferSize,n=this.startBufferEvery,r=this.buffers,o=this.count;this.count++,o%n==0&&r.push([]);for(var a=r.length;a--;){var i=r[a];i.push(e),i.length===t&&(r.splice(a,1),this.destination.next(i))}},t.prototype._complete=function(){for(var t=this.buffers,n=this.destination;t.length>0;){var r=t.shift();r.length>0&&n.next(r)}e.prototype._complete.call(this)},t}(St.a),kt=n("ad02");function Nt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Ct=function(e){var t,n,o=Nt(Object(r.useState)("up"),2),a=o[0],i=o[1],c=Object(Pe.a)(e||document,"scroll").pipe(Object(Se.a)((function(e){return e.target.scrollTop})),(t=2,void 0===n&&(n=null),function(e){return e.lift(new xt(t,n))}),Object(Se.a)((function(e){var t=Nt(e,2);return t[0]-t[1]>0?"UP":"DOWN"})),Object(kt.a)()),u=new je.a;return c.subscribe(u),Object(r.useEffect)((function(){var e=u.subscribe((function(e){i(e)}));return function(){return e.unsubscribe()}})),[a]};function Dt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var At=function(e,t){var n=Dt(Object(r.useState)(!1),2),o=n[0],a=n[1],i=Object(Pe.a)(e||document,"scroll").pipe(Object(Se.a)((function(e){var n=e.target;return t?n.scrollTop>=n.scrollHeight-n.offsetHeight-t:n.scrollTop===n.scrollHeight-n.offsetHeight})),Object(kt.a)()),c=new je.a;return i.subscribe(c),Object(r.useEffect)((function(){var e=c.subscribe((function(e){a(e)}));return function(){return e.unsubscribe()}})),[o]};function It(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Lt=function(e){var t=e.wrapperSelector,n=e.children,o=e.mountSize,a=e.bufferDistance;if(n.length<=1)return n;var i=o>0?o:1,c=It(Object(r.useState)(1*i),2),u=c[0],s=c[1],f=It(At(Object(l.a)(t),a),1)[0];return Object(r.useEffect)((function(){f&&s(u+1)}),[f]),n.slice(0,u*i)};n("ETDC");function Rt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Mt=function(e){var t=e.label,n=void 0===t?"配置项":t,a=e.defaultValue,i=e.onText,c=void 0===i?"开":i,u=e.offText,l=void 0===u?"关":u,s=e.onClick,f=void 0===s?function(){}:s,p=Rt(Object(r.useState)(a),2),d=p[0],b=p[1];return Object(r.useEffect)((function(){f(d)}),[d]),o.a.createElement("div",{className:me()("radio-button",{on:d}),onClick:function(){b(!d)}},o.a.createElement("span",{className:"label"},n,"："),o.a.createElement("span",{className:"on-text"},c),o.a.createElement("span",{className:"slash"},"／"),o.a.createElement("span",{className:"off-text"},l))},zt=(n("vzVe"),function(e){var t=e.absCenter,n=void 0===t||t;return o.a.createElement("div",{className:me()("tick-loader",{center:n&&Object(l.o)()})})}),qt=function(e){var t=e.sizeStr,n=e.color;return o.a.createElement("div",{className:"logo",style:{paddingLeft:".4em"},dangerouslySetInnerHTML:{__html:Object(l.h)({small:3,middle:4,big:5}[t],null,n)}})},Bt=function(){return o.a.createElement("div",{style:{display:"flex",height:"100%"}})},Gt=function(){return o.a.createElement("span",{style:{color:"#ccc"}},"无")};function Ht(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ht(n,!0).forEach((function(t){Wt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ht(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Wt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ut=be(Bt),Ft=function(e){var t=e.top,n=e.down,r=e.alignTopItems,a=e.ratio,i=e.padding,c=e.fullHeight,u=e.withGuideLine,l=e.style;return o.a.createElement(p,{ratio:a,top:o.a.createElement(p,{down:o.a.createElement("div",{style:{height:"100%",display:"flex",flexDirection:"column",justifyContent:"flex-end",padding:i,alignItems:r||"unset"}},t),top:u?o.a.createElement(Ut,{top:!0,bottom:!0}):null,reverse:!0}),down:o.a.createElement("div",{style:Vt({padding:i,height:c?"100%":"auto"},l)},n)})},$t=function(){return Object(l.o)()?o.a.createElement(zt,null):o.a.createElement(Ft,{top:null,down:o.a.createElement(zt,null)})};function Qt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Yt=function(e){var t=e.spinnerAtContent,n=Qt(e,["spinnerAtContent"]),r=e.spinner||(t?o.a.createElement($t,null):o.a.createElement(zt,null));return o.a.createElement(u.Query,n,(function(t){var n=t.data,o=t.loading,a=t.error;return a?":(":o?r:e.children({error:a,data:n})}))};function Kt(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query {\n    covers {\n      content_id\n      type\n      show\n    }\n  }\n"]);return Kt=function(){return e},e}var Xt=f()(Kt()),Jt=function(e){return o.a.createElement(Yt,{query:Xt},(function(t){var n=t.data.covers.filter((function(e){return e.show}))[0];return n?e.children(n):":|"}))};function Zt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function en(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function tn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?en(n,!0).forEach((function(t){nn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):en(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function nn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function rn(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  {\n    posts(sort: "date:DESC") {\n      _id\n      title\n      date\n      content\n      photogroup {\n        title\n        _id\n      }\n    }\n  }\n']);return rn=function(){return e},e}var on=f()(rn()),an=function(e){return window.converter&&e?window.converter.makeHtml(e):e},cn=function(e){var t=e.content,n=e.date,r=e.photogroup;return tn({},e,{photogroupId:r?r._id:null,html:an(t),date:Object(l.b)(new Date(n))})},un=function(e){return o.a.createElement(Yt,{query:on,spinnerAtContent:e.spinnerAtContent},(function(t){var n=t.data;return e.children(n.posts.map((function(e){var t=e._id,n=e.date,r=e.content,o=Zt(e,["_id","date","content"]);return tn({id:t,date:n,content:an(r)},o)})).map(cn))}))};function ln(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function pn(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  {\n    photogroups {\n      _id\n      title\n      date\n      visible\n    }\n  }\n"]);return pn=function(){return e},e}var dn=f()(pn()),bn=function(e){return o.a.createElement(Yt,{query:dn},(function(t){var n=t.data;return e.children(n.photogroups.filter((function(e){return e.visible})).map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ln(n,!0).forEach((function(t){sn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ln(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({id:e._id},fn(e,["_id"]))})))}))};function yn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function vn(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  query Photogroup($id: ID!) {\n    photogroup(id: $id) {\n      post {\n        _id\n      }\n      photos(sort: "date:DESC") {\n        _id\n        title\n        date\n        content {\n          url \n        }\n      }\n    }\n  }\n']);return vn=function(){return e},e}var gn=f()(vn()),On=function(e){return o.a.createElement(Yt,{query:gn,spinner:e.spinner,variables:{id:e.id}},(function(t){var n=t.data,r=n.photogroup.photos.map((function(e){var t=e.content,n=hn(e,["content"]);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yn(n,!0).forEach((function(t){mn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yn(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({url:"https://api.zjh.im"+t.url},n)})),o=n.photogroup.post;return e.children({photos:r,post:o})}))};n("OgkG"),n("+u0c");function En(e){return(En="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wn(e){return(wn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Sn(e,t){return(Sn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var xn=function(){var e=window.innerHeight,t=(window.innerWidth-(e-100)*(1+.618))/2;return{display:"flex",width:"calc(100% - ".concat(2*t,"px)"),height:"calc(100% - ".concat(100,"px)"),margin:"".concat(50,"px ").concat(t,"px")}},_n=function(e){function t(e){var n,r,o,a,i,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=wn(t).call(this,e),n=!o||"object"!==En(o)&&"function"!=typeof o?Pn(r):o,a=Pn(n),c=function(){n.setState({style:xn()})},(i="updateStyle")in a?Object.defineProperty(a,i,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[i]=c,n.state={style:xn()},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sn(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateStyle)}},{key:"render",value:function(){var e=this.props,t=e.left,n=e.right;return o.a.createElement("div",{className:"container lr",style:this.state.style},o.a.createElement("div",{className:"left",style:{flex:.618+1}},t),o.a.createElement("div",{className:"right",style:{flex:1,overflow:"auto"}},n))}}])&&jn(n.prototype,r),a&&jn(n,a),t}(o.a.PureComponent);var Tn=n("eO8H");function kn(e){return(kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Cn(e,t){return!t||"object"!==kn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function An(e,t){return(An=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var In=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Cn(this,Dn(t).call(this,e))).state={hasError:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&An(e,t)}(t,e),n=t,(r=[{key:"componentDidCatch",value:function(e,t){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?":(":this.props.children}}])&&Nn(n.prototype,r),o&&Nn(n,o),t}(o.a.Component),Ln=n("+eFp"),Rn=n.n(Ln);n("O5PD");function Mn(e){return(Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function zn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e){return(qn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Gn(e,t){return(Gn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Hn=function(e){function t(e){var n,r,a,i,c,u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=qn(t).call(this,e),n=!a||"object"!==Mn(a)&&"function"!=typeof a?Bn(r):a,i=Bn(n),u=function(){return n.props.disableAnimation||Object(l.o)()?o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style}):o.a.createElement(Rn.a,{component:o.a.Fragment,transitionName:"example",transitionEnterTimeout:300,transitionLeaveTimeout:300},o.a.createElement(tt,{tooltip:n.props.tooltip},(function(e){var t=e.showTooltip,r=e.hideTooltip;return o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style,onMouseEnter:t,onMouseLeave:r})})))},(c="renderImg")in i?Object.defineProperty(i,c,{value:u,enumerable:!0,configurable:!0,writable:!0}):i[c]=u;var s=l.y.get(e.url);return n.state={loading:!s,error:null},n.loadImage=n.loadImage.bind(Bn(n)),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gn(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.loadImage(this.props.src)}},{key:"componentWillReceiveProps",value:function(e){this.props.src!==e.src&&this.loadImage(e.src)}},{key:"loadImage",value:function(e){var t=this,n=this.props.onLoad||l.r;if(l.y.get(e))return n(e),void this.setState({loading:!1});this.setState({loading:!0}),Object(l.i)(e).then((function(){n(e),t.setState({loading:!1})})).catch((function(e){t.setState({loading:!1,error:e})}))}},{key:"render",value:function(){return this.state.error?":(":this.state.loading&&!this.props.loaded?!this.props.hideSpinner&&o.a.createElement(zt,null):this.renderImg()}}])&&zn(n.prototype,r),a&&zn(n,a),t}(o.a.Component);function Vn(){return(Vn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Wn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Un(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Fn=function(e){var t=e.photo,n=e.className,a=e.showTitle,i=Un(e,["photo","className","showTitle"]),c=Wn(Object(r.useState)(!0),2),u=c[0],l=c[1];return o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-content"},o.a.createElement(Hn,Vn({src:t.url,onLoad:function(){l(!1)}},i,{tooltip:t.title}),o.a.createElement("div",{className:"image-title",style:{color:"#fff"}},t.title)),a&&!u&&o.a.createElement("div",{className:"photo-title"},t.title||"-")))};function $n(){return($n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Qn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Yn=ve((function(e){var t=e.id,n=e.match,r=Qn(e,["id","match"]);return o.a.createElement(R,{id:t||n.params.id},(function(e){return o.a.createElement(Fn,$n({photo:e},r))}))}),ge);n("1zZr"),n("8zDj");function Kn(e){return(Kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Jn(e){return(Jn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Zn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function er(e,t){return(er=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function tr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var nr=function(e){function t(e){var n,r,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=Jn(t).call(this,e),n=!a||"object"!==Kn(a)&&"function"!=typeof a?Zn(r):a,tr(Zn(n),"renderTick",(function(){var e=n.state.currentIndex,t=n.props.photos,r=n.props.post&&n.props.post._id,a=t.length,i=function(e){var t=e.id;return o.a.createElement("div",{className:"link-to-post"},o.a.createElement("div",{onClick:function(){wt(t)}}))},c=ve((function(e){return[n.props.post?o.a.createElement(i,{id:r}):null,o.a.createElement(He,e)]}),ge);n.props.setSideSpaceContent(o.a.createElement(c,{current:e+1,total:a,onDrop:Object(l.z)(n.goto,300),onClick:Object(l.z)(n.next,300),absRight:!0}))})),tr(Zn(n),"handleCurrentImgLoad",(function(){n.setState({isCurrentImgReady:!0},(function(){n.props.thumbnailMode||n.renderTick()}))})),tr(Zn(n),"preLoadPhotos",(function(e){e.map(l.i)})),tr(Zn(n),"nextIndex",(function(e){return e+1<=n.props.photos.length-1?e+1:0})),tr(Zn(n),"goto",(function(e){console.log("goto"),n.props.photos.length&&n.setState({currentIndex:e-1},n.renderTick)})),tr(Zn(n),"next",(function(){if(console.log("next"),n.props.photos.length){n.setState({isCurrentImgReady:!1});var e=n.props.photos.length;n.state.currentIndex<e-1?n.setState((function(e){return{currentIndex:e.currentIndex+1}}),n.renderTick):n.setState({currentIndex:0},n.renderTick)}})),n.state={currentIndex:0,isCurrentImgReady:!1},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&er(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props.photos.map((function(e){return e.url}));this.preLoadPhotos(e)}},{key:"componentWillUnmount",value:function(){this.props.setSideSpaceContent(null)}},{key:"render",value:function(){var e=this.state.currentIndex,t=this.props.photos,n=t.length,r=n>1;return t&&t.length?o.a.createElement("div",{className:"photos",style:{maxWidth:this.props.thumbnailMode?30:"unset"},"data-prog":"".concat(e+1," of ").concat(t.length)},o.a.createElement(Fn,{photo:t[e],onLoad:this.handleCurrentImgLoad,onClick:r?Object(l.z)(this.next,300):l.r,style:{cursor:r?"pointer":"default"},hideSpinner:this.props.hideSpinner}),this.props.showNextThumbnail&&r&&this.state.isCurrentImgReady&&o.a.createElement("div",{className:"thumbnail-progress-wrapper"},o.a.createElement(Fn,{photo:t[this.nextIndex(e)],className:me()("thumbnail",{hide:!this.state.isCurrentImgReady}),disableAnimation:!0,onClick:r?Object(l.z)(this.next,300):l.r,style:{cursor:r?"pointer":"default"},hideSpinner:!0}),Object(l.o)()&&o.a.createElement(We,{current:e+1,total:n}))):":( not found"}}])&&Xn(n.prototype,r),a&&Xn(n,a),t}(o.a.Component),rr=te(nr);function or(){return(or=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ar(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ir=function(e){var t=e.id,n=e.match,r=ar(e,["id","match"]),a=re(O.ENABLE_IMAGES_FLOW).status&&!e.thumbnailMode||Object(l.o)();return o.a.createElement(On,{id:t||n.params.id,spinner:r.spinner},(function(e){var t=e.photos,n=e.post;return a?t.map((function(e){return o.a.createElement(Fn,{className:"photo-in-waterfall",disableAnimation:!0,showTitle:!0,photo:e})})):o.a.createElement(rr,or({post:n,photos:t,showNextThumbnail:!0},r))}))},cr=ve(ir,ge),ur=function(e){var t=e.id,n=ar(e,["id"]);return o.a.createElement(ir,or({id:t,showNextThumbnail:!1,thumbnailMode:!0},n))};function lr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var fr=function(e){return o.a.createElement("div",{className:"photos-attachment",onClick:function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";jt("".concat(x,"/").concat(e))}(e.id)}},o.a.createElement(ur,{id:e.id,hideSpinner:Object(l.o)(),spinner:o.a.createElement(zt,{absCenter:!1})}))},pr=function(e){var t=e.post,n=e.className,r=e.totalLen,a=e.index,i=e.next,c=e.disableTick;return Object(l.o)()?o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-title"},t.title),o.a.createElement("div",{className:"post-content markdown-body",dangerouslySetInnerHTML:{__html:t.html}}),o.a.createElement("div",{className:"post-date"},t.date)):(Pt(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lr(n,!0).forEach((function(t){sr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{currentPageIndex:a}),{disableAllBtns:c}),o.a.createElement(Ft,{top:[t.title,!c&&o.a.createElement(We,{total:r,current:a,onClick:i,fixedTop:!0})],padding:"0 10px",down:o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-content markdown-body",dangerouslySetInnerHTML:{__html:t.html}}),o.a.createElement("div",{className:"post-date"},t.date),t.photogroupId&&o.a.createElement(fr,{id:t.photogroupId}))}))};function dr(){return(dr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function br(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var yr,mr=function(e){var t=e.id,n=e.classNames,r=e.match,a=t||r.params.id;return o.a.createElement(un,{id:a,spinnerAtContent:!0},(function(e){var t=e.findIndex((function(e){return e.id===a}));return o.a.createElement(vt,{data:e,pageSize:1,currentPageIndex:t+1,infiniteLoopMode:!0},(function(e){var t=e.currentPageData,a=e.currentPageIndex,i=e.totalPages,c=e.next,u=br(e,["currentPageData","currentPageIndex","totalPages","next"]);return o.a.createElement(pr,dr({next:c,totalLen:i,index:a,post:t[0],className:n,disableTick:!r},u))}))}))};function hr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var vr=(hr(yr={},h.cover.type.photo.value,(function(e){var t=e.id;return Object(l.o)()?o.a.createElement("div",{className:"mobile-cover"},o.a.createElement(Yn,{id:t})):o.a.createElement(Yn,{id:t,className:"cover-image"})})),hr(yr,h.cover.type.story.value,(function(e){var t=e.id;return o.a.createElement(mr,{id:t,className:"cover-story"})})),yr),gr=function(){return o.a.createElement(Jt,null,(function(e){var t=e.type,n=e.content_id,r=vr[t];return o.a.createElement(r,{id:n})}))};n("A21b");function Or(e){return(Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function jr(e){return(jr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Pr(e,t){return(Pr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Sr,xr=function(e){var t=e.item;return o.a.createElement(pr,{post:t})},_r=function(e){var t=e.item;return o.a.createElement(Tn.Link,{key:t.id,to:"".concat(w,"/").concat(t.id)},t.title)},Tr=function(){return o.a.createElement(un,null,(function(e){return o.a.createElement(ct,{className:"post-list mobile-posts",data:e,itemRenderer:xr})}))},kr=function(e){var t=e.currentPageIndex,n=e.totalPages,r=e.next;return Pt(e,{disableListBtn:!0}),o.a.createElement(We,{current:t,total:n,onClick:r,fixedTop:!0})},Nr=function(e){function t(){var e,n,r,a,i,c,u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var l=arguments.length,s=new Array(l),f=0;f<l;f++)s[f]=arguments[f];return r=this,n=!(a=(e=jr(t)).call.apply(e,[this].concat(s)))||"object"!==Or(a)&&"function"!=typeof a?wr(r):a,i=wr(n),u=function(){return o.a.createElement(un,null,(function(e){return o.a.createElement(Tn.HashRouter,null,o.a.createElement(Ot,{pagingOption:{data:e,pageSize:10,infiniteLoopMode:!0},listOption:{className:"post-list pc",itemRenderer:_r}},(function(e){return o.a.createElement(kr,e)})))}))},(c="renderList")in i?Object.defineProperty(i,c,{value:u,enumerable:!0,configurable:!0,writable:!0}):i[c]=u,n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pr(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(Ft,{top:"文字",down:this.renderList(),padding:"0 10px"})}}])&&Er(n.prototype,r),a&&Er(n,a),t}(o.a.PureComponent),Cr=function(){return Object(l.o)()?o.a.createElement(Tr,null):o.a.createElement(Nr,null)},Dr=function(){return o.a.createElement(mr,{id:"5d920090a589b4121dd2be60"})},Ar=function(e){var t=e.customItemRenderer,n=function(e){var t=e.item;return o.a.createElement(Tn.Link,{key:t.id,to:"".concat(x,"/").concat(t.id)},t.title)};return o.a.createElement(bn,null,(function(e){return o.a.createElement(Tn.HashRouter,null,o.a.createElement(ct,{data:e,className:"photo-group-title-list",itemRenderer:t||n}))}))},Ir=function(){return o.a.createElement(bn,null,(function(e){return o.a.createElement(Lt,{wrapperSelector:".menu-panel:nth-child(3) .panel",bufferDistance:500},e.map((function(e){var t=e.id;return o.a.createElement(ir,{id:t})})))}))},Lr=function(){return Object(l.o)()?o.a.createElement("div",{className:"photo-group-title-list"},o.a.createElement(Ir,null)):o.a.createElement(Ft,{top:"相片",down:o.a.createElement(Ar,null),padding:"0 10px"})};n("DeO4");function Rr(e){return(Rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mr(){return(Mr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function zr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Br(e){return(Br=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Gr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Hr(e,t){return(Hr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Vr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Wr(){var e=Fr(["\n      query Post($id: ID!) {\n        post(id: $id) {\n          _id\n          title\n        }\n      }\n    "]);return Wr=function(){return e},e}function Ur(){var e=Fr(["\n      query Photo($id: ID!) {\n        photo(id: $id) {\n          _id\n          title\n        }\n      }\n    "]);return Ur=function(){return e},e}function Fr(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var $r,Qr=(Vr(Sr={},m.photo.value,{query:f()(Ur()),key:"photo"}),Vr(Sr,m.story.value,{query:f()(Wr()),key:"post"}),Sr),Yr=($r=function(e){var t=e.loading,n=e.data,a=o.a.createElement(Et,{className:"diff-content-list",data:n,itemRenderer:function(e){var t=e.item;return o.a.createElement(Tn.Link,{key:t.id,to:t.url,className:me()({photo:t.type===m.photo.value,story:t.type===m.story.value}),onClick:function(){!function(e){var t;switch(e.type){case m.story.value:return t=e.id,void F(t,E);case m.photo.value:!function(e,t){F(e,W("client",t))}(e.id,e.photoGroupId)}}(t)}},t.title)}}),i=Object(r.useContext)(ee)[O.ENABLE_UPDATES_ENTRY];return t?o.a.createElement($t,null):o.a.createElement(Ft,{top:"更新",down:i?o.a.createElement(Tn.HashRouter,null,a):o.a.createElement(Bt,null),padding:"0 10px"})},function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),c=0;c<a;c++)i[c]=arguments[c];return r=this,o=(e=Br(t)).call.apply(e,[this].concat(i)),n=!o||"object"!==Rr(o)&&"function"!=typeof o?Gr(r):o,Vr(Gr(n),"state",{loading:!0,err:null,data:[]}),Vr(Gr(n),"formatResp",(function(e){return e.map((function(e,t){var r=n.META_INFO[t].type,o=Qr[r].key;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zr(n,!0).forEach((function(t){Vr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zr(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e.data[o]||{},{},n.META_INFO[t])}))})),Vr(Gr(n),"queryData",(function(){var e=Y();return n.META_INFO=e,Promise.all(e.map((function(e){var t=e.id,n=e.type;return Co.query({query:Qr[n].query,variables:{id:t}})})))})),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Hr(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;this.queryData().then((function(t){e.setState({data:e.formatResp(t),loading:!1})})).catch((function(t){e.setState({loading:!1,err:t})}))}},{key:"render",value:function(){var e=this.state,t=e.data,n=e.loading,r=e.err;return o.a.createElement($r,Mr({},this.props,{data:t,error:r,loading:n}))}}])&&qr(n.prototype,r),a&&qr(n,a),t}(o.a.PureComponent));function Kr(){return(Kr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Xr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Jr=function(e){var t=e.to,n=e.onClick,r=Xr(e,["to","onClick"]);return o.a.createElement(Tn.Route,{path:t,children:function(e){var a=e.match;return o.a.createElement("li",{className:a?"active":"",onClick:n||function(){}},o.a.createElement(Tn.Link,Kr({to:t},r)))}})};n("AdgS");function Zr(){return(Zr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function eo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function to(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var no=function(){var e=to(Object(r.useState)(!0),2),t=e[0],n=e[1],a=Object(r.useContext)(Z).setLeftSpaceContent;return Object(r.useEffect)((function(){a(t?"":o.a.createElement(ro,null))}),[t]),o.a.createElement("span",{onClick:function(){return n(!t)},style:{cursor:"pointer"},className:me()("setting-button",{closed:!t})},t?o.a.createElement(Ue,null,"设置"):o.a.createElement(Ue,null,"关闭"))},ro=(n("gy2t"),function(){var e=re(O.SHOW_SPACE_GUIDELINE),t=e.toggle,n=e.status,a=Object(r.useContext)(Z).destroyAllSpace,i=re(O.ENABLE_PAGING_NAV_BTN),c=i.status,u=i.toggle,l=re(O.ENABLE_UPDATES_ENTRY),s=l.status,f=l.toggle,p=re(O.ENABLE_IMAGES_FLOW),d=p.status,b=p.toggle,y=[o.a.createElement(Mt,{label:"最近更新",defaultValue:s,onClick:f}),o.a.createElement(Mt,{label:"布局网格",onClick:t,defaultValue:n}),o.a.createElement(Mt,{label:"导航按钮",onClick:u,defaultValue:c}),o.a.createElement(Mt,{label:"图片瀑布",onClick:b,defaultValue:d})],m=[o.a.createElement(Tn.HashRouter,null,o.a.createElement(Tn.Link,{to:P},"关于")),o.a.createElement(ot,{className:"version",text:"版本：v"+A.version,href:A.gitURL}),o.a.createElement("div",{onClick:a,className:"exit-blog"},"退出博客")];return o.a.createElement(Ft,{fullHeight:!0,down:o.a.createElement("div",{className:"setting-panel"},o.a.createElement(ct,{data:y,itemRenderer:function(e){return e.item}}),o.a.createElement(ct,{className:"bottom-setting-list",data:m,itemRenderer:function(e){return e.item}}))})}),oo=(n("AAEI"),Object(l.o)()?function(){var e=eo(Object(r.useState)(!0),2),t=e[0],n=e[1],a=t?{"data-close":!0}:{},i=function(){n(!0)};return o.a.createElement(Tn.HashRouter,null,o.a.createElement("div",{className:me()("top-bar",{close:t})},o.a.createElement(Tn.Link,{to:N},o.a.createElement("div",{className:"logo",dangerouslySetInnerHTML:{__html:Object(l.h)()},onClick:i})),o.a.createElement("ul",Zr({className:"mobile nav"},a,{onClick:function(e){e.stopPropagation(),t&&n(!1)}}),o.a.createElement(Jr,{onClick:i,to:x},"JPG"),o.a.createElement(Jr,{onClick:i,to:w},"TXT"))))}:function(){var e=[{text:o.a.createElement(Ue,null,"福福"),href:"https://fufu.im",className:"license"},{customRenderer:function(){return o.a.createElement(no,null)}}],t=[{type:"link",text:o.a.createElement(Ue,null,"文字"),route:w},{type:"link",text:o.a.createElement(Ue,null,"相片"),route:x}];Object(r.useContext)(ee)[O.ENABLE_UPDATES_ENTRY]&&t.push({type:"link",text:o.a.createElement(Ue,null,"最近更新"),route:k});var n=o.a.createElement(ct,{data:e,className:"footer",itemRenderer:function(e){var t=e.item;return t.customRenderer?t.customRenderer():o.a.createElement(ot,t)}});return o.a.createElement(Ft,{alignTopItems:"center",withGuideLine:!0,fullHeight:!0,top:o.a.createElement("div",{className:"logo-wrapper"},o.a.createElement(Tn.HashRouter,null,o.a.createElement(Tn.Link,{to:N},o.a.createElement(qt,null)))),down:o.a.createElement(Tn.HashRouter,null,o.a.createElement("div",{className:"nav pc"},o.a.createElement(ct,{top:!0,data:t,itemRenderer:function(e){var t=e.item;return o.a.createElement(Jr,{to:t.route},t.text)}}),n))})}),ao=function(){return o.a.createElement(Tn.HashRouter,null,o.a.createElement(In,null,o.a.createElement(Tn.Route,{path:T,component:Yn}),o.a.createElement(Tn.Route,{path:S,component:mr})))},io=function(){return o.a.createElement(Tn.HashRouter,null,o.a.createElement(In,null,o.a.createElement(Tn.Route,{exact:!0,path:N,component:gr}),o.a.createElement(Tn.Route,{path:w,exact:!0,component:Cr}),o.a.createElement(Tn.Route,{path:x,exact:!0,component:Lr}),o.a.createElement(Tn.Route,{path:_,component:cr}),o.a.createElement(Tn.Route,{path:k,component:Yr}),o.a.createElement(Tn.Route,{path:T,component:Yn}),o.a.createElement(Tn.Route,{path:S,component:mr}),o.a.createElement(Tn.Route,{path:P,component:Dr})))},co=n("vRGJ"),uo=n.n(co),lo={},so=0,fo=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=lo[n]||(lo[n]={});if(r[e])return r[e];var o=[],a={re:uo()(e,o,t),keys:o};return so<1e4&&(r[e]=a,so++),a},po=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,a=r.exact,i=void 0!==a&&a,c=r.strict,u=void 0!==c&&c,l=r.sensitive,s=void 0!==l&&l;if(null==o)return n;var f=fo(o,{end:i,strict:u,sensitive:s}),p=f.re,d=f.keys,b=p.exec(e);if(!b)return null;var y=b[0],m=b.slice(1),h=e===y;return i&&!h?null:{path:o,url:"/"===o&&""===y?"/":y,isExact:h,params:d.reduce((function(e,t,n){return e[t.name]=m[n],e}),{})}};n("dj+h");function bo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var yo=function(e){var t=e.onClick,n=e.className,r=document.querySelector(".menu-panel.active .panel"),a=bo(Ct(r),1)[0];return o.a.createElement("button",{type:"button",className:me()("menu-button",n,{hidden:"DOWN"===a}),onClick:t,onTouchStart:""})};yo.propTypes={onClick:Ee.a.func.isRequired,className:Ee.a.string.isRequired};var mo=function(e){var t=e.children,n=e.titles,a=e.activePanelIndex;if(!t.length)return null;var i=bo(Object(r.useState)(!1),2),c=i[0],u=i[1],l=bo(Object(r.useState)(a),2),s=l[0],f=l[1],p=(window.innerWidth-100)/t.length;return o.a.createElement("div",{"data-active-panel":s,className:me()("menu-panel-container",{open:c})},t.map((function(e,r){var a,i=r===t.length-1,l=c?r*p:0;return a=null!==s?s===r?{top:0,left:0}:{top:"calc(100% + 20px)",left:r*p}:{top:l,left:l},o.a.createElement("div",{tabIndex:-1,role:"button",className:me()("menu-panel",{last:i,active:s===r}),onTouchStart:"",onClick:function(){f(r),setTimeout((function(){u(!1)}),700)},onKeyPress:function(){},style:a},o.a.createElement("div",{className:"panel"},o.a.createElement("div",{className:"panel-title"},n[r]),(s===r||i)&&e))})),o.a.createElement(yo,{className:me()({hidden:c}),onClick:function(){if(!c){setTimeout((function(){f(null),u(!c)}),300)}}}))};mo.propTypes={titles:Ee.a.arrayOf(Ee.a.string)},mo.defaultProps={titles:[]};var ho=mo,vo=function(){var e=location.hash.replace("#",""),t=po(e,{path:T})||po(e,{path:S});return o.a.createElement(ho,{activePanelIndex:t?0:null,titles:["","关于","照片","文章","封面"]},o.a.createElement(ao,null),o.a.createElement("div",null,o.a.createElement(ot,{className:"version",text:"v"+A.version,href:A.gitURL}),o.a.createElement(Dr,null)),o.a.createElement(Lr,null),o.a.createElement(Cr,null),o.a.createElement(gr,null))};function go(e){return(go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Eo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Oo(n,!0).forEach((function(t){xo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Oo(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function jo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wo(e){return(wo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Po(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function So(e,t){return(So=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _o=be(_n),To=be(oo),ko=be(Bt),No=function(e){function t(){var e,n,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,c=new Array(i),u=0;u<i;u++)c[u]=arguments[u];return r=this,a=(e=wo(t)).call.apply(e,[this].concat(c)),n=!a||"object"!==go(a)&&"function"!=typeof a?Po(r):a,xo(Po(n),"state",Eo({sideSpaceContent:null,leftSpaceContent:null},H())),xo(Po(n),"toggleSpaceGuideLine",(function(e){n.setState({showSpaceGuideLine:e},(function(){localStorage.setItem(O.SHOW_SPACE_GUIDELINE,e)}))})),xo(Po(n),"setSpaceContext",(function(e,t){n.setState(xo({},e,t))})),xo(Po(n),"setLocalStorageVal",(function(e,t){n.setState(xo({},e,t),(function(){localStorage.setItem(e,t)}))})),xo(Po(n),"getLocalStorageVal",(function(e){return n.state[e]})),xo(Po(n),"providerLayer",(function(e){return o.a.createElement(Z.Provider,{value:{setLeftSpaceContent:function(e){n.setSpaceContext("leftSpaceContent",e)},setSideSpaceContent:function(e){n.setSpaceContext("sideSpaceContent",e)},destroyAllSpace:function(){n.props.exit()},toggleSpaceGuideLine:n.toggleSpaceGuideLine,showSpaceGuideLine:n.state.showSpaceGuideLine}},o.a.createElement(ee.Provider,{value:Eo({},V(n.state),{getLocalStorageVal:n.getLocalStorageVal,setLocalStorageVal:n.setLocalStorageVal})},e))})),xo(Po(n),"renderPcView",(function(){var e=be((function(){return n.state.sideSpaceContent}));return n.providerLayer(o.a.createElement(_o,{top:!0,bottom:!0,left:o.a.createElement(he,{cols:[n.state.leftSpaceContent,o.a.createElement(To,{right:!0,left:!0}),n.state.sideSpaceContent?o.a.createElement(e,{right:!0}):o.a.createElement(ko,{right:!0})]}),right:o.a.createElement(io,null)}))})),xo(Po(n),"renderMobileView",(function(){return n.providerLayer(o.a.createElement(vo,null))})),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&So(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=Object(l.o)();return o.a.createElement("div",{className:me()("App",{mobile:e})},e?this.renderMobileView():this.renderPcView())}}])&&jo(n.prototype,r),a&&jo(n,a),t}(r.Component);n.d(t,"APOLLO_CLIENT",(function(){return Co}));var Co=new c.default({uri:"https://api.zjh.im/graphql"}),Do=function(e){var t=e.exit;return o.a.createElement(u.ApolloProvider,{client:Co},o.a.createElement(No,{exit:t}))},Ao=function(e,t,n){t?i.a.unmountComponentAtNode(e):i.a.render(o.a.createElement(Do,{exit:n}),e)},Io=function(e){var t=g.map((function(e){return function(){return Co.query({query:gn,variables:{id:e}})}}));return Object(l.t)(t,(function(t,n){!function(e,t){if(e&&e.data&&e.data.photogroup&&e.data.photogroup.photos.length){var n=function(e){return W(e,t)},r=e.data.photogroup.photos.map((function(e){return e._id})),o=localStorage.getItem(n("client"));localStorage.setItem(n(o?"server":"client"),r)}}(n,g[t]),e(t)}))};t.default={shortopts:"e",handler:function(){var e,t,n,r,o,a,i=arguments;return regeneratorRuntime.async((function(c){for(;;)switch(c.prev=c.next){case 0:if(e=i.length>0&&void 0!==i[0]?i[0]:{},i.length>1?i[1]:void 0,i.length>2?i[2]:void 0,i.length>3?i[3]:void 0,t=i.length>4?i[4]:void 0,n=e.e,r=Object(l.a)("#gui"),o=document.body,!n){c.next=15;break}return Ao(r,n),r.classList.remove("blog"),o.classList.remove("white-bg"),c.abrupt("return","Goodbye");case 15:if(!Object(l.n)(r)){c.next=34;break}return o.classList.add("white-bg"),c.next=19,regeneratorRuntime.awrap(Co.query({query:Xt}));case 19:return c.next=21,regeneratorRuntime.awrap(Co.query({query:L,variables:{id:m.photo.defaultContentValue}}));case 21:return t("加载博客配置 [DONE]",!0),c.next=24,regeneratorRuntime.awrap(Co.query({query:on}));case 24:return a=c.sent,U(a),t("加载博文目录 [DONE]",!0),c.next=29,regeneratorRuntime.awrap(Co.query({query:dn}));case 29:return t("加载照片目录 [DONE]",!0),c.next=32,regeneratorRuntime.awrap(Io((function(e){var n="".concat(Math.floor((e+1)/g.length*100),"%");t("加载照片信息 [".concat(n,"]"),!0)})));case 32:return r.classList.add("blog"),c.abrupt("return",new Promise((function(e,t){Ao(r,null,(function(){e(),setTimeout((function(){Terminal.exec("blog -e")}))}))})));case 34:case"end":return c.stop()}}))}}},"dj+h":function(e,t,n){},gy2t:function(e,t,n){},hUxU:function(e,t,n){},"q5+k":function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=void 0;var o,a=r(n("Bp9Y")),i="clearTimeout",c=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-l)),r=setTimeout(e,n);return l=t,r},u=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};a.default&&["","webkit","moz","o","ms"].some((function(e){var t=u(e,"request");if(t in window)return i=u(e,"cancel"),c=function(e){return window[t](e)}}));var l=(new Date).getTime();(o=function(e){return c(e)}).cancel=function(e){window[i]&&"function"==typeof window[i]&&window[i](e)};var s=o;t.default=s,e.exports=t.default},r8OW:function(e,t,n){},vzVe:function(e,t,n){},xU8c:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,c,u,l,s,f,p,d,b,y=r(n("Bp9Y")),m="transform";if(t.transform=m,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=s,t.transitionTiming=l,t.transitionDuration=u,t.transitionProperty=c,t.animationDelay=b,t.animationTiming=d,t.animationDuration=p,t.animationName=f,y.default){var h=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),a="",i=0;i<o.length;i++){var c=o[i];if(c+"TransitionProperty"in n){a="-"+c.toLowerCase(),e=r[c]("TransitionEnd"),t=r[c]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=h.prefix,t.transitionEnd=a=h.transitionEnd,t.animationEnd=i=h.animationEnd,t.transform=m=o+"-"+m,t.transitionProperty=c=o+"-transition-property",t.transitionDuration=u=o+"-transition-duration",t.transitionDelay=s=o+"-transition-delay",t.transitionTiming=l=o+"-transition-timing-function",t.animationName=f=o+"-animation-name",t.animationDuration=p=o+"-animation-duration",t.animationTiming=d=o+"-animation-delay",t.animationDelay=b=o+"-animation-timing-function"}var v={transform:m,end:a,property:c,timing:l,delay:s,duration:u};t.default=v},xfxO:function(e,t,n){"use strict";t.__esModule=!0,t.nameShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};o(n("q1tI"));var r=o(n("17x9"));function o(e){return e&&e.__esModule?e:{default:e}}t.nameShape=r.default.oneOfType([r.default.string,r.default.shape({enter:r.default.string,leave:r.default.string,active:r.default.string}),r.default.shape({enter:r.default.string,enterActive:r.default.string,leave:r.default.string,leaveActive:r.default.string,appear:r.default.string,appearActive:r.default.string})])},yD6e:function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},ycFn:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n("yD6e"));e.exports=t.default},zB99:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=p(n("ycFn")),a=p(n("VOcB")),i=p(n("q5+k")),c=n("xU8c"),u=p(n("q1tI")),l=p(n("17x9")),s=n("i8i4"),f=n("xfxO");function p(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var b=[];c.transitionEnd&&b.push(c.transitionEnd),c.animationEnd&&b.push(c.animationEnd);l.default.node,f.nameShape.isRequired,l.default.bool,l.default.bool,l.default.bool,l.default.number,l.default.number,l.default.number;var y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=d(this,e.call.apply(e,[this].concat(a))),r.componentWillAppear=function(e){r.props.appear?r.transition("appear",e,r.props.appearTimeout):e()},r.componentWillEnter=function(e){r.props.enter?r.transition("enter",e,r.props.enterTimeout):e()},r.componentWillLeave=function(e){r.props.leave?r.transition("leave",e,r.props.leaveTimeout):e()},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach((function(e){clearTimeout(e)})),this.classNameAndNodeQueue.length=0},t.prototype.transition=function(e,t,n){var r=(0,s.findDOMNode)(this);if(r){var i=this.props.name[e]||this.props.name+"-"+e,u=this.props.name[e+"Active"]||i+"-active",l=null,f=void 0;(0,o.default)(r,i),this.queueClassAndNode(u,r);var p=function(e){e&&e.target!==r||(clearTimeout(l),f&&f(),(0,a.default)(r,i),(0,a.default)(r,u),f&&f(),t&&t())};n?(l=setTimeout(p,n),this.transitionTimeouts.push(l)):c.transitionEnd&&(f=function(e,t){return b.length?b.forEach((function(n){return e.addEventListener(n,t,!1)})):setTimeout(t,0),function(){b.length&&b.forEach((function(n){return e.removeEventListener(n,t,!1)}))}}(r,p))}else t&&t()},t.prototype.queueClassAndNode=function(e,t){var n=this;this.classNameAndNodeQueue.push({className:e,node:t}),this.rafHandle||(this.rafHandle=(0,i.default)((function(){return n.flushClassNameAndNodeQueue()})))},t.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach((function(e){e.node.scrollTop,(0,o.default)(e.node,e.className)})),this.classNameAndNodeQueue.length=0,this.rafHandle=null},t.prototype.render=function(){var e=r({},this.props);return delete e.name,delete e.appear,delete e.enter,delete e.leave,delete e.appearTimeout,delete e.enterTimeout,delete e.leaveTimeout,delete e.children,u.default.cloneElement(u.default.Children.only(this.props.children),e)},t}(u.default.Component);y.displayName="CSSTransitionGroupChild",y.propTypes={},t.default=y,e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaW5ET00uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYWluLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9sYXlvdXQvZ29sZGVuX3JhdGlvX3RvcF9kb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb25maWcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbnRhaW5lcnMvcGhvdG8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29udGV4dC9zcGFjZV9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9hdHRhY2hfZ3VpZGVfbGluZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2NvbHVtbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xheW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2NvbnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3Byb2dyZXNzX2luZGljYXRvci9kcmFnX3RpY2tfaW5kaWNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3Byb2dyZXNzX2luZGljYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3VzdG9tX2ZvbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2J1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3Vyc29yX3Rvb2xsdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9jdXN0b21fbGluay9iYXNlX2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvYmFzZV9saXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9wYWdpbmdfc3RhdGVfbWFuYWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGlzdC9wYWdpbmdfbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGlzdC9sZXR0ZXJfcGFwZXJfbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvY29tbW9uX2hvb2tzL3VzZV9zcGFjZV9mb3JfbmF2X2J0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvY29tbW9uX2hvb2tzL3VzZV9zY3JvbGxfZGlyZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL2NvbW1vbl9ob29rcy91c2Vfc2Nyb2xsX3N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbW91bnRfb25fc2Nyb2xsX3RvX2JvdHRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvcmFkaW9fYnRuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9zcGlubmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9sb2dvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2Jsb2dfdG9wX2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3NwaW5uZXIvcG9zaXRpb25lZF9zcGlubmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9xdWVyeV93aXRoX3NwaW5uZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbnRhaW5lcnMvY292ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbnRhaW5lcnMvcG9zdF9saXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb250YWluZXJzL3Bob3RvX2dyb3Vwcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29udGFpbmVycy9waG90b19ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2xyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9sYXlvdXQvdGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2Vycm9yX2JvdW5kYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL0ltZy9pbWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG8vcGhvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG9zL3Bob3Rvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9waG90b2dyb3VwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3Bvc3QvcG9zdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9wb3N0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL2hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcG9zdF9saXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL2Fib3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3Bob3RvX2dyb3Vwcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29udGFpbmVycy9kaWZmX2NvbnRlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvZGlmZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9uYXYvbGlzdF9pdGVtX2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvc2V0dGluZ3MvYnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3NldHRpbmdzL3NldHRpbmdfcGFuZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvbmF2L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL25hdi9tb2JpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvbmF2L3BjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL21lbnVfcGFuZWwvaW5kZXguanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9tb2JpbGVfYXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb25Hcm91cENoaWxkLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcHJvcFR5cGVzMiIsIl9UcmFuc2l0aW9uR3JvdXAyIiwiX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkMiIsIl9Qcm9wVHlwZXMiLCJvYmoiLCJkZWZhdWx0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJuYW1lU2hhcGUiLCJpc1JlcXVpcmVkIiwiYm9vbCIsInRyYW5zaXRpb25UaW1lb3V0IiwiQ1NTVHJhbnNpdGlvbkdyb3VwIiwiX1JlYWN0JENvbXBvbmVudCIsIl90ZW1wIiwiX3RoaXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJjb25jYXQiLCJfd3JhcENoaWxkIiwiY2hpbGQiLCJjcmVhdGVFbGVtZW50IiwibmFtZSIsInByb3BzIiwidHJhbnNpdGlvbk5hbWUiLCJhcHBlYXIiLCJ0cmFuc2l0aW9uQXBwZWFyIiwiZW50ZXIiLCJ0cmFuc2l0aW9uRW50ZXIiLCJsZWF2ZSIsInRyYW5zaXRpb25MZWF2ZSIsImFwcGVhclRpbWVvdXQiLCJ0cmFuc2l0aW9uQXBwZWFyVGltZW91dCIsImVudGVyVGltZW91dCIsInRyYW5zaXRpb25FbnRlclRpbWVvdXQiLCJsZWF2ZVRpbWVvdXQiLCJ0cmFuc2l0aW9uTGVhdmVUaW1lb3V0Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwicmVuZGVyIiwiY2hpbGRGYWN0b3J5IiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJtb2R1bGUiLCJnZXRDaGlsZE1hcHBpbmciLCJjaGlsZHJlbiIsInJlc3VsdCIsIl9yZWFjdCIsIkNoaWxkcmVuIiwibWFwIiwiZm9yRWFjaCIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsInByZXYiLCJuZXh0IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJwdXNoIiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwiX2RlZmF1bHQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImxlbiIsImZpbHRlciIsImZuIiwicmVkdWNlIiwiY3VycmVudCIsIl9jaGFpbkZ1bmN0aW9uMiIsIl9DaGlsZE1hcHBpbmciLCJhbnkiLCJmdW5jIiwibm9kZSIsIlRyYW5zaXRpb25Hcm91cCIsImNvbnRleHQiLCJwZXJmb3JtQXBwZWFyIiwiY29tcG9uZW50IiwiY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMiLCJjb21wb25lbnRXaWxsQXBwZWFyIiwiX2hhbmRsZURvbmVBcHBlYXJpbmciLCJiaW5kIiwiY29tcG9uZW50RGlkQXBwZWFyIiwiY3VycmVudENoaWxkTWFwcGluZyIsInBlcmZvcm1MZWF2ZSIsInBlcmZvcm1FbnRlciIsImNvbXBvbmVudFdpbGxFbnRlciIsIl9oYW5kbGVEb25lRW50ZXJpbmciLCJjb21wb25lbnREaWRFbnRlciIsImNvbXBvbmVudFdpbGxMZWF2ZSIsIl9oYW5kbGVEb25lTGVhdmluZyIsImNvbXBvbmVudERpZExlYXZlIiwia2V5c1RvRW50ZXIiLCJzZXRTdGF0ZSIsInN0YXRlIiwibmV3Q2hpbGRyZW4iLCJjaGlsZFJlZnMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJrZXlzVG9MZWF2ZSIsImNvbXBvbmVudERpZE1vdW50IiwiaW5pdGlhbENoaWxkTWFwcGluZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJuZXh0Q2hpbGRNYXBwaW5nIiwicHJldkNoaWxkTWFwcGluZyIsImhhc1ByZXYiLCJoYXNOZXh0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3RoaXMyIiwiX3RoaXMzIiwiY2hpbGRyZW5Ub1JlbmRlciIsIl9sb29wIiwiaXNDYWxsYmFja1JlZiIsInJlZiIsImZhY3RvcnlDaGlsZCIsInIiLCJjbG9uZUVsZW1lbnQiLCJyZXBsYWNlQ2xhc3NOYW1lIiwib3JpZ0NsYXNzIiwiY2xhc3NUb1JlbW92ZSIsInJlcGxhY2UiLCJSZWdFeHAiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2V0QXR0cmlidXRlIiwiYmFzZVZhbCIsInJldmVyc2UiLCJ0b3AiLCJkb3duIiwicmF0aW8iLCJjb250YWluZXJTdHlsZSIsImRpc3BsYXkiLCJwb3NpdGlvbiIsImZsZXhEaXJlY3Rpb24iLCJoZWlnaHQiLCJ3aWR0aCIsImRvd25IdCIsInRvcEh0Iiwic3R5bGUiLCJjb250ZW50VHlwZSIsInBob3RvIiwiZGVmYXVsdENvbnRlbnRWYWx1ZSIsInN0b3J5IiwiY29udGVudCIsImNvdmVyIiwidHlwZSIsIm5hdkl0ZW1UeXBlIiwicGhvdG9Hcm91cHNJZEFyciIsImxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkiLCJFTkFCTEVfVVBEQVRFU19FTlRSWSIsIkVOQUJMRV9ORVhUX1BPU1QiLCJFTkFCTEVfUEFHSU5HX05BVl9CVE4iLCJFTkFCTEVfSU1BR0VTX0ZMT1ciLCJTSE9XX1NQQUNFX0dVSURFTElORSIsImxvY2FsU3RvcmFnZURhdGFLZXkiLCJSb3V0ZXMiLCJ2ZXJzaW9uIiwicGtnSnNvbiIsInBhY2thZ2VJbmZvIiwiZ2l0VVJMIiwicXVlcnlJbWFnZSIsImdxbCIsIlBob3RvIiwicXVlcnkiLCJ2YXJpYWJsZXMiLCJpZCIsImRhdGEiLCJ1cmwiLCJ0aXRsZSIsInN0clRvQm9vbCIsInN0ciIsImxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXMiLCJyZXQiLCJlbnRyaWVzIiwidmFsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXNGcm9tIiwiYnVpbGRQaG90b0dyb3VwS2V5IiwiZW5kIiwicGhvdG9Hcm91cElkIiwic2F2ZVBvc3RzRGF0YVRvTG9jYWxTdG9yYWdlIiwicXVlcnlSZXMiLCJwb3N0cyIsImlkQXJyIiwiX2lkIiwiaGFzTG9jYWxEYXRhIiwic2V0SXRlbSIsImFwcGVuZElkVG9Mb2NhbFN0b3JhZ2UiLCJsb2NhbElkcyIsImluY2x1ZGVzIiwiZGlmZkNTSURzIiwiY2xpZW50S2V5Iiwic2VydmVyS2V5IiwiY2xpZW50U3RyIiwic2VydmVyU3RyIiwiY2xpZW50SWRzIiwic3BsaXQiLCJkaWZmQ1NQaG90b0dyb3VwIiwiZGlmZkNvbnRlbnQiLCJzaGFsbG93RmxhdHRlbiIsIlNwYWNlQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInJlc2V0U3BhY2UiLCJzZXRTaWRlU3BhY2VDb250ZW50IiwiTG9jYWxTdG9yYWdlQ29udGV4dCIsIldpdGhTcGFjZUNvbnRleHRIT0MiLCJDb25zdW1lciIsInNwYWNlQ29udGV4dCIsInVzZVNwYWNlQ29udGVudCIsInJlcmVuZGVyVHJpZ2dlciIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VQcmVmZXJlbmNlIiwibG9jYWxTdG9yYWdlQ29udGV4dCIsInN0YXR1cyIsInRvZ2dsZSIsInNldExvY2FsU3RvcmFnZVZhbCIsIkRFRkFVTFRfR1VJREVMSU5FX0NPTE9SIiwiV2l0aEd1aWRlTGluZUJhc2VIT0MiLCJzaG93IiwiUmVhY3REb20iLCJyZW5kZXJHdWlkZUxpbmVzIiwiJHJvb3REb20iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCIkY29udGFpbmVyIiwicmVjdE9iaiIsInNob3dTcGFjZUd1aWRlTGluZSIsInNob3dUb3BMaW5lIiwic2hvd0JvdExpbmUiLCJib3R0b20iLCJzaG93TGVmdExpbmUiLCJsZWZ0Iiwic2hvd1JpZ2h0TGluZSIsInJpZ2h0IiwiY29sb3IiLCJjb21tb25HdWlkZUxpbmVTdHlsZSIsImJhY2tncm91bmQiLCJ6SW5kZXgiLCJob3Jpekd1aWRlTGluZVN0eWxlIiwidmVydGlHdWlkZUxpbmVTdHlsZSIsImZpbmRET01Ob2RlIiwiYm9keSIsImFwcGVuZENoaWxkIiwiaGFuZGxlUmVzaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwibmV4dENvbnRleHQiLCJQdXJlQ29tcG9uZW50IiwiV2l0aEd1aWRlTGluZSIsIkNvbXAiLCJjb2xzIiwiY29sIiwiZmxleCIsIkNvbXBPZmZzZXQiLCJyZXRDb21wIiwiaXNNb2JpbGUiLCJCSUdfUkFUSU8iLCJHT0xERU5fUkFUSU8iLCJUYWtlVW50aWxPcGVyYXRvciIsIm5vdGlmaWVyIiwic3Vic2NyaWJlciIsInRha2VVbnRpbFN1YnNjcmliZXIiLCJub3RpZmllclN1YnNjcmlwdGlvbiIsInN1YnNjcmliZVRvUmVzdWx0Iiwic2VlblZhbHVlIiwiYWRkIiwic3Vic2NyaWJlIiwiX3N1cGVyIiwiVGFrZVVudGlsU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwibm90aWZ5TmV4dCIsIm91dGVyVmFsdWUiLCJpbm5lclZhbHVlIiwib3V0ZXJJbmRleCIsImlubmVySW5kZXgiLCJpbm5lclN1YiIsImNvbXBsZXRlIiwibm90aWZ5Q29tcGxldGUiLCJPdXRlclN1YnNjcmliZXIiLCJyYW5nZSIsIm51bSIsImtleXMiLCJwb2ludGVyRXZlbnQkIiwiU3ViamVjdCIsIlRpY2tJbmRpY2F0b3IiLCJ5IiwiaXNEcmFnZ2luZyIsInRvdGFsIiwiZSIsImNsYXNzTmFtZXMiLCJhYnNSaWdodCIsImluZGljYXRvciIsIm9uTW91c2VVcCIsInBvaW50ZXJFdmVudEhhbmRsZXIiLCJvbk1vdXNlTW92ZSIsImlzQWN0aXZlVGljayIsIm9uQ2xpY2siLCJhY3RpdmUiLCJkYXRhLXByb2dyZXNzIiwiYnVpbGRQcm9ncmVzc1N0ciIsInBvaW50ZXIiLCJvbk1vdXNlRG93biIsIm9uc2VsZWN0c3RhcnQiLCJkcmFnU3RhcnQkIiwicGlwZSIsImRyYWdNb3ZpbmckIiwiZHJhZ0VuZCQiLCJtZXJnZSIsImZyb21FdmVudCIsImRyYWdOZHJvcCQiLCJsaWZ0IiwibWVyZ2VBbGwiLCJzIiwicGFyZW50WSIsImNsaWVudFkiLCJNYXRoIiwicm91bmQiLCJkcmFnTmRyb3BTdWJzY3JpYnRpb24iLCJ1cGRhdGVQb2ludGVyUG9zIiwiZHJhZ1N0YXJ0U3Vic2NyaWJ0aW9uIiwidXBkYXRlRHJhZ1N0YXR1cyIsImRyYWdFbmRTdWJzY3JpYnRpb24iLCJwb3MiLCJmbG9vciIsInBvaW50ZXJJZHgiLCJvbkRyb3AiLCJ1bnN1YnNjcmliZSIsInJlbmRlclRpY2tJbmRpY2F0b3IiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJ2ZXJ0aWNhbCIsImZpeGVkVG9wIiwicHJvZ3Jlc3MiLCJjb21wbGV0aW9uV2l0aCIsImNuIiwiaXNBY3RpdmUiLCJkYXRhLXRpdGxlIiwic3VwcG9ydENoYXJTZXQiLCJjIiwiQmFzZUJ1dHRvbiIsInRleHQiLCJkaXNhYmxlZCIsInJlc3QiLCJub29wIiwiQ3Vyc29yVG9vbHRpcCIsImNsaWVudFgiLCJ4IiwidHJhbnNmb3JtVmFsIiwiaGFuZGxlTW91c2VNb3ZlIiwic2hvd1Rvb2x0aXAiLCJzZXRUb29sdGlwU3RhdGUiLCJoaWRlVG9vbHRpcCIsInRyYW5zZm9ybSIsInRvb2x0aXAiLCJCYXNlTGluayIsImhyZWYiLCJjb21tYW5kIiwiZGF0YS1jbWQiLCJpdGVtUmVuZGVyZXIiLCJlbXB0eVJlbmRlcmVyIiwiYmVmb3JlUmVuZGVyZXIiLCJhZnRlclJlbmRlcmVyIiwiY2xhc3NuYW1lIiwiaXRlbSIsImluZGV4IiwiUGFnaW5nU3RhdGVNYW5hZ2VyIiwiY3VycmVudFBhZ2VJbmRleCIsInBhZ2VTaXplIiwidG90YWxQYWdlcyIsImNlaWwiLCJzdGFydCIsImN1cnJlbnRQYWdlRGF0YSIsInNsaWNlIiwiaGFzTmV4dFBhZ2UiLCJoYXNQcmV2UGFnZSIsImluZmluaXRlTG9vcE1vZGUiLCJwcmV2U3RhdGUiLCJnZXRTdGF0ZUJ5UHJvcHNBbmRDdXJyZW50UGFnZUluZGV4IiwiaXNWYWxpZFByb3BzIiwiYXJyYXkiLCJwYWdpbmdPcHRpb24iLCJwYWdpbmdCdG5SZW5kZXJlciIsImxpc3RPcHRpb24iLCJwYWdpbmdQcm9wcyIsIkxpc3QiLCJCYXNlTGlzdCIsImdvdG8iLCJyb3V0ZSIsImxvY2F0aW9uIiwiaGFzaCIsImdvdG9Qb3N0IiwiYnRuUHJvcHMiLCJkaXNhYmxlQWxsQnRucyIsImRpc2FibGVMaXN0QnRuIiwiZGlzYWJsZVByZXZCdG4iLCJkaXNhYmxlTmV4dEJ0biIsIm9uTGlzdEJ0bkNsaWNrIiwic2hvd05hdkJ0biIsIlBhZ2luZ0J0biIsInNwYWNlU3R5bGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nIiwiQnVmZmVyQ291bnRPcGVyYXRvciIsImJ1ZmZlclNpemUiLCJzdGFydEJ1ZmZlckV2ZXJ5Iiwic3Vic2NyaWJlckNsYXNzIiwiQnVmZmVyQ291bnRTdWJzY3JpYmVyIiwiYnVmZmVyIiwiX25leHQiLCJfY29tcGxldGUiLCJTdWJzY3JpYmVyIiwiQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlciIsImJ1ZmZlcnMiLCJjb3VudCIsInNwbGljZSIsInNoaWZ0IiwidXNlU2Nyb2xsRGlyZWN0aW9uIiwiJGRvbSIsInVzZVN0YXRlIiwiZGlyIiwic2V0RGlyIiwic2Nyb2xsRGlyQ2hhbmdlZCQiLCJzY3JvbGxUb3AiLCJkaXN0aW5jdFVudGlsQ2hhbmdlZCIsInN1YmplY3QiLCJzdWIiLCJkIiwidXNlU2Nyb2xsU3RhdHVzIiwiYnVmZmVyRGlzdGFuY2UiLCJpc0hpdEJvdHRvbSIsInNldFN0YXR1cyIsImhpdEJvdHRvbVN0YXR1c0NoYW5nZWQkIiwiJG9iaiIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsIk1vdW50T25TY3JvbGxUb0JvdHRvbSIsIndyYXBwZXJTZWxlY3RvciIsIm1vdW50U2l6ZSIsIm1vdW50U2l6ZUF0T25lVGltZSIsImhpdEJvdHRvbUNvdW50Iiwic2V0Q291bnQiLCJ1c2VTY3JvbGxIaXRCb3R0b21TdGF0dXMiLCIkIiwiUmFkaW9CdG4iLCJsYWJlbCIsImRlZmF1bHRWYWx1ZSIsIm9uVGV4dCIsIm9mZlRleHQiLCJvbiIsIlRpY2tMb2FkZXIiLCJhYnNDZW50ZXIiLCJjZW50ZXIiLCJzaXplU3RyIiwicGFkZGluZ0xlZnQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImdlblN2Z0xvZ28iLCJzbWFsbCIsIm1pZGRsZSIsImJpZyIsIkVtcHR5RGl2IiwiRW1wdHlQbGFjZUhvbGRlciIsIkVtcHR5RGl2V2l0aEd1aWRlTGluZSIsImFsaWduVG9wSXRlbXMiLCJmdWxsSGVpZ2h0Iiwid2l0aEd1aWRlTGluZSIsInBvc2l0aW9uZWRTcGlubmVyIiwic3Bpbm5lckF0Q29udGVudCIsInNwaW5uZXIiLCJsb2FkaW5nIiwiZXJyb3IiLCJxdWVyeUNvdmVycyIsIkNvdmVyIiwiY292ZXJzIiwicXVlcnlQb3N0TGlzdCIsIm1kMmh0bSIsIm1kIiwiY29udmVydGVyIiwibWFrZUh0bWwiLCJwb3N0Rm9ybWF0dGVyIiwicG9zdCIsImRhdGUiLCJwaG90b2dyb3VwIiwicGhvdG9ncm91cElkIiwiaHRtbCIsIkNORGF0ZVN0cmluZyIsIkRhdGUiLCJQb3N0TGlzdCIsInF1ZXJ5UGhvdG9Hcm91cHMiLCJQaG90b0dyb3VwcyIsInBob3RvZ3JvdXBzIiwidmlzaWJsZSIsInF1ZXJ5UGhvdG9Hcm91cCIsInBob3RvcyIsImNvbXB1dGVDb250YWluZXJTdHlsZSIsIndoIiwiaW5uZXJIZWlnaHQiLCJsclBhZGRpbmciLCJpbm5lcldpZHRoIiwibWFyZ2luIiwiUGNMYXlvdXQiLCJ1cGRhdGVTdHlsZSIsIm92ZXJmbG93IiwiRXJyb3JCb3VuZGFyeSIsImhhc0Vycm9yIiwiaW5mbyIsIkltZyIsImRpc2FibGVBbmltYXRpb24iLCJzcmMiLCJGcmFnbWVudCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImhhc0ltZ0xvYWRlZCIsInN0b3JlIiwiZ2V0IiwibG9hZEltYWdlIiwib25Mb2FkIiwiZ2V0SW1hZ2UiLCJ0aGVuIiwibG9hZGVkIiwiaGlkZVNwaW5uZXIiLCJyZW5kZXJJbWciLCJzaG93VGl0bGUiLCJzZXRMb2FkaW5nU3RhdGUiLCJtYXRjaCIsInBhcmFtcyIsIlBob3RvcyIsImN1cnJlbnRJbmRleCIsInBvc3RJZCIsIlBvc3RMaW5rIiwiUGhvdG9JbmRpY2F0b3IiLCJ0aHJvdHRsZSIsImlzQ3VycmVudEltZ1JlYWR5IiwidGh1bWJuYWlsTW9kZSIsInJlbmRlclRpY2siLCJ1cmxzIiwiY29uc29sZSIsImxvZyIsInRvdGFsTGVuIiwicGhvdG9VcmxBcnIiLCJwcmVMb2FkUGhvdG9zIiwiaGFzTXVsdGlQaG90b3MiLCJtYXhXaWR0aCIsImRhdGEtcHJvZyIsImhhbmRsZUN1cnJlbnRJbWdMb2FkIiwiY3Vyc29yIiwic2hvd05leHRUaHVtYm5haWwiLCJuZXh0SW5kZXgiLCJoaWRlIiwiUGhvdG9Hcm91cCIsInNob3dJbWFnZUZsb3ciLCJwIiwiUGhvdG9Hcm91cFdpdGhPZmZzZXQiLCJQaG90b0dyb3VwVGh1bWJuYWlsIiwiUGhvdG9zQXR0YWNobWVudCIsImdvdG9QaG90b0dyb3VwIiwiZGlzYWJsZVRpY2siLCJ1c2VOYXZCdG5zIiwiaWR4IiwiZmluZEluZGV4IiwidHlwZUNvbXBNYXAiLCJjb250ZW50X2lkIiwibW9iaWxlTGlzdEl0ZW1SZW5kZXIiLCJsaXN0SXRlbVJlbmRlciIsInRvIiwiTW9iaWxlUG9zdExpc3QiLCJOYXZJdGVtc0ZvclBvc3RMaXN0IiwiUGNQb3N0TGlzdCIsInJlbmRlckxpc3QiLCJBYm91dCIsImN1c3RvbUl0ZW1SZW5kZXJlciIsImRlZmF1bHRJdGVtUmVuZGVyZXIiLCJncm91cCIsInBob3RvR3JvdXBzIiwiTW9iaWxlUGhvdG9Hcm91cHMiLCJxdWVyeU1hcCIsIkRpZmZDb250ZW50SE9DIiwibGlzdCIsImFwcGVuZFBob3RvSWRUb0xvY2FsIiwibWFya0NvbnRlbnRBc1JlYWQiLCJzaG93VXBkYXRlcyIsImVyciIsInJlcyIsIk1FVEFfSU5GTyIsIlByb21pc2UiLCJhbGwiLCJBUE9MTE9fQ0xJRU5UIiwicXVlcnlEYXRhIiwiZm9ybWF0UmVzcCIsIkxpc3RJdGVtTGluayIsInBhdGgiLCJUb2dnbGVCdG4iLCJjbG9zZWQiLCJ0b2dnbGVTZXR0aW5nIiwic2V0TGVmdFNwYWNlQ29udGVudCIsInRvZ2dsZVNwYWNlR3VpZGVMaW5lIiwiZGVzdHJveUFsbFNwYWNlIiwidG9nZ2xlTmF2QnRuIiwidG9nZ2xlVXBkYXRlcyIsImlzSW1hZ2VGbG93TW9kZSIsInRvZ2dsZUltYWdlU2hvd01vZGUiLCJ0b3BTZXR0aW5nSXRlbXMiLCJib3R0b21TZXR0aW5nSXRlbXMiLCJOYXYiLCJ0b2dnbGVOYXYiLCJhdHRyIiwiY2xvc2UiLCJzdG9wUHJvcGFnYXRpb24iLCJmb290ZXJEYXRhIiwiY3VzdG9tUmVuZGVyZXIiLCJuYXZEYXRhIiwiZm9vdGVyIiwiTW9iaWxlQ29udGVudCIsIlBvc3QiLCJDb250ZW50IiwiZXhhY3QiLCJIb21lIiwiRGlmZiIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJwYXR0ZXJuIiwib3B0aW9ucyIsImNhY2hlS2V5Iiwic3RyaWN0Iiwic2Vuc2l0aXZlIiwiY2FjaGUiLCJjb21waWxlZFBhdHRlcm4iLCJyZSIsInBhdGhuYW1lIiwidW5kZWZpbmVkIiwicGFyZW50IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImV4ZWMiLCJ2YWx1ZXMiLCJpc0V4YWN0IiwibWVtbyIsIk1lbnVCdG4iLCIkcGFuZWwiLCJxdWVyeVNlbGVjdG9yIiwiaGlkZGVuIiwib25Ub3VjaFN0YXJ0Iiwic3RyaW5nIiwiTWVudVBhbmVsIiwidGl0bGVzIiwiYWN0aXZlUGFuZWxJbmRleCIsImlzT3BlbiIsInRvZ2dsZU9wZW5TdGF0dXMiLCJhY3RpdmVQYW5lbCIsIk9mZnNldCIsImRhdGEtYWN0aXZlLXBhbmVsIiwib3BlbiIsInJldFBvcyIsImlzTGFzdENoaWxkIiwidGFiSW5kZXgiLCJyb2xlIiwibGFzdCIsInNldFRpbWVvdXQiLCJvbktleVByZXNzIiwiYXJyYXlPZiIsIk1vYmlsZUFwcCIsInVybFN0ciIsImlzUGF0aE1hdGNoZWQiLCJtYXRjaFBhdGgiLCJQY0xheW91dFdpdGhHdWlkZUxpbmUiLCJOYXZXaXRoR3VpZGVMaW5lIiwiQXBwIiwic2lkZVNwYWNlQ29udGVudCIsImxlZnRTcGFjZUNvbnRlbnQiLCJQcm92aWRlciIsInNldFNwYWNlQ29udGV4dCIsImV4aXQiLCJnZXRMb2NhbFN0b3JhZ2VWYWwiLCJTaWRlU3BhY2VXaXRoR3VpZGVMaW5lIiwicHJvdmlkZXJMYXllciIsImlzTWJsIiwibW9iaWxlIiwicmVuZGVyTW9iaWxlVmlldyIsInJlbmRlclBjVmlldyIsIkFwb2xsb0NsaWVudCIsInVyaSIsIkFwcFdyYXBwZXIiLCJjbGllbnQiLCJCbG9nIiwiJHdyYXBwZXIiLCJ1bm1vdW50IiwiUmVhY3RET00iLCJsb2FkSW1hZ2VzIiwiY2JGbiIsInByb21pc2VRdWV1ZSIsInByb21pc2VPbmVCeU9uZSIsImJ1aWxkS2V5Iiwic2F2ZVBob3RvRGF0YVRvTG9jYWxTdG9yYWdlIiwic2hvcnRvcHRzIiwiaGFuZGxlciIsInBhcmFtc09iaiIsInByaW50IiwiJGJsb2dXcmFwcGVyIiwiJGJvZHkiLCJpc0VsZW1lbnRFbXB0eSIsInBvc3REYXRhIiwicGVyY2VudCIsInJlc29sdmUiLCJyZWplY3QiLCJUZXJtaW5hbCIsImNvbXBhdFJhZiIsIl9pbkRPTSIsImNhbmNlbCIsInJhZiIsImN1cnIiLCJnZXRUaW1lIiwibXMiLCJtYXgiLCJyZXEiLCJnZXRLZXkiLCJ2ZW5kb3IiLCJrIiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJzb21lIiwicmFmS2V5IiwiY2IiLCJhbmltYXRpb25FbmQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvblRpbWluZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nIiwidHJhbnNpdGlvblByb3BlcnR5IiwicHJlZml4IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0IiwidmVuZG9yTWFwIiwiTyIsInRvTG93ZXJDYXNlIiwiTW96IiwiV2Via2l0IiwidmVuZG9ycyIsImdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJ0aW1pbmciLCJkZWxheSIsImR1cmF0aW9uIiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJFcnJvciIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZW50ZXJBY3RpdmUiLCJsZWF2ZUFjdGl2ZSIsImFwcGVhckFjdGl2ZSIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIl9oYXNDbGFzcyIsIl9hZGRDbGFzczIiLCJfcmVtb3ZlQ2xhc3MyIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZTIiLCJfcHJvcGVydGllcyIsIl9yZWFjdERvbSIsImV2ZW50cyIsIkNTU1RyYW5zaXRpb25Hcm91cENoaWxkIiwiZG9uZSIsInRyYW5zaXRpb24iLCJjbGFzc05hbWVBbmROb2RlUXVldWUiLCJ0cmFuc2l0aW9uVGltZW91dHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVubW91bnRlZCIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJhbmltYXRpb25UeXBlIiwiZmluaXNoQ2FsbGJhY2siLCJhY3RpdmVDbGFzc05hbWUiLCJ0aW1lciIsInJlbW92ZUxpc3RlbmVycyIsInF1ZXVlQ2xhc3NBbmROb2RlIiwiZmluaXNoIiwibGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsInJhZkhhbmRsZSIsImZsdXNoQ2xhc3NOYW1lQW5kTm9kZVF1ZXVlIiwib25seSJdLCJtYXBwaW5ncyI6IjZGQUVBQSxFQUFRQyxZQUFhLEVBRXJCLElBQUlDLEVBQVdDLE9BQU9DLFFBQVUsU0FBVUMsR0FBVSxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUFFLElBQUlHLEVBQVNGLFVBQVVELEdBQUksSUFBSyxJQUFJSSxLQUFPRCxFQUFjTixPQUFPUSxVQUFVQyxlQUFlQyxLQUFLSixFQUFRQyxLQUFRTCxFQUFPSyxHQUFPRCxFQUFPQyxJQUFZLE9BQU9MLEdBSW5QUyxFQUFVQyxFQUZELEVBQVEsU0FNakJDLEVBQWNELEVBRkQsRUFBUSxTQU1yQkUsRUFBb0JGLEVBRkQsRUFBUSxTQU0zQkcsRUFBNEJILEVBRkQsRUFBUSxTQUluQ0ksRUFBYSxFQUFRLFFBRXpCLFNBQVNKLEVBQXVCSyxHQUFPLE9BQU9BLEdBQU9BLEVBQUluQixXQUFhbUIsRUFBTSxDQUFFQyxRQUFTRCxHQUl2RixTQUFTRSxFQUEyQkMsRUFBTVYsR0FBUSxJQUFLVSxFQUFRLE1BQU0sSUFBSUMsZUFBZSw2REFBZ0UsT0FBT1gsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4QlUsRUFBUFYsRUFLaE5NLEVBQVdNLFVBQVVDLFdBRW5CVixFQUFZSyxRQUFRTSxLQUNyQlgsRUFBWUssUUFBUU0sS0FDcEJYLEVBQVlLLFFBQVFNLE1BQ1osRUFBSVIsRUFBV1MsbUJBQW1CLFdBQ25DLEVBQUlULEVBQVdTLG1CQUFtQixV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RSxHQUV4RjdFLEVBQVFxQixRQUFVcXhCLEVBQ2xCM3RCLEVBQU8vRSxRQUFVQSxFQUFpQiIsImZpbGUiOiIzLmNhYWYyZi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCcuL1RyYW5zaXRpb25Hcm91cCcpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmFuc2l0aW9uR3JvdXApO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkID0gcmVxdWlyZSgnLi9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCcpO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL3V0aWxzL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHRyYW5zaXRpb25OYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIHRyYW5zaXRpb25BcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgdHJhbnNpdGlvbkVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRyYW5zaXRpb25MZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0cmFuc2l0aW9uQXBwZWFyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdBcHBlYXInKSxcbiAgdHJhbnNpdGlvbkVudGVyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdFbnRlcicpLFxuICB0cmFuc2l0aW9uTGVhdmVUaW1lb3V0OiAoMCwgX1Byb3BUeXBlcy50cmFuc2l0aW9uVGltZW91dCkoJ0xlYXZlJylcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRyYW5zaXRpb25BcHBlYXI6IGZhbHNlLFxuICB0cmFuc2l0aW9uRW50ZXI6IHRydWUsXG4gIHRyYW5zaXRpb25MZWF2ZTogdHJ1ZVxufTtcblxudmFyIENTU1RyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb25Hcm91cCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU1RyYW5zaXRpb25Hcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX3dyYXBDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDIuZGVmYXVsdCwge1xuICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYXBwZWFyOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyLFxuICAgICAgICBlbnRlcjogX3RoaXMucHJvcHMudHJhbnNpdGlvbkVudGVyLFxuICAgICAgICBsZWF2ZTogX3RoaXMucHJvcHMudHJhbnNpdGlvbkxlYXZlLFxuICAgICAgICBhcHBlYXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyVGltZW91dCxcbiAgICAgICAgZW50ZXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uRW50ZXJUaW1lb3V0LFxuICAgICAgICBsZWF2ZVRpbWVvdXQ6IF90aGlzLnByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXRcbiAgICAgIH0sIGNoaWxkKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gcHJvdmlkZSB0aGlzIGNoaWxkRmFjdG9yeSBzbyB0aGF0XG4gIC8vIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgY2FuIHJlY2VpdmUgdXBkYXRlcyB0byBuYW1lLCBlbnRlciwgYW5kXG4gIC8vIGxlYXZlIHdoaWxlIGl0IGlzIGxlYXZpbmcuXG5cblxuICBDU1NUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb25Hcm91cDIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgY2hpbGRGYWN0b3J5OiB0aGlzLl93cmFwQ2hpbGQgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXAuZGlzcGxheU5hbWUgPSAnQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuXG5DU1NUcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DU1NUcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDU1NUcmFuc2l0aW9uR3JvdXA7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5tZXJnZUNoaWxkTWFwcGluZ3MgPSBtZXJnZUNoaWxkTWFwcGluZ3M7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4pIHtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgaWYgKG5leHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIG5leHRba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldltrZXldO1xuICB9XG5cbiAgLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSB7fTtcblxuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKG5leHQuaGFzT3duUHJvcGVydHkocHJldktleSkpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGkgPSB2b2lkIDA7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZy5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjaGFpbigpe1xuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICB2YXIgYXJncyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXVxuXG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihmbil7IHJldHVybiBmbiAhPSBudWxsIH0pXG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGFyZ3NbMF1cblxuICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24oY3VycmVudCwgbmV4dCl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGN1cnJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIG5leHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KVxufVxuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY2hhaW5GdW5jdGlvbiA9IHJlcXVpcmUoJ2NoYWluLWZ1bmN0aW9uJyk7XG5cbnZhciBfY2hhaW5GdW5jdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGFpbkZ1bmN0aW9uKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfQ2hpbGRNYXBwaW5nID0gcmVxdWlyZSgnLi91dGlscy9DaGlsZE1hcHBpbmcnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnc3BhbicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25Hcm91cCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLnBlcmZvcm1BcHBlYXIgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIoX3RoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRBcHBlYXIoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBhcHBlYXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgICBfdGhpcy5wZXJmb3JtTGVhdmUoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxFbnRlcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKF90aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcigpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyB3YXMgcmVtb3ZlZCBiZWZvcmUgaXQgaGFkIGZ1bGx5IGVudGVyZWQuIFJlbW92ZSBpdC5cbiAgICAgICAgX3RoaXMucGVyZm9ybUxlYXZlKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxMZWF2ZShfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIHNvbWV3aGF0IGRhbmdlcm91cyBiL2MgaXQgY2FsbHMgc2V0U3RhdGUoKVxuICAgICAgICAvLyBhZ2FpbiwgZWZmZWN0aXZlbHkgbXV0YXRpbmcgdGhlIGNvbXBvbmVudCBiZWZvcmUgYWxsIHRoZSB3b3JrXG4gICAgICAgIC8vIGlzIGRvbmUuXG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lTGVhdmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lTGVhdmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRMZWF2ZSkge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmIChjdXJyZW50Q2hpbGRNYXBwaW5nICYmIGN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIGVudGVyZWQgYWdhaW4gYmVmb3JlIGl0IGZ1bGx5IGxlZnQuIEFkZCBpdCBhZ2Fpbi5cbiAgICAgICAgX3RoaXMua2V5c1RvRW50ZXIucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcbiAgICAgICAgICBkZWxldGUgbmV3Q2hpbGRyZW5ba2V5XTtcbiAgICAgICAgICByZXR1cm4geyBjaGlsZHJlbjogbmV3Q2hpbGRyZW4gfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNoaWxkUmVmcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNoaWxkcmVuOiAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKHByb3BzLmNoaWxkcmVuKVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyA9IHt9O1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBpbml0aWFsQ2hpbGRNYXBwaW5nID0gdGhpcy5zdGF0ZS5jaGlsZHJlbjtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdGlhbENoaWxkTWFwcGluZykge1xuICAgICAgaWYgKGluaXRpYWxDaGlsZE1hcHBpbmdba2V5XSkge1xuICAgICAgICB0aGlzLnBlcmZvcm1BcHBlYXIoa2V5LCB0aGlzLmNoaWxkUmVmc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgbmV4dENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNoaWxkcmVuOiAoMCwgX0NoaWxkTWFwcGluZy5tZXJnZUNoaWxkTWFwcGluZ3MpKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dENoaWxkTWFwcGluZykge1xuICAgICAgdmFyIGhhc1ByZXYgPSBwcmV2Q2hpbGRNYXBwaW5nICYmIHByZXZDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgIWhhc1ByZXYgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNOZXh0ID0gbmV4dENoaWxkTWFwcGluZyAmJiBuZXh0Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KF9rZXkpO1xuICAgICAgaWYgKHByZXZDaGlsZE1hcHBpbmdbX2tleV0gJiYgIWhhc05leHQgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNbX2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9MZWF2ZS5wdXNoKF9rZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIHdhbnQgdG8gc29tZWRheSBjaGVjayBmb3IgcmVvcmRlcmluZywgd2UgY291bGQgZG8gaXQgaGVyZS5cbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBrZXlzVG9FbnRlciA9IHRoaXMua2V5c1RvRW50ZXI7XG4gICAgdGhpcy5rZXlzVG9FbnRlciA9IFtdO1xuICAgIGtleXNUb0VudGVyLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5wZXJmb3JtRW50ZXIoa2V5LCBfdGhpczIuY2hpbGRSZWZzW2tleV0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGtleXNUb0xlYXZlID0gdGhpcy5rZXlzVG9MZWF2ZTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gICAga2V5c1RvTGVhdmUuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnBlcmZvcm1MZWF2ZShrZXksIF90aGlzMi5jaGlsZFJlZnNba2V5XSk7XG4gICAgfSk7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBUT0RPOiB3ZSBjb3VsZCBnZXQgcmlkIG9mIHRoZSBuZWVkIGZvciB0aGUgd3JhcHBlciBub2RlXG4gICAgLy8gYnkgY2xvbmluZyBhIHNpbmdsZSBjaGlsZFxuICAgIHZhciBjaGlsZHJlblRvUmVuZGVyID0gW107XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChrZXkpIHtcbiAgICAgIHZhciBjaGlsZCA9IF90aGlzMy5zdGF0ZS5jaGlsZHJlbltrZXldO1xuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIHZhciBpc0NhbGxiYWNrUmVmID0gdHlwZW9mIGNoaWxkLnJlZiAhPT0gJ3N0cmluZyc7XG4gICAgICAgIHZhciBmYWN0b3J5Q2hpbGQgPSBfdGhpczMucHJvcHMuY2hpbGRGYWN0b3J5KGNoaWxkKTtcbiAgICAgICAgdmFyIHJlZiA9IGZ1bmN0aW9uIHJlZihyKSB7XG4gICAgICAgICAgX3RoaXMzLmNoaWxkUmVmc1trZXldID0gcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShpc0NhbGxiYWNrUmVmLCAnc3RyaW5nIHJlZnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gY2hpbGRyZW4gb2YgVHJhbnNpdGlvbkdyb3VwIGFuZCB3aWxsIGJlIGlnbm9yZWQuICcgKyAnUGxlYXNlIHVzZSBhIGNhbGxiYWNrIHJlZiBpbnN0ZWFkOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCN0aGUtcmVmLWNhbGxiYWNrLWF0dHJpYnV0ZScpIDogdm9pZCAwO1xuXG4gICAgICAgIC8vIEFsd2F5cyBjaGFpbmluZyB0aGUgcmVmcyBsZWFkcyB0byBwcm9ibGVtcyB3aGVuIHRoZSBjaGlsZEZhY3RvcnlcbiAgICAgICAgLy8gd3JhcHMgdGhlIGNoaWxkLiBUaGUgY2hpbGQgcmVmIGNhbGxiYWNrIGdldHMgY2FsbGVkIHR3aWNlIHdpdGggdGhlXG4gICAgICAgIC8vIHdyYXBwZXIgYW5kIHRoZSBjaGlsZC4gU28gd2Ugb25seSBuZWVkIHRvIGNoYWluIHRoZSByZWYgaWYgdGhlXG4gICAgICAgIC8vIGZhY3RvcnlDaGlsZCBpcyBub3QgZGlmZmVyZW50IGZyb20gY2hpbGQuXG4gICAgICAgIGlmIChmYWN0b3J5Q2hpbGQgPT09IGNoaWxkICYmIGlzQ2FsbGJhY2tSZWYpIHtcbiAgICAgICAgICByZWYgPSAoMCwgX2NoYWluRnVuY3Rpb24yLmRlZmF1bHQpKGNoaWxkLnJlZiwgcmVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgbGVhdmluZy5cbiAgICAgICAgLy8gVGhlIG5vcm1hbCBSZWFjdCB3YXkgdG8gZG8gaXQgd29uJ3Qgd29yayBzaW5jZSB0aGUgY2hpbGQgd2lsbCBoYXZlXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiByZW1vdmVkLiBJbiBjYXNlIHlvdSBuZWVkIHRoaXMgYmVoYXZpb3IgeW91IGNhbiBwcm92aWRlXG4gICAgICAgIC8vIGEgY2hpbGRGYWN0b3J5IGZ1bmN0aW9uIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmVcbiAgICAgICAgLy8gbGVhdmluZy5cbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZmFjdG9yeUNoaWxkLCB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgcmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdGF0ZS5jaGlsZHJlbikge1xuICAgICAgX2xvb3Aoa2V5KTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgZm9yd2FyZCBUcmFuc2l0aW9uR3JvdXAgcHJvcHMgdG8gcHJpbWl0aXZlIERPTSBub2Rlc1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTmFtZTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5jaGlsZEZhY3Rvcnk7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25FbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25BcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5jb21wb25lbnQ7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsIHByb3BzLCBjaGlsZHJlblRvUmVuZGVyKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb25Hcm91cCc7XG5cblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNpdGlvbkdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgcmV2ZXJzZSxcbiAgICB0b3AsXG4gICAgZG93bixcbiAgICByYXRpbyA9IDAuNjE4LFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGZsZXhEaXJlY3Rpb246IHJldmVyc2UgPyAnY29sdW1uLXJldmVyc2UnIDogJ2NvbHVtbicsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgfTtcblxuICBjb25zdCBkb3duSHQgPSBgJHtyYXRpbyAqIDEwMH0lYDtcbiAgY29uc3QgdG9wSHQgPSBgJHsoMSAtIHJhdGlvKSAqIDEwMH0lYDtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXtjb250YWluZXJTdHlsZX1cbiAgICA+XG4gICAgICA8ZGl2IHN0eWxlPXt7aGVpZ2h0OiB0b3BIdH19Pnt0b3B9PC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPXt7aGVpZ2h0OiBkb3duSHR9fT57ZG93bn08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufSIsImltcG9ydCBwa2dKc29uIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5cbmV4cG9ydCBjb25zdCBhcGlFbmRQb2ludCA9ICdodHRwczovL2FwaS56amguaW0nO1xuXG5leHBvcnQgY29uc3QgY29udGVudFR5cGUgPSB7XG4gIHBob3RvOiB7IHZhbHVlOiAncGhvdG8nLCBkZWZhdWx0Q29udGVudFZhbHVlOiAnNWNkYmEwZTE0NzZkOWMwMDExY2MyOTg0JyB9LFxuICBzdG9yeTogeyB2YWx1ZTogJ3N0b3J5JyB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGNvbnRlbnQgPSB7XG4gIGNvdmVyOiB7XG4gICAgdHlwZToge1xuICAgICAgLi4uY29udGVudFR5cGVcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBuYXZJdGVtVHlwZSA9IHtcbiAgbGluazogJ2xpbmsnLFxuICBjb21tYW5kOiAnY29tbWFuZCcsXG59O1xuXG5leHBvcnQgY29uc3QgcGhvdG9Hcm91cHNJZEFyciA9IFtcbiAgJzVjZDZjZmJlYzlmMTFkMDAxMTc0MmU1NScsXG4gICc1Y2Q2ZjUxZWM5ZjExZDAwMTE3NDJlNTknLFxuICAnNWNkNzhiMjAzNGQxZGQwMDExNmMyMDEyJyxcbiAgJzVjZGJhMTAxNDc2ZDljMDAxMWNjMjk4NycsXG4gICc1ZDY3Y2I0YTFiYzEzODAwMjBhZDdjNTYnLFxuICAnNWQ2OWYxZGMxYmMxMzgwMDIwYWQ3YzU3J1xuXTtcblxuZXhwb3J0IGNvbnN0IGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkgPSB7XG4gIEVOQUJMRV9VUERBVEVTX0VOVFJZOiAnZW5hYmxlVXBkYXRlc0VudHJ5JyxcbiAgRU5BQkxFX05FWFRfUE9TVDogJ2VuYWJsZU5leHRQb3N0JyxcbiAgRU5BQkxFX1BBR0lOR19OQVZfQlROOiAnZW5hYmxlUGFnaW5nTmF2QnRuJyxcbiAgRU5BQkxFX0lNQUdFU19GTE9XOiAnZW5hYmxlSW1hZ2VzRmxvdycsXG4gIFNIT1dfU1BBQ0VfR1VJREVMSU5FOiAnc2hvd1NwYWNlR3VpZGVMaW5lJyxcbn07XG5cbmV4cG9ydCBjb25zdCBsb2NhbFN0b3JhZ2VEYXRhS2V5ID0ge1xuICBDTElFTlRfUE9TVF9MSVNUOiAnY2xpZW50UG9zdExpc3QnLFxuICBTRVJWRVJfUE9TVF9MSVNUOiAnc2VydmVyUG9zdExpc3QnLFxufTtcblxuZXhwb3J0IGNvbnN0IFJvdXRlcyA9IHtcbiAgc3RvcmllczogJy9zdG9yaWVzJyxcbiAgYWJvdXQ6ICcvYWJvdXQnLFxuICBzdG9yeTogJy9zdG9yaWVzLzppZCcsXG4gIHBob3RvR3JvdXBzOiAnL3Bob3RvcycsXG4gIHBob3RvR3JvdXA6ICcvcGhvdG9zLzppZCcsXG4gIHBob3RvOiAnL3Bob3RvLzppZCcsXG4gIHVwZGF0ZXM6ICcvdW5yZWFkJyxcbiAgaG9tZTogJy8nLFxufTtcblxuY29uc3QgdmVyc2lvbiA9IHBrZ0pzb24udmVyc2lvbjtcbmNvbnN0IG5hbWUgPSBwa2dKc29uLm5hbWU7XG5leHBvcnQgY29uc3QgcGFja2FnZUluZm8gPSB7XG4gIHZlcnNpb24sXG4gIG5hbWUsXG4gIGdpdFVSTDogYGh0dHBzOi8vZ2l0aHViLmNvbS96amhvdS90b3lCb3gvcmVsZWFzZXMvdGFnLyR7bmFtZX1AJHt2ZXJzaW9ufWBcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbmltcG9ydCB7YXBpRW5kUG9pbnR9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuaW1wb3J0IFF1ZXJ5V2l0aFNwaW5uZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy91dGlsX2NvbXAvcXVlcnlfd2l0aF9zcGlubmVyJ1xuXG5cbmV4cG9ydCBjb25zdCBxdWVyeUltYWdlID0gZ3FsYFxuICBxdWVyeSBQaG90bygkaWQ6IElEISkge1xuICAgIHBob3RvKGlkOiAkaWQpIHtcbiAgICAgIF9pZFxuICAgICAgdGl0bGVcbiAgICAgIGRhdGVcbiAgICAgIGNvbnRlbnQge1xuICAgICAgICB1cmxcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBob3RvID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeUltYWdlfVxuICAgICAgdmFyaWFibGVzPXt7XG4gICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgICB1cmw6IGFwaUVuZFBvaW50ICsgZGF0YS5waG90by5jb250ZW50LnVybCxcbiAgICAgICAgICB0aXRsZTogZGF0YS5waG90by50aXRsZSxcbiAgICAgICAgfSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGhvdG87XG5cblxuIiwiaW1wb3J0IHtjb250ZW50VHlwZSwgbG9jYWxTdG9yYWdlRGF0YUtleSwgbG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleSwgcGhvdG9Hcm91cHNJZEFyciwgUm91dGVzfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHtzaGFsbG93RmxhdHRlbn0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuaW1wb3J0IHtBUE9MTE9fQ0xJRU5UfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQge3F1ZXJ5SW1hZ2V9IGZyb20gJy4uL2NvbnRhaW5lcnMvcGhvdG8nO1xuXG5jb25zdCBzdHJUb0Jvb2wgPSAoc3RyKSA9PiB7XG4gIGlmIChzdHIgPT09ICdmYWxzZScpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKHN0ciA9PT0gJ3RydWUnKSB7IHJldHVybiB0cnVlIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkTG9jYWxTdG9yYWdlVmFsdWVzID0gKCkgPT4ge1xuICBjb25zdCByZXQgPSB7fTtcbiAgT2JqZWN0LmVudHJpZXMobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleSkuZm9yRWFjaCgoWywgdmFsXSkgPT4ge1xuICAgIHJldFt2YWxdID0gc3RyVG9Cb29sKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHZhbCkpO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkTG9jYWxTdG9yYWdlVmFsdWVzRnJvbSA9IChzb3VyY2UpID0+IHtcbiAgY29uc3QgcmV0ID0ge307XG4gIE9iamVjdC5lbnRyaWVzKGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkpLmZvckVhY2goKFssdmFsXSkgPT4ge1xuICAgIHJldFt2YWxdID0gc3RyVG9Cb29sKHNvdXJjZVt2YWxdKTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5jb25zdCBTRVJWRVIgPSAnc2VydmVyJztcbmNvbnN0IENMSUVOVCA9ICdjbGllbnQnO1xuY29uc3QgYnVpbGRQaG90b0dyb3VwS2V5ID0gKGVuZCwgcGhvdG9Hcm91cElkKSA9PiBgJHtlbmR9XyR7cGhvdG9Hcm91cElkfWA7XG5cbmV4cG9ydCBjb25zdCBzYXZlUGhvdG9EYXRhVG9Mb2NhbFN0b3JhZ2UgPSAocXVlcnlSZXMsIHBob3RvR3JvdXBJZCkgPT4ge1xuICBpZiAoICFxdWVyeVJlc1xuICAgIHx8ICFxdWVyeVJlcy5kYXRhXG4gICAgfHwgIXF1ZXJ5UmVzLmRhdGEucGhvdG9ncm91cFxuICAgIHx8ICFxdWVyeVJlcy5kYXRhLnBob3RvZ3JvdXAucGhvdG9zLmxlbmd0aFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBidWlsZEtleSA9IChlbmQpID0+IGJ1aWxkUGhvdG9Hcm91cEtleShlbmQsIHBob3RvR3JvdXBJZCk7XG4gIGNvbnN0IGlkQXJyID0gcXVlcnlSZXMuZGF0YS5waG90b2dyb3VwLnBob3Rvcy5tYXAoKHtfaWQ6IGlkfSkgPT4gaWQpO1xuICBjb25zdCBoYXNMb2NhbERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShidWlsZEtleShDTElFTlQpKTtcblxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICBoYXNMb2NhbERhdGFcbiAgICAgID8gYnVpbGRLZXkoU0VSVkVSKVxuICAgICAgOiBidWlsZEtleShDTElFTlQpLFxuICAgIGlkQXJyXG4gIClcbn07XG5cbmV4cG9ydCBjb25zdCBzYXZlUG9zdHNEYXRhVG9Mb2NhbFN0b3JhZ2UgPSAocXVlcnlSZXMpID0+IHtcbiAgaWYgKCFxdWVyeVJlcyB8fCAhcXVlcnlSZXMuZGF0YSB8fCAhcXVlcnlSZXMuZGF0YS5wb3N0cy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpZEFyciA9IHF1ZXJ5UmVzLmRhdGEucG9zdHMubWFwKCh7X2lkOiBpZH0pID0+IGlkKTtcbiAgY29uc3QgaGFzTG9jYWxEYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdG9yYWdlRGF0YUtleS5DTElFTlRfUE9TVF9MSVNUKTtcblxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICBoYXNMb2NhbERhdGFcbiAgICAgID8gbG9jYWxTdG9yYWdlRGF0YUtleS5TRVJWRVJfUE9TVF9MSVNUXG4gICAgICA6IGxvY2FsU3RvcmFnZURhdGFLZXkuQ0xJRU5UX1BPU1RfTElTVCxcbiAgICBpZEFyclxuICApXG59O1xuXG5cbmNvbnN0IGFwcGVuZElkVG9Mb2NhbFN0b3JhZ2UgPSAoaWQsIGtleSkgPT4ge1xuICBjb25zdCBsb2NhbElkcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIGlmICghbG9jYWxJZHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBsb2NhbElkcyArIGAsJHtpZH1gKVxuICB9XG59O1xuXG5cbmV4cG9ydCBjb25zdCBhcHBlbmRDb250ZW50SWRUb0xvY2FsID0gKGNvbnRlbnQpID0+IHtcbiAgY29uc3QgYXBwZW5kUG9zdElkVG9Mb2NhbCA9IChpZCkgPT4ge1xuICAgIGFwcGVuZElkVG9Mb2NhbFN0b3JhZ2UoaWQsIGxvY2FsU3RvcmFnZURhdGFLZXkuQ0xJRU5UX1BPU1RfTElTVCk7XG4gIH07XG5cbiAgY29uc3QgYXBwZW5kUGhvdG9JZFRvTG9jYWwgPSAoaWQsIHBob3RvR3JvdXBJZCkgPT4ge1xuICAgIGFwcGVuZElkVG9Mb2NhbFN0b3JhZ2UoaWQsIGJ1aWxkUGhvdG9Hcm91cEtleShDTElFTlQsIHBob3RvR3JvdXBJZCkpO1xuICB9O1xuXG4gIHN3aXRjaCAoY29udGVudC50eXBlKSB7XG4gICAgY2FzZSBjb250ZW50VHlwZS5zdG9yeS52YWx1ZToge1xuICAgICAgYXBwZW5kUG9zdElkVG9Mb2NhbChjb250ZW50LmlkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FzZSBjb250ZW50VHlwZS5waG90by52YWx1ZToge1xuICAgICAgYXBwZW5kUGhvdG9JZFRvTG9jYWwoY29udGVudC5pZCwgY29udGVudC5waG90b0dyb3VwSWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgZGlmZkNTSURzID0gKGNsaWVudEtleSwgc2VydmVyS2V5KSA9PiB7XG4gIGNvbnN0IGNsaWVudFN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNsaWVudEtleSk7XG4gIGNvbnN0IHNlcnZlclN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHNlcnZlcktleSk7XG5cbiAgaWYgKCEoY2xpZW50U3RyICYmIHNlcnZlclN0cikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjbGllbnRJZHMgPSBjbGllbnRTdHIuc3BsaXQoJywnKTtcbiAgY29uc3Qgc2VydmVySWRzID0gc2VydmVyU3RyLnNwbGl0KCcsJyk7XG5cbiAgcmV0dXJuIHNlcnZlcklkcy5maWx0ZXIoKGlkKSA9PiB7XG4gICAgcmV0dXJuICFjbGllbnRJZHMuaW5jbHVkZXMoaWQpO1xuICB9KVxufTtcblxuZXhwb3J0IGNvbnN0IGRpZmZDU1Bob3RvR3JvdXAgPSAocGhvdG9Hcm91cElkKSA9PiB7XG4gIGNvbnN0IGlkcyA9IGRpZmZDU0lEcyhcbiAgICBidWlsZFBob3RvR3JvdXBLZXkoQ0xJRU5ULCBwaG90b0dyb3VwSWQpLFxuICAgIGJ1aWxkUGhvdG9Hcm91cEtleShTRVJWRVIsIHBob3RvR3JvdXBJZClcbiAgKSB8fCBbXTtcbiAgcmV0dXJuIGlkcy5tYXAoaWQgPT4gKHsgaWQsIHBob3RvR3JvdXBJZH0pKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaWZmQ1NQaG90b3MgPSAoKSA9PiB7XG4gIHJldHVybiBzaGFsbG93RmxhdHRlbihwaG90b0dyb3Vwc0lkQXJyLm1hcChkaWZmQ1NQaG90b0dyb3VwKSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlmZkNTUG9zdHMgPSAoKSA9PiB7XG4gIHJldHVybiBkaWZmQ1NJRHMoXG4gICAgbG9jYWxTdG9yYWdlRGF0YUtleS5DTElFTlRfUE9TVF9MSVNULFxuICAgIGxvY2FsU3RvcmFnZURhdGFLZXkuU0VSVkVSX1BPU1RfTElTVFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpZmZDb250ZW50ID0gKCkgPT4ge1xuICBjb25zdCBleHBhbmRQb3N0ID0gKGlkKSA9PiAoe1xuICAgIHR5cGU6IGNvbnRlbnRUeXBlLnN0b3J5LnZhbHVlLFxuICAgIHVybDogYCR7Um91dGVzLnN0b3JpZXN9LyR7aWR9YCxcbiAgICBpZCxcbiAgfSk7XG5cbiAgY29uc3QgZXhwYW5kUGhvdG8gPSAocGhvdG8pID0+ICh7XG4gICAgLi4ucGhvdG8sXG4gICAgdHlwZTogY29udGVudFR5cGUucGhvdG8udmFsdWUsXG4gICAgdXJsOiBgLyR7Y29udGVudFR5cGUucGhvdG8udmFsdWV9LyR7cGhvdG8uaWR9YFxuICB9KTtcblxuICByZXR1cm4gW1xuICAgIC4uLmRpZmZDU1Bvc3RzKCkubWFwKGV4cGFuZFBvc3QpLFxuICAgIC4uLmRpZmZDU1Bob3RvcygpLm1hcChleHBhbmRQaG90bylcbiAgXTtcbn07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtsb2FkTG9jYWxTdG9yYWdlVmFsdWVzfSBmcm9tICcuLi91dGlscy9sb2NhbF9zdG9yYWdlX21hbmFnZXInO1xuXG5leHBvcnQgY29uc3QgU3BhY2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIHJlc2V0U3BhY2U6ICgpID0+IHt9LFxuICBzZXRTaWRlU3BhY2VDb250ZW50OiAoKSA9PiB7fVxufSk7XG5cbmV4cG9ydCBjb25zdCBMb2NhbFN0b3JhZ2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIC4uLmxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXMoKVxufSk7XG5cbi8vIG1ha2UgdXNlIG9mIG5lZ2F0aXZlIHNwYWNlLlxuZXhwb3J0IGNvbnN0IFdpdGhTcGFjZUNvbnRleHRIT0MgPSAoQ29tcG9uZW50KSA9PiB7XG4gIHJldHVybiAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFNwYWNlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge1xuICAgICAgICAgICh7Li4uc3BhY2VDb250ZXh0fSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxDb21wb25lbnQgey4uLnNwYWNlQ29udGV4dH0gey4uLnByb3BzfS8+O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgPC9TcGFjZUNvbnRleHQuQ29uc3VtZXI+XG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdXNlU3BhY2VDb250ZW50ID0gKGNvbXBvbmVudCwgcmVyZW5kZXJUcmlnZ2VyKSA9PiB7XG4gIGNvbnN0IHsgc2V0U2lkZVNwYWNlQ29udGVudCB9ID0gdXNlQ29udGV4dChTcGFjZUNvbnRleHQpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2lkZVNwYWNlQ29udGVudChcbiAgICAgIGNvbXBvbmVudFxuICAgIClcbiAgfSwgcmVyZW5kZXJUcmlnZ2VyKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzZXRTaWRlU3BhY2VDb250ZW50KG51bGwpXG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlUHJlZmVyZW5jZSA9IChrZXkpID0+IHtcbiAgY29uc3QgbG9jYWxTdG9yYWdlQ29udGV4dCA9IHVzZUNvbnRleHQoTG9jYWxTdG9yYWdlQ29udGV4dCk7XG4gIGNvbnN0IHN0YXR1cyA9IGxvY2FsU3RvcmFnZUNvbnRleHRba2V5XTtcbiAgY29uc3QgdG9nZ2xlID0gKHZhbCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZUNvbnRleHQuc2V0TG9jYWxTdG9yYWdlVmFsKGtleSwgdmFsKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXR1cyxcbiAgICB0b2dnbGVcbiAgfVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQge1dpdGhTcGFjZUNvbnRleHRIT0N9IGZyb20gJy4uLy4uLy4uL2NvbnRleHQvc3BhY2VfY29udGV4dCc7XG5cbmNvbnN0IERFRkFVTFRfR1VJREVMSU5FX0NPTE9SID0gJ2N5YW4nO1xuXG5jb25zdCBXaXRoR3VpZGVMaW5lQmFzZUhPQyA9IChDb21wb25lbnQpID0+IHtcbiAgcmV0dXJuIGNsYXNzIFdpdGhHdWlkZUxpbmVCYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLiRyb290RG9tID0gUmVhY3REb20uZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB0aGlzLiRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy4kY29udGFpbmVyKTtcblxuICAgICAgdGhpcy5oYW5kbGVSZXNpemUoKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVzaXplKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgICBSZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuJGNvbnRhaW5lcik7XG4gICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNob3dTcGFjZUd1aWRlTGluZSAhPT0gdGhpcy5wcm9wcy5zaG93U3BhY2VHdWlkZUxpbmUpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUobmV4dFByb3BzLnNob3dTcGFjZUd1aWRlTGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUmVzaXplID0gKHNob3cpID0+IHtcbiAgICAgIFJlYWN0RG9tLnJlbmRlcihcbiAgICAgICAgdGhpcy5yZW5kZXJHdWlkZUxpbmVzKHRoaXMuJHJvb3REb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHNob3cpLFxuICAgICAgICB0aGlzLiRjb250YWluZXJcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlbmRlckd1aWRlTGluZXMgPSAocmVjdE9iaiwgc2hvdyA9IHRoaXMucHJvcHMuc2hvd1NwYWNlR3VpZGVMaW5lKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvcDogc2hvd1RvcExpbmUsXG4gICAgICAgIGJvdHRvbTogc2hvd0JvdExpbmUsXG4gICAgICAgIGxlZnQ6IHNob3dMZWZ0TGluZSxcbiAgICAgICAgcmlnaHQ6IHNob3dSaWdodExpbmUsXG4gICAgICAgIGNvbG9yID0gREVGQVVMVF9HVUlERUxJTkVfQ09MT1IsXG4gICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKCFzaG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tbW9uR3VpZGVMaW5lU3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcixcbiAgICAgICAgekluZGV4OiAxMDAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBob3Jpekd1aWRlTGluZVN0eWxlID0ge1xuICAgICAgICAuLi5jb21tb25HdWlkZUxpbmVTdHlsZSxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmVydGlHdWlkZUxpbmVTdHlsZSA9IHtcbiAgICAgICAgLi4uY29tbW9uR3VpZGVMaW5lU3R5bGUsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSA9IHJlY3RPYmo7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHNob3dUb3BMaW5lICYmIDxkaXYgc3R5bGU9e3suLi5ob3Jpekd1aWRlTGluZVN0eWxlLCB0b3B9fS8+LFxuICAgICAgICBzaG93Qm90TGluZSAmJiA8ZGl2IHN0eWxlPXt7Li4uaG9yaXpHdWlkZUxpbmVTdHlsZSwgdG9wOiBib3R0b219fS8+LFxuICAgICAgICBzaG93TGVmdExpbmUgJiYgPGRpdiBzdHlsZT17ey4uLnZlcnRpR3VpZGVMaW5lU3R5bGUsIGxlZnR9fS8+LFxuICAgICAgICBzaG93UmlnaHRMaW5lICYmIDxkaXYgc3R5bGU9e3suLi52ZXJ0aUd1aWRlTGluZVN0eWxlLCBsZWZ0OiByaWdodH19Lz4sXG4gICAgICBdO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4udGhpcy5wcm9wc30gLz5cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoR3VpZGVMaW5lID0gKENvbXApID0+IFdpdGhTcGFjZUNvbnRleHRIT0MoV2l0aEd1aWRlTGluZUJhc2VIT0MoQ29tcCkpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY29scyB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlID0ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9O1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgIHtcbiAgICAgICAgY29scy5tYXAoY29sID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2ZsZXg6ICcxJ319Pntjb2x9PC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuaW1wb3J0IEJsb2dUb3BEb3duIGZyb20gJy4vYmxvZ190b3BfZG93bic7XG5cbmNvbnN0IENvbXBPZmZzZXQgPSAoQ29tcCwgcmF0aW8pID0+IChwcm9wcykgPT4ge1xuICBjb25zdCByZXRDb21wID0gPENvbXAgey4uLnByb3BzfS8+O1xuICByZXR1cm4gaXNNb2JpbGUoKVxuICAgID8gcmV0Q29tcFxuICAgIDogPEJsb2dUb3BEb3duIHRvcD17bnVsbH0gZG93bj17cmV0Q29tcH0gcmF0aW89e3JhdGlvfSAvPlxufTtcblxuZXhwb3J0IHtkZWZhdWx0IGFzIEdvbGRlblRvcERvd259IGZyb20gJy4vZ29sZGVuX3JhdGlvX3RvcF9kb3duJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBCbG9nVG9wRG93bn0gZnJvbSAnLi9ibG9nX3RvcF9kb3duJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBDb2x1bW5zfSBmcm9tICcuL2NvbHVtbnMnO1xuZXhwb3J0IHsgQ29tcE9mZnNldCB9XG5cbiIsImNvbnN0IEdPTERFTl9SQVRJTyA9IDAuNjE4O1xuY29uc3QgQklHX1JBVElPID0gR09MREVOX1JBVElPICsgKDEgLSBHT0xERU5fUkFUSU8pICogKDEgLSBHT0xERU5fUkFUSU8pO1xuXG5leHBvcnQge1xuICBHT0xERU5fUkFUSU8sXG4gIEJJR19SQVRJTyxcbn0iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9PdXRlclN1YnNjcmliZXIsX3V0aWxfc3Vic2NyaWJlVG9SZXN1bHQgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dGVyU3Vic2NyaWJlciB9IGZyb20gJy4uL091dGVyU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBzdWJzY3JpYmVUb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBzb3VyY2UubGlmdChuZXcgVGFrZVVudGlsT3BlcmF0b3Iobm90aWZpZXIpKTsgfTtcbn1cbnZhciBUYWtlVW50aWxPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlVW50aWxPcGVyYXRvcihub3RpZmllcikge1xuICAgICAgICB0aGlzLm5vdGlmaWVyID0gbm90aWZpZXI7XG4gICAgfVxuICAgIFRha2VVbnRpbE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICB2YXIgdGFrZVVudGlsU3Vic2NyaWJlciA9IG5ldyBUYWtlVW50aWxTdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1Jlc3VsdCh0YWtlVW50aWxTdWJzY3JpYmVyLCB0aGlzLm5vdGlmaWVyKTtcbiAgICAgICAgaWYgKG5vdGlmaWVyU3Vic2NyaXB0aW9uICYmICF0YWtlVW50aWxTdWJzY3JpYmVyLnNlZW5WYWx1ZSkge1xuICAgICAgICAgICAgdGFrZVVudGlsU3Vic2NyaWJlci5hZGQobm90aWZpZXJTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUodGFrZVVudGlsU3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRha2VVbnRpbFN1YnNjcmliZXI7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VVbnRpbFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGFrZVVudGlsU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUYWtlVW50aWxTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUYWtlVW50aWxTdWJzY3JpYmVyLnByb3RvdHlwZS5ub3RpZnlOZXh0ID0gZnVuY3Rpb24gKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgsIGlubmVyU3ViKSB7XG4gICAgICAgIHRoaXMuc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgVGFrZVVudGlsU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVVudGlsU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN1YmplY3QsIGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIGNvbmNhdEFsbCwgdGFrZVVudGlsLCB0YWtlLCB0YWtlTGFzdCwgZGlzdGluY3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgJy4vZHJhZ19pbmRpY2F0b3Jfc3R5bGUuc2Nzcyc7XG5cbmNvbnN0IHJhbmdlID0gbnVtID0+IFsuLi5BcnJheShudW0pLmtleXMoKV07XG5jb25zdCBwb2ludGVyRXZlbnQkID0gbmV3IFN1YmplY3QoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlja0luZGljYXRvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBhYnNSaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcz17XG4gICAgb25Ecm9wOiAoKSA9PiB7fSxcbiAgICBvbkNsaWNrOiAoKSA9PiB7fSxcbiAgICBjdXJyZW50OiAxLFxuICAgIGFic1JpZ2h0OiBmYWxzZSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICB5OiB0aGlzLnByb3BzLmN1cnJlbnQgKiA2LFxuICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICB9O1xuXG4gIGJ1aWxkUHJvZ3Jlc3NTdHIgPSAoKSA9PiBgJHsodGhpcy5zdGF0ZS55IC0gNikgLyA2ICsgMX0gLyAke3RoaXMucHJvcHMudG90YWx9YDtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyB3b3JrYXJvdW5kIGZvciBzYWZhcmk6IHdyb25nIHRleHQgY3Vyc29yIHdoZW4gZHJhZztcbiAgICBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlOyB9O1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgY2FsY1BvaW50ZXJZID0gcyA9PiBtYXAoZSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnRZID0gc2VsZi5pbmRpY2F0b3IgJiYgc2VsZi5pbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueTtcbiAgICAgIGNvbnN0IG1vdXNlWSA9IGUuY2xpZW50WTtcbiAgICAgIHJldHVybiBtb3VzZVkgLSBwYXJlbnRZIC0gNjtcbiAgICB9KShzKTtcbiAgICBjb25zdCBkcmFnU3RhcnQkID0gcG9pbnRlckV2ZW50JC5waXBlKGZpbHRlcihlID0+IGUudHlwZSA9PT0gJ21vdXNlZG93bicpKTtcbiAgICBjb25zdCBkcmFnTW92aW5nJCA9IHBvaW50ZXJFdmVudCQucGlwZShmaWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSk7XG4gICAgY29uc3QgZHJhZ0VuZCQgPSBtZXJnZShcbiAgICAgIGZyb21FdmVudChkb2N1bWVudCwgJ21vdXNldXAnKSxcbiAgICAgIC8vIHBvaW50ZXJFdmVudCQucGlwZShmaWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdtb3VzZXVwJykpXG4gICAgKTtcbiAgICBjb25zdCBkcmFnTmRyb3AkID0gZHJhZ1N0YXJ0JC5waXBlKFxuICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gZHJhZ01vdmluZyQucGlwZShcbiAgICAgICAgICAgIHRha2VVbnRpbChkcmFnRW5kJCkpXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICBjb25jYXRBbGwoKSxcbiAgICAgIGNhbGNQb2ludGVyWSxcbiAgICAgIG1hcCh5ID0+IE1hdGgucm91bmQoeSAvIDYpICogNiksXG4gICAgICBmaWx0ZXIoeSA9PiB5IDwgdGhpcy5pbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gMTIgJiYgeSA+PSA2KSxcbiAgICApO1xuICAgIHRoaXMuZHJhZ05kcm9wU3Vic2NyaWJ0aW9uID0gZHJhZ05kcm9wJC5zdWJzY3JpYmUodGhpcy51cGRhdGVQb2ludGVyUG9zKTtcbiAgICB0aGlzLmRyYWdTdGFydFN1YnNjcmlidGlvbiA9IGRyYWdTdGFydCQuc3Vic2NyaWJlKCgpID0+IHt0aGlzLnVwZGF0ZURyYWdTdGF0dXModHJ1ZSl9KTtcbiAgICB0aGlzLmRyYWdFbmRTdWJzY3JpYnRpb24gPSBkcmFnRW5kJC5waXBlKFxuICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuc3RhdGUueTtcbiAgICAgICAgY29uc3QgcG9zID0gTWF0aC5mbG9vcih5IC8gNik7XG4gICAgICAgIGlmIChwb3MgPj0gdGhpcy5wcm9wcy50b3RhbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRvdGFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPD0gMSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgICB9KSxcbiAgICAgIGZpbHRlcigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmlzRHJhZ2dpbmdcbiAgICAgIH0pXG4gICAgKS5zdWJzY3JpYmUoKHBvaW50ZXJJZHgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMub25Ecm9wKHBvaW50ZXJJZHgpO1xuICAgICAgdGhpcy51cGRhdGVEcmFnU3RhdHVzKGZhbHNlKVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRyYWdFbmRTdWJzY3JpYnRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLmRyYWdTdGFydFN1YnNjcmlidGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuZHJhZ05kcm9wU3Vic2NyaWJ0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICB1cGRhdGVQb2ludGVyUG9zID0gKHkpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHt5fSlcbiAgfTtcblxuICB1cGRhdGVEcmFnU3RhdHVzID0gKGlzRHJhZ2dpbmcpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtpc0RyYWdnaW5nfSlcbiAgfTtcblxuICBwb2ludGVyRXZlbnRIYW5kbGVyID0gKGUpID0+IHtwb2ludGVyRXZlbnQkLm5leHQoZSl9O1xuXG4gIHJlbmRlclRpY2tJbmRpY2F0b3IgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB0b3RhbCwgY3VycmVudCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJkcmFnLXRpY2staW5kaWNhdG9yXCIsIHtcbiAgICAgICAgICBhYnNSaWdodDogdGhpcy5wcm9wcy5hYnNSaWdodCxcbiAgICAgICAgICBpc0RyYWdnaW5nOiB0aGlzLnN0YXRlLmlzRHJhZ2dpbmdcbiAgICAgICAgfSl9XG4gICAgICAgIHJlZj17cmVmID0+IHt0aGlzLmluZGljYXRvciA9IHJlZjt9fVxuICAgICAgICBvbk1vdXNlVXA9e3RoaXMucG9pbnRlckV2ZW50SGFuZGxlcn1cbiAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMucG9pbnRlckV2ZW50SGFuZGxlcn1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIHJhbmdlKHRvdGFsKS5tYXAoaSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0FjdGl2ZVRpY2sgPSBpID09PSBjdXJyZW50IC0gMTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5wcm9wcy5vbkNsaWNrKGUsIGkpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndGljaycsIHtcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZTogaXNBY3RpdmVUaWNrLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInBvaW50ZXJcIlxuICAgICAgICAgICAgZGF0YS1wcm9ncmVzcz17dGhpcy5idWlsZFByb2dyZXNzU3RyKCl9XG4gICAgICAgICAgICBzdHlsZT17e3RvcDogdGhpcy5zdGF0ZS55fX1cbiAgICAgICAgICAgIHJlZj17cmVmID0+IHt0aGlzLnBvaW50ZXIgPSByZWY7fX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLnBvaW50ZXJFdmVudEhhbmRsZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRvdGFsIDwgMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyVGlja0luZGljYXRvcigpXG4gIH1cbn1cbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX21lcmdlQWxsIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi9tZXJnZUFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbCgxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuaW1wb3J0IHsgY29tcGxldGlvbldpdGggfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5pbXBvcnQge0Jsb2dUb3BEb3duLCBDb21wT2Zmc2V0fSBmcm9tICcuLi9sYXlvdXQnO1xuaW1wb3J0IHsgQklHX1JBVElPIH0gZnJvbSAnLi4vbGF5b3V0L2NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudCwgdG90YWwgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3MtbnVtYmVyXCI+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXJyZW50XCI+e2NvbXBsZXRpb25XaXRoKCcwJykoY3VycmVudCwgdG90YWwpfTwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvdGFsXCI+e3Byb3BzLnRvdGFsfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCByYW5nZSA9IG51bSA9PiBbLi4uQXJyYXkobnVtKS5rZXlzKCldO1xuXG5leHBvcnQgY29uc3QgVGlja0luZGljYXRvciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgY3VycmVudCxcbiAgICB0b3RhbCxcbiAgICB2ZXJ0aWNhbCxcbiAgICBvbkNsaWNrID0gKCkgPT4ge30sXG4gICAgYWJzUmlnaHQsXG4gICAgZml4ZWRUb3AsXG4gIH0gPSBwcm9wcztcbiAgaWYgKHRvdGFsIDwgMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcHJvZ3Jlc3MgPSAoY3VycmVudCkgPT4gYCR7Y29tcGxldGlvbldpdGgoJzAnKShjdXJyZW50LCB0b3RhbCl9IC8gJHt0b3RhbH1gO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbigndGljay1pbmRpY2F0b3InLCB7XG4gICAgICAgICdhYnNvbHV0ZS1yaWdodCc6IGFic1JpZ2h0LFxuICAgICAgICAnZml4ZWQtdG9wJzogZml4ZWRUb3AsXG4gICAgICAgIHZlcnRpY2FsXG4gICAgICB9KX1cbiAgICAgIG9uQ2xpY2s9eygpID0+IHsgb25DbGljayhjdXJyZW50KSB9fVxuICAgID5cbiAgICAgIHtcbiAgICAgICAgcmFuZ2UodG90YWwpLm1hcChpID0+IHtcbiAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGkgPT09IGN1cnJlbnQgLSAxO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGRhdGEtdGl0bGU9e3Byb2dyZXNzKGkgKyAxKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigndGljaycsIHtcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApXG59O1xuXG5leHBvcnQgY29uc3QgUGhvdG9UaWNrSW5kaWNhdG9yID0gQ29tcE9mZnNldChUaWNrSW5kaWNhdG9yLCBCSUdfUkFUSU8pO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEcmFnVGlja0luZGljYXRvciB9IGZyb20gJy4vZHJhZ190aWNrX2luZGljYXRvcic7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBwcm9wcztcblxuICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCB0eXBlb2YgY2hpbGRyZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IHN1cHBvcnRDaGFyU2V0ID0ge1xuICAgICfmlocnOiB0cnVlLFxuICAgICflrZcnOiB0cnVlLFxuICAgICfnm7gnOiB0cnVlLFxuICAgICfniYcnOiB0cnVlLFxuICAgICfmnIAnOiB0cnVlLFxuICAgICfov5EnOiB0cnVlLFxuICAgICfmm7QnOiB0cnVlLFxuICAgICfmlrAnOiB0cnVlLFxuICAgICforr4nOiB0cnVlLFxuICAgICfnva4nOiB0cnVlLFxuICAgICflhbMnOiB0cnVlLFxuICAgICfpl60nOiB0cnVlLFxuICAgICfnpo8nOiB0cnVlLFxuICB9O1xuXG4gIGNvbnN0IGNoYXJzID0gY2hpbGRyZW4uc3BsaXQoJycpO1xuICByZXR1cm4gY2hhcnMubWFwKGMgPT4ge1xuICAgIGNvbnN0IGlzU3VwcG9ydCA9IHN1cHBvcnRDaGFyU2V0W2NdO1xuICAgIHJldHVybiBpc1N1cHBvcnRcbiAgICAgID8gPGkgY2xhc3NOYW1lPXtgaWNvbi0ke2N9YH0gLz5cbiAgICAgIDogY1xuICB9KVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jb25zdCBCYXNlQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0ZXh0LFxuICAgIG9uQ2xpY2ssXG4gICAgY2hpbGRyZW4sXG4gICAgZGlzYWJsZWQsXG4gICAgLi4ucmVzdFxuICB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbihcImJhc2UtYnRuXCIsIHsgZGlzYWJsZWQgfSl9XG4gICAgICBvbkNsaWNrPXtkaXNhYmxlZCA/IG5vb3AgOiBvbkNsaWNrfVxuICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAge3RleHQgfHwgY2hpbGRyZW59XG4gICAgPC9kaXY+XG4gIClcbn07XG5cbmV4cG9ydCB7XG4gIEJhc2VCdXR0b24gYXMgQnV0dG9uXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtub29wLCBpc01vYmlsZX0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmNsYXNzIEN1cnNvclRvb2x0aXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgc2hvdzogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHtib3R0b20sIGxlZnR9ID0gdGhpcy5zZWxmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgeDogbGVmdCxcbiAgICAgIHk6IGJvdHRvbVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlTW91c2VNb3ZlID0gKHtjbGllbnRYLCBjbGllbnRZfSkgPT4ge1xuICAgIGNvbnN0IHt0b3AsIGxlZnR9ID0gdGhpcy5zZWxmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgeDogY2xpZW50WCAtIGxlZnQsXG4gICAgICB5OiBjbGllbnRZIC0gdG9wXG4gICAgfSlcbiAgfTtcblxuICBzZXRUb29sdGlwU3RhdGUgPSAoc2hvdykgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93IH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgdHJhbnNmb3JtVmFsID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5zdGF0ZS54ICsgMjB9cHgsICR7dGhpcy5zdGF0ZS55ICsgMjB9cHgsIDApYDtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBvbk1vdXNlTW92ZT17dGhpcy5oYW5kbGVNb3VzZU1vdmV9XG4gICAgICAgIHJlZj17KHJlZikgPT4gdGhpcy5zZWxmID0gcmVmfVxuICAgICAgICBjbGFzc05hbWU9XCJ0b29sdGlwLXdyYXBwZXJcIlxuICAgICAgPlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAgICAgc2hvd1Rvb2x0aXA6ICgpID0+IHsgdGhpcy5zZXRUb29sdGlwU3RhdGUodHJ1ZSkgfSxcbiAgICAgICAgICBoaWRlVG9vbHRpcDogKCkgPT4geyB0aGlzLnNldFRvb2x0aXBTdGF0ZShmYWxzZSkgfSxcbiAgICAgICAgfSl9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBrZXk9ezJ9XG4gICAgICAgICAgY2xhc3NOYW1lPVwidG9vbHRpcFwiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtVmFsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3cgPyB0aGlzLnByb3BzLnRvb2x0aXAgOiBudWxsIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEN1cnNvclRvb2x0aXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQge25hdkl0ZW1UeXBlfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuXG5pbXBvcnQgJy4vYmFzZS1saW5rLnNjc3MnXG5cbmNvbnN0IEJhc2VMaW5rID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgaHJlZiwgdGV4dCwgdHlwZSwgY29tbWFuZCwgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSBwcm9wcztcblxuICBpZiAodHlwZSA9PT0gbmF2SXRlbVR5cGUuY29tbWFuZCkge1xuICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9e2NuKFwiY29tbWFuZCBiYXNlLWxpbmtcIiwgY2xhc3NOYW1lKX0gZGF0YS1jbWQ9e2NvbW1hbmR9Pnt0ZXh0fTwvc3Bhbj5cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGFcbiAgICAgIGNsYXNzTmFtZT17Y24oXCJiYXNlLWxpbmtcIiwgY2xhc3NOYW1lKX1cbiAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgey4uLnJlc3R9XG4gICAgPnt0ZXh0fTwvYT5cbiAgKTtcbn07XG5cbmV4cG9ydCB7IEJhc2VMaW5rIH1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQge25vb3B9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQgJy4vc3R5bGUuc2NzcydcbmltcG9ydCB7RW1wdHlQbGFjZUhvbGRlcn0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuXG5leHBvcnQgZGVmYXVsdCAoXG4gIHtcbiAgICBkYXRhID0gW10sXG4gICAgaXRlbVJlbmRlcmVyID0gbm9vcCxcbiAgICBlbXB0eVJlbmRlcmVyLFxuICAgIGJlZm9yZVJlbmRlcmVyID0gbm9vcCxcbiAgICBhZnRlclJlbmRlcmVyID0gbm9vcCxcbiAgICBjbGFzc05hbWUsXG4gICAgLi4ucmVzdFxuICB9XG4pID0+IHtcbiAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiAoXG4gICAgICBlbXB0eVJlbmRlcmVyXG4gICAgICAgID8gZW1wdHlSZW5kZXJlcigpXG4gICAgICAgIDogPEVtcHR5UGxhY2VIb2xkZXIgLz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2JlZm9yZVJlbmRlcmVyKGRhdGEpfVxuICAgICAgPHVsIGNsYXNzTmFtZT17Y2xhc3NuYW1lKCdiYXNlLWxpc3QnLCBjbGFzc05hbWUpfSB7Li4ucmVzdH0+XG4gICAgICAgIHtcbiAgICAgICAgICBkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJiYXNlLWxpc3QtaXRlbVwiPlxuICAgICAgICAgICAgICAgIHtpdGVtUmVuZGVyZXIoe2l0ZW0sIGluZGV4fSl9XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgPC91bD5cbiAgICAgIHthZnRlclJlbmRlcmVyKGRhdGEpfVxuICAgIDwvPlxuICApXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2luZ1N0YXRlTWFuYWdlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZFByb3BzKHByb3BzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFN0YXRlQnlQcm9wc0FuZEN1cnJlbnRQYWdlSW5kZXgoKTtcbiAgfVxuXG4gIGdldFN0YXRlQnlQcm9wc0FuZEN1cnJlbnRQYWdlSW5kZXggPSAocHJvcHMgPSB0aGlzLnByb3BzLCBjdXJyZW50UGFnZUluZGV4ID0gcHJvcHMuY3VycmVudFBhZ2VJbmRleCkgPT4ge1xuICAgIGNvbnN0IHsgcGFnZVNpemUsIGRhdGEgfSA9IHByb3BzO1xuICAgIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyBwYWdlU2l6ZSk7XG4gICAgY29uc3Qgc3RhcnQgPSAoY3VycmVudFBhZ2VJbmRleCAtIDEpICogcGFnZVNpemU7XG4gICAgY29uc3QgZW5kID0gY3VycmVudFBhZ2VJbmRleCAqIHBhZ2VTaXplO1xuICAgIGNvbnN0IGN1cnJlbnRQYWdlRGF0YSA9IGRhdGEuc2xpY2Uoc3RhcnQsICBlbmQpIHx8IFtdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc05leHRQYWdlOiBjdXJyZW50UGFnZUluZGV4IDwgdG90YWxQYWdlcyxcbiAgICAgIGhhc1ByZXZQYWdlOiBjdXJyZW50UGFnZUluZGV4ID4gMSxcbiAgICAgIGN1cnJlbnRQYWdlSW5kZXgsXG4gICAgICBjdXJyZW50UGFnZURhdGEsXG4gICAgICB0b3RhbFBhZ2VzLFxuICAgIH1cbiAgfTtcblxuICBuZXh0ID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5oYXNOZXh0UGFnZSAmJiAhdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3BNb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT5cbiAgICAgIHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleChcbiAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldlN0YXRlLmhhc05leHRQYWdlXG4gICAgICAgICAgPyBwcmV2U3RhdGUuY3VycmVudFBhZ2VJbmRleCArIDFcbiAgICAgICAgICA6IDFcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHByZXYgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhc1ByZXZQYWdlICYmICF0aGlzLnByb3BzLmluZmluaXRlTG9vcE1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT5cbiAgICAgIHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleChcbiAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldlN0YXRlLmhhc1ByZXZQYWdlXG4gICAgICAgICAgPyBwcmV2U3RhdGUuY3VycmVudFBhZ2VJbmRleCAtIDFcbiAgICAgICAgICA6IHByZXZTdGF0ZS50b3RhbFBhZ2VzXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICBpc1ZhbGlkUHJvcHMgPSAocHJvcHMgPSB0aGlzLnByb3BzKSA9PiB7XG4gICAgY29uc3Qge2RhdGEsIHBhZ2VTaXplLCBjdXJyZW50UGFnZUluZGV4ID0gMX0gPSBwcm9wcztcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gcGFnZVNpemUpO1xuICAgIHJldHVybiBkYXRhLmxlbmd0aFxuICAgICAgJiYgcGFnZVNpemUgPiAwXG4gICAgICAmJiBjdXJyZW50UGFnZUluZGV4ID49IDFcbiAgICAgICYmIGN1cnJlbnRQYWdlSW5kZXggPD0gdG90YWxQYWdlcztcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFByb3BzKHRoaXMucHJvcHMpICYmIHRoaXMucHJvcHMuY2hpbGRyZW4oe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIG5leHQ6IHRoaXMubmV4dCxcbiAgICAgIHByZXY6IHRoaXMucHJldixcbiAgICB9KVxuICB9XG59XG5cblBhZ2luZ1N0YXRlTWFuYWdlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGN1cnJlbnRQYWdlSW5kZXg6IDEsXG59O1xuXG5QYWdpbmdTdGF0ZU1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBkYXRhOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgcGFnZVNpemU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgY3VycmVudFBhZ2VJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUGFnaW5nU3RhdGVNYW5hZ2VyIGZyb20gJy4uLy4uL3BhZ2luZ19zdGF0ZV9tYW5hZ2VyJztcbmltcG9ydCBCYXNlTGlzdCBmcm9tICcuLi9iYXNlX2xpc3QnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJ1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHBhZ2luZ09wdGlvbixcbiAgICBwYWdpbmdCdG5SZW5kZXJlciA9IG5vb3AsXG4gICAgbGlzdE9wdGlvbixcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxQYWdpbmdTdGF0ZU1hbmFnZXIgey4uLnBhZ2luZ09wdGlvbn0+XG4gICAgICB7KHBhZ2luZ1Byb3BzKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEJhc2VMaXN0XG4gICAgICAgICAgICB7Li4ubGlzdE9wdGlvbn1cbiAgICAgICAgICAgIGRhdGE9e3BhZ2luZ1Byb3BzLmN1cnJlbnRQYWdlRGF0YX1cbiAgICAgICAgICAgIGFmdGVyUmVuZGVyZXI9eygpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhZ2luZ0J0blJlbmRlcmVyKHBhZ2luZ1Byb3BzKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGJlZm9yZVJlbmRlcmVyPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbihwYWdpbmdQcm9wcylcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICA8L1BhZ2luZ1N0YXRlTWFuYWdlcj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtpc01vYmlsZX0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCJcblxuaW1wb3J0IEJhc2VMaXN0IGZyb20gJy4vYmFzZV9saXN0J1xuaW1wb3J0IExldHRlclBhcGVyTGlzdCBmcm9tICcuL2xldHRlcl9wYXBlcl9saXN0J1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIFBhZ2luZ0xpc3QgfSBmcm9tICcuL3BhZ2luZ19saXN0JztcblxuY29uc3QgTGlzdCA9IGlzTW9iaWxlKCkgPyBMZXR0ZXJQYXBlckxpc3QgOiBCYXNlTGlzdDtcbmV4cG9ydCBkZWZhdWx0IExpc3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZSBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtkZWZhdWx0IGFzIEJhc2VMaXN0fSBmcm9tICcuLi9iYXNlX2xpc3QnXG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCAoe2NsYXNzTmFtZSwgLi4ucmVzdH0pID0+IHtcbiAgY29uc3QgcmVuZGVyQWRkciA9ICgpID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3NcIj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImFkZHJcIj5cbiAgICAgICAgeyflnLDlnYDvvJrlub/kuJzjg7vmt7HlnLPluILjg7vljZflsbHljLonfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicGFnZS1pbmRleFwiPuesrCAxIOmhtTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxCYXNlTGlzdFxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWUoXCJsZXR0ZXItcGFwZXItbGlzdFwiLCBjbGFzc05hbWUpfVxuICAgICAgLy8gYWZ0ZXJSZW5kZXJlcj17cmVuZGVyQWRkcn1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gIClcbn07XG4iLCJpbXBvcnQge1JvdXRlc30gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgZ290byA9IChyb3V0ZSkgPT4ge1xuICBsb2NhdGlvbi5oYXNoID0gYCMke3JvdXRlfWBcbn07XG5cbmNvbnN0IGdvdG9QaG90b0dyb3VwID0gKGlkPScnKSA9PiB7Z290byhgJHtSb3V0ZXMucGhvdG9Hcm91cHN9LyR7aWR9YCl9O1xuXG5jb25zdCBnb3RvUG9zdCA9IChpZD0nJykgPT4ge2dvdG8oYCR7Um91dGVzLnN0b3JpZXN9LyR7aWR9YCl9O1xuXG5leHBvcnQge1xuICBnb3RvLFxuICBnb3RvUG9zdCxcbiAgZ290b1Bob3RvR3JvdXAsXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcbmltcG9ydCB7QnV0dG9ufSBmcm9tICcuLi91dGlsX2NvbXAvYnV0dG9uJztcbmltcG9ydCB7dXNlUHJlZmVyZW5jZSwgdXNlU3BhY2VDb250ZW50fSBmcm9tICcuLi8uLi9jb250ZXh0L3NwYWNlX2NvbnRleHQnO1xuaW1wb3J0IHsgQmxvZ1RvcERvd24gfSBmcm9tICcuLi91dGlsX2NvbXAvbGF5b3V0JztcbmltcG9ydCB7Z290b1Bvc3R9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7bG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleX0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgKHBhZ2luZ1Byb3BzPXt9LCBidG5Qcm9wcyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwcmV2ID0gbm9vcCxcbiAgICBuZXh0ID0gbm9vcCxcbiAgICBjdXJyZW50UGFnZUluZGV4LFxuICAgIGhhc05leHRQYWdlLFxuICAgIGhhc1ByZXZQYWdlLFxuICB9ID0gcGFnaW5nUHJvcHM7XG5cbiAgY29uc3Qge1xuICAgIGRpc2FibGVBbGxCdG5zLFxuICAgIGRpc2FibGVMaXN0QnRuLFxuICAgIGRpc2FibGVQcmV2QnRuLFxuICAgIGRpc2FibGVOZXh0QnRuLFxuICAgIG9uTGlzdEJ0bkNsaWNrLFxuICB9ID0gYnRuUHJvcHM7XG5cbiAgY29uc3Qge1xuICAgIHN0YXR1czogc2hvd05hdkJ0bixcbiAgfSA9IHVzZVByZWZlcmVuY2UobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfUEFHSU5HX05BVl9CVE4pO1xuXG4gIGNvbnN0IFBhZ2luZ0J0biA9IFtcbiAgICA8QnV0dG9uIGRpc2FibGVkPXtkaXNhYmxlUHJldkJ0biB8fCAhaGFzUHJldlBhZ2V9IG9uQ2xpY2s9e3ByZXZ9PuS4iumhtTwvQnV0dG9uPixcbiAgICA8QnV0dG9uXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZUxpc3RCdG59XG4gICAgICBvbkNsaWNrPXsob25MaXN0QnRuQ2xpY2sgfHwgKCgpID0+IHtnb3RvUG9zdCgpO30pKX1cbiAgICA+XG4gICAgICDliJfooahcbiAgICA8L0J1dHRvbj4sXG4gICAgPEJ1dHRvbiBkaXNhYmxlZD17ZGlzYWJsZU5leHRCdG4gfHwgIWhhc05leHRQYWdlfSBvbkNsaWNrPXtuZXh0fT7kuIvpobU8L0J1dHRvbj4sXG4gIF07XG5cbiAgY29uc3Qgc3BhY2VTdHlsZSA9IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgIGhlaWdodDogMTIwLFxuICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICBwYWRkaW5nOiAnNXB4IDEwcHgnXG4gIH07XG5cbiAgdXNlU3BhY2VDb250ZW50KCAoc2hvd05hdkJ0biAmJiAhZGlzYWJsZUFsbEJ0bnMpICYmXG4gICAgPEJsb2dUb3BEb3duXG4gICAgICB0b3A9e251bGx9XG4gICAgICBzdHlsZT17c3BhY2VTdHlsZX1cbiAgICAgIGRvd249e1BhZ2luZ0J0bn1cbiAgICAvPixcbiAgICBbY3VycmVudFBhZ2VJbmRleCwgc2hvd05hdkJ0bl1cbiAgKTtcblxufVxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlckNvdW50KGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICBpZiAoc3RhcnRCdWZmZXJFdmVyeSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0QnVmZmVyRXZlcnkgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gYnVmZmVyQ291bnRPcGVyYXRvckZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLmxpZnQobmV3IEJ1ZmZlckNvdW50T3BlcmF0b3IoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG59XG52YXIgQnVmZmVyQ291bnRPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJDb3VudE9wZXJhdG9yKGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgdGhpcy5zdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeTtcbiAgICAgICAgaWYgKCFzdGFydEJ1ZmZlckV2ZXJ5IHx8IGJ1ZmZlclNpemUgPT09IHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlckNsYXNzID0gQnVmZmVyQ291bnRTdWJzY3JpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyQ2xhc3MgPSBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIEJ1ZmZlckNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyB0aGlzLnN1YnNjcmliZXJDbGFzcyhzdWJzY3JpYmVyLCB0aGlzLmJ1ZmZlclNpemUsIHRoaXMuc3RhcnRCdWZmZXJFdmVyeSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlckNvdW50T3BlcmF0b3I7XG59KCkpO1xudmFyIEJ1ZmZlckNvdW50U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhCdWZmZXJDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBidWZmZXJTaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5idWZmZXJTaXplID0gYnVmZmVyU2l6ZTtcbiAgICAgICAgX3RoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQnVmZmVyQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT0gdGhpcy5idWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbnZhciBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU2tpcENvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYnVmZmVyU2l6ZSA9IGJ1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLnN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5O1xuICAgICAgICBfdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXJTaXplID0gX2EuYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSA9IF9hLnN0YXJ0QnVmZmVyRXZlcnksIGJ1ZmZlcnMgPSBfYS5idWZmZXJzLCBjb3VudCA9IF9hLmNvdW50O1xuICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIGlmIChjb3VudCAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IGJ1ZmZlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSBidWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlclNraXBDb3VudFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYnVmZmVycyA9IF9hLmJ1ZmZlcnMsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb247XG4gICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTa2lwQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJDb3VudC5qcy5tYXBcbiIsImltcG9ydCB7IGZyb21FdmVudCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgbWFwLFxuICBidWZmZXJDb3VudCxcbiAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZVNjcm9sbERpcmVjdGlvbiA9ICgkZG9tKSA9PiB7XG4gIGNvbnN0IFtkaXIsIHNldERpcl0gPSB1c2VTdGF0ZSgndXAnKTtcbiAgY29uc3Qgc2Nyb2xsJCAgPSBmcm9tRXZlbnQoJGRvbSB8fCBkb2N1bWVudCwgJ3Njcm9sbCcpO1xuICBjb25zdCBzY3JvbGxEaXJDaGFuZ2VkJCA9IHNjcm9sbCQucGlwZShcbiAgICBtYXAoZSA9PiBlLnRhcmdldC5zY3JvbGxUb3ApLFxuICAgIGJ1ZmZlckNvdW50KDIpLFxuICAgIG1hcCgoW3ByZSwgbnh0XSkgPT4gcHJlIC0gbnh0ID4gMCA/ICdVUCcgOiAnRE9XTicpLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgKTtcbiAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG4gIHNjcm9sbERpckNoYW5nZWQkLnN1YnNjcmliZShzdWJqZWN0KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN1YmplY3Quc3Vic2NyaWJlKGQgPT4ge1xuICAgICAgc2V0RGlyKGQpXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHN1Yi51bnN1YnNjcmliZSgpO1xuICB9KTtcbiAgcmV0dXJuIFtkaXJdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlU2Nyb2xsRGlyZWN0aW9uOyIsImltcG9ydCB7IGZyb21FdmVudCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgbWFwLFxuICBidWZmZXJDb3VudCxcbiAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHVzZVNjcm9sbFN0YXR1cyA9ICgkZG9tLCBidWZmZXJEaXN0YW5jZSkgPT4ge1xuICBjb25zdCBbaXNIaXRCb3R0b20sIHNldFN0YXR1c10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHNjcm9sbCQgID0gZnJvbUV2ZW50KCRkb20gfHwgZG9jdW1lbnQsICdzY3JvbGwnKTtcbiAgY29uc3QgaGl0Qm90dG9tU3RhdHVzQ2hhbmdlZCQgPSBzY3JvbGwkLnBpcGUoXG4gICAgbWFwKGUgPT4ge1xuICAgICAgY29uc3QgJG9iaiA9IGUudGFyZ2V0O1xuICAgICAgaWYgKGJ1ZmZlckRpc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiAkb2JqLnNjcm9sbFRvcCA+PSAoJG9iai5zY3JvbGxIZWlnaHQgLSAkb2JqLm9mZnNldEhlaWdodCkgLSBidWZmZXJEaXN0YW5jZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkb2JqLnNjcm9sbFRvcCA9PT0gKCRvYmouc2Nyb2xsSGVpZ2h0IC0gJG9iai5vZmZzZXRIZWlnaHQpXG4gICAgfSksXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICApO1xuICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgaGl0Qm90dG9tU3RhdHVzQ2hhbmdlZCQuc3Vic2NyaWJlKHN1YmplY3QpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc3ViID0gc3ViamVjdC5zdWJzY3JpYmUocyA9PiB7XG4gICAgICBzZXRTdGF0dXMocylcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gc3ViLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuICByZXR1cm4gW2lzSGl0Qm90dG9tXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVNjcm9sbFN0YXR1cztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyAkIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuaW1wb3J0IHsgdXNlU2Nyb2xsSGl0Qm90dG9tU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29tbW9uX2hvb2tzJztcblxuY29uc3QgTW91bnRPblNjcm9sbFRvQm90dG9tID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyU2VsZWN0b3IsXG4gICAgY2hpbGRyZW4sXG4gICAgbW91bnRTaXplLFxuICAgIGJ1ZmZlckRpc3RhbmNlLFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgY29uc3QgbW91bnRTaXplQXRPbmVUaW1lID0gbW91bnRTaXplID4gMCA/IG1vdW50U2l6ZSA6IDE7XG4gIGNvbnN0IFtoaXRCb3R0b21Db3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMSAqIG1vdW50U2l6ZUF0T25lVGltZSk7XG4gIGNvbnN0IFtpc0hpdEJvdHRvbV0gPSB1c2VTY3JvbGxIaXRCb3R0b21TdGF0dXMoJCh3cmFwcGVyU2VsZWN0b3IpLCBidWZmZXJEaXN0YW5jZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNIaXRCb3R0b20pIHtcbiAgICAgIHNldENvdW50KGhpdEJvdHRvbUNvdW50ICsgMSk7XG4gICAgfVxuICB9LCBbaXNIaXRCb3R0b21dKTtcblxuICByZXR1cm4gY2hpbGRyZW4uc2xpY2UoMCwgaGl0Qm90dG9tQ291bnQgKiBtb3VudFNpemVBdE9uZVRpbWUpO1xufTtcblxuZXhwb3J0IHtcbiAgTW91bnRPblNjcm9sbFRvQm90dG9tXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gIGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5leHBvcnQgY29uc3QgUmFkaW9CdG4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGxhYmVsID0gJ+mFjee9rumhuScsXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIG9uVGV4dCA9ICflvIAnLFxuICAgIG9mZlRleHQgPSAn5YWzJyxcbiAgICBvbkNsaWNrID0gKCkgPT4ge30sXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBbb24sIHRvZ2dsZV0gPSB1c2VTdGF0ZShkZWZhdWx0VmFsdWUpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb25DbGljayhvbilcbiAgfSwgW29uXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXCJyYWRpby1idXR0b25cIiwge29ufSl9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgIHRvZ2dsZSghb24pO1xuICAgIH19PlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGFiZWxcIj57bGFiZWx977yaPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwib24tdGV4dFwiPntvblRleHR9PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2xhc2hcIj7vvI88L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJvZmYtdGV4dFwiPntvZmZUZXh0fTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZSBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtpc01vYmlsZX0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJ1xuXG5leHBvcnQgY29uc3QgQmxpbmtEb3QgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPVwiYmxpbmstZG90XCI+wrc8L3NwYW4+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU2VjdG9yTG9hZGVyID0gKHsgYWJzQ2VudGVyID0gdHJ1ZSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWUoXCJzZWN0b3JcIiwgXCJsb2FkZXJcIiwge1xuICAgICAgICBjZW50ZXI6IGFic0NlbnRlciAmJiBpc01vYmlsZSgpLFxuICAgICAgfSl9XG4gICAgLz5cbiAgKVxufTtcblxuZXhwb3J0IGNvbnN0IFRpY2tMb2FkZXIgPSAoeyBhYnNDZW50ZXIgPSB0cnVlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZShcInRpY2stbG9hZGVyXCIsIHtcbiAgICAgICAgY2VudGVyOiBhYnNDZW50ZXIgJiYgaXNNb2JpbGUoKSxcbiAgICAgIH0pfVxuICAgIC8+XG4gIClcbn07XG5cbmNvbnN0IHdhbGtpbmdTcXVhcmUgPSAoe2NlbnRlcn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lKFxuICAgICAgXCJzcGlubmVyXCIsXG4gICAgICB7Y2VudGVyOiBjZW50ZXJ9XG4gICAgKX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNxdWFyZTFcIiAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcXVhcmUyXCIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3F1YXJlM1wiIC8+XG4gICAgPC9kaXY+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpY2tMb2FkZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2VuU3ZnTG9nb30gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbi8qKlxuICog5Y2a5a6iIExPR09cbiAqIEBwYXJhbSB7c3RyaW5nfSBzaXplIFsnc21hbGwnLCAnbWlkZGxlJywgJ2JpZyddXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICh7c2l6ZVN0ciwgY29sb3J9KSA9PiB7XG4gIGNvbnN0IHNpemVNYXAgPSB7XG4gICAgc21hbGw6IDMsXG4gICAgbWlkZGxlOiA0LFxuICAgIGJpZzogNVxuICB9O1xuXG4gIGNvbnN0IHN0eWxlPXtwYWRkaW5nTGVmdDogJy40ZW0nfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nb1wiIHN0eWxlPXtzdHlsZX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgIF9faHRtbDogZ2VuU3ZnTG9nbyhzaXplTWFwW3NpemVTdHJdLCBudWxsLCBjb2xvcilcbiAgICB9fS8+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJvZ3Jlc3NJbmRpY2F0b3IgfSBmcm9tICcuL3Byb2dyZXNzX2luZGljYXRvcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEN1c3RvbUZvbnQgfSBmcm9tICcuL2N1c3RvbV9mb250JztcbmV4cG9ydCAqIGZyb20gJy4vYXR0YWNoX2d1aWRlX2xpbmUnO1xuZXhwb3J0ICogZnJvbSAnLi9wcm9ncmVzc19pbmRpY2F0b3InO1xuZXhwb3J0ICogZnJvbSAnLi9idXR0b24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDdXJzb3JUb29sdGlwIH0gZnJvbSAnLi9jdXJzb3JfdG9vbGx0aXAnO1xuZXhwb3J0ICogZnJvbSAnLi9jdXN0b21fbGluay9iYXNlX2xpbmsnO1xuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQnO1xuZXhwb3J0ICogZnJvbSAnLi9saXN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUGFnaW5nTWFuYWdlciB9IGZyb20gJy4vcGFnaW5nX3N0YXRlX21hbmFnZXInO1xuZXhwb3J0ICogZnJvbSAnLi9tb3VudF9vbl9zY3JvbGxfdG9fYm90dG9tJ1xuZXhwb3J0ICogZnJvbSAnLi9yYWRpb19idG4nO1xuZXhwb3J0ICogZnJvbSAnLi9zcGlubmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTG9nbyB9IGZyb20gJy4vbG9nbydcblxuZXhwb3J0IGNvbnN0IEVtcHR5RGl2ID0gKCkgPT4ge1xuICByZXR1cm4gPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywgaGVpZ2h0OiAnMTAwJSd9fSAvPlxufTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5UGxhY2VIb2xkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gc3R5bGU9e3tjb2xvcjogJyNjY2MnfX0+5pegPC9zcGFuPlxuICApXG59O1xuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBHb2xkZW5Ub3BEb3duIGZyb20gJy4vZ29sZGVuX3JhdGlvX3RvcF9kb3duJ1xuaW1wb3J0IHtXaXRoR3VpZGVMaW5lfSBmcm9tICcuLi9hdHRhY2hfZ3VpZGVfbGluZSc7XG5pbXBvcnQge0VtcHR5RGl2fSBmcm9tICcuLi9pbmRleCc7XG5cbmNvbnN0IEVtcHR5RGl2V2l0aEd1aWRlTGluZSA9IFdpdGhHdWlkZUxpbmUoRW1wdHlEaXYpO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge3RvcCwgZG93biwgYWxpZ25Ub3BJdGVtcywgcmF0aW8sIHBhZGRpbmcsIGZ1bGxIZWlnaHQsIHdpdGhHdWlkZUxpbmUsIHN0eWxlfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPEdvbGRlblRvcERvd25cbiAgICAgIHJhdGlvPXtyYXRpb31cbiAgICAgIHRvcD17KFxuICAgICAgICA8R29sZGVuVG9wRG93blxuICAgICAgICAgIGRvd249eyhcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBhbGlnblRvcEl0ZW1zIHx8ICd1bnNldCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RvcH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgdG9wPXt3aXRoR3VpZGVMaW5lID8gPEVtcHR5RGl2V2l0aEd1aWRlTGluZSB0b3AgYm90dG9tLz4gOiBudWxsfVxuICAgICAgICAgIHJldmVyc2VcbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICBkb3duPXsoXG4gICAgICAgIDxkaXYgc3R5bGU9e3twYWRkaW5nLCBoZWlnaHQ6IGZ1bGxIZWlnaHQgPyAnMTAwJScgOiAnYXV0bycsIC4uLnN0eWxlfX0+XG4gICAgICAgICAge2Rvd259XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAvPlxuICApXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5pbXBvcnQgQmxvZ1RvcERvd24gZnJvbSAnLi4vbGF5b3V0L2Jsb2dfdG9wX2Rvd24nO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vc3Bpbm5lcic7XG5cbmNvbnN0IHBvc2l0aW9uZWRTcGlubmVyID0gKCkgPT4ge1xuICByZXR1cm4gaXNNb2JpbGUoKVxuICAgID8gPFNwaW5uZXIgLz5cbiAgICA6IDxCbG9nVG9wRG93biB0b3A9e251bGx9IGRvd249ezxTcGlubmVyLz59IC8+XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwb3NpdGlvbmVkU3Bpbm5lcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCJyZWFjdC1hcG9sbG9cIjtcbmltcG9ydCBQb3NpdGlvbmVkU3Bpbm5lciBmcm9tICcuLi9zcGlubmVyL3Bvc2l0aW9uZWRfc3Bpbm5lcic7XG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi9zcGlubmVyJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wcykgPT4ge1xuICBjb25zdCB7IHNwaW5uZXJBdENvbnRlbnQsIC4uLnJlc3QgfSA9IHByb3BzO1xuICBjb25zdCBzcGlubmVyID0gcHJvcHMuc3Bpbm5lciB8fCAoXG4gICAgc3Bpbm5lckF0Q29udGVudFxuICAgICAgPyA8UG9zaXRpb25lZFNwaW5uZXIgLz5cbiAgICAgIDogPFNwaW5uZXIgLz5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxRdWVyeVxuICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAgeyh7ZGF0YSwgbG9hZGluZywgZXJyb3J9KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiAnOignXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvYWRpbmdcbiAgICAgICAgICA/IHNwaW5uZXJcbiAgICAgICAgICA6IHByb3BzLmNoaWxkcmVuKHtlcnJvciwgZGF0YX0pO1xuICAgICAgfX1cbiAgICA8L1F1ZXJ5PlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcblxuaW1wb3J0IFF1ZXJ5V2l0aFNwaW5uZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy91dGlsX2NvbXAvcXVlcnlfd2l0aF9zcGlubmVyJ1xuXG5jb25zdCBxdWVyeUNvdmVycyA9IGdxbGBcbiAgcXVlcnkge1xuICAgIGNvdmVycyB7XG4gICAgICBjb250ZW50X2lkXG4gICAgICB0eXBlXG4gICAgICBzaG93XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBDb3ZlciA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeVdpdGhTcGlubmVyXG4gICAgICBxdWVyeT17cXVlcnlDb3ZlcnN9XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgY29uc3QgY292ZXIgPSBkYXRhLmNvdmVycy5maWx0ZXIoKHtzaG93fSkgPT4gc2hvdylbMF07XG4gICAgICAgIGlmICghY292ZXIpIHJldHVybiAnOnwnO1xuICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oY292ZXIpO1xuICAgICAgfX1cbiAgICA8L1F1ZXJ5V2l0aFNwaW5uZXI+XG4gIClcbn07XG5cbmV4cG9ydCB7IHF1ZXJ5Q292ZXJzIH07XG5leHBvcnQgZGVmYXVsdCBDb3ZlcjtcblxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcblxuaW1wb3J0IFF1ZXJ5V2l0aFNwaW5uZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy91dGlsX2NvbXAvcXVlcnlfd2l0aF9zcGlubmVyJ1xuaW1wb3J0IHtDTkRhdGVTdHJpbmd9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHF1ZXJ5UG9zdExpc3QgPSBncWxgXG4gIHtcbiAgICBwb3N0cyhzb3J0OiBcImRhdGU6REVTQ1wiKSB7XG4gICAgICBfaWRcbiAgICAgIHRpdGxlXG4gICAgICBkYXRlXG4gICAgICBjb250ZW50XG4gICAgICBwaG90b2dyb3VwIHtcbiAgICAgICAgdGl0bGVcbiAgICAgICAgX2lkXG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBtZDJodG0gPSBtZCA9PiB3aW5kb3cuY29udmVydGVyICYmIG1kXG4gID8gd2luZG93LmNvbnZlcnRlci5tYWtlSHRtbChtZClcbiAgOiBtZDtcblxuY29uc3QgcG9zdEZvcm1hdHRlciA9IChwb3N0KSA9PiB7XG4gIGNvbnN0IHsgY29udGVudCwgZGF0ZSwgcGhvdG9ncm91cCB9ID0gcG9zdDtcbiAgcmV0dXJuIHtcbiAgICAuLi5wb3N0LFxuICAgIHBob3RvZ3JvdXBJZDogcGhvdG9ncm91cCA/IHBob3RvZ3JvdXAuX2lkIDogbnVsbCxcbiAgICBodG1sOiBtZDJodG0oY29udGVudCksXG4gICAgZGF0ZTogQ05EYXRlU3RyaW5nKG5ldyBEYXRlKGRhdGUpKVxuICB9XG59O1xuXG5jb25zdCBQb3N0TGlzdCA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeVdpdGhTcGlubmVyXG4gICAgICBxdWVyeT17cXVlcnlQb3N0TGlzdH1cbiAgICAgIHNwaW5uZXJBdENvbnRlbnQ9e3Byb3BzLnNwaW5uZXJBdENvbnRlbnR9XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKGRhdGEucG9zdHMubWFwKCh7X2lkOiBpZCwgZGF0ZSwgY29udGVudCwgLi4ucmVzdH0pID0+ICh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICBjb250ZW50OiBtZDJodG0oY29udGVudCksXG4gICAgICAgICAgLi4ucmVzdFxuICAgICAgICB9KSkubWFwKHBvc3RGb3JtYXR0ZXIpKTtcbiAgICAgIH19XG4gICAgPC9RdWVyeVdpdGhTcGlubmVyPlxuICApXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3N0TGlzdDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ3FsIGZyb20gXCJncmFwaHFsLXRhZ1wiO1xuXG5pbXBvcnQgUXVlcnlXaXRoU3Bpbm5lciBmcm9tICcuLi8uLi9jb21wb25lbnRzL3V0aWxfY29tcC9xdWVyeV93aXRoX3NwaW5uZXInXG5cbmV4cG9ydCBjb25zdCBxdWVyeVBob3RvR3JvdXBzID0gZ3FsYFxuICB7XG4gICAgcGhvdG9ncm91cHMge1xuICAgICAgX2lkXG4gICAgICB0aXRsZVxuICAgICAgZGF0ZVxuICAgICAgdmlzaWJsZVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgUGhvdG9Hcm91cHMgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UXVlcnlXaXRoU3Bpbm5lclxuICAgICAgcXVlcnk9e3F1ZXJ5UGhvdG9Hcm91cHN9XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKFxuICAgICAgICAgIGRhdGEucGhvdG9ncm91cHNcbiAgICAgICAgICAgIC5maWx0ZXIoKHt2aXNpYmxlfSkgPT4gdmlzaWJsZSlcbiAgICAgICAgICAgIC5tYXAoKHtfaWQ6IGlkLCAuLi5yZXN0fSkgPT4gKHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGhvdG9Hcm91cHM7XG5cblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBncWwgZnJvbSBcImdyYXBocWwtdGFnXCI7XG5pbXBvcnQge2FwaUVuZFBvaW50fSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cbmltcG9ydCBRdWVyeVdpdGhTcGlubmVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdXRpbF9jb21wL3F1ZXJ5X3dpdGhfc3Bpbm5lcidcblxuXG5leHBvcnQgY29uc3QgcXVlcnlQaG90b0dyb3VwID0gZ3FsYFxuICBxdWVyeSBQaG90b2dyb3VwKCRpZDogSUQhKSB7XG4gICAgcGhvdG9ncm91cChpZDogJGlkKSB7XG4gICAgICBwb3N0IHtcbiAgICAgICAgX2lkXG4gICAgICB9XG4gICAgICBwaG90b3Moc29ydDogXCJkYXRlOkRFU0NcIikge1xuICAgICAgICBfaWRcbiAgICAgICAgdGl0bGVcbiAgICAgICAgZGF0ZVxuICAgICAgICBjb250ZW50IHtcbiAgICAgICAgICB1cmwgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBob3RvR3JvdXBzID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeVBob3RvR3JvdXB9XG4gICAgICBzcGlubmVyPXtwcm9wcy5zcGlubmVyfVxuICAgICAgdmFyaWFibGVzPXt7XG4gICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgY29uc3QgcGhvdG9zID0gZGF0YS5waG90b2dyb3VwLnBob3Rvcy5tYXAoKHtjb250ZW50LCAuLi5yZXN0fSkgPT4gKHtcbiAgICAgICAgICB1cmw6IGFwaUVuZFBvaW50ICsgY29udGVudC51cmwsXG4gICAgICAgICAgLi4ucmVzdFxuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IHBvc3QgPSBkYXRhLnBob3RvZ3JvdXAucG9zdDtcblxuICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oe3Bob3RvcywgcG9zdH0pO1xuICAgICAgfX1cbiAgICA8L1F1ZXJ5V2l0aFNwaW5uZXI+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3RvR3JvdXBzO1xuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBHT0xERU5fUkFUSU8gfSBmcm9tICcuLi9jb25zdCdcblxuY29uc3QgY29tcHV0ZUNvbnRhaW5lclN0eWxlID0gKCkgPT4ge1xuICBjb25zdCBiYXNlUGFkZGluZyA9IDUwO1xuICBjb25zdCB3aCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgY29uc3Qgd3cgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgY29uc3QgY29udGFpbmVyQ29udGVudEh0ID0gd2ggLSAyICogYmFzZVBhZGRpbmc7XG4gIGNvbnN0IGNvbnRhaW5lckNvbnRlbnRXZCA9IGNvbnRhaW5lckNvbnRlbnRIdCAqICgxICsgR09MREVOX1JBVElPKTtcbiAgY29uc3QgbHJQYWRkaW5nID0gKHd3IC0gY29udGFpbmVyQ29udGVudFdkKSAvIDI7XG5cbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgd2lkdGg6IGBjYWxjKDEwMCUgLSAkezIgKiBsclBhZGRpbmd9cHgpYCxcbiAgICBoZWlnaHQ6IGBjYWxjKDEwMCUgLSAkezIgKiBiYXNlUGFkZGluZ31weClgLFxuICAgIG1hcmdpbjogYCR7YmFzZVBhZGRpbmd9cHggJHtsclBhZGRpbmd9cHhgXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQY0xheW91dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc3R5bGU6IGNvbXB1dGVDb250YWluZXJTdHlsZSgpLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnVwZGF0ZVN0eWxlKVxuICB9XG5cbiAgdXBkYXRlU3R5bGUgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdHlsZTogY29tcHV0ZUNvbnRhaW5lclN0eWxlKCksXG4gICAgfSlcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xlZnQsIHJpZ2h0fSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGxyXCIgc3R5bGU9e3RoaXMuc3RhdGUuc3R5bGV9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnRcIiBzdHlsZT17e2ZsZXg6IChHT0xERU5fUkFUSU8gKyAxKX19PntsZWZ0fTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0XCIgc3R5bGU9e3tcbiAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICAgIH19PntyaWdodH08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGNvbnRhaW5lclN0eWxlID0ge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGhlaWdodDogJzEwMCUnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbn07XG5cbmNvbnN0IGNvbnRlbnRJdGVtU3R5bGUgPSB7XG4gIHBhZGRpbmc6IDMwLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgKHt0b3AsIGRvd259KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgdGRcIiBzdHlsZT17Y29udGFpbmVyU3R5bGV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BcIiBzdHlsZT17e1xuICAgICAgICAuLi5jb250ZW50SXRlbVN0eWxlLFxuICAgICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgfX0+e3RvcH08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZG93blwiIHN0eWxlPXt7XG4gICAgICAgIC4uLmNvbnRlbnRJdGVtU3R5bGUsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBmbGV4OiAnMSAxIGF1dG8nLFxuICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgfX0+e2Rvd259PC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGhhc0Vycm9yOiBmYWxzZSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaGFzRXJyb3I6IHRydWUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiAnOignXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yQm91bmRhcnkiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ1NTVHJhbnNpdGlvbkdyb3VwIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuaW1wb3J0IHtnZXRJbWFnZSwgc3RvcmUsIG5vb3AsIGlzTW9iaWxlfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxuaW1wb3J0IFNwaW5uZXIgZnJvbSBcIi4uL3V0aWxfY29tcC9zcGlubmVyXCJcbmltcG9ydCBDdXJzb3JUb29sdGlwIGZyb20gJy4uL3V0aWxfY29tcC9jdXJzb3JfdG9vbGx0aXAnO1xuXG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmNsYXNzIEltZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IGhhc0ltZ0xvYWRlZCA9IHN0b3JlLmdldChwcm9wcy51cmwpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2FkaW5nOiAhaGFzSW1nTG9hZGVkLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLmxvYWRJbWFnZSA9IHRoaXMubG9hZEltYWdlLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmxvYWRJbWFnZSh0aGlzLnByb3BzLnNyYyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnNyYyAhPT0gbmV4dFByb3BzLnNyYykge1xuICAgICAgdGhpcy5sb2FkSW1hZ2UobmV4dFByb3BzLnNyYyk7XG4gICAgfVxuICB9XG5cbiAgbG9hZEltYWdlICh1cmwpIHtcbiAgICBjb25zdCBvbkxvYWQgPSB0aGlzLnByb3BzLm9uTG9hZCB8fCBub29wO1xuICAgIGlmIChzdG9yZS5nZXQodXJsKSkge1xuICAgICAgb25Mb2FkKHVybCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7bG9hZGluZzogdHJ1ZX0pO1xuICAgIGdldEltYWdlKHVybClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgb25Mb2FkKHVybCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gIH07XG5cbiAgcmVuZGVySW1nID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVBbmltYXRpb24gfHwgaXNNb2JpbGUoKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17dGhpcy5wcm9wcy5zcmN9XG4gICAgICAgICAga2V5PXt0aGlzLnByb3BzLnNyY31cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XG4gICAgICAgICAgc3R5bGU9e3RoaXMucHJvcHMuc3R5bGV9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8Q1NTVHJhbnNpdGlvbkdyb3VwXG4gICAgICAgIGNvbXBvbmVudD17UmVhY3QuRnJhZ21lbnR9XG4gICAgICAgIHRyYW5zaXRpb25OYW1lPVwiZXhhbXBsZVwiXG4gICAgICAgIHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezMwMH1cbiAgICAgICAgdHJhbnNpdGlvbkxlYXZlVGltZW91dD17MzAwfVxuICAgICAgPlxuICAgICAgICA8Q3Vyc29yVG9vbHRpcFxuICAgICAgICAgIHRvb2x0aXA9e3RoaXMucHJvcHMudG9vbHRpcH1cbiAgICAgICAgPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgICh7IHNob3dUb29sdGlwLCBoaWRlVG9vbHRpcCB9KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgc3JjPXt0aGlzLnByb3BzLnNyY31cbiAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5zcmN9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX1cbiAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17c2hvd1Rvb2x0aXB9XG4gICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e2hpZGVUb29sdGlwfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIDwvQ3Vyc29yVG9vbHRpcD5cbiAgICAgIDwvQ1NTVHJhbnNpdGlvbkdyb3VwPlxuICAgIClcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiAnOignXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUubG9hZGluZyAmJiAhdGhpcy5wcm9wcy5sb2FkZWRcbiAgICAgID8gKCF0aGlzLnByb3BzLmhpZGVTcGlubmVyICYmIDxTcGlubmVyLz4pXG4gICAgICA6IHRoaXMucmVuZGVySW1nKClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWc7XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgSW1nIGZyb20gJy4uL0ltZy9pbWcnO1xuXG5jb25zdCBQaG90byA9ICh7cGhvdG8sIGNsYXNzTmFtZSwgc2hvd1RpdGxlLCAuLi5yZXN0fSkgPT4ge1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ1N0YXRlXSA9IHVzZVN0YXRlKHRydWUpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgcG9zdCAke2NsYXNzTmFtZX1gfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jb250ZW50XCI+XG4gICAgICAgIDxJbWdcbiAgICAgICAgICBzcmM9e3Bob3RvLnVybH1cbiAgICAgICAgICBvbkxvYWQ9eygpID0+IHtcbiAgICAgICAgICAgIHNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICB7Li4ucmVzdH0gdG9vbHRpcD17cGhvdG8udGl0bGV9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltYWdlLXRpdGxlXCIgc3R5bGU9e3tjb2xvcjogJyNmZmYnfX0+e3Bob3RvLnRpdGxlfTwvZGl2PlxuICAgICAgICA8L0ltZz5cbiAgICAgICAgeyhzaG93VGl0bGUgJiYgIWxvYWRpbmcpICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBob3RvLXRpdGxlXCI+XG4gICAgICAgICAgICB7KHBob3RvLnRpdGxlIHx8ICctJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3RvIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtkZWZhdWx0IGFzIFBob3RvUHJvdmlkZXJ9IGZyb20gJy4uLy4uL2NvbnRhaW5lcnMvcGhvdG8nO1xuaW1wb3J0IFBob3RvIGZyb20gJy4vcGhvdG8nO1xuaW1wb3J0IHtDb21wT2Zmc2V0fSBmcm9tICcuLi91dGlsX2NvbXAvbGF5b3V0JztcbmltcG9ydCB7QklHX1JBVElPfSBmcm9tICcuLi91dGlsX2NvbXAvbGF5b3V0L2NvbnN0JztcblxuY29uc3QgUGhvdG9Db21wID0gKHtpZCwgbWF0Y2gsIC4uLnJlc3R9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFBob3RvUHJvdmlkZXJcbiAgICAgIGlkPXtpZCB8fCBtYXRjaC5wYXJhbXMuaWR9XG4gICAgPlxuICAgICAgeyhwaG90bykgPT4ge1xuICAgICAgICByZXR1cm4gPFBob3RvIHBob3RvPXtwaG90b30gey4uLnJlc3R9IC8+XG4gICAgICB9fVxuICAgIDwvUGhvdG9Qcm92aWRlcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcE9mZnNldChQaG90b0NvbXAsIEJJR19SQVRJTyk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgeyBnZXRJbWFnZSwgdGhyb3R0bGUsIG5vb3AsIGlzTW9iaWxlIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCB7IFByb2dyZXNzSW5kaWNhdG9yLCBEcmFnVGlja0luZGljYXRvciwgVGlja0luZGljYXRvciwgUGhvdG9UaWNrSW5kaWNhdG9yIH0gZnJvbSAnLi4vdXRpbF9jb21wJztcbmltcG9ydCBQaG90byBmcm9tIFwiLi4vcGhvdG8vcGhvdG9cIjtcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0IHtDb21wT2Zmc2V0fSBmcm9tICcuLi91dGlsX2NvbXAvbGF5b3V0JztcbmltcG9ydCB7IGdvdG9Qb3N0IH0gZnJvbSAnLi4vLi4vdXRpbHMvJztcbmltcG9ydCB7QklHX1JBVElPfSBmcm9tICcuLi91dGlsX2NvbXAvbGF5b3V0L2NvbnN0JztcbmltcG9ydCB7IFdpdGhTcGFjZUNvbnRleHRIT0MgfSBmcm9tICcuLi8uLi9jb250ZXh0L3NwYWNlX2NvbnRleHQnO1xuXG5jbGFzcyBQaG90b3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudEluZGV4OiAwLFxuICAgICAgaXNDdXJyZW50SW1nUmVhZHk6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHBob3RvVXJsQXJyID0gdGhpcy5wcm9wcy5waG90b3MubWFwKCh7dXJsfSkgPT4gdXJsKTtcbiAgICB0aGlzLnByZUxvYWRQaG90b3MocGhvdG9VcmxBcnIpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5zZXRTaWRlU3BhY2VDb250ZW50KG51bGwpO1xuICB9XG5cbiAgcmVuZGVyVGljayA9ICgpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudEluZGV4O1xuICAgIGNvbnN0IHBob3RvcyA9IHRoaXMucHJvcHMucGhvdG9zO1xuICAgIGNvbnN0IHBvc3RJZCA9IHRoaXMucHJvcHMucG9zdCAmJiB0aGlzLnByb3BzLnBvc3QuX2lkO1xuICAgIGNvbnN0IHRvdGFsID0gcGhvdG9zLmxlbmd0aDtcbiAgICBjb25zdCBQb3N0TGluayA9ICh7IGlkIH0pID0+IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGluay10by1wb3N0XCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBnb3RvUG9zdChpZCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgICBjb25zdCBQaG90b0luZGljYXRvciA9IENvbXBPZmZzZXQoKHByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnByb3BzLnBvc3QgPyA8UG9zdExpbmsgaWQ9e3Bvc3RJZH0vPiA6IG51bGwsXG4gICAgICAgIDxEcmFnVGlja0luZGljYXRvclxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgLz4sXG4gICAgICBdO1xuICAgIH0sIEJJR19SQVRJTyk7XG5cbiAgICB0aGlzLnByb3BzLnNldFNpZGVTcGFjZUNvbnRlbnQoXG4gICAgICA8UGhvdG9JbmRpY2F0b3JcbiAgICAgICAgY3VycmVudD17aW5kZXggKyAxfVxuICAgICAgICB0b3RhbD17dG90YWx9XG4gICAgICAgIG9uRHJvcD17dGhyb3R0bGUodGhpcy5nb3RvLCAzMDApfVxuICAgICAgICBvbkNsaWNrPXt0aHJvdHRsZSh0aGlzLm5leHQsIDMwMCl9XG4gICAgICAgIGFic1JpZ2h0XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgaGFuZGxlQ3VycmVudEltZ0xvYWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0N1cnJlbnRJbWdSZWFkeTogdHJ1ZSxcbiAgICB9LCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMudGh1bWJuYWlsTW9kZSkge1xuICAgICAgICB0aGlzLnJlbmRlclRpY2soKTtcbiAgICAgIH1cbiAgICB9KVxuICB9O1xuXG4gIHByZUxvYWRQaG90b3MgPSAodXJscykgPT4ge1xuICAgIHVybHMubWFwKGdldEltYWdlKVxuICB9O1xuXG4gIG5leHRJbmRleCA9IChjdXJyZW50SW5kZXgpID0+IHtcbiAgICBpZiAoKGN1cnJlbnRJbmRleCArIDEpIDw9IHRoaXMucHJvcHMucGhvdG9zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBjdXJyZW50SW5kZXggKyAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBnb3RvID0gKGluZGV4KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2dvdG8nKTtcbiAgICBpZiAoIXRoaXMucHJvcHMucGhvdG9zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRJbmRleDogaW5kZXggLSAxLFxuICAgIH0sIHRoaXMucmVuZGVyVGljayk7XG4gIH07XG5cbiAgbmV4dCA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnbmV4dCcpO1xuICAgIGlmICghdGhpcy5wcm9wcy5waG90b3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2lzQ3VycmVudEltZ1JlYWR5OiBmYWxzZX0pO1xuICAgIGNvbnN0IHRvdGFsTGVuID0gdGhpcy5wcm9wcy5waG90b3MubGVuZ3RoO1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRJbmRleCA8IHRvdGFsTGVuIC0gMSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcbiAgICAgICAgY3VycmVudEluZGV4OiBwcmV2U3RhdGUuY3VycmVudEluZGV4ICsgMVxuICAgICAgfSksIHRoaXMucmVuZGVyVGljayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50SW5kZXg6IDBcbiAgICAgIH0sIHRoaXMucmVuZGVyVGljayk7XG4gICAgfVxuICAgIC8vIHRoaXMucmVuZGVyVGljaygpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudEluZGV4O1xuICAgIGNvbnN0IHBob3RvcyA9IHRoaXMucHJvcHMucGhvdG9zO1xuICAgIGNvbnN0IHRvdGFsID0gcGhvdG9zLmxlbmd0aDtcbiAgICBjb25zdCBoYXNNdWx0aVBob3RvcyA9IHRvdGFsID4gMTtcblxuICAgIGlmICghcGhvdG9zIHx8ICFwaG90b3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJzooIG5vdCBmb3VuZCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwicGhvdG9zXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBtYXhXaWR0aDogdGhpcy5wcm9wcy50aHVtYm5haWxNb2RlID8gMzAgOiAndW5zZXQnLFxuICAgICAgICB9fVxuICAgICAgICBkYXRhLXByb2c9e2Ake2luZGV4ICsgMX0gb2YgJHtwaG90b3MubGVuZ3RofWB9XG4gICAgICA+XG4gICAgICAgIDxQaG90b1xuICAgICAgICAgIHBob3RvPXtwaG90b3NbaW5kZXhdfVxuICAgICAgICAgIG9uTG9hZD17dGhpcy5oYW5kbGVDdXJyZW50SW1nTG9hZH1cbiAgICAgICAgICBvbkNsaWNrPXtoYXNNdWx0aVBob3RvcyA/IHRocm90dGxlKHRoaXMubmV4dCwgMzAwKSA6IG5vb3B9XG4gICAgICAgICAgc3R5bGU9e3sgY3Vyc29yOiBoYXNNdWx0aVBob3RvcyA/ICdwb2ludGVyJyA6ICdkZWZhdWx0J319XG4gICAgICAgICAgaGlkZVNwaW5uZXI9e3RoaXMucHJvcHMuaGlkZVNwaW5uZXJ9XG4gICAgICAgIC8+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnNob3dOZXh0VGh1bWJuYWlsICYmIGhhc011bHRpUGhvdG9zICYmIHRoaXMuc3RhdGUuaXNDdXJyZW50SW1nUmVhZHkgJiYgKCA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbC1wcm9ncmVzcy13cmFwcGVyXCI+XG4gICAgICAgICAgICAgIDxQaG90b1xuICAgICAgICAgICAgICAgIHBob3RvPXtwaG90b3NbdGhpcy5uZXh0SW5kZXgoaW5kZXgpXX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFwidGh1bWJuYWlsXCIsIHtoaWRlOiAhdGhpcy5zdGF0ZS5pc0N1cnJlbnRJbWdSZWFkeX0pfVxuICAgICAgICAgICAgICAgIGRpc2FibGVBbmltYXRpb25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYXNNdWx0aVBob3RvcyA/IHRocm90dGxlKHRoaXMubmV4dCwgMzAwKSA6IG5vb3B9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgY3Vyc29yOiBoYXNNdWx0aVBob3RvcyA/ICdwb2ludGVyJyA6ICdkZWZhdWx0J319XG4gICAgICAgICAgICAgICAgaGlkZVNwaW5uZXJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzTW9iaWxlKCkgJiYgKFxuICAgICAgICAgICAgICAgICAgPFRpY2tJbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudD17aW5kZXggKyAxfVxuICAgICAgICAgICAgICAgICAgICB0b3RhbD17dG90YWx9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2l0aFNwYWNlQ29udGV4dEhPQyhQaG90b3MpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ29tcE9mZnNldCB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgeyBCSUdfUkFUSU8gfSBmcm9tIFwiLi4vdXRpbF9jb21wL2xheW91dC9jb25zdFwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFBob3Rvc1Byb3ZpZGVyfSBmcm9tICcuLi8uLi9jb250YWluZXJzL3Bob3RvX2dyb3VwJ1xuaW1wb3J0IFBob3RvcyBmcm9tIFwiLi4vcGhvdG9zL3Bob3Rvc1wiO1xuaW1wb3J0IHt1c2VQcmVmZXJlbmNlfSBmcm9tICcuLi8uLi9jb250ZXh0L3NwYWNlX2NvbnRleHQnO1xuaW1wb3J0IHtsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5fSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IFBob3RvIGZyb20gJy4uL3Bob3RvL3Bob3RvJztcbmltcG9ydCB7bm9vcCwgdGhyb3R0bGUsIGlzTW9iaWxlfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5pbXBvcnQge3VzZU5hdkJ0bnN9IGZyb20gJy4uL2NvbW1vbl9ob29rcyc7XG5pbXBvcnQge2dvdG9QaG90b0dyb3VwfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IFBob3RvR3JvdXAgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge2lkLCBtYXRjaCwgLi4ucmVzdH0gPSBwcm9wcztcbiAgY29uc3Qge1xuICAgIHN0YXR1czogaXNJbWFnZXNGbG93TW9kZSxcbiAgfSA9IHVzZVByZWZlcmVuY2UobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfSU1BR0VTX0ZMT1cpO1xuXG4gIGNvbnN0IHNob3dJbWFnZUZsb3cgPSAoaXNJbWFnZXNGbG93TW9kZSAmJiAhcHJvcHMudGh1bWJuYWlsTW9kZSkgfHwgKGlzTW9iaWxlKCkpO1xuICAvLyBpZiAoc2hvd0ltYWdlRmxvdykge1xuICAvLyAgIHVzZU5hdkJ0bnMoe30sIHtcbiAgLy8gICAgIG9uTGlzdEJ0bkNsaWNrOiAoKSA9PiB7XG4gIC8vICAgICAgIGdvdG9QaG90b0dyb3VwKClcbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyB9XG4gIHJldHVybiAoXG4gICAgPFBob3Rvc1Byb3ZpZGVyXG4gICAgICBpZD17aWQgfHwgbWF0Y2gucGFyYW1zLmlkfVxuICAgICAgc3Bpbm5lcj17cmVzdC5zcGlubmVyfVxuICAgID5cbiAgICAgIHsoe3Bob3RvcywgcG9zdH0pID0+IHtcbiAgICAgICAgaWYgKHNob3dJbWFnZUZsb3cpIHtcbiAgICAgICAgICByZXR1cm4gcGhvdG9zLm1hcChwID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxQaG90b1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBob3RvLWluLXdhdGVyZmFsbFwiXG4gICAgICAgICAgICAgICAgZGlzYWJsZUFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHNob3dUaXRsZVxuICAgICAgICAgICAgICAgIHBob3RvPXtwfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxQaG90b3NcbiAgICAgICAgICAgIHBvc3Q9e3Bvc3R9XG4gICAgICAgICAgICBwaG90b3M9e3Bob3Rvc31cbiAgICAgICAgICAgIHNob3dOZXh0VGh1bWJuYWlsXG4gICAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUGhvdG9zUHJvdmlkZXI+XG4gIClcbn07XG5cbmNvbnN0IFBob3RvR3JvdXBXaXRoT2Zmc2V0ID0gQ29tcE9mZnNldChQaG90b0dyb3VwLCBCSUdfUkFUSU8pO1xuY29uc3QgUGhvdG9Hcm91cFRodW1ibmFpbCA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGlkLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8UGhvdG9Hcm91cFxuICAgICAgaWQ9e2lkfVxuICAgICAgc2hvd05leHRUaHVtYm5haWw9e2ZhbHNlfVxuICAgICAgdGh1bWJuYWlsTW9kZT17dHJ1ZX1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gICk7XG59O1xuXG5leHBvcnQge1xuICBQaG90b0dyb3VwIGFzIEJhc2VQaG90b0dyb3VwLFxuICBQaG90b0dyb3VwV2l0aE9mZnNldCxcbiAgUGhvdG9Hcm91cFRodW1ibmFpbFxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcbmltcG9ydCB7IEJsb2dUb3BEb3duIH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXRcIjtcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcbmltcG9ydCB7UGhvdG9Hcm91cFRodW1ibmFpbH0gZnJvbSAnLi4vcGhvdG9ncm91cCc7XG5pbXBvcnQge2dvdG9QaG90b0dyb3VwfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgVGlja0xvYWRlciBmcm9tICcuLi91dGlsX2NvbXAvc3Bpbm5lcic7XG5pbXBvcnQge1RpY2tJbmRpY2F0b3J9IGZyb20gJy4uL3V0aWxfY29tcC9wcm9ncmVzc19pbmRpY2F0b3InO1xuaW1wb3J0IHt1c2VOYXZCdG5zfSBmcm9tICcuLi9jb21tb25faG9va3MnO1xuXG5jb25zdCBQaG90b3NBdHRhY2htZW50ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPVwicGhvdG9zLWF0dGFjaG1lbnRcIlxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBnb3RvUGhvdG9Hcm91cChwcm9wcy5pZClcbiAgICAgIH19XG4gICAgPlxuICAgICAgPFBob3RvR3JvdXBUaHVtYm5haWxcbiAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICBoaWRlU3Bpbm5lcj17aXNNb2JpbGUoKX1cbiAgICAgICAgc3Bpbm5lcj17PFRpY2tMb2FkZXIgYWJzQ2VudGVyPXtmYWxzZX0vPn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgcG9zdCwgY2xhc3NOYW1lLCB0b3RhbExlbiwgaW5kZXgsIG5leHQsIGRpc2FibGVUaWNrXG4gIH0gPSBwcm9wcztcblxuICBpZiAoaXNNb2JpbGUoKSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YHBvc3QgJHtjbGFzc05hbWV9YH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC10aXRsZVwiPntwb3N0LnRpdGxlfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtY29udGVudCBtYXJrZG93bi1ib2R5XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHBvc3QuaHRtbH19IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1kYXRlXCI+e3Bvc3QuZGF0ZX08L2Rpdj5cbiAgICAgICAgey8qe3Bvc3QucGhvdG9ncm91cElkICYmIDxQaG90b3NBdHRhY2htZW50IGlkPXtwb3N0LnBob3RvZ3JvdXBJZH0vPn0qL31cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHVzZU5hdkJ0bnMoe1xuICAgIC4uLnByb3BzLFxuICAgIGN1cnJlbnRQYWdlSW5kZXg6IGluZGV4LFxuICB9LCB7XG4gICAgZGlzYWJsZUFsbEJ0bnM6IGRpc2FibGVUaWNrLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxCbG9nVG9wRG93blxuICAgICAgdG9wPXtbXG4gICAgICAgIHBvc3QudGl0bGUsICFkaXNhYmxlVGljayAmJiAoXG4gICAgICAgIDxUaWNrSW5kaWNhdG9yXG4gICAgICAgICAgdG90YWw9e3RvdGFsTGVufVxuICAgICAgICAgIGN1cnJlbnQ9e2luZGV4fVxuICAgICAgICAgIG9uQ2xpY2s9e25leHR9XG4gICAgICAgICAgZml4ZWRUb3BcbiAgICAgICAgLz5cbiAgICAgICldfVxuICAgICAgcGFkZGluZz1cIjAgMTBweFwiXG4gICAgICBkb3duPXsoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgcG9zdCAke2NsYXNzTmFtZX1gfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtY29udGVudCBtYXJrZG93bi1ib2R5XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHBvc3QuaHRtbH19IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWRhdGVcIj57cG9zdC5kYXRlfTwvZGl2PlxuICAgICAgICAgIHtwb3N0LnBob3RvZ3JvdXBJZCAmJiA8UGhvdG9zQXR0YWNobWVudCBpZD17cG9zdC5waG90b2dyb3VwSWR9Lz59XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAvPlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBvc3RzUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9jb250YWluZXJzL3Bvc3RfbGlzdCc7XG5pbXBvcnQgUG9zdCBmcm9tICcuL3Bvc3QnO1xuaW1wb3J0IFBhZ2luZ1N0YXRlTWFuYWdlciBmcm9tICcuLi91dGlsX2NvbXAvcGFnaW5nX3N0YXRlX21hbmFnZXInO1xuaW1wb3J0IHsgZ290b1Bvc3QgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0ICh7aWQsIGNsYXNzTmFtZXMsIG1hdGNofSkgPT4ge1xuICBjb25zdCBwb3N0SWQgPSBpZCB8fCBtYXRjaC5wYXJhbXMuaWQ7XG4gIHJldHVybiAoXG4gICAgPFBvc3RzUHJvdmlkZXJcbiAgICAgIGlkPXtwb3N0SWR9XG4gICAgICBzcGlubmVyQXRDb250ZW50XG4gICAgPlxuICAgICAgeyhwb3N0cykgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXJGbiA9ICh7aWQ6IHRhcmdldElkfSkgPT4gdGFyZ2V0SWQgPT09IHBvc3RJZDtcbiAgICAgICAgY29uc3QgaWR4ID0gcG9zdHMuZmluZEluZGV4KGZpbHRlckZuKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UGFnaW5nU3RhdGVNYW5hZ2VyXG4gICAgICAgICAgICBkYXRhPXtwb3N0c31cbiAgICAgICAgICAgIHBhZ2VTaXplPXsxfVxuICAgICAgICAgICAgY3VycmVudFBhZ2VJbmRleD17aWR4ICsgMX1cbiAgICAgICAgICAgIGluZmluaXRlTG9vcE1vZGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VEYXRhLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlSW5kZXgsXG4gICAgICAgICAgICAgICAgdG90YWxQYWdlczogdG90YWxMZW4sXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgICAgIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPFBvc3RcbiAgICAgICAgICAgICAgICAgICAgbmV4dD17bmV4dH1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxMZW49e3RvdGFsTGVufVxuICAgICAgICAgICAgICAgICAgICBpbmRleD17Y3VycmVudFBhZ2VJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgcG9zdD17Y3VycmVudFBhZ2VEYXRhWzBdfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXN9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVUaWNrPXshbWF0Y2h9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L1BhZ2luZ1N0YXRlTWFuYWdlcj5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICA8L1Bvc3RzUHJvdmlkZXI+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7IEJJR19SQVRJTyB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0L2NvbnN0XCI7XG5pbXBvcnQgeyBDb21wT2Zmc2V0IH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXRcIjtcbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDb3ZlclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29udGFpbmVycy9jb3Zlcic7XG5pbXBvcnQgUGhvdG8gZnJvbSBcIi4uL3Bob3RvXCI7XG5pbXBvcnQgUG9zdCBmcm9tICcuLi9wb3N0J1xuaW1wb3J0IHsgY29udGVudCB9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuZXhwb3J0IGNvbnN0IENvdmVyUGhvdG8gPSAoe2lkfSkgPT4gKFxuICBpc01vYmlsZSgpXG4gICAgPyAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vYmlsZS1jb3ZlclwiPlxuICAgICAgICA8UGhvdG8gaWQ9e2lkfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICAgIDogKFxuICAgICAgPFBob3RvIGlkPXtpZH0gY2xhc3NOYW1lPVwiY292ZXItaW1hZ2VcIiAvPlxuICAgIClcbik7XG5cbmNvbnN0IHR5cGVDb21wTWFwID0ge1xuICBbY29udGVudC5jb3Zlci50eXBlLnBob3RvLnZhbHVlXTogQ292ZXJQaG90byxcbiAgW2NvbnRlbnQuY292ZXIudHlwZS5zdG9yeS52YWx1ZV06ICh7aWR9KSA9PiAoXG4gICAgPFBvc3QgaWQ9e2lkfSBjbGFzc05hbWU9XCJjb3Zlci1zdG9yeVwiLz5cbiAgKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q292ZXJQcm92aWRlcj5cbiAgICAgIHsoY292ZXIpID0+IHtcbiAgICAgICAgY29uc3Qge3R5cGUsIGNvbnRlbnRfaWQ6IGlkfSA9IGNvdmVyO1xuICAgICAgICBjb25zdCBDb3ZlciA9IHR5cGVDb21wTWFwW3R5cGVdO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxDb3ZlciBpZD17aWR9Lz5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICA8L0NvdmVyUHJvdmlkZXI+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQge2lzTW9iaWxlfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBQb3N0c1Byb3ZpZGVyfSBmcm9tICcuLi8uLi9jb250YWluZXJzL3Bvc3RfbGlzdCc7XG5pbXBvcnQgeyBCbG9nVG9wRG93biB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgeyBQYWdpbmdMaXN0IH0gZnJvbSAnLi4vdXRpbF9jb21wL2xpc3QnO1xuaW1wb3J0IEJhc2VMaXN0IGZyb20gJy4uL3V0aWxfY29tcC9saXN0L2Jhc2VfbGlzdCdcbmltcG9ydCB7Um91dGVzfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5pbXBvcnQge1RpY2tJbmRpY2F0b3J9IGZyb20gJy4uL3V0aWxfY29tcC9wcm9ncmVzc19pbmRpY2F0b3InO1xuaW1wb3J0IHt1c2VOYXZCdG5zfSBmcm9tICcuLi9jb21tb25faG9va3MnO1xuaW1wb3J0IFBvc3QgZnJvbSAnLi4vcG9zdC9wb3N0JztcbmltcG9ydCAnLi9wb3N0X2xpc3Quc2Nzcyc7XG5cbmNvbnN0IG1vYmlsZUxpc3RJdGVtUmVuZGVyID0gKHtpdGVtOiBwb3N0fSkgPT4gKFxuICA8UG9zdCBwb3N0PXtwb3N0fSAvPlxuKTtcblxuY29uc3QgbGlzdEl0ZW1SZW5kZXIgPSAoe2l0ZW06IHBvc3R9KSA9PiAoXG4gIDxMaW5rIGtleT17cG9zdC5pZH0gdG89e2Ake1JvdXRlcy5zdG9yaWVzfS8ke3Bvc3QuaWR9YH0+XG4gICAge3Bvc3QudGl0bGV9XG4gIDwvTGluaz5cbik7XG5cbmNvbnN0IE1vYmlsZVBvc3RMaXN0ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQb3N0c1Byb3ZpZGVyPlxuICAgICAgeyhwb3N0cykgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxCYXNlTGlzdFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicG9zdC1saXN0IG1vYmlsZS1wb3N0c1wiXG4gICAgICAgICAgICBkYXRhPXtwb3N0c31cbiAgICAgICAgICAgIGl0ZW1SZW5kZXJlcj17bW9iaWxlTGlzdEl0ZW1SZW5kZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICA8L1Bvc3RzUHJvdmlkZXI+XG4gIClcbn07XG5cbmNvbnN0IE5hdkl0ZW1zRm9yUG9zdExpc3QgPSAocGFnaW5nUHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnRQYWdlSW5kZXgsXG4gICAgdG90YWxQYWdlczogdG90YWwsXG4gICAgbmV4dFxuICB9ID0gcGFnaW5nUHJvcHM7XG5cbiAgdXNlTmF2QnRucyhwYWdpbmdQcm9wcywge1xuICAgIGRpc2FibGVMaXN0QnRuOiB0cnVlXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPFRpY2tJbmRpY2F0b3JcbiAgICAgIGN1cnJlbnQ9e2N1cnJlbnRQYWdlSW5kZXh9XG4gICAgICB0b3RhbD17dG90YWx9XG4gICAgICBvbkNsaWNrPXtuZXh0fVxuICAgICAgZml4ZWRUb3BcbiAgICAvPlxuICApO1xufTtcblxuY2xhc3MgUGNQb3N0TGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXJMaXN0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8UG9zdHNQcm92aWRlcj5cbiAgICAgICAgeyhwb3N0cykgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um91dGVyPlxuICAgICAgICAgICAgICA8UGFnaW5nTGlzdFxuICAgICAgICAgICAgICAgIHBhZ2luZ09wdGlvbj17e1xuICAgICAgICAgICAgICAgICAgZGF0YTogcG9zdHMsXG4gICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICAgICAgICAgICAgICBpbmZpbml0ZUxvb3BNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgbGlzdE9wdGlvbj17e1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAncG9zdC1saXN0IHBjJyxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZW5kZXJlcjogbGlzdEl0ZW1SZW5kZXIsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsocGFnaW5nUHJvcHMpID0+IDxOYXZJdGVtc0ZvclBvc3RMaXN0IHsuLi5wYWdpbmdQcm9wc30vPn1cbiAgICAgICAgICAgICAgPC9QYWdpbmdMaXN0PlxuICAgICAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICAgICAgKVxuICAgICAgICB9fVxuICAgICAgPC9Qb3N0c1Byb3ZpZGVyPlxuICAgIClcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCbG9nVG9wRG93biB0b3A9XCLmloflrZdcIiBkb3duPXt0aGlzLnJlbmRlckxpc3QoKX0gcGFkZGluZz1cIjAgMTBweFwiIC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgaXNNb2JpbGUoKVxuICAgICAgPyA8TW9iaWxlUG9zdExpc3QgLz5cbiAgICAgIDogPFBjUG9zdExpc3QgLz5cbiAgKVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUG9zdCBmcm9tICcuL3Bvc3QnO1xuXG5leHBvcnQgY29uc3QgQWJvdXQgPSAoKSA9PiB7XG4gIHJldHVybiA8UG9zdCBpZD1cIjVkOTIwMDkwYTU4OWI0MTIxZGQyYmU2MFwiIC8+XG59XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCB7IGlzTW9iaWxlIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCB7IEJsb2dUb3BEb3duIH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXRcIjtcbmltcG9ydCBMaXN0IGZyb20gJy4uL3V0aWxfY29tcC9saXN0L2Jhc2VfbGlzdCc7XG5pbXBvcnQge2RlZmF1bHQgYXMgUGhvdG9Hcm91cHNQcm92aWRlcn0gZnJvbSAnLi4vLi4vY29udGFpbmVycy9waG90b19ncm91cHMnO1xuaW1wb3J0IHsgQmFzZVBob3RvR3JvdXAgfSBmcm9tICcuLi9waG90b2dyb3VwJztcbmltcG9ydCB7cGhvdG9Hcm91cHNJZEFyciwgUm91dGVzfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5pbXBvcnQge01vdW50T25TY3JvbGxUb0JvdHRvbX0gZnJvbSAnLi4vdXRpbF9jb21wL21vdW50X29uX3Njcm9sbF90b19ib3R0b20nO1xuXG5jb25zdCBNb2JpbGVQaG90b0dyb3VwUmVuZGVyZXIgPSAoe2l0ZW06IGdyb3VwfSkgPT4ge1xuICByZXR1cm4gPEJhc2VQaG90b0dyb3VwIGlkPXtncm91cC5pZH0vPlxufTtcblxuY29uc3QgUGhvdG9Hcm91cHMgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBjdXN0b21JdGVtUmVuZGVyZXIgfSA9IHByb3BzO1xuICBjb25zdCBkZWZhdWx0SXRlbVJlbmRlcmVyID0gKHtpdGVtOiBncm91cH0pID0+IChcbiAgICA8TGluayBrZXk9e2dyb3VwLmlkfSB0bz17YCR7Um91dGVzLnBob3RvR3JvdXBzfS8ke2dyb3VwLmlkfWB9PlxuICAgICAge2dyb3VwLnRpdGxlfVxuICAgIDwvTGluaz5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxQaG90b0dyb3Vwc1Byb3ZpZGVyPlxuICAgICAgeyhwaG90b0dyb3VwcykgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSb3V0ZXI+XG4gICAgICAgICAgICA8TGlzdFxuICAgICAgICAgICAgICBkYXRhPXtwaG90b0dyb3Vwc31cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicGhvdG8tZ3JvdXAtdGl0bGUtbGlzdFwiXG4gICAgICAgICAgICAgIGl0ZW1SZW5kZXJlcj17Y3VzdG9tSXRlbVJlbmRlcmVyIHx8IGRlZmF1bHRJdGVtUmVuZGVyZXJ9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUGhvdG9Hcm91cHNQcm92aWRlcj5cbiAgKVxufTtcblxuY29uc3QgTW9iaWxlUGhvdG9Hcm91cHMgPSAoKSA9PiB7XG4gIHJldHVybihcbiAgICA8UGhvdG9Hcm91cHNQcm92aWRlcj5cbiAgICAgIHsocGhvdG9Hcm91cHMpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TW91bnRPblNjcm9sbFRvQm90dG9tXG4gICAgICAgICAgICB3cmFwcGVyU2VsZWN0b3I9XCIubWVudS1wYW5lbDpudGgtY2hpbGQoMykgLnBhbmVsXCJcbiAgICAgICAgICAgIGJ1ZmZlckRpc3RhbmNlPXs1MDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwaG90b0dyb3Vwcy5tYXAoKHtpZH0pID0+IChcbiAgICAgICAgICAgICAgICA8QmFzZVBob3RvR3JvdXAgaWQ9e2lkfSAvPlxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvTW91bnRPblNjcm9sbFRvQm90dG9tPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUGhvdG9Hcm91cHNQcm92aWRlcj5cbiAgKVxufTtcbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgcmV0dXJuIGlzTW9iaWxlKClcbiAgICA/IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGhvdG8tZ3JvdXAtdGl0bGUtbGlzdFwiPlxuICAgICAgICA8TW9iaWxlUGhvdG9Hcm91cHMgLz5cbiAgICAgIDwvZGl2PlxuICAgICkgLy8gPFBob3RvR3JvdXBzIGN1c3RvbUl0ZW1SZW5kZXJlcj17TW9iaWxlUGhvdG9Hcm91cFJlbmRlcmVyfS8+XG4gICAgOiA8QmxvZ1RvcERvd24gdG9wPVwi55u454mHXCIgZG93bj17PFBob3RvR3JvdXBzIC8+fSBwYWRkaW5nPVwiMCAxMHB4XCIgLz5cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2RpZmZDb250ZW50fSBmcm9tICcuLi8uLi91dGlscy9sb2NhbF9zdG9yYWdlX21hbmFnZXInO1xuaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcbmltcG9ydCB7QVBPTExPX0NMSUVOVH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHtjb250ZW50VHlwZX0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuY29uc3QgcXVlcnlNYXAgPSB7XG4gIFtjb250ZW50VHlwZS5waG90by52YWx1ZV06IHtcbiAgICBxdWVyeTogZ3FsYFxuICAgICAgcXVlcnkgUGhvdG8oJGlkOiBJRCEpIHtcbiAgICAgICAgcGhvdG8oaWQ6ICRpZCkge1xuICAgICAgICAgIF9pZFxuICAgICAgICAgIHRpdGxlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgLFxuICAgIGtleTogJ3Bob3RvJ1xuICB9LFxuICBbY29udGVudFR5cGUuc3RvcnkudmFsdWVdOiB7XG4gICAgcXVlcnk6IGdxbGBcbiAgICAgIHF1ZXJ5IFBvc3QoJGlkOiBJRCEpIHtcbiAgICAgICAgcG9zdChpZDogJGlkKSB7XG4gICAgICAgICAgX2lkXG4gICAgICAgICAgdGl0bGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGAsXG4gICAga2V5OiAncG9zdCdcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IERpZmZDb250ZW50SE9DID0gKENvbXApID0+IGNsYXNzIERpZmZDb250ZW50IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgZXJyOiBudWxsLFxuICAgIGRhdGE6IFtdLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucXVlcnlEYXRhKClcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0YTogdGhpcy5mb3JtYXRSZXNwKHJlcyksXG4gICAgICAgICAgbG9hZGluZzogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UsIGVycn0pXG4gICAgICB9KVxuICB9O1xuXG4gIGZvcm1hdFJlc3AgPSAoZGF0YSkgPT4ge1xuICAgIHJldHVybiBkYXRhLm1hcCgocmVzLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLk1FVEFfSU5GT1tpZHhdLnR5cGU7XG4gICAgICBjb25zdCBrZXkgPSBxdWVyeU1hcFt0eXBlXS5rZXk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5yZXMuZGF0YVtrZXldIHx8IHt9LFxuICAgICAgICAuLi50aGlzLk1FVEFfSU5GT1tpZHhdXG4gICAgICB9XG4gICAgfSlcbiAgfTtcblxuICBxdWVyeURhdGEgPSAoKSA9PiB7XG4gICAgY29uc3QgTUVUQV9JTkZPID0gZGlmZkNvbnRlbnQoKTtcbiAgICB0aGlzLk1FVEFfSU5GTyA9IE1FVEFfSU5GTztcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoTUVUQV9JTkZPLm1hcCgoe2lkLCB0eXBlfSkgPT4ge1xuICAgICAgcmV0dXJuIEFQT0xMT19DTElFTlQucXVlcnkoe1xuICAgICAgICBxdWVyeTogcXVlcnlNYXBbdHlwZV0ucXVlcnksXG4gICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgIGlkXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSkpXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBsb2FkaW5nLFxuICAgICAgZXJyXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbXBcbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgIGVycm9yPXtlcnJ9XG4gICAgICAgIGxvYWRpbmc9e2xvYWRpbmd9XG4gICAgICAvPlxuICAgIClcbiAgfVxufTtcbiIsImltcG9ydCBSZWFjdCwge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgQmxvZ1RvcERvd24gfSBmcm9tIFwiLi4vdXRpbF9jb21wL2xheW91dFwiO1xuaW1wb3J0IHsgYXBwZW5kQ29udGVudElkVG9Mb2NhbCBhcyBtYXJrQ29udGVudEFzUmVhZCB9IGZyb20gJy4uLy4uL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5pbXBvcnQgUG9zaXRpb25lZFNwaW5uZXIgZnJvbSAnLi4vdXRpbF9jb21wL3NwaW5uZXIvcG9zaXRpb25lZF9zcGlubmVyJztcbmltcG9ydCBMaXN0IGZyb20gJy4uL3V0aWxfY29tcC9saXN0JztcbmltcG9ydCB7Y29udGVudFR5cGUsIGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXksIFJvdXRlc30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7TG9jYWxTdG9yYWdlQ29udGV4dH0gZnJvbSAnLi4vLi4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcbmltcG9ydCB7RGlmZkNvbnRlbnRIT0N9IGZyb20gJy4uLy4uL2NvbnRhaW5lcnMvZGlmZl9jb250ZW50JztcbmltcG9ydCB7RW1wdHlEaXZ9IGZyb20gJy4uL3V0aWxfY29tcCc7XG5cblxuY29uc3QgRGlmZkxpc3QgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGxvYWRpbmcsXG4gICAgZGF0YVxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgbGlzdCA9IChcbiAgICA8TGlzdFxuICAgICAgY2xhc3NOYW1lPVwiZGlmZi1jb250ZW50LWxpc3RcIlxuICAgICAgZGF0YT17ZGF0YX1cbiAgICAgIGl0ZW1SZW5kZXJlcj17XG4gICAgICAgICh7aXRlbTogY29udGVudH0pID0+IChcbiAgICAgICAgICA8TGlua1xuICAgICAgICAgICAga2V5PXtjb250ZW50LmlkfVxuICAgICAgICAgICAgdG89e2NvbnRlbnQudXJsfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbih7XG4gICAgICAgICAgICAgIHBob3RvOiBjb250ZW50LnR5cGUgPT09IGNvbnRlbnRUeXBlLnBob3RvLnZhbHVlLFxuICAgICAgICAgICAgICBzdG9yeTogY29udGVudC50eXBlID09PSBjb250ZW50VHlwZS5zdG9yeS52YWx1ZSxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge21hcmtDb250ZW50QXNSZWFkKGNvbnRlbnQpfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y29udGVudC50aXRsZX1cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAvPlxuICApO1xuXG4gIGNvbnN0IGxvY2FsU3RvcmFnZUNvbnRleHQgPSB1c2VDb250ZXh0KExvY2FsU3RvcmFnZUNvbnRleHQpO1xuXG4gIGNvbnN0IHNob3dVcGRhdGVzID0gbG9jYWxTdG9yYWdlQ29udGV4dFtcbiAgICBsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5LkVOQUJMRV9VUERBVEVTX0VOVFJZXG4gIF07XG5cbiAgaWYgKGxvYWRpbmcpIHtcbiAgICByZXR1cm4gPFBvc2l0aW9uZWRTcGlubmVyIC8+XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8QmxvZ1RvcERvd25cbiAgICAgIHRvcD1cIuabtOaWsFwiXG4gICAgICBkb3duPXsoXG4gICAgICAgIHNob3dVcGRhdGVzID8gPFJvdXRlcj57bGlzdH08L1JvdXRlcj4gOiA8RW1wdHlEaXYgLz5cbiAgICAgICl9XG4gICAgICBwYWRkaW5nPVwiMCAxMHB4XCJcbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGlmZkNvbnRlbnRIT0MoRGlmZkxpc3QpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZSwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmNvbnN0IExpc3RJdGVtTGluayA9ICh7IHRvLCBvbkNsaWNrLCAuLi5yZXN0IH0pID0+IChcbiAgPFJvdXRlXG4gICAgcGF0aD17dG99XG4gICAgY2hpbGRyZW49eyh7IG1hdGNoIH0pID0+IChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9e21hdGNoID8gXCJhY3RpdmVcIiA6IFwiXCJ9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2sgfHwgKCgpID0+IHt9KX1cbiAgICAgID5cbiAgICAgICAgPExpbmsgdG89e3RvfSB7Li4ucmVzdH0gLz5cbiAgICAgIDwvbGk+XG4gICAgKX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtTGluazsiLCJpbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IFNwYWNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvc3BhY2VfY29udGV4dCc7XG5pbXBvcnQgeyBDdXN0b21Gb250IH0gZnJvbSAnLi4vdXRpbF9jb21wLyc7XG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U2V0dGluZ1BhbmVsfSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgVG9nZ2xlQnRuID0gKCkgPT4ge1xuICBjb25zdCBbY2xvc2VkLCB0b2dnbGVTZXR0aW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCB7IHNldExlZnRTcGFjZUNvbnRlbnQgfSA9IHVzZUNvbnRleHQoU3BhY2VDb250ZXh0KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldExlZnRTcGFjZUNvbnRlbnQoXG4gICAgICBjbG9zZWQgPyAnJyA6IDxTZXR0aW5nUGFuZWwgLz5cbiAgICApXG4gIH0sIFtjbG9zZWRdKTtcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVTZXR0aW5nKCFjbG9zZWQpfVxuICAgICAgc3R5bGU9e3tjdXJzb3I6ICdwb2ludGVyJ319XG4gICAgICBjbGFzc05hbWU9e2NuKFwic2V0dGluZy1idXR0b25cIiwgeyBjbG9zZWQ6ICFjbG9zZWQgfSl9XG4gICAgPlxuICAgICAge1xuICAgICAgICBjbG9zZWRcbiAgICAgICAgICA/IDxDdXN0b21Gb250Puiuvue9rjwvQ3VzdG9tRm9udD5cbiAgICAgICAgICA6IDxDdXN0b21Gb250PuWFs+mXrTwvQ3VzdG9tRm9udD5cbiAgICAgIH1cbiAgICA8L3NwYW4+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUJ0bjtcbiIsImltcG9ydCBSZWFjdCwge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7QmxvZ1RvcERvd259IGZyb20gJy4uL3V0aWxfY29tcC9sYXlvdXQnO1xuaW1wb3J0IHtSYWRpb0J0bn0gZnJvbSAnLi4vdXRpbF9jb21wL3JhZGlvX2J0bic7XG5pbXBvcnQgeyB1c2VQcmVmZXJlbmNlLCBTcGFjZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L3NwYWNlX2NvbnRleHQnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCYXNlTGlzdCB9IGZyb20gJy4uL3V0aWxfY29tcC9saXN0L2Jhc2VfbGlzdCdcbmltcG9ydCB7IEJhc2VMaW5rIH0gZnJvbSAnLi4vdXRpbF9jb21wL2N1c3RvbV9saW5rL2Jhc2VfbGluayc7XG5pbXBvcnQgeyBwYWNrYWdlSW5mbywgUm91dGVzIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0IHtsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5fSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0b2dnbGU6IHRvZ2dsZVNwYWNlR3VpZGVMaW5lLFxuICAgIHN0YXR1czogc2hvd1NwYWNlR3VpZGVMaW5lXG4gIH0gPSB1c2VQcmVmZXJlbmNlKGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkuU0hPV19TUEFDRV9HVUlERUxJTkUpO1xuXG4gIGNvbnN0IHsgZGVzdHJveUFsbFNwYWNlIH0gPSB1c2VDb250ZXh0KFNwYWNlQ29udGV4dCk7XG5cbiAgY29uc3Qge1xuICAgIHN0YXR1czogc2hvd05hdkJ0bixcbiAgICB0b2dnbGU6IHRvZ2dsZU5hdkJ0bixcbiAgfSA9IHVzZVByZWZlcmVuY2UobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfUEFHSU5HX05BVl9CVE4pO1xuXG4gIGNvbnN0IHtcbiAgICBzdGF0dXM6IHNob3dVcGRhdGVzLFxuICAgIHRvZ2dsZTogdG9nZ2xlVXBkYXRlcyxcbiAgfSA9IHVzZVByZWZlcmVuY2UobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfVVBEQVRFU19FTlRSWSk7XG5cbiAgY29uc3Qge1xuICAgIHN0YXR1czogaXNJbWFnZUZsb3dNb2RlLFxuICAgIHRvZ2dsZTogdG9nZ2xlSW1hZ2VTaG93TW9kZSxcbiAgfSA9IHVzZVByZWZlcmVuY2UobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfSU1BR0VTX0ZMT1cpO1xuXG4gIGNvbnN0IHRvcFNldHRpbmdJdGVtcyA9IFtcbiAgICA8UmFkaW9CdG5cbiAgICAgIGxhYmVsPXtcIuacgOi/keabtOaWsFwifVxuICAgICAgZGVmYXVsdFZhbHVlPXtzaG93VXBkYXRlc31cbiAgICAgIG9uQ2xpY2s9e3RvZ2dsZVVwZGF0ZXN9XG4gICAgLz4sXG4gICAgPFJhZGlvQnRuXG4gICAgICBsYWJlbD17XCLluIPlsYDnvZHmoLxcIn1cbiAgICAgIG9uQ2xpY2s9e3RvZ2dsZVNwYWNlR3VpZGVMaW5lfVxuICAgICAgZGVmYXVsdFZhbHVlPXtzaG93U3BhY2VHdWlkZUxpbmV9XG4gICAgLz4sXG4gICAgPFJhZGlvQnRuXG4gICAgICBsYWJlbD17XCLlr7zoiKrmjInpkq5cIn1cbiAgICAgIG9uQ2xpY2s9e3RvZ2dsZU5hdkJ0bn1cbiAgICAgIGRlZmF1bHRWYWx1ZT17c2hvd05hdkJ0bn1cbiAgICAvPixcbiAgICA8UmFkaW9CdG5cbiAgICAgIGxhYmVsPXtcIuWbvueJh+eAkeW4g1wifVxuICAgICAgb25DbGljaz17dG9nZ2xlSW1hZ2VTaG93TW9kZX1cbiAgICAgIGRlZmF1bHRWYWx1ZT17aXNJbWFnZUZsb3dNb2RlfVxuICAgIC8+XG4gIF07XG5cbiAgY29uc3QgYm90dG9tU2V0dGluZ0l0ZW1zID0gW1xuICAgIC8qIDxCYXNlTGlua1xuICAgICAgY2xhc3NOYW1lPVwiZmVlZGJhY2tcIlxuICAgICAgdGV4dD1cIuWPjemmiFwiXG4gICAgICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3pqaG91L3pqaC5pbS9pc3N1ZXNcIlxuICAgIC8+LCAqL1xuICAgIDxSb3V0ZXI+XG4gICAgICAgIDxMaW5rIHRvPXtSb3V0ZXMuYWJvdXR9ID7lhbPkuo48L0xpbms+XG4gICAgPC9Sb3V0ZXI+LFxuICAgIDxCYXNlTGlua1xuICAgICAgY2xhc3NOYW1lPVwidmVyc2lvblwiXG4gICAgICB0ZXh0PXsn54mI5pys77yadicgKyBwYWNrYWdlSW5mby52ZXJzaW9ufVxuICAgICAgaHJlZj17cGFja2FnZUluZm8uZ2l0VVJMfVxuICAgIC8+LFxuICAgIDxkaXYgb25DbGljaz17ZGVzdHJveUFsbFNwYWNlfSBjbGFzc05hbWU9XCJleGl0LWJsb2dcIj7pgIDlh7rljZrlrqI8L2Rpdj5cbiAgXTtcblxuICBjb25zdCByZW5kZXJQYW5lbCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5nLXBhbmVsXCI+XG4gICAgICAgIDxCYXNlTGlzdFxuICAgICAgICAgIGRhdGE9e3RvcFNldHRpbmdJdGVtc31cbiAgICAgICAgICBpdGVtUmVuZGVyZXI9eyh7aXRlbX0pID0+IGl0ZW19XG4gICAgICAgIC8+XG4gICAgICAgIDxCYXNlTGlzdFxuICAgICAgICAgIGNsYXNzTmFtZT1cImJvdHRvbS1zZXR0aW5nLWxpc3RcIlxuICAgICAgICAgIGRhdGE9e2JvdHRvbVNldHRpbmdJdGVtc31cbiAgICAgICAgICBpdGVtUmVuZGVyZXI9eyh7aXRlbX0pID0+IGl0ZW19XG4gICAgICAgIC8+XG5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxCbG9nVG9wRG93biBmdWxsSGVpZ2h0IGRvd249e3JlbmRlclBhbmVsKCl9Lz5cbiAgKVxufVxuIiwiaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIlxuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vYmlsZU5hdiB9IGZyb20gJy4vbW9iaWxlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgcGNOYXYgfSBmcm9tICcuL3BjJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jb25zdCBOYXYgPSBpc01vYmlsZSgpID8gbW9iaWxlTmF2IDogcGNOYXY7XG5cbmV4cG9ydCBkZWZhdWx0IE5hdjtcblxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWUgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgTGlua30gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgZ2VuU3ZnTG9nbyB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQge1JvdXRlc30gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xuaW1wb3J0IExpc3RJdGVtTGluayBmcm9tICcuLi9saXN0X2l0ZW1fbGluayc7XG5pbXBvcnQgJy4vc3R5bGUuc2NzcydcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBbY2xvc2VkLCB0b2dnbGVOYXZdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGF0dHIgPSBjbG9zZWQgPyB7J2RhdGEtY2xvc2UnOiB0cnVlfSA6IHt9O1xuICBjb25zdCBjbG9zZSA9ICgpID0+IHt0b2dnbGVOYXYodHJ1ZSl9O1xuICByZXR1cm4gKFxuICAgIDxSb3V0ZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lKFwidG9wLWJhclwiLCB7XG4gICAgICAgIGNsb3NlOiBjbG9zZWRcbiAgICAgIH0pfT5cbiAgICAgICAgPExpbmsgdG89e1JvdXRlcy5ob21lfT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJsb2dvXCJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDogZ2VuU3ZnTG9nbygpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DbGljaz17Y2xvc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgICA8dWxcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb2JpbGUgbmF2XCJcbiAgICAgICAgICB7Li4uYXR0cn1cbiAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgICAgdG9nZ2xlTmF2KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPExpc3RJdGVtTGluayBvbkNsaWNrPXtjbG9zZX0gdG89e1JvdXRlcy5waG90b0dyb3Vwc30+SlBHPC9MaXN0SXRlbUxpbms+XG4gICAgICAgICAgPExpc3RJdGVtTGluayBvbkNsaWNrPXtjbG9zZX0gdG89e1JvdXRlcy5zdG9yaWVzfT5UWFQ8L0xpc3RJdGVtTGluaz5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvUm91dGVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHtsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5LCBSb3V0ZXN9IGZyb20gXCIuLi8uLi8uLi9jb25maWdcIjtcblxuaW1wb3J0IHsgQmxvZ1RvcERvd24gfSBmcm9tIFwiLi4vLi4vdXRpbF9jb21wL2xheW91dFwiO1xuaW1wb3J0IExvZ28gZnJvbSAnLi4vLi4vdXRpbF9jb21wL2xvZ28nO1xuaW1wb3J0IHsgQ3VzdG9tRm9udCB9IGZyb20gJy4uLy4uL3V0aWxfY29tcC8nO1xuaW1wb3J0IExpc3RJdGVtTGluayBmcm9tICcuLi9saXN0X2l0ZW1fbGluayc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJhc2VMaXN0IH0gZnJvbSAnLi4vLi4vdXRpbF9jb21wL2xpc3QvYmFzZV9saXN0J1xuaW1wb3J0IHsgQmFzZUxpbmsgfSBmcm9tICcuLi8uLi91dGlsX2NvbXAvY3VzdG9tX2xpbmsvYmFzZV9saW5rJztcbmltcG9ydCB7IFNldHRpbmdCdG4gfSBmcm9tICcuLi8uLi9zZXR0aW5ncyc7XG5pbXBvcnQge0xvY2FsU3RvcmFnZUNvbnRleHR9IGZyb20gJy4uLy4uLy4uL2NvbnRleHQvc3BhY2VfY29udGV4dCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3QgZm9vdGVyRGF0YSA9IFsvKiB7XG4gICAgdGV4dDogJ+iuuOWPr+WNj+iuricsXG4gICAgaHJlZjogJ2h0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1uYy1uZC80LjAvZGVlZC56aCcsXG4gICAgY2xhc3NOYW1lOiAnbGljZW5zZSdcbiAgfSwgKi97XG4gICAgdGV4dDogPEN1c3RvbUZvbnQ+56aP56aPPC9DdXN0b21Gb250PixcbiAgICBocmVmOiAnaHR0cHM6Ly9mdWZ1LmltJyxcbiAgICBjbGFzc05hbWU6ICdsaWNlbnNlJ1xuICB9LCB7XG4gICAgY3VzdG9tUmVuZGVyZXI6ICgpID0+IHtcbiAgICAgIHJldHVybiA8U2V0dGluZ0J0biAvPlxuICAgIH1cbiAgfV07XG5cbiAgY29uc3QgbmF2RGF0YSA9IFt7XG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHRleHQ6IDxDdXN0b21Gb250PuaWh+WtlzwvQ3VzdG9tRm9udD4sXG4gICAgcm91dGU6IFJvdXRlcy5zdG9yaWVzXG4gIH0sIHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGV4dDogPEN1c3RvbUZvbnQ+55u454mHPC9DdXN0b21Gb250PiwgLy8n55u477yIIHhpw6BuZyDvvInniYcnLFxuICAgIHJvdXRlOiBSb3V0ZXMucGhvdG9Hcm91cHNcbiAgfV07XG5cbiAgY29uc3QgbG9jYWxTdG9yYWdlQ29udGV4dCA9IHVzZUNvbnRleHQoTG9jYWxTdG9yYWdlQ29udGV4dCk7XG5cbiAgY29uc3Qgc2hvd1VwZGF0ZXNFbnRyeSA9IGxvY2FsU3RvcmFnZUNvbnRleHRbXG4gICAgbG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfVVBEQVRFU19FTlRSWVxuICBdO1xuXG4gIGlmIChzaG93VXBkYXRlc0VudHJ5KSB7XG4gICAgbmF2RGF0YS5wdXNoKHtcbiAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgIHRleHQ6ICA8Q3VzdG9tRm9udD7mnIDov5Hmm7TmlrA8L0N1c3RvbUZvbnQ+LFxuICAgICAgcm91dGU6IFJvdXRlcy51cGRhdGVzLFxuICAgIH0pXG4gIH1cblxuICBjb25zdCBmb290ZXJJdGVtUmVuZGVyID0gKHtpdGVtfSkgPT4ge1xuICAgIGlmIChpdGVtLmN1c3RvbVJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gaXRlbS5jdXN0b21SZW5kZXJlcigpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QmFzZUxpbmtcbiAgICAgICAgey4uLml0ZW19XG4gICAgICAvPlxuICAgIClcbiAgfTtcblxuICBjb25zdCBmb290ZXI9IChcbiAgICA8QmFzZUxpc3RcbiAgICAgIGRhdGE9e2Zvb3RlckRhdGF9XG4gICAgICBjbGFzc05hbWU9XCJmb290ZXJcIlxuICAgICAgaXRlbVJlbmRlcmVyPXtmb290ZXJJdGVtUmVuZGVyfVxuICAgIC8+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8QmxvZ1RvcERvd25cbiAgICAgIGFsaWduVG9wSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgd2l0aEd1aWRlTGluZVxuICAgICAgZnVsbEhlaWdodFxuICAgICAgdG9wPXsoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby13cmFwcGVyXCI+XG4gICAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtSb3V0ZXMuaG9tZX0+PExvZ28gLz48L0xpbms+XG4gICAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIGRvd249eyhcbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdiBwY1wiPlxuICAgICAgICAgICAgPEJhc2VMaXN0XG4gICAgICAgICAgICAgIHRvcFxuICAgICAgICAgICAgICBkYXRhPXtuYXZEYXRhfVxuICAgICAgICAgICAgICBpdGVtUmVuZGVyZXI9eyh7aXRlbX0pID0+ICg8TGlzdEl0ZW1MaW5rIHRvPXtpdGVtLnJvdXRlfT57aXRlbS50ZXh0fTwvTGlzdEl0ZW1MaW5rPil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2Zvb3Rlcn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICApfVxuICAgIC8+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGV9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4vdXRpbF9jb21wL2Vycm9yX2JvdW5kYXJ5JztcbmltcG9ydCB7Um91dGVzfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUnO1xuaW1wb3J0IFBvc3RMaXN0IGZyb20gJy4vcG9zdF9saXN0JztcbmltcG9ydCBQaG90byBmcm9tICcuL3Bob3RvJztcbmltcG9ydCB7IEFib3V0IH0gZnJvbSAnLi9hYm91dCc7XG5pbXBvcnQgUG9zdCBmcm9tICcuL3Bvc3QnO1xuaW1wb3J0IFBob3RvR3JvdXBzIGZyb20gJy4vcGhvdG9fZ3JvdXBzJztcbmltcG9ydCBEaWZmIGZyb20gJy4vZGlmZic7XG5pbXBvcnQge1Bob3RvR3JvdXBXaXRoT2Zmc2V0IGFzIFBob3RvR3JvdXB9IGZyb20gJy4vcGhvdG9ncm91cCc7XG5cbmV4cG9ydCBjb25zdCBNb2JpbGVDb250ZW50ID0gKCkgPT4gKFxuICA8Um91dGVyPlxuICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgPFJvdXRlIHBhdGg9e1JvdXRlcy5waG90b30gY29tcG9uZW50PXtQaG90b30gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMuc3Rvcnl9IGNvbXBvbmVudD17UG9zdH0gLz5cbiAgICA8L0Vycm9yQm91bmRhcnk+XG4gIDwvUm91dGVyPlxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnQgPSAoKSA9PiAoXG4gIDxSb3V0ZXI+XG4gICAgPEVycm9yQm91bmRhcnk+XG4gICAgICA8Um91dGUgZXhhY3QgcGF0aD17Um91dGVzLmhvbWV9IGNvbXBvbmVudD17SG9tZX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMuc3Rvcmllc30gZXhhY3QgY29tcG9uZW50PXtQb3N0TGlzdH0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMucGhvdG9Hcm91cHN9IGV4YWN0IGNvbXBvbmVudD17UGhvdG9Hcm91cHN9IC8+XG4gICAgICA8Um91dGUgcGF0aD17Um91dGVzLnBob3RvR3JvdXB9IGNvbXBvbmVudD17UGhvdG9Hcm91cH0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMudXBkYXRlc30gY29tcG9uZW50PXtEaWZmfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9e1JvdXRlcy5waG90b30gY29tcG9uZW50PXtQaG90b30gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMuc3Rvcnl9IGNvbXBvbmVudD17UG9zdH0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPXtSb3V0ZXMuYWJvdXR9IGNvbXBvbmVudD17QWJvdXR9IC8+XG4gICAgPC9FcnJvckJvdW5kYXJ5PlxuICA8L1JvdXRlcj5cbik7XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgTmF2IH0gZnJvbSAnLi9uYXYnXG4iLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgJy4vbWVudV9wYW5lbC5zY3NzJztcbmltcG9ydCB7IHVzZVNjcm9sbERpcmVjdGlvbiB9IGZyb20gJy4uLy4uL2NvbW1vbl9ob29rcyc7XG5cbmNvbnN0IE1lbnVCdG4gPSAoeyBvbkNsaWNrLCBjbGFzc05hbWUgfSkgPT4ge1xuICBjb25zdCAkcGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1wYW5lbC5hY3RpdmUgLnBhbmVsJyk7XG4gIGNvbnN0IFtkaXJdID0gdXNlU2Nyb2xsRGlyZWN0aW9uKCRwYW5lbCk7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBjbGFzc05hbWU9e2NuKCdtZW51LWJ1dHRvbicsIGNsYXNzTmFtZSwge1xuICAgICAgICBoaWRkZW46IGRpciA9PT0gJ0RPV04nLFxuICAgICAgfSl9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgb25Ub3VjaFN0YXJ0PVwiXCJcbiAgICAvPlxuICApO1xufTtcblxuTWVudUJ0bi5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgTWluUGFuZWxXaWR0aCA9IDEwMDtcblxuY29uc3QgTWVudVBhbmVsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICB0aXRsZXMsXG4gICAgYWN0aXZlUGFuZWxJbmRleCxcbiAgfSA9IHByb3BzO1xuXG4gIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBbaXNPcGVuLCB0b2dnbGVPcGVuU3RhdHVzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FjdGl2ZVBhbmVsLCBhY3RpdmVdID0gdXNlU3RhdGUoYWN0aXZlUGFuZWxJbmRleCk7XG5cbiAgY29uc3QgT2Zmc2V0ID0gKHdpbmRvdy5pbm5lcldpZHRoIC0gTWluUGFuZWxXaWR0aCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgZGF0YS1hY3RpdmUtcGFuZWw9e2FjdGl2ZVBhbmVsfVxuICAgICAgY2xhc3NOYW1lPXtjbignbWVudS1wYW5lbC1jb250YWluZXInLCB7XG4gICAgICAgIG9wZW46IGlzT3BlbixcbiAgICAgIH0pfVxuICAgID5cbiAgICAgIHtcbiAgICAgICAgY2hpbGRyZW4ubWFwKChjLCBpKSA9PiB7XG4gICAgICAgICAgY29uc3QgaXNMYXN0Q2hpbGQgPSBpID09PSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgICAgIGNvbnN0IHBvcyA9IGlzT3BlbiA/IGkgKiBPZmZzZXQgOiAwO1xuICAgICAgICAgIGNvbnN0IGFjdGl2ZVBvcyA9IHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBub3JtYWxQb3MgPSB7XG4gICAgICAgICAgICB0b3A6IHBvcyxcbiAgICAgICAgICAgIGxlZnQ6IHBvcyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IGluYWN0aXZlUG9zID0ge1xuICAgICAgICAgICAgdG9wOiAnY2FsYygxMDAlICsgMjBweCknLCAvLyBoaWRlIHNoYWRvd1xuICAgICAgICAgICAgbGVmdDogaSAqIE9mZnNldCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCByZXRQb3M7XG4gICAgICAgICAgaWYgKGFjdGl2ZVBhbmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXRQb3MgPSBhY3RpdmVQYW5lbCA9PT0gaSA/IGFjdGl2ZVBvcyA6IGluYWN0aXZlUG9zO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRQb3MgPSBub3JtYWxQb3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oJ21lbnUtcGFuZWwnLCB7XG4gICAgICAgICAgICAgICAgbGFzdDogaXNMYXN0Q2hpbGQsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiBhY3RpdmVQYW5lbCA9PT0gaSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIG9uVG91Y2hTdGFydD1cIlwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB3YWl0aW5nIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbkRlbGF5ID0gNzAwO1xuICAgICAgICAgICAgICAgIGFjdGl2ZShpKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZU9wZW5TdGF0dXMoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0sIGFuaW1hdGlvbkRlbGF5KTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgb25LZXlQcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBzdHlsZT17cmV0UG9zfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC10aXRsZVwiPnt0aXRsZXNbaV19PC9kaXY+XG4gICAgICAgICAgICAgICAgeyhhY3RpdmVQYW5lbCA9PT0gaSB8fCBpc0xhc3RDaGlsZCkgJiYgKGMpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIDxNZW51QnRuXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbih7IGhpZGRlbjogaXNPcGVuIH0pfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGlmIChpc09wZW4pIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25EZWxheSA9IDMwMDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBhY3RpdmUobnVsbCk7XG4gICAgICAgICAgICAgIHRvZ2dsZU9wZW5TdGF0dXMoIWlzT3Blbik7XG4gICAgICAgICAgICB9LCBhbmltYXRpb25EZWxheSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIH1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbk1lbnVQYW5lbC5wcm9wVHlwZXMgPSB7XG4gIHRpdGxlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG59O1xuXG5NZW51UGFuZWwuZGVmYXVsdFByb3BzID0ge1xuICB0aXRsZXM6IFtdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudVBhbmVsO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1hdGNoUGF0aCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IE1lbnVQYW5lbCBmcm9tICcuL2NvbXBvbmVudHMvdXRpbF9jb21wL21lbnVfcGFuZWwvaW5kZXguanN4JztcbmltcG9ydCBIb21lIGZyb20gJy4vY29tcG9uZW50cy9ob21lJ1xuaW1wb3J0IHtBYm91dH0gZnJvbSAnLi9jb21wb25lbnRzL2Fib3V0J1xuaW1wb3J0IFBvc3RMaXN0IGZyb20gJy4vY29tcG9uZW50cy9wb3N0X2xpc3QnO1xuaW1wb3J0IFBob3RvR3JvdXBzIGZyb20gJy4vY29tcG9uZW50cy9waG90b19ncm91cHMnXG5pbXBvcnQgeyBCYXNlTGluayB9IGZyb20gJy4vY29tcG9uZW50cy91dGlsX2NvbXAnO1xuaW1wb3J0IHsgcGFja2FnZUluZm8sIFJvdXRlcyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IE1vYmlsZUNvbnRlbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbWFpbic7XG5cbmNvbnN0IE1vYmlsZUFwcCA9ICgpID0+IHtcbiAgY29uc3QgdXJsU3RyID1sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gIGNvbnN0IGlzUGF0aE1hdGNoZWQgPSBtYXRjaFBhdGgodXJsU3RyLCB7cGF0aDogUm91dGVzLnBob3RvfSlcbiAgICB8fCBtYXRjaFBhdGgodXJsU3RyLCB7cGF0aDogUm91dGVzLnN0b3J5fSk7XG5cbiAgcmV0dXJuIChcbiAgICA8TWVudVBhbmVsXG4gICAgICBhY3RpdmVQYW5lbEluZGV4PXtpc1BhdGhNYXRjaGVkID8gMCA6IG51bGx9XG4gICAgICB0aXRsZXM9e1tcbiAgICAgICAgJycsXG4gICAgICAgICflhbPkuo4nLFxuICAgICAgICAn54Wn54mHJyxcbiAgICAgICAgJ+aWh+eroCcsXG4gICAgICAgICflsIHpnaInLFxuICAgICAgXX1cbiAgICA+XG4gICAgICA8TW9iaWxlQ29udGVudCAvPlxuICAgICAgPGRpdj5cbiAgICAgICAgPEJhc2VMaW5rXG4gICAgICAgICAgY2xhc3NOYW1lPVwidmVyc2lvblwiXG4gICAgICAgICAgdGV4dD17J3YnICsgcGFja2FnZUluZm8udmVyc2lvbn1cbiAgICAgICAgICBocmVmPXtwYWNrYWdlSW5mby5naXRVUkx9XG4gICAgICAgIC8+XG4gICAgICAgIDxBYm91dCAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8UGhvdG9Hcm91cHMgLz5cbiAgICAgIDxQb3N0TGlzdCAvPlxuICAgICAgPEhvbWUgLz5cbiAgICA8L01lbnVQYW5lbD5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9iaWxlQXBwO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWUgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7aXNNb2JpbGV9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSBcIi4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgUGNMYXlvdXR9IGZyb20gJy4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2xyJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBNb2JpbGVMYXlvdXR9IGZyb20gJy4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L3RkJztcbmltcG9ydCB7IFNwYWNlQ29udGV4dCwgTG9jYWxTdG9yYWdlQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcblxuaW1wb3J0IHtOYXYsIENvbnRlbnR9IGZyb20gJy4vY29tcG9uZW50cy9tYWluJztcbmltcG9ydCB7IFdpdGhHdWlkZUxpbmUgfSBmcm9tICcuL2NvbXBvbmVudHMvdXRpbF9jb21wL2F0dGFjaF9ndWlkZV9saW5lJztcbmltcG9ydCB7IEVtcHR5RGl2IH0gZnJvbSAnLi9jb21wb25lbnRzL3V0aWxfY29tcCc7XG5pbXBvcnQge2xvYWRMb2NhbFN0b3JhZ2VWYWx1ZXMsIGxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXNGcm9tfSBmcm9tICcuL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5pbXBvcnQge2xvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXl9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBNb2JpbGVBcHAgZnJvbSAnLi9tb2JpbGVfYXBwJztcblxuY29uc3QgUGNMYXlvdXRXaXRoR3VpZGVMaW5lID0gV2l0aEd1aWRlTGluZShQY0xheW91dCk7XG5jb25zdCBOYXZXaXRoR3VpZGVMaW5lID0gV2l0aEd1aWRlTGluZShOYXYpO1xuXG5jb25zdCBFbXB0eURpdldpdGhHdWlkZUxpbmUgPSBXaXRoR3VpZGVMaW5lKEVtcHR5RGl2KTtcblxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gZ2xvYmFsIGFwcCBzdGF0ZVxuICBzdGF0ZSA9IHtcbiAgICBzaWRlU3BhY2VDb250ZW50OiBudWxsLFxuICAgIGxlZnRTcGFjZUNvbnRlbnQ6IG51bGwsXG5cbiAgICAvLyDphY3nva7poblcblxuICAgIC8vIGxvY2FsU3RvcmFnZSDphY3nva7poblcbiAgICAuLi5sb2FkTG9jYWxTdG9yYWdlVmFsdWVzKClcbiAgfTtcblxuICB0b2dnbGVTcGFjZUd1aWRlTGluZSA9IChzdGF0ZSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe3Nob3dTcGFjZUd1aWRlTGluZTogc3RhdGV9LCAoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgbG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5TSE9XX1NQQUNFX0dVSURFTElORSxcbiAgICAgICAgc3RhdGUsXG4gICAgICApXG4gICAgfSlcbiAgfTtcblxuICBzZXRTcGFjZUNvbnRleHQgPSAoa2V5LCB2YWwpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtba2V5XTogdmFsfSk7XG4gIH07XG5cbiAgc2V0TG9jYWxTdG9yYWdlVmFsID0gKGtleSwgdmFsKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7W2tleV06IHZhbH0sICgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsKTtcbiAgICB9KTtcbiAgfTtcblxuICBnZXRMb2NhbFN0b3JhZ2VWYWwgPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVba2V5XTtcbiAgfTtcblxuICBwcm92aWRlckxheWVyID0gKGNvbnRlbnQpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFNwYWNlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICBzZXRMZWZ0U3BhY2VDb250ZW50OiAodmFsKSA9PiB7IHRoaXMuc2V0U3BhY2VDb250ZXh0KCdsZWZ0U3BhY2VDb250ZW50JywgdmFsKX0sXG4gICAgICAgIHNldFNpZGVTcGFjZUNvbnRlbnQ6ICh2YWwpID0+IHsgdGhpcy5zZXRTcGFjZUNvbnRleHQoJ3NpZGVTcGFjZUNvbnRlbnQnLCB2YWwpfSxcbiAgICAgICAgZGVzdHJveUFsbFNwYWNlOiAoKSA9PiB7dGhpcy5wcm9wcy5leGl0KCl9LFxuICAgICAgICB0b2dnbGVTcGFjZUd1aWRlTGluZTogdGhpcy50b2dnbGVTcGFjZUd1aWRlTGluZSxcbiAgICAgICAgc2hvd1NwYWNlR3VpZGVMaW5lOiB0aGlzLnN0YXRlLnNob3dTcGFjZUd1aWRlTGluZSxcbiAgICAgIH19PlxuICAgICAgICA8TG9jYWxTdG9yYWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICAgIC4uLmxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXNGcm9tKHRoaXMuc3RhdGUpLFxuICAgICAgICAgIGdldExvY2FsU3RvcmFnZVZhbDogdGhpcy5nZXRMb2NhbFN0b3JhZ2VWYWwsXG4gICAgICAgICAgc2V0TG9jYWxTdG9yYWdlVmFsOiB0aGlzLnNldExvY2FsU3RvcmFnZVZhbCxcbiAgICAgICAgfX0+XG4gICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgIDwvTG9jYWxTdG9yYWdlQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvU3BhY2VDb250ZXh0LlByb3ZpZGVyPlxuICAgIClcbiAgfTtcblxuICByZW5kZXJQY1ZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgU2lkZVNwYWNlV2l0aEd1aWRlTGluZSA9IFdpdGhHdWlkZUxpbmUoKCkgPT4gdGhpcy5zdGF0ZS5zaWRlU3BhY2VDb250ZW50KTtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlckxheWVyKFxuICAgICAgPFBjTGF5b3V0V2l0aEd1aWRlTGluZVxuICAgICAgICB0b3BcbiAgICAgICAgYm90dG9tXG4gICAgICAgIGxlZnQ9eyhcbiAgICAgICAgICA8Q29sdW1uc1xuICAgICAgICAgICAgY29scz17W1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxlZnRTcGFjZUNvbnRlbnQsXG4gICAgICAgICAgICAgIDxOYXZXaXRoR3VpZGVMaW5lIHJpZ2h0IGxlZnQgLz4sXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2lkZVNwYWNlQ29udGVudFxuICAgICAgICAgICAgICAgID8gPFNpZGVTcGFjZVdpdGhHdWlkZUxpbmUgcmlnaHQgLz5cbiAgICAgICAgICAgICAgICA6IDxFbXB0eURpdldpdGhHdWlkZUxpbmUgcmlnaHQgLz5cbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgcmlnaHQ9eyhcbiAgICAgICAgICA8Q29udGVudCAvPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlck1vYmlsZVZpZXcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJMYXllcig8TW9iaWxlQXBwIC8+KVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpc01ibCA9IGlzTW9iaWxlKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWUoJ0FwcCcsIHttb2JpbGU6IGlzTWJsfSl9PlxuICAgICAgICAgIHtpc01ibCA/IHRoaXMucmVuZGVyTW9iaWxlVmlldygpIDogdGhpcy5yZW5kZXJQY1ZpZXcoKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwb2xsb0NsaWVudCBmcm9tIFwiYXBvbGxvLWJvb3N0XCI7XG5pbXBvcnQgeyBBcG9sbG9Qcm92aWRlciB9IGZyb20gXCJyZWFjdC1hcG9sbG9cIjtcblxuaW1wb3J0IHsgJCwgaXNFbGVtZW50RW1wdHkgfSBmcm9tICdAemhvdWppYWhhby91dGlscydcbmltcG9ydCB7IHF1ZXJ5Q292ZXJzIH0gZnJvbSBcIi4vY29udGFpbmVycy9jb3ZlclwiO1xuaW1wb3J0IHsgcXVlcnlQb3N0TGlzdCB9IGZyb20gJy4vY29udGFpbmVycy9wb3N0X2xpc3QnO1xuaW1wb3J0IHsgcXVlcnlQaG90b0dyb3VwcyB9IGZyb20gJy4vY29udGFpbmVycy9waG90b19ncm91cHMnO1xuaW1wb3J0IHsgcXVlcnlQaG90b0dyb3VwIH0gZnJvbSAnLi9jb250YWluZXJzL3Bob3RvX2dyb3VwJztcbmltcG9ydCB7Y29udGVudFR5cGUsIHBob3RvR3JvdXBzSWRBcnJ9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHByb21pc2VPbmVCeU9uZSB9IGZyb20gJ0B6aG91amlhaGFvL3V0aWxzJztcblxuaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zY3NzJztcbmltcG9ydCAnLi9jc3MvZm9udGVsbG8uY3NzJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0IHtzYXZlUGhvdG9EYXRhVG9Mb2NhbFN0b3JhZ2UsIHNhdmVQb3N0c0RhdGFUb0xvY2FsU3RvcmFnZX0gZnJvbSAnLi91dGlscy9sb2NhbF9zdG9yYWdlX21hbmFnZXInO1xuaW1wb3J0IHtxdWVyeUltYWdlfSBmcm9tICcuL2NvbnRhaW5lcnMvcGhvdG8nO1xuXG5leHBvcnQgY29uc3QgQVBPTExPX0NMSUVOVCA9IG5ldyBBcG9sbG9DbGllbnQoe1xuICB1cmk6IFwiaHR0cHM6Ly9hcGkuempoLmltL2dyYXBocWxcIlxufSk7XG5cbmNvbnN0IEFwcFdyYXBwZXIgPSAoeyBleGl0IH0pID0+IChcbiAgPEFwb2xsb1Byb3ZpZGVyIGNsaWVudD17QVBPTExPX0NMSUVOVH0+XG4gICAgPEFwcCBleGl0PXtleGl0fSAvPlxuICA8L0Fwb2xsb1Byb3ZpZGVyPlxuKTtcblxuXG5jb25zdCBCbG9nID0gICgkd3JhcHBlciwgdW5tb3VudCwgZXhpdCkgPT4ge1xuICBpZih1bm1vdW50KSB7XG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSgkd3JhcHBlcik7XG4gIH0gZWxzZSB7XG4gICAgUmVhY3RET00ucmVuZGVyKDxBcHBXcmFwcGVyIGV4aXQ9e2V4aXR9IC8+LCAkd3JhcHBlcik7XG4gIH1cbn07XG5cbmNvbnN0IGxvYWRJbWFnZXMgPSAoY2JGbikgPT4ge1xuICBjb25zdCBwcm9taXNlUXVldWUgPSBwaG90b0dyb3Vwc0lkQXJyLm1hcChpZCA9PiAoKSA9PlxuICAgIEFQT0xMT19DTElFTlQucXVlcnkoe1xuICAgICAgcXVlcnk6IHF1ZXJ5UGhvdG9Hcm91cCxcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICBpZFxuICAgICAgfVxuICAgIH0pXG4gICk7XG5cbiAgcmV0dXJuIHByb21pc2VPbmVCeU9uZShcbiAgICBwcm9taXNlUXVldWUsXG4gICAgKGlkeCwgcmVzdWx0KSA9PiB7XG4gICAgICBzYXZlUGhvdG9EYXRhVG9Mb2NhbFN0b3JhZ2UocmVzdWx0LCBwaG90b0dyb3Vwc0lkQXJyW2lkeF0pO1xuICAgICAgY2JGbihpZHgpO1xuICAgIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2hvcnRvcHRzOiAnZScsXG4gIGFzeW5jIGhhbmRsZXIocGFyYW1zT2JqID0ge30sIHAyLCBwMywgcDQsIHByaW50KSB7XG4gICAgY29uc3Qge2U6ZXhpdH0gPSBwYXJhbXNPYmo7XG4gICAgY29uc3QgJGJsb2dXcmFwcGVyID0gJCgnI2d1aScpO1xuICAgIGNvbnN0ICRib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIGlmKGV4aXQpIHtcbiAgICAgIEJsb2coJGJsb2dXcmFwcGVyLCBleGl0KTtcbiAgICAgICRibG9nV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdibG9nJyk7XG4gICAgICAkYm9keS5jbGFzc0xpc3QucmVtb3ZlKCd3aGl0ZS1iZycpO1xuICAgICAgcmV0dXJuIFwiR29vZGJ5ZVwiO1xuICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50RW1wdHkoJGJsb2dXcmFwcGVyKSkge1xuICAgICAgJGJvZHkuY2xhc3NMaXN0LmFkZCgnd2hpdGUtYmcnKTtcblxuICAgICAgLy8g5bCB6Z2i5L+h5oGvXG4gICAgICBhd2FpdCBBUE9MTE9fQ0xJRU5ULnF1ZXJ5KHtxdWVyeTogcXVlcnlDb3ZlcnN9KTtcbiAgICAgIGF3YWl0IEFQT0xMT19DTElFTlQucXVlcnkoe1xuICAgICAgICBxdWVyeTogcXVlcnlJbWFnZSxcbiAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgaWQ6IGNvbnRlbnRUeXBlLnBob3RvLmRlZmF1bHRDb250ZW50VmFsdWVcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHByaW50KFwi5Yqg6L295Y2a5a6i6YWN572uIFtET05FXVwiLCB0cnVlKTtcblxuICAgICAgY29uc3QgcG9zdERhdGEgPSBhd2FpdCBBUE9MTE9fQ0xJRU5ULnF1ZXJ5KHtxdWVyeTogcXVlcnlQb3N0TGlzdH0pO1xuICAgICAgc2F2ZVBvc3RzRGF0YVRvTG9jYWxTdG9yYWdlKHBvc3REYXRhKTtcbiAgICAgIHByaW50KFwi5Yqg6L295Y2a5paH55uu5b2VIFtET05FXVwiLCB0cnVlKTtcblxuICAgICAgYXdhaXQgQVBPTExPX0NMSUVOVC5xdWVyeSh7cXVlcnk6IHF1ZXJ5UGhvdG9Hcm91cHN9KTtcbiAgICAgIHByaW50KFwi5Yqg6L2954Wn54mH55uu5b2VIFtET05FXVwiLCB0cnVlKTtcblxuICAgICAgYXdhaXQgbG9hZEltYWdlcygoaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSBgJHtNYXRoLmZsb29yKCgoaWR4ICsgMSkgLyBwaG90b0dyb3Vwc0lkQXJyLmxlbmd0aCkgKiAxMDApfSVgO1xuICAgICAgICBwcmludChg5Yqg6L2954Wn54mH5L+h5oGvIFske3BlcmNlbnR9XWAsIHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgICRibG9nV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdibG9nJyk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBCbG9nKCRibG9nV3JhcHBlciwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIFRlcm1pbmFsLmV4ZWMoJ2Jsb2cgLWUnKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5ET01cIikpO1xuXG52YXIgdmVuZG9ycyA9IFsnJywgJ3dlYmtpdCcsICdtb3onLCAnbycsICdtcyddO1xudmFyIGNhbmNlbCA9ICdjbGVhclRpbWVvdXQnO1xudmFyIHJhZiA9IGZhbGxiYWNrO1xudmFyIGNvbXBhdFJhZjtcblxudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleSh2ZW5kb3IsIGspIHtcbiAgcmV0dXJuIHZlbmRvciArICghdmVuZG9yID8gayA6IGtbMF0udG9VcHBlckNhc2UoKSArIGsuc3Vic3RyKDEpKSArICdBbmltYXRpb25GcmFtZSc7XG59O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgdmVuZG9ycy5zb21lKGZ1bmN0aW9uICh2ZW5kb3IpIHtcbiAgICB2YXIgcmFmS2V5ID0gZ2V0S2V5KHZlbmRvciwgJ3JlcXVlc3QnKTtcblxuICAgIGlmIChyYWZLZXkgaW4gd2luZG93KSB7XG4gICAgICBjYW5jZWwgPSBnZXRLZXkodmVuZG9yLCAnY2FuY2VsJyk7XG4gICAgICByZXR1cm4gcmFmID0gZnVuY3Rpb24gcmFmKGNiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3dbcmFmS2V5XShjYik7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG4vKiBodHRwczovL2dpdGh1Yi5jb20vY29tcG9uZW50L3JhZiAqL1xuXG5cbnZhciBwcmV2ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbmZ1bmN0aW9uIGZhbGxiYWNrKGZuKSB7XG4gIHZhciBjdXJyID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBtcyA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnIgLSBwcmV2KSksXG4gICAgICByZXEgPSBzZXRUaW1lb3V0KGZuLCBtcyk7XG4gIHByZXYgPSBjdXJyO1xuICByZXR1cm4gcmVxO1xufVxuXG5jb21wYXRSYWYgPSBmdW5jdGlvbiBjb21wYXRSYWYoY2IpIHtcbiAgcmV0dXJuIHJhZihjYik7XG59O1xuXG5jb21wYXRSYWYuY2FuY2VsID0gZnVuY3Rpb24gKGlkKSB7XG4gIHdpbmRvd1tjYW5jZWxdICYmIHR5cGVvZiB3aW5kb3dbY2FuY2VsXSA9PT0gJ2Z1bmN0aW9uJyAmJiB3aW5kb3dbY2FuY2VsXShpZCk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBjb21wYXRSYWY7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5hbmltYXRpb25FbmQgPSBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gZXhwb3J0cy5hbmltYXRpb25OYW1lID0gZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gZXhwb3J0cy50cmFuc2Zvcm0gPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIHRyYW5zZm9ybSA9ICd0cmFuc2Zvcm0nO1xuZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG52YXIgcHJlZml4LCB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQ7XG52YXIgdHJhbnNpdGlvblByb3BlcnR5LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25UaW1pbmcsIHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZztcbmV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHk7XG52YXIgYW5pbWF0aW9uTmFtZSwgYW5pbWF0aW9uRHVyYXRpb24sIGFuaW1hdGlvblRpbWluZywgYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZztcbmV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbjtcbmV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWU7XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0ID0gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKTtcblxuICBwcmVmaXggPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQucHJlZml4O1xuICBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQ7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LmFuaW1hdGlvbkVuZDtcbiAgZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0gPSBwcmVmaXggKyBcIi1cIiArIHRyYW5zZm9ybTtcbiAgZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXByb3BlcnR5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZyA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWUgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tbmFtZVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICBlbmQ6IHRyYW5zaXRpb25FbmQsXG4gIHByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRpbWluZzogdHJhbnNpdGlvblRpbWluZyxcbiAgZGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHZhciB2ZW5kb3JNYXAgPSB7XG4gICAgTzogZnVuY3Rpb24gTyhlKSB7XG4gICAgICByZXR1cm4gXCJvXCIgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuIFwid2Via2l0XCIgKyBlO1xuICAgIH0sXG4gICAgbXM6IGZ1bmN0aW9uIG1zKGUpIHtcbiAgICAgIHJldHVybiBcIk1TXCIgKyBlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHZlbmRvcnMgPSBPYmplY3Qua2V5cyh2ZW5kb3JNYXApO1xuICB2YXIgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZlbmRvciA9IHZlbmRvcnNbaV07XG5cbiAgICBpZiAodmVuZG9yICsgXCJUcmFuc2l0aW9uUHJvcGVydHlcIiBpbiBzdHlsZSkge1xuICAgICAgcHJlZml4ID0gXCItXCIgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuICBpZiAoIWFuaW1hdGlvbkVuZCAmJiAnYW5pbWF0aW9uTmFtZScgaW4gc3R5bGUpIGFuaW1hdGlvbkVuZCA9ICdhbmltYXRpb25lbmQnO1xuICBzdHlsZSA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgYW5pbWF0aW9uRW5kOiBhbmltYXRpb25FbmQsXG4gICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgICBwcmVmaXg6IHByZWZpeFxuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubmFtZVNoYXBlID0gdW5kZWZpbmVkO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVGltZW91dCh0cmFuc2l0aW9uVHlwZSkge1xuICB2YXIgdGltZW91dFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGUgKyAnVGltZW91dCc7XG4gIHZhciBlbmFibGVkUHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpO1xuXG4gICAgICAgIC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHNbdGltZW91dFByb3BOYW1lXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIG5hbWVTaGFwZSA9IGV4cG9ydHMubmFtZVNoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBsZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgbGVhdmVBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXJBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59KV0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghKDAsIF9oYXNDbGFzcy5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2FkZENsYXNzID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MnKTtcblxudmFyIF9hZGRDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRDbGFzcyk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcycpO1xuXG52YXIgX3JlbW92ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbW92ZUNsYXNzKTtcblxudmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZScpO1xuXG52YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpO1xuXG52YXIgX3Byb3BlcnRpZXMgPSByZXF1aXJlKCdkb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMnKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vdXRpbHMvUHJvcFR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGV2ZW50cyA9IFtdO1xuaWYgKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpIGV2ZW50cy5wdXNoKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpO1xuaWYgKF9wcm9wZXJ0aWVzLmFuaW1hdGlvbkVuZCkgZXZlbnRzLnB1c2goX3Byb3BlcnRpZXMuYW5pbWF0aW9uRW5kKTtcblxuZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIobm9kZSwgbGlzdGVuZXIpIHtcbiAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldFRpbWVvdXQobGlzdGVuZXIsIDApO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWV2ZW50cy5sZW5ndGgpIHJldHVybjtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBuYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIC8vIE9uY2Ugd2UgcmVxdWlyZSB0aW1lb3V0cyB0byBiZSBzcGVjaWZpZWQsIHdlIGNhbiByZW1vdmUgdGhlXG4gIC8vIGJvb2xlYW4gZmxhZ3MgKGFwcGVhciBldGMuKSBhbmQganVzdCBhY2NlcHQgYSBudW1iZXJcbiAgLy8gb3IgYSBib29sIGZvciB0aGUgdGltZW91dCBmbGFncyAoYXBwZWFyVGltZW91dCBldGMuKVxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgbGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgYXBwZWFyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGVudGVyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGxlYXZlVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5cbnZhciBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29tcG9uZW50V2lsbEFwcGVhciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXBwZWFyKSB7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb24oJ2FwcGVhcicsIGRvbmUsIF90aGlzLnByb3BzLmFwcGVhclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxFbnRlciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZW50ZXIpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lLCBfdGhpcy5wcm9wcy5lbnRlclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxMZWF2ZSA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGVhdmUpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignbGVhdmUnLCBkb25lLCBfdGhpcy5wcm9wcy5sZWF2ZVRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZSA9IFtdO1xuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzID0gW107XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzLmZvckVhY2goZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uKGFuaW1hdGlvblR5cGUsIGZpbmlzaENhbGxiYWNrLCB0aW1lb3V0KSB7XG4gICAgdmFyIG5vZGUgPSAoMCwgX3JlYWN0RG9tLmZpbmRET01Ob2RlKSh0aGlzKTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgaWYgKGZpbmlzaENhbGxiYWNrKSB7XG4gICAgICAgIGZpbmlzaENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMubmFtZVthbmltYXRpb25UeXBlXSB8fCB0aGlzLnByb3BzLm5hbWUgKyAnLScgKyBhbmltYXRpb25UeXBlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSB0aGlzLnByb3BzLm5hbWVbYW5pbWF0aW9uVHlwZSArICdBY3RpdmUnXSB8fCBjbGFzc05hbWUgKyAnLWFjdGl2ZSc7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZlTGlzdGVuZXJzID0gdm9pZCAwO1xuXG4gICAgKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgIC8vIE5lZWQgdG8gZG8gdGhpcyB0byBhY3R1YWxseSB0cmlnZ2VyIGEgdHJhbnNpdGlvbi5cbiAgICB0aGlzLnF1ZXVlQ2xhc3NBbmROb2RlKGFjdGl2ZUNsYXNzTmFtZSwgbm9kZSk7XG5cbiAgICAvLyBDbGVhbi11cCB0aGUgYW5pbWF0aW9uIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXlcbiAgICB2YXIgZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKGUpIHtcbiAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBub2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lcnMpIHJlbW92ZUxpc3RlbmVycygpO1xuXG4gICAgICAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShub2RlLCBjbGFzc05hbWUpO1xuICAgICAgKDAsIF9yZW1vdmVDbGFzczIuZGVmYXVsdCkobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKHJlbW92ZUxpc3RlbmVycykgcmVtb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICAgIC8vIFVzdWFsbHkgdGhpcyBvcHRpb25hbCBjYWxsYmFjayBpcyB1c2VkIGZvciBpbmZvcm1pbmcgYW4gb3duZXIgb2ZcbiAgICAgIC8vIGEgbGVhdmUgYW5pbWF0aW9uIGFuZCB0ZWxsaW5nIGl0IHRvIHJlbW92ZSB0aGUgY2hpbGQuXG4gICAgICBpZiAoZmluaXNoQ2FsbGJhY2spIHtcbiAgICAgICAgZmluaXNoQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmaW5pc2gsIHRpbWVvdXQpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dHMucHVzaCh0aW1lcik7XG4gICAgfSBlbHNlIGlmIChfcHJvcGVydGllcy50cmFuc2l0aW9uRW5kKSB7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMgPSBhZGRFbmRMaXN0ZW5lcihub2RlLCBmaW5pc2gpO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUucXVldWVDbGFzc0FuZE5vZGUgPSBmdW5jdGlvbiBxdWV1ZUNsYXNzQW5kTm9kZShjbGFzc05hbWUsIG5vZGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLnB1c2goe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBub2RlOiBub2RlXG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMucmFmSGFuZGxlKSB7XG4gICAgICB0aGlzLnJhZkhhbmRsZSA9ICgwLCBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lMi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUgPSBmdW5jdGlvbiBmbHVzaENsYXNzTmFtZUFuZE5vZGVRdWV1ZSgpIHtcbiAgICBpZiAoIXRoaXMudW5tb3VudGVkKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgICAgICAvLyB3aGljaCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gdHJhbnNpdGlvbiBzdHlsZXMgd2hlbiBhZGRpbmcgYSBjbGFzcyBuYW1lLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAgICAgb2JqLm5vZGUuc2Nyb2xsVG9wO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShvYmoubm9kZSwgb2JqLmNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc05hbWVBbmROb2RlUXVldWUubGVuZ3RoID0gMDtcbiAgICB0aGlzLnJhZkhhbmRsZSA9IG51bGw7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIHByb3BzLm5hbWU7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuY2hpbGRyZW47XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbiksIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5kaXNwbGF5TmFtZSA9ICdDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCc7XG5cblxuQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENTU1RyYW5zaXRpb25Hcm91cENoaWxkO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Il0sInNvdXJjZVJvb3QiOiIifQ==