(this.webpackJsonp=this.webpackJsonp||[]).push([[6],{"8oxB":function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&d())}function d(){if(!f){var e=c(p);f=!0;for(var t=s.length;t;){for(u=s,s=[];++l<t;)u&&u[l].run();l=-1,t=s.length}u=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];s.push(new h(e,t)),1!==s.length||f||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"V/h/":function(e,t,r){"use strict";(function(e){var r,n,o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},c=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),u="undefined"!=typeof Symbol?Symbol("immer-nothing"):(o=!0,(n="immer-nothing")in(r={})?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,r),s="undefined"!=typeof Symbol?Symbol("immer-state"):"__$immer_state";function f(e){return!!e&&!!e[s]}function l(e){if(!e)return!1;if("object"!==(void 0===e?"undefined":i(e)))return!1;if(Array.isArray(e))return!0;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=Object.assign||function(e,t){for(var r in t)y(t,r)&&(e[r]=t[r]);return e};function d(e){if(Array.isArray(e))return e.slice();var t=void 0===e.__proto__?Object.create(null):{};return p(t,e)}function h(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)t(r,e[r],e);else for(var n in e)t(n,e[n],e)}function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function v(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function b(e,t,r,n){Array.isArray(e.base)?function(e,t,r,n){for(var o=e.base,i=e.copy,a=e.assigned,c=Math.min(o.length,i.length),u=0;u<c;u++)if(a[u]&&o[u]!==i[u]){var s=t.concat(u);r.push({op:"replace",path:s,value:i[u]}),n.push({op:"replace",path:s,value:o[u]})}if(c<i.length){for(var f=c;f<i.length;f++)r.push({op:"add",path:t.concat(f),value:i[f]});n.push({op:"replace",path:t.concat("length"),value:o.length})}else if(c<o.length){r.push({op:"replace",path:t.concat("length"),value:i.length});for(var l=c;l<o.length;l++)n.push({op:"add",path:t.concat(l),value:o[l]})}}(e,t,r,n):function(e,t,r,n){var o=e.base,i=e.copy;h(e.assigned,(function(e,a){var c=o[e],u=i[e],s=a?e in o?"replace":"add":"remove";if(c!==o||"replace"!==s){var f=t.concat(e);r.push("remove"===s?{op:s,path:f}:{op:s,path:f,value:u}),n.push("add"===s?{op:"remove",path:f}:"remove"===s?{op:"add",path:f,value:c}:{op:"replace",path:f,value:c})}}))}(e,t,r,n)}var m={},g=[],w=function(){return g[g.length-1]};function O(e,t){var r=void 0;if(f(e)){var n=e[s];n.finalizing=!0,r=d(n.draft),n.finalizing=!1}else r=d(e);h(e,(function(e){Object.defineProperty(r,""+e,function(e){return m[e]||(m[e]={configurable:!0,enumerable:!0,get:function(){return function(e,t){T(e);var r=j(e)[t];if(!e.finalizing&&r===e.base[t]&&l(r))return E(e),e.copy[t]=O(r,e);return r}(this[s],e)},set:function(t){!function(e,t,r){if(T(e),e.assigned[t]=!0,!e.modified){if(v(j(e)[t],r))return;S(e),E(e)}e.copy[t]=r}(this[s],e,t)}})}(""+e))}));var o={scope:t?t.scope:w(),modified:!1,finalizing:!1,finalized:!1,assigned:{},parent:t,base:e,draft:r,copy:null,revoke:P,revoked:!1};return function(e,t,r){Object.defineProperty(e,t,{value:r,enumerable:!1,writable:!0})}(r,s,o),o.scope.push(o),r}function P(){this.revoked=!0}function j(e){return e.copy||e.base}function S(e){e.modified||(e.modified=!0,e.parent&&S(e.parent))}function E(e){e.copy||(e.copy=d(e.base))}function T(e){if(!0===e.revoked)throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+JSON.stringify(e.copy||e.base))}function k(e){for(var t=e.base,r=e.draft,n=Object.keys(r),o=n.length-1;o>=0;o--)if(void 0===t[n[o]]&&!y(t,n[o]))return!0;return n.length!==Object.keys(t).length}function x(e){var t=e.draft;if(t.length!==e.base.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!r||r.get)}var A=Object.freeze({scopes:g,currentScope:w,willFinalize:function(e,t,r){var n=w();n.forEach((function(e){return e.finalizing=!0})),void 0!==e&&e!==t||(r&&function e(t){if(!t||"object"!==(void 0===t?"undefined":i(t)))return;var r=t[s];if(!r)return;var n=r.base,o=r.draft,a=r.assigned;if(Array.isArray(t)){if(x(r)){if(S(r),a.length=!0,o.length<n.length)for(var c=o.length;c<n.length;c++)a[c]=!1;else for(var u=n.length;u<o.length;u++)a[u]=!0;for(var f=0;f<o.length;f++)void 0===a[f]&&e(o[f])}}else Object.keys(o).forEach((function(t){void 0!==n[t]||y(n,t)?a[t]||e(o[t]):(a[t]=!0,S(r))})),Object.keys(n).forEach((function(e){void 0!==o[e]||y(o,e)||(a[e]=!1,S(r))}))}(t),function(e){for(var t=e.length-1;t>=0;t--){var r=e[t];!1===r.modified&&(Array.isArray(r.base)?x(r)&&S(r):k(r)&&S(r))}}(n))},createDraft:O}),z=[],L=function(){return z[z.length-1]};function I(e,t){var r={scope:t?t.scope:L(),modified:!1,finalized:!1,assigned:{},parent:t,base:e,draft:null,drafts:{},copy:null,revoke:null},n=Array.isArray(e)?Proxy.revocable([r],_):Proxy.revocable(r,D),o=n.revoke,i=n.proxy;return r.draft=i,r.revoke=o,r.scope.push(r),i}var D={get:function(e,t){if(t===s)return e;var r=e.drafts;if(!e.modified&&y(r,t))return r[t];var n=C(e)[t];if(e.finalized||!l(n))return n;if(e.modified){if(n!==e.base[t])return n;r=e.copy}return r[t]=I(n,e)},has:function(e,t){return t in C(e)},ownKeys:function(e){return Reflect.ownKeys(C(e))},set:function(e,t,r){if(!e.modified){if(r?v(e.base[t],r)||r===e.drafts[t]:v(e.base[t],r)&&t in e.base)return!0;N(e)}return e.assigned[t]=!0,e.copy[t]=r,!0},deleteProperty:function(e,t){(void 0!==e.base[t]||t in e.base)&&(e.assigned[t]=!1,N(e));e.copy&&delete e.copy[t];return!0},getOwnPropertyDescriptor:function(e,t){var r=e.modified?e.copy:y(e.drafts,t)?e.drafts:e.base,n=Reflect.getOwnPropertyDescriptor(r,t);!n||Array.isArray(r)&&"length"===t||(n.configurable=!0);return n},defineProperty:function(){throw new Error("Immer does not support defining properties on draft objects.")},setPrototypeOf:function(){throw new Error("Immer does not support `setPrototypeOf()`.")}},_={};function C(e){return e.copy||e.base}function N(e){e.modified||(e.modified=!0,e.copy=p(d(e.base),e.drafts),e.drafts=null,e.parent&&N(e.parent))}h(D,(function(e,t){_[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),_.deleteProperty=function(e,t){if(isNaN(parseInt(t)))throw new Error("Immer does not support deleting properties from arrays: "+t);return D.deleteProperty.call(this,e[0],t)},_.set=function(e,t,r){if("length"!==t&&isNaN(parseInt(t)))throw new Error("Immer does not support setting non-numeric properties on arrays: "+t);return D.set.call(this,e[0],t,r)};var F=Object.freeze({scopes:z,currentScope:L,willFinalize:function(){},createDraft:I});var R={useProxies:"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect,autoFreeze:void 0===e&&"verifyMinified"===function(){}.name,onAssign:null,onDelete:null,onCopy:null},U=new(function(){function e(t){a(this,e),p(this,R,t),this.setUseProxies(this.useProxies),this.produce=this.produce.bind(this)}return c(e,[{key:"produce",value:function(e,t,r){var n=this;if("function"==typeof e&&"function"!=typeof t){var o=t;return t=e,function(){for(var e=arguments.length,r=Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o;return n.produce(a,(function(e){var n;return(n=t).call.apply(n,[e,e].concat(r))}))}}if("function"!=typeof t)throw new Error("if first argument is not a function, the second argument to produce should be a function");if(void 0!==r&&"function"!=typeof r)throw new Error("the third argument of a producer should not be set or a function");var i=void 0;if(l(e))if(f(e)){if(void 0===(i=t.call(e,e)))return e}else{this.scopes.push([]);var a=this.createDraft(e);try{i=t.call(a,a),this.willFinalize(i,a,!!r);var c=r&&[],p=r&&[];if(void 0===i||i===a)i=this.finalize(a,[],c,p);else{if(a[s].modified)throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");l(i)&&(i=this.finalize(i)),r&&(c.push({op:"replace",path:[],value:i}),p.push({op:"replace",path:[],value:e}))}}finally{this.currentScope().forEach((function(e){return e.revoke()})),this.scopes.pop()}r&&r(c,p)}else if(void 0===(i=t(e)))return e;return i===u?void 0:i}},{key:"setAutoFreeze",value:function(e){this.autoFreeze=e}},{key:"setUseProxies",value:function(e){this.useProxies=e,p(this,e?F:A)}},{key:"finalize",value:function(e,t,r,n){var o=e[s];if(!o)return Object.isFrozen(e)?e:this.finalizeTree(e);if(o.scope!==this.currentScope())return e;if(!o.modified)return o.base;if(!o.finalized){if(o.finalized=!0,this.finalizeTree(o.draft,t,r,n),this.onDelete){var i=o.assigned;for(var a in i)i[a]||this.onDelete(o,a)}this.onCopy&&this.onCopy(o),this.autoFreeze&&1===this.scopes.length&&Object.freeze(o.copy),r&&b(o,t,r,n)}return o.copy}},{key:"finalizeTree",value:function(e,t,r,n){var o=this,i=e[s];i&&(e=this.useProxies?i.copy:i.copy=d(i.draft));var a=this.onAssign;return h(e,(function c(u,s,p){var d=!!i&&p===e;if(f(s)){if(p[u]=s=r&&d&&!i.assigned[u]?o.finalize(s,t.concat(u),r,n):o.finalize(s),d&&s===i.base[u])return}else{if(d&&v(s,i.base[u]))return;l(s)&&!Object.isFrozen(s)&&h(s,c)}d&&a&&a(i,u,s)})),e}}]),e}()),J=U.produce;J((function(e,t){for(var r=0;r<t.length;r++){var n=t[r],o=n.path;if(0===o.length&&"replace"===n.op)e=n.value;else{for(var a=e,c=0;c<o.length-1;c++)if(!(a=a[o[c]])||"object"!==(void 0===a?"undefined":i(a)))throw new Error("Cannot apply patch, path doesn't resolve: "+o.join("/"));var u=o[o.length-1];switch(n.op){case"replace":case"add":a[u]=n.value;break;case"remove":if(Array.isArray(a)){if(u!==a.length-1)throw new Error("Only the last index of an array can be removed, index: "+u+", length: "+a.length);a.length-=1}else delete a[u];break;default:throw new Error("Unsupported patch operation: "+n.op)}}}return e}));t.a=J}).call(this,r("8oxB"))},XXAI:function(e,t,r){"use strict";r.r(t);var n={};r.r(n),r.d(n,"set",(function(){return _})),r.d(n,"get",(function(){return C})),r.d(n,"remove",(function(){return R})),r.d(n,"list",(function(){return U})),r.d(n,"destroy",(function(){return M})),r.d(n,"withLocalList",(function(){return J}));var o=r("8RZD"),i=r("q1tI"),a=r.n(i),c=r("i8i4"),u=r.n(c),s=r("V/h/");function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&p(e.prototype,t),r&&p(e,r),e}function h(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?v(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var w=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return function(r){function n(){var e,t;l(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return g(v(t=h(this,(e=y(n)).call.apply(e,[this].concat(o)))),"state",{component:null}),t}return b(n,r),d(n,[{key:"componentDidMount",value:function(){var t=this;e().then((function(e){t.setState({component:e.default})}))}},{key:"render",value:function(){var e=this.state.component;return e?a.a.createElement(e,this.props):t}}]),n}(i.Component)},O=function(e){var t=e.titles,r=e.activePostIdx,n=e.onTitleClick;return a.a.createElement("ul",null,t.map((function(e,t){var o=r===t;return a.a.createElement("li",{onClick:function(){n(t)},className:"".concat(o?"active":"")},e)})))},P=function(e){var t=e.api,r=e.postListUpdater,n=e.Persistor;return function(e,o){var i=e.error,a=e.success;e.warn;t.update(o.getOption("contentId"),o.doc.getValue()).then((function(e){n.remove(e.id),e.postType="published",r((function(t){return t.map((function(t){return t.id===e.id?e:t}))})),a("博文已更新")})).catch((function(){i("博文更新失败")}))}},j=function(e,t){var r=e.Persistor,n=e.postListUpdater,o=e.api,i=e.active;return function(e,a){var c=e.error,u=e.success,s=(e.warn,a.getOption("contentId"));r.remove(s),n((function(e){return e.filter((function(e){return e.id!==s}))})),"draft"!==t?o.delete(s).then((function(){i(0),u("博文永久删除")})).catch((function(e){c("博文删除失败")})):u("博文已经删除")}},S=function(e){var t=e.Persistor,r=e.api,n=e.postListUpdater;return function(e,o){var i=e.error,a=e.success,c=(e.warn,o.getOption("newPostTitle")),u=o.getOption("contentId"),s=t.get(u).title,f=o.doc.getValue();c||s?f?r.create(c||s,f).then((function(e){t.remove(u),n((function(t){t[0]=e,t[0].postType="published"})),a("博文创建成功")})).catch((function(e){i("博文创建失败")})):i("内容不能为空!"):i("标题不能为空!")}},E=r("1EKS"),T=r.n(E),k=function(e){var t=e.Persistor,r=e.postListUpdater,n=e.active;return function(e,o,i){var a=e.error,c=(e.success,e.warn,i.argString&&i.argString.trim());if(c){o.setOption("newPostTitle",c);var u=T()(Date.now()).slice(16),s={title:c,id:u,postType:"draft",content:""};t.set(u,s),r((function(e){e.unshift(s)}),(function(){n(0)}))}else a("标题不能为空: new &lt;title&gt;")}},x=function(e,t){e.api,e.postListUpdater,e.active;var r=e.exit,n=(e.Persistor,function(e,r){return{draft:["publish"],published:["update"]}[t].includes(r)?e:function(e){(0,e.error)("非法命令")}});return[{name:"update",fn:n(P(e),"update")},{name:"deleteThisPostForever",fn:j(e,t)},{name:"publish",fn:n(S(e),"publish")},{name:"exit",fn:function(){r()}},{name:"new",fn:k(e)}]};function A(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function z(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?A(Object(r),!0).forEach((function(t){L(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):A(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function L(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function I(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var D=new RegExp("^pm-persistor-"),_=function(e,t){localStorage.setItem("pm-persistor-"+e,JSON.stringify(t)),localStorage.setItem("pm-time-stamp",Date.now())},C=function(e){if(e)return JSON.parse(localStorage.getItem("pm-persistor-"+e))},N=function(e){if(e)return JSON.parse(localStorage.getItem(e))},F=function(){return Object.keys(localStorage).filter((function(e){return D.test(e)}))},R=function(e){localStorage.removeItem("pm-persistor-"+e)},U=function(){return F().map(N)},J=function(e){var t=U(),r={};if(e.forEach((function(e){var t=e.id;r[t]=!0})),!e.length)return t;var n=t.filter((function(e){var t=e.id;return!r[t]}));return[].concat(I(n.map((function(e){return z({postType:"draft"},e)}))),I(e.map((function(e){return z({postType:"published"},e)}))))},M=function(){F().forEach((function(e){localStorage.removeItem(e)}))};function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Z(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function X(e,t){return(X=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function q(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var G=w((function(){return Promise.all([r.e(1),r.e(11)]).then(r.bind(null,"0BQj"))}),a.a.createElement("div",{style:{width:"calc(50% - 15px)",height:"100%",border:"dotted 1px #000",background:"#f0f0f0"}})),Q=function(e){function t(e){var r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,i=K(t).call(this,e),r=!i||"object"!==V(i)&&"function"!=typeof i?Z(o):i,q(Z(r),"active",(function(e){r.setState({activePostIdx:e})})),q(Z(r),"updatePostList",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return null};Array.isArray(e)?r.setState({postList:e}):r.setState((function(t){return{postList:Object(s.a)(t.postList,e)}}),t)})),q(Z(r),"buildEdtCls",(function(){var e=r.state.postList[r.state.activePostIdx]||r.state.postList[0],t=C(e.id)?"changed-file":"normal-file";return e.hasOwnProperty("createdAt")||(t="new-file"),"editor-wrapper "+t})),q(Z(r),"titleFormatter",(function(e){return"".concat(e.title)})),q(Z(r),"getEditingPostTitle",(function(){return(r.state.postList[r.state.activePostIdx]||r.state.postList[0]).title})),q(Z(r),"handleEditorContentChange",(function(e,t){var n=r.state.postList[r.state.activePostIdx]||r.state.postList[0];_(e,{title:r.getEditingPostTitle(),postType:n.type,id:e,content:t})})),q(Z(r),"renderTitleList",(function(){return a.a.createElement("div",{className:"side-list-col"},a.a.createElement(O,{titles:r.state.postList.map(r.titleFormatter),onTitleClick:r.active,activePostIdx:r.state.activePostIdx}))})),q(Z(r),"renderEditor",(function(){var e=r.state.postList[r.state.activePostIdx]||r.state.postList[0],t=C(e.id),o=t&&void 0!==t.content?t.content:e.content||"";return a.a.createElement("div",{className:r.buildEdtCls()},a.a.createElement(G,{value:o,contentId:e.id,backgroundColor:"#f2f2f2",onSave:r.handleEditorContentChange,exArr:x({api:r.props.api,postListUpdater:r.updatePostList,active:r.active,exit:r.props.exit,Persistor:n},e.postType)}))})),r.state={activePostIdx:0,postList:r.props.posts},r}var r,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&X(e,t)}(t,e),r=t,(o=[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return a.a.createElement("div",{className:"pane"},this.renderTitleList(),this.renderEditor())}}])&&B(r.prototype,o),i&&B(r,i),t}(a.a.PureComponent),$=(r("Zse/"),function(e,t,r){var n=Object(o.a)("#gui");n.classList.add("fullscreen"),u.a.render(a.a.createElement(Q,{posts:e,api:t,exit:r}),n)});function H(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function W(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?H(Object(r),!0).forEach((function(t){Y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):H(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var ee="https://api-grocery.zjh-im.now.sh/z",te=function(e){var t=e?{create:function(t,r){return Object(o.t)("".concat(ee,"/post/create"),"POST",W({title:t,content:r},e))},update:function(t,r){return Object(o.t)("".concat(ee,"/post/update"),"POST",W({id:t,content:r},e))},delete:function(t){return Object(o.t)("".concat(ee,"/post/delete"),"POST",W({id:t},e))}}:{create:function(){return Promise.resolve()},update:function(){return Promise.resolve()},delete:function(){return Promise.resolve()}};return W({list:function(){return Object(o.u)("".concat(ee,"/posts"))}},t)},re=Object(o.e)("pm","pm [access token]","posts manager for my blog."),ne=function(e){localStorage.setItem("p-c-key",JSON.stringify(e))};t.default={doc:re,shortopts:"e",handler:function(e,t,r,n){var i,a,c;return regeneratorRuntime.async((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.restParams,!e.e){t.next=4;break}return u.a.unmountComponentAtNode(Object(o.a)("#gui")),t.abrupt("return","Goodbye");case 4:return i=e.user&&e.password?{user:e.user,password:e.password}:JSON.parse(localStorage.getItem("p-c-key"))||null,ne(i),a=te(i),t.next=10,regeneratorRuntime.awrap(a.list());case 10:return c=t.sent,t.abrupt("return",new Promise((function(e,t){try{$(J(c),a,(function(){e(),Object(o.a)("#gui").classList.remove("fullscreen"),setTimeout((function(){Terminal&&Terminal.exec("pm -e")}))}))}catch(e){return"Fail to fetch posts"}})));case 12:case"end":return t.stop()}}))}}},"Zse/":function(e,t,r){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,