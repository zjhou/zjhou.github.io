(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"+eFp":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n("q1tI")),i=s(n("17x9")),a=s(n("UnXY")),c=s(n("zB99")),l=n("xfxO");function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}l.nameShape.isRequired,i.default.bool,i.default.bool,i.default.bool,(0,l.transitionTimeout)("Appear"),(0,l.transitionTimeout)("Enter"),(0,l.transitionTimeout)("Leave");var p=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),l=0;l<i;l++)a[l]=arguments[l];return n=r=u(this,e.call.apply(e,[this].concat(a))),r._wrapChild=function(e){return o.default.createElement(c.default,{name:r.props.transitionName,appear:r.props.transitionAppear,enter:r.props.transitionEnter,leave:r.props.transitionLeave,appearTimeout:r.props.transitionAppearTimeout,enterTimeout:r.props.transitionEnterTimeout,leaveTimeout:r.props.transitionLeaveTimeout},e)},u(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){return o.default.createElement(a.default,r({},this.props,{childFactory:this._wrapChild}))},t}(o.default.Component);p.displayName="CSSTransitionGroup",p.propTypes={},p.defaultProps={transitionAppear:!1,transitionEnter:!0,transitionLeave:!0},t.default=p,e.exports=t.default},"1zZr":function(e,t,n){var r=n("DdLq");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},"2L9y":function(e,t){e.exports="data:image/svg+xml,%3Csvg width='6' height='4' viewBox='0 0 6 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Crect x='-0.5' y='0.5' width='5' height='2.72727' rx='1.36364' transform='matrix(-1 0 0 1 5 0)' fill='%236BCBA8' stroke='%236BCBA8'/%3E %3Ccircle r='1' transform='matrix(-1 0 0 1 1.9 1.8999)' fill='white'/%3E %3C/svg%3E"},"5qoC":function(e,t){e.exports="data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath d='M1 5L5.5 0.5' stroke='black'/%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M5 1H2.5V0H6V3.5H5V1Z' fill='black'/%3E %3C/svg%3E"},"6DQo":function(e,t,n){"use strict";e.exports=function(){}},"8PcY":function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e){if(!e)return e;var t={};return r.Children.map(e,function(e){return e}).forEach(function(e){t[e.key]=e}),t},t.mergeChildMappings=function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var r={},o=[];for(var i in e)t.hasOwnProperty(i)?o.length&&(r[i]=o,o=[]):o.push(i);var a=void 0,c={};for(var l in t){if(r.hasOwnProperty(l))for(a=0;a<r[l].length;a++){var s=r[l][a];c[r[l][a]]=n(s)}c[l]=n(l)}for(a=0;a<o.length;a++)c[o[a]]=n(o[a]);return c};var r=n("q1tI")},"8zDj":function(e,t,n){var r=n("LBs5");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},"99iR":function(e,t){e.exports="data:image/svg+xml,%3Csvg width='5' height='6' viewBox='0 0 5 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M1 1.5C0.392778 1.9561 0 2.68228 0 3.50018C0 4.88089 1.11929 6.00018 2.5 6.00018C3.88071 6.00018 5 4.88089 5 3.50018C5 2.68228 4.60722 1.9561 4 1.5V3.50018C4 4.32861 3.32843 5.00018 2.5 5.00018C1.67157 5.00018 1 4.32861 1 3.50018V1.5Z' fill='black'/%3E %3Crect x='2' width='1' height='3' rx='0.5' fill='black'/%3E %3C/svg%3E"},AAEI:function(e,t,n){var r=n("OLCA");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},AdgS:function(e,t,n){var r=n("DawZ");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},B0Af:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".spinner {\n  position: relative; }\n\n.mobile .spinner,\n.spinner.center {\n  position: absolute;\n  left: calc(50% - 2.5px);\n  top: calc(50% - 2.5px); }\n\n.spinner > div {\n  width: 5px;\n  height: 5px;\n  position: absolute;\n  border-radius: 0px; }\n\n.square1, .square2, .square3, .square4 {\n  animation: sk-cubemove 1.2s infinite cubic-bezier(0, 0, 0, 0.97); }\n\n.square1 {\n  background-color: #000;\n  animation-delay: -0.5s; }\n\n.square2 {\n  background-color: #000;\n  animation-delay: -0.9s; }\n\n.square3 {\n  background-color: #000;\n  animation-delay: -1.3s; }\n\n.blink-dot {\n  animation-name: blink-dot;\n  animation-duration: .3s;\n  animation-iteration-count: infinite; }\n\n@keyframes blink-dot {\n  from {\n    color: #fff; }\n  to {\n    color: #ff8888; } }\n\n@keyframes sk-cubemove {\n  25% {\n    transform: translateX(7px); }\n  50% {\n    transform: translateX(7px) translateY(7px); }\n  75% {\n    transform: translateX(0px) translateY(7px); } }\n\n.sector.loader {\n  width: 1em;\n  height: 1em;\n  font-size: 10px;\n  position: relative; }\n  @media (max-width: 15px), (max-height: 15px) {\n    .sector.loader {\n      font-size: 5px; } }\n  .sector.loader.center {\n    position: absolute;\n    top: 38.2%;\n    left: 50%;\n    transform: translateX(-50%); }\n  .sector.loader:before, .sector.loader:after {\n    content: \"\";\n    top: 0;\n    display: block;\n    width: 1em;\n    height: 1em;\n    position: absolute;\n    border-width: 0.5em;\n    border-style: solid;\n    border-color: transparent;\n    box-sizing: border-box;\n    border-radius: 1em;\n    animation: spin 1s infinite; }\n  .sector.loader:after {\n    left: 0;\n    border-left-color: #000; }\n  .sector.loader:before {\n    right: 0;\n    border-right-color: #000;\n    animation-delay: -0.25s; }\n\n@keyframes spin {\n  from {\n    transform: rotate(360deg); } }\n\n.tick-loader {\n  display: inline-block; }\n  .tick-loader:before, .tick-loader:after {\n    content: '';\n    display: block;\n    width: 6px;\n    background: #000;\n    height: 1px; }\n  .tick-loader:before {\n    margin-bottom: 5px;\n    animation: test .5s infinite; }\n  .tick-loader:after {\n    animation: test .5s infinite reverse; }\n\n@keyframes test {\n  0% {\n    width: 6px;\n    background: #ccc; }\n  50% {\n    width: 12px;\n    background: #000; }\n  100% {\n    width: 6px;\n    background: #ccc; } }\n",""])},Bp9Y:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},DXLO:function(e,t,n){var r=n("gvyp");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},DawZ:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".top-bar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center; }\n  .top-bar a, .top-bar .logo {\n    opacity: 1;\n    color: #000;\n    transition: opacity .3s ease-in-out; }\n  .top-bar.close a, .top-bar.close .logo {\n    opacity: 0;\n    pointer-events: none; }\n  .top-bar .mobile.nav {\n    display: inline-flex;\n    list-style: none;\n    text-align: right;\n    line-height: 2;\n    transition: all, .3s;\n    font-family: monospace;\n    height: 50px;\n    position: relative;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0;\n    width: 100px;\n    margin: 0; }\n    .top-bar .mobile.nav a {\n      color: #ccc; }\n    .top-bar .mobile.nav li {\n      padding: 10px;\n      transition: opacity .3s; }\n      .top-bar .mobile.nav li.active {\n        text-decoration: line-through; }\n    .top-bar .mobile.nav:not([data-close]) li {\n      opacity: 1;\n      transition-delay: .2s; }\n    .top-bar .mobile.nav:not([data-close])::after, .top-bar .mobile.nav:not([data-close])::before {\n      height: 1px;\n      opacity: 0; }\n    .top-bar .mobile.nav[data-close] li {\n      opacity: 0; }\n      .top-bar .mobile.nav[data-close] li, .top-bar .mobile.nav[data-close] li * {\n        pointer-events: none; }\n    .top-bar .mobile.nav[data-close] {\n      height: 6px;\n      opacity: 1;\n      transition-delay: .2s; }\n    .top-bar .mobile.nav::before {\n      top: 0; }\n    .top-bar .mobile.nav::after {\n      bottom: 0; }\n    .top-bar .mobile.nav::before, .top-bar .mobile.nav::after {\n      transition: all, .2s;\n      background: #ccc;\n      position: absolute;\n      right: 0;\n      content: '';\n      width: 8px;\n      height: 2px;\n      display: inline-block; }\n",""])},DdLq:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,'@charset "UTF-8";\n.post-title {\n  margin-bottom: 50px; }\n\n.post-content {\n  line-height: 1.8; }\n\n.post-date {\n  margin-top: 50px; }\n\n.post-content img {\n  max-width: 80%;\n  max-height: 500px; }\n\n.markdown-body {\n  font-family: PingFang SC, "\\5FAE\\8F6F\\96C5\\9ED1", Arial;\n  margin: 0; }\n\n.photos-attachment {\n  display: inline-block;\n  color: #ccc;\n  margin-top: 10px; }\n  .photos-attachment .tooltip {\n    display: none; }\n  .photos-attachment .photos {\n    opacity: .5;\n    transition: opacity .2s;\n    cursor: pointer !important; }\n  .photos-attachment:hover .photos {\n    opacity: 1; }\n\n.App.mobile .post-content img {\n  max-width: 100%; }\n\n.App:not(.mobile) .post-content .side-content {\n  width: calc(38.2% - 20px);\n  float: left;\n  font-size: 0.75em;\n  color: #ccc;\n  margin: 3px 20px 0 0; }\n  .App:not(.mobile) .post-content .side-content p {\n    margin-bottom: 0; }\n  .App:not(.mobile) .post-content .side-content.with-img {\n    margin-top: 5px; }\n    .App:not(.mobile) .post-content .side-content.with-img img {\n      max-width: 100%;\n      margin-bottom: 5px; }\n',""])},Dk2R:function(e,t,n){var r=n("W+yR");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},ETDC:function(e,t,n){var r=n("uAuk");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},GtDr:function(e,t,n){var r=n("rjIN");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},HAps:function(e,t,n){var r=n("crby");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},LBs5:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".photos {\n  display: flex;\n  flex-direction: column; }\n  .photos .thumbnail-progress-wrapper {\n    margin-top: 10px;\n    display: flex;\n    align-items: flex-end; }\n  .photos .thumbnail {\n    height: 20px;\n    width: 20px;\n    overflow: hidden;\n    margin-right: 5px;\n    opacity: .2;\n    transition: opacity .3s; }\n    .photos .thumbnail img {\n      max-width: 20px; }\n    .photos .thumbnail:hover {\n      opacity: 1; }\n",""])},O5PD:function(e,t,n){var r=n("Oi+b");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},OLCA:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,"@charset \"UTF-8\";\n.logo-wrapper {\n  width: 90px; }\n\n.nav.pc {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%; }\n  .nav.pc ul {\n    width: 90px;\n    margin: 0;\n    padding: 0;\n    list-style: none; }\n    .nav.pc ul li.active a {\n      color: #000 !important; }\n    .nav.pc ul li.active:before {\n      content: '\\B7';\n      position: absolute;\n      margin-left: -10px;\n      font-weight: bolder; }\n  .nav.pc .footer {\n    width: 90px;\n    color: #ccc; }\n    .nav.pc .footer a, .nav.pc .footer div {\n      color: #ccc;\n      display: block; }\n",""])},OgkG:function(e,t,n){var r=n("qwjn");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},"Oi+b":function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".example-enter {\n  opacity: 0.8; }\n\n.example-enter.example-enter-active {\n  opacity: 1;\n  transition: opacity 200ms ease-in; }\n\n.example-leave {\n  display: none; }\n\n.example-leave.example-leave-active {\n  display: none; }\n",""])},Qrca:function(e,t){e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(0!==(t=t.filter(function(e){return null!=e})).length)return 1===t.length?t[0]:t.reduce(function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}})}},"RiW/":function(e,t){e.exports="data:image/svg+xml,%3Csvg width='6' height='4' viewBox='0 0 6 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Crect x='0.5' y='0.5' width='5' height='2.72727' rx='1.36364' fill='%23CCCCCC' stroke='%23CCCCCC'/%3E %3Ccircle cx='4.1' cy='1.8999' r='1' fill='white'/%3E %3C/svg%3E"},TqRt:function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},UnXY:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n("Qrca")),i=l(n("q1tI")),a=l(n("17x9")),c=(l(n("6DQo")),n("8PcY"));function l(e){return e&&e.__esModule?e:{default:e}}a.default.any,a.default.func,a.default.node;var s=function(e){function t(n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,o));return i.performAppear=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(i._handleDoneAppearing.bind(i,e,t)):i._handleDoneAppearing(e,t)},i._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete i.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performEnter=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(i._handleDoneEntering.bind(i,e,t)):i._handleDoneEntering(e,t)},i._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete i.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performLeave=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(i._handleDoneLeaving.bind(i,e,t)):i._handleDoneLeaving(e,t)},i._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete i.currentlyTransitioningKeys[e];var n=(0,c.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)?i.keysToEnter.push(e):i.setState(function(t){var n=r({},t.children);return delete n[e],{children:n}})},i.childRefs=Object.create(null),i.state={children:(0,c.getChildMapping)(n.children)},i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,c.getChildMapping)(e.children),n=this.state.children;for(var r in this.setState({children:(0,c.mergeChildMappings)(n,t)}),t){var o=n&&n.hasOwnProperty(r);!t[r]||o||this.currentlyTransitioningKeys[r]||this.keysToEnter.push(r)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach(function(t){return e.performEnter(t,e.childRefs[t])});var n=this.keysToLeave;this.keysToLeave=[],n.forEach(function(t){return e.performLeave(t,e.childRefs[t])})},t.prototype.render=function(){var e=this,t=[],n=function(n){var r=e.state.children[n];if(r){var a="string"!=typeof r.ref,c=e.props.childFactory(r),l=function(t){e.childRefs[n]=t};c===r&&a&&(l=(0,o.default)(r.ref,l)),t.push(i.default.cloneElement(c,{key:n,ref:l}))}};for(var a in this.state.children)n(a);var c=r({},this.props);return delete c.transitionLeave,delete c.transitionName,delete c.transitionAppear,delete c.transitionEnter,delete c.childFactory,delete c.transitionLeaveTimeout,delete c.transitionEnterTimeout,delete c.transitionAppearTimeout,delete c.component,i.default.createElement(this.props.component,c,t)},t}(i.default.Component);s.displayName="TransitionGroup",s.propTypes={},s.defaultProps={component:"span",childFactory:function(e){return e}},t.default=s,e.exports=t.default},VOcB:function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},"W+yR":function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".base-link.command:hover {\n  text-decoration: none; }\n",""])},b3vB:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),o=n.n(r),i=n("i8i4"),a=n.n(i),c=n("I+5T"),l=n("4KRT"),s=n("8RZD"),u=n("lTCR"),p=n.n(u),f=function(e){var t=e.reverse,n=e.top,r=e.down,i=e.ratio,a=void 0===i?.618:i,c={display:"flex",position:"relative",flexDirection:t?"column-reverse":"column",height:"100%",width:"100%"},l="".concat(100*a,"%"),s="".concat(100*(1-a),"%");return o.a.createElement("div",{style:c},o.a.createElement("div",{style:{height:s}},n),o.a.createElement("div",{style:{height:l}},r))},d={type:{photo:{value:"photo"},story:{value:"story"}}},m="command",h=["5cd6cfbec9f11d0011742e55","5cd6f51ec9f11d0011742e59","5cd78b2034d1dd00116c2012","5cdba101476d9c0011cc2987"],b={ENABLE_UPDATES_ENTRY:"enableUpdatesEntry",SHOW_SPACE_GUIDELINE:"showSpaceGuideLine"},y="clientPostList",v="serverPostList",g="/stories",O="/stories/:id",w="/photos",E="/photos/:id",x="/photo/:id",j="/unread",P="/";function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var S=function(e){return"false"!==e&&("true"===e||e)},C=function(){var e={};return Object.entries(b).forEach(function(t){var n=k(t,2)[1];e[n]=S(localStorage.getItem(n))}),e},T=function(e){var t={};return Object.entries(b).forEach(function(n){var r=k(n,2)[1];t[r]=S(e[r])}),t},_=function(e){if(e&&e.data&&e.data.posts.length){var t=e.data.posts.map(function(e){return e._id}),n=localStorage.getItem(y);localStorage.setItem(n?v:y,t)}},N=function(){var e=localStorage.getItem(y),t=localStorage.getItem(v);if(e&&t){var n=e.split(",");return t.split(",").filter(function(e){return!n.includes(e)})}};function I(){return(I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A=o.a.createContext({resetSpace:function(){},setSideSpaceContent:function(){}}),R=o.a.createContext(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(n,!0).forEach(function(t){D(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},C())),M=function(e){return function(t){return o.a.createElement(A.Consumer,null,function(n){var r=I({},n);return o.a.createElement(e,I({},r,t))})}};function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(n,!0).forEach(function(t){W(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function V(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function H(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function U(e,t){return(U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var F="cyan",Y=function(e){return function(t){function n(){var e,t,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var c=arguments.length,l=new Array(c),s=0;s<c;s++)l[s]=arguments[s];return r=this,i=(e=G(n)).call.apply(e,[this].concat(l)),t=!i||"object"!==z(i)&&"function"!=typeof i?H(r):i,W(H(t),"handleResize",function(e){a.a.render(t.renderGuideLines(t.$rootDom.getBoundingClientRect(),e),t.$container)}),W(H(t),"renderGuideLines",function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.props.showSpaceGuideLine,r=t.props,i=r.top,a=r.bottom,c=r.left,l=r.right,s=r.color,u=void 0===s?F:s;if(n){var p={position:"fixed",background:u,zIndex:100},f=B({},p,{width:"100%",height:1,left:0}),d=B({},p,{height:"100%",width:1,top:0}),m=e.top,h=e.bottom,b=e.left,y=e.right;return[i&&o.a.createElement("div",{style:B({},f,{top:m})}),a&&o.a.createElement("div",{style:B({},f,{top:h})}),c&&o.a.createElement("div",{style:B({},d,{left:b})}),l&&o.a.createElement("div",{style:B({},d,{left:y})})]}}),t}var r,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(n,o.a.PureComponent),r=n,(i=[{key:"componentDidMount",value:function(){var e=this;this.$rootDom=a.a.findDOMNode(this),this.$container=document.createElement("div"),document.body.appendChild(this.$container),this.handleResize(),window.addEventListener("resize",function(){e.handleResize()})}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.handleResize),a.a.unmountComponentAtNode(this.$container),this.$container.remove()}},{key:"componentWillReceiveProps",value:function(e,t){e.showSpaceGuideLine!==this.props.showSpaceGuideLine&&this.handleResize(e.showSpaceGuideLine)}},{key:"render",value:function(){return o.a.createElement(e,this.props)}}])&&V(r.prototype,i),c&&V(r,c),n}()},$=function(e){return M(Y(e))},Q=n("TSYQ"),K=n.n(Q),X=(n("HAps"),function(e){var t=e.cols;return o.a.createElement("div",{style:{display:"flex",height:"100%",width:"100%"}},t.map(function(e){return o.a.createElement("div",{style:{flex:"1"}},e)}))}),Z=function(e,t){return function(n){var r=o.a.createElement(e,n);return Object(s.p)()?r:o.a.createElement(ie,{top:null,down:r,ratio:t})}};function J(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var ee=function(e){var t=e.current,n=e.total,r=e.vertical,i=e.onClick,a=void 0===i?function(){}:i,c=e.absRight,l=e.fixedTop;if(n<2)return null;var u,p=function(e){return"".concat(Object(s.e)("0")(e,n)," / ").concat(n)};return o.a.createElement("div",{className:K()("tick-indicator",{"absolute-right":c,"fixed-top":l,vertical:r}),onClick:function(){a(t)}},(u=n,J(Array(u).keys())).map(function(e){var n=e===t-1;return o.a.createElement("div",{"data-title":p(e+1),className:K()("tick",{active:n})})}))},te=Z(ee,.763924),ne=function(){return o.a.createElement("div",{style:{display:"flex",height:"100%"}})},re=function(){return o.a.createElement("span",{style:{color:"#ccc"}},"无")},oe=$(ne),ie=function(e){var t=e.top,n=e.down,r=e.alignTopItems,i=e.ratio,a=e.padding,c=e.fullHeight,l=e.withGuideLine;return o.a.createElement(f,{ratio:i,top:o.a.createElement(f,{down:o.a.createElement("div",{style:{height:"100%",display:"flex",flexDirection:"column",justifyContent:"flex-end",padding:a,alignItems:r||"unset"}},t),top:l?o.a.createElement(oe,{top:!0,bottom:!0}):null,reverse:!0}),down:o.a.createElement("div",{style:{padding:a,height:c?"100%":"auto"}},n)})},ae=(n("vzVe"),function(e){var t=e.absCenter,n=void 0===t||t;return o.a.createElement("div",{className:K()("tick-loader",{center:n&&Object(s.p)()})})}),ce=function(){return Object(s.p)()?o.a.createElement(ae,null):o.a.createElement(ie,{top:null,down:o.a.createElement(ae,null)})};function le(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var se=function(e){var t=e.spinnerAtContent,n=le(e,["spinnerAtContent"]),r=e.spinner||(t?o.a.createElement(ce,null):o.a.createElement(ae,null));return o.a.createElement(l.Query,n,function(t){var n=t.data,o=t.loading,i=t.error;return i?":(":o?r:e.children({error:i,data:n})})};function ue(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query {\n    covers {\n      content_id\n      type\n      show\n    }\n  }\n"]);return ue=function(){return e},e}var pe=p()(ue()),fe=function(e){return o.a.createElement(se,{query:pe},function(t){var n=t.data.covers.filter(function(e){return e.show})[0];return n?e.children(n):":|"})};function de(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function he(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(n,!0).forEach(function(t){be(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ye(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  {\n    posts {\n      _id\n      title\n      date\n      content\n      photogroup {\n        title\n        _id\n      }\n    }\n  }\n"]);return ye=function(){return e},e}var ve=p()(ye()),ge=function(e){var t,n=e.content,r=e.date,o=e.photogroup;return he({},e,{photogroupId:o?o._id:null,html:(t=n,window.converter&&t?window.converter.makeHtml(t):t),date:Object(s.b)(new Date(r))})},Oe=function(e){return o.a.createElement(se,{query:ve,spinnerAtContent:e.spinnerAtContent},function(t){var n=t.data;return e.children(n.posts.map(function(e){return he({id:e._id,date:e.date},de(e,["_id","date"]))}).map(ge))})};function we(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Ee(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xe(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function je(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  {\n    photogroups {\n      _id\n      title\n      date\n      visible\n    }\n  }\n"]);return je=function(){return e},e}var Pe=p()(je()),ke=function(e){return o.a.createElement(se,{query:Pe},function(t){var n=t.data;return e.children(n.photogroups.filter(function(e){return e.visible}).map(function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?we(n,!0).forEach(function(t){Ee(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):we(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({id:e._id},xe(e,["_id"]))}))})};function Se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Te(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function _e(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query Photogroup($id: ID!) {\n    photogroup(id: $id) {\n      photos {\n        _id\n        title\n        date\n        content {\n          url \n        }\n      }\n    }\n  }\n"]);return _e=function(){return e},e}var Ne=p()(_e()),Ie=function(e){return o.a.createElement(se,{query:Ne,spinner:e.spinner,variables:{id:e.id}},function(t){var n=t.data;return e.children(n.photogroup.photos.map(function(e){var t=e.content,n=Te(e,["content"]);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Se(n,!0).forEach(function(t){Ce(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Se(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({url:"https://api.zjh.im"+t.url},n)}))})};n("OgkG");function Le(e){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function De(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e){return(Ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Re(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Me(e,t){return(Me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ze=function(){var e=window.innerHeight,t=(window.innerWidth-(e-100)*(1+.618))/2;return{display:"flex",width:"calc(100% - ".concat(2*t,"px)"),height:"calc(100% - ".concat(100,"px)"),margin:"".concat(50," ").concat(t)}},qe=function(e){function t(e){var n,r,o,i,a,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Ae(t).call(this,e),n=!o||"object"!==Le(o)&&"function"!=typeof o?Re(r):o,i=Re(n),c=function(){n.setState({style:ze()})},(a="updateStyle")in i?Object.defineProperty(i,a,{value:c,enumerable:!0,configurable:!0,writable:!0}):i[a]=c,n.state={style:ze()},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Me(e,t)}(t,o.a.PureComponent),n=t,(r=[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.updateStyle)}},{key:"render",value:function(){var e=this.props,t=e.left,n=e.right;return o.a.createElement("div",{className:"container lr",style:this.state.style},o.a.createElement("div",{className:"left",style:{flex:.618+1}},t),o.a.createElement("div",{className:"right",style:{flex:1,overflow:"auto"}},n))}}])&&De(n.prototype,r),i&&De(n,i),t}();function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(n,!0).forEach(function(t){Ge(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Ge(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var He={display:"flex",height:"100%",flexDirection:"column"},Ue={padding:30},We=function(e){var t=e.top,n=e.down;return o.a.createElement("div",{className:"container td",style:He},o.a.createElement("div",{className:"top",style:Ve({},Ue,{flex:"0 0 auto"})},t),o.a.createElement("div",{className:"down",style:Ve({},Ue,{height:"100%",flex:"1 1 auto",overflow:"auto"})},n))},Fe=n("eO8H");function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qe(e,t){return!t||"object"!==Ye(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ke(e){return(Ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xe(e,t){return(Xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ze=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Qe(this,Ke(t).call(this,e))).state={hasError:!1},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xe(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidCatch",value:function(e,t){this.setState({hasError:!0})}},{key:"render",value:function(){return this.state.hasError?":(":this.props.children}}])&&$e(n.prototype,r),i&&$e(n,i),t}();function Je(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query Photo($id: ID!) {\n    photo(id: $id) {\n      _id\n      title\n      date\n      content {\n        url\n      }\n    }\n  }\n"]);return Je=function(){return e},e}var et=p()(Je()),tt=function(e){return o.a.createElement(se,{query:et,variables:{id:e.id}},function(t){var n=t.data;return e.children({url:"https://api.zjh.im"+n.photo.content.url,title:n.photo.title})})},nt=n("+eFp"),rt=n.n(nt);n("hUxU");function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function at(e){return(at=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function lt(e,t){return(lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function st(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ut=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=at(t).call(this,e),n=!o||"object"!==ot(o)&&"function"!=typeof o?ct(r):o,st(ct(n),"handleMouseMove",function(e){var t=e.clientX,r=e.clientY,o=n.self.getBoundingClientRect(),i=o.top,a=o.left;n.setState({x:t-a,y:r-i})}),st(ct(n),"setTooltipState",function(e){n.setState({show:e})}),n.state={x:0,y:0,show:!0},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lt(e,t)}(t,o.a.PureComponent),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.self.getBoundingClientRect(),t=e.bottom,n=e.left;this.setState({x:n,y:t})}},{key:"render",value:function(){var e=this,t="translate3d(".concat(this.state.x+20,"px, ").concat(this.state.y+20,"px, 0)");return o.a.createElement("div",{onMouseMove:this.handleMouseMove,ref:function(t){return e.self=t},className:"tooltip-wrapper"},this.props.children({showTooltip:function(){e.setTooltipState(!0)},hideTooltip:function(){e.setTooltipState(!1)}}),o.a.createElement("div",{key:2,className:"tooltip",style:{transform:t}},this.state.show?this.props.tooltip:null))}}])&&it(n.prototype,r),i&&it(n,i),t}();n("O5PD");function pt(e){return(pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ft(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dt(e){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ht(e,t){return(ht=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var bt=function(e){function t(e){var n,r,i,a,c,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,i=dt(t).call(this,e),n=!i||"object"!==pt(i)&&"function"!=typeof i?mt(r):i,a=mt(n),l=function(){return n.props.disableAnimation?o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style}):o.a.createElement(rt.a,{component:o.a.Fragment,transitionName:"example",transitionEnterTimeout:300,transitionLeaveTimeout:300},o.a.createElement(ut,{tooltip:n.props.tooltip},function(e){var t=e.showTooltip,r=e.hideTooltip;return o.a.createElement("img",{src:n.props.src,key:n.props.src,onClick:n.props.onClick,style:n.props.style,onMouseEnter:t,onMouseLeave:r})}))},(c="renderImg")in a?Object.defineProperty(a,c,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[c]=l;var u=s.y.get(e.url);return n.state={loading:!u,error:null},n.loadImage=n.loadImage.bind(mt(n)),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ht(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.loadImage(this.props.src)}},{key:"componentWillReceiveProps",value:function(e){this.props.src!==e.src&&this.loadImage(e.src)}},{key:"loadImage",value:function(e){var t=this,n=this.props.onLoad||s.s;if(s.y.get(e))return n(e),void this.setState({loading:!1});this.setState({loading:!0}),Object(s.j)(e).then(function(){n(e),t.setState({loading:!1})}).catch(function(e){t.setState({loading:!1,error:e})})}},{key:"render",value:function(){return this.state.error?":(":this.state.loading&&!this.props.loaded?!this.props.hideSpinner&&o.a.createElement(ae,null):this.renderImg()}}])&&ft(n.prototype,r),i&&ft(n,i),t}();function yt(){return(yt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function vt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var gt=function(e){var t=e.photo,n=e.className,r=vt(e,["photo","className"]);return o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-content"},o.a.createElement(bt,yt({src:t.url},r,{tooltip:t.title}),o.a.createElement("div",{className:"image-title",style:{color:"#fff"}},t.title))))},Ot=function(e){var t=e.id,n=e.match;return o.a.createElement(tt,{id:t||n.params.id},function(e){return o.a.createElement(gt,{photo:e})})};n("1zZr"),n("8zDj");function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xt(e){return(xt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function jt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Pt(e,t){return(Pt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function kt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var St=M(function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,i=xt(t).call(this,e),n=!i||"object"!==wt(i)&&"function"!=typeof i?jt(r):i,kt(jt(n),"renderTick",function(){var e=n.state.currentIndex,t=n.props.photos.length;n.props.setSideSpaceContent(o.a.createElement(te,{current:e+1,total:t,onClick:Object(s.z)(n.next,300),vertical:!0,absRight:!0}))}),kt(jt(n),"handleCurrentImgLoad",function(){n.setState({isCurrentImgReady:!0},function(){n.props.thumbnailMode||n.renderTick()})}),kt(jt(n),"preLoadPhotos",function(e){e.map(s.j)}),kt(jt(n),"nextIndex",function(e){return e+1<=n.props.photos.length-1?e+1:0}),kt(jt(n),"next",function(){if(n.props.photos.length){n.setState({isCurrentImgReady:!1});var e=n.props.photos.length;n.state.currentIndex<e-1?n.setState(function(e){return{currentIndex:e.currentIndex+1}},n.renderTick):n.setState({currentIndex:0},n.renderTick)}}),n.state={currentIndex:0,isCurrentImgReady:!1},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pt(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props.photos.map(function(e){return e.url});this.preLoadPhotos(e)}},{key:"componentWillUnmount",value:function(){this.props.setSideSpaceContent(null)}},{key:"render",value:function(){var e=this.state.currentIndex,t=this.props.photos,n=t.length,r=n>1;return t&&t.length?o.a.createElement("div",{className:"photos",style:{maxWidth:this.props.thumbnailMode?30:"unset"},"data-prog":"".concat(e+1," of ").concat(t.length)},o.a.createElement(gt,{photo:t[e],onLoad:this.handleCurrentImgLoad,onClick:r?Object(s.z)(this.next,300):s.s,style:{cursor:r?"pointer":"default"},hideSpinner:this.props.hideSpinner}),this.props.showNextThumbnail&&r&&this.state.isCurrentImgReady&&o.a.createElement("div",{className:"thumbnail-progress-wrapper"},o.a.createElement(gt,{photo:t[this.nextIndex(e)],className:K()("thumbnail",{hide:!this.state.isCurrentImgReady}),disableAnimation:!0,onClick:r?Object(s.z)(this.next,300):s.s,style:{cursor:r?"pointer":"default"},hideSpinner:!0}),Object(s.p)()&&o.a.createElement(ee,{current:e+1,total:n}))):":( not found"}}])&&Et(n.prototype,r),i&&Et(n,i),t}());function Ct(){return(Ct=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Tt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var _t=function(e){var t=e.id,n=e.match,r=Tt(e,["id","match"]);return o.a.createElement(Ie,{id:t||n.params.id,spinner:r.spinner},function(e){return o.a.createElement(St,Ct({photos:e,showNextThumbnail:!0},r))})},Nt=Z(_t,.763924),It=function(e){var t=e.id,n=Tt(e,["id"]);return o.a.createElement(_t,Ct({id:t,showNextThumbnail:!1,thumbnailMode:!0},n))},Lt=function(e){location.hash="#".concat(e)},Dt=n("17x9"),At=n.n(Dt);function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function zt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qt(e,t){return!t||"object"!==Rt(t)&&"function"!=typeof t?Vt(e):t}function Bt(e){return(Bt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Gt(e,t){return(Gt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ht(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ut=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ht(Vt(n=qt(this,Bt(t).call(this,e))),"getStateByPropsAndCurrentPageIndex",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.currentPageIndex,r=e.pageSize,o=e.data,i=Math.ceil(o.length/r),a=(t-1)*r,c=t*r,l=o.slice(a,c)||[];return{hasNextPage:t<i,hasPrevPage:t>1,currentPageIndex:t,currentPageData:l,totalPages:i}}),Ht(Vt(n),"next",function(){(n.state.hasNextPage||n.props.infiniteLoopMode)&&n.setState(function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasNextPage?e.currentPageIndex+1:1)})}),Ht(Vt(n),"prev",function(){(n.state.hasPrevPage||n.props.infiniteLoopMode)&&n.setState(function(e){return n.getStateByPropsAndCurrentPageIndex(n.props,e.hasPrevPage?e.currentPageIndex-1:e.totalPages)})}),Ht(Vt(n),"isValidProps",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.props,t=e.data,r=e.pageSize,o=e.currentPageIndex,i=void 0===o?1:o,a=Math.ceil(t.length/r);return t.length&&r>0&&i>=1&&i<=a}),n.isValidProps(e)?(n.state=n.getStateByPropsAndCurrentPageIndex(),n):qt(n)}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gt(e,t)}(t,o.a.PureComponent),n=t,(r=[{key:"render",value:function(){return this.isValidProps(this.props)&&this.props.children(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mt(n,!0).forEach(function(t){Ht(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mt(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},this.state,{next:this.next,prev:this.prev}))}}])&&zt(n.prototype,r),i&&zt(n,i),t}();Ut.defaultProps={currentPageIndex:1},Ut.propTypes={data:At.a.array.isRequired,pageSize:At.a.number.isRequired,currentPageIndex:At.a.number,children:At.a.func.isRequired};var Wt,Ft=function(e){return o.a.createElement("div",{className:"photos-attachment",onClick:function(){var t;t=e.id,Lt("".concat(w,"/").concat(t))}},o.a.createElement("div",{className:"label"},"附"),o.a.createElement(It,{id:e.id,hideSpinner:Object(s.p)(),spinner:o.a.createElement(ae,{absCenter:!1})}))},Yt=function(e){var t=e.post,n=e.className,r=e.totalLen,i=e.index,a=e.next;return Object(s.p)()?o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-title"},t.title),o.a.createElement("div",{className:"post-content markdown-body",dangerouslySetInnerHTML:{__html:t.html}}),o.a.createElement("div",{className:"post-date"},t.date),t.photogroupId&&o.a.createElement(Ft,{id:t.photogroupId})):o.a.createElement(ie,{top:[t.title,o.a.createElement(ee,{total:r,current:i,onClick:a,fixedTop:!0})],padding:"0 10px",down:o.a.createElement("div",{className:"post ".concat(n)},o.a.createElement("div",{className:"post-content markdown-body",dangerouslySetInnerHTML:{__html:t.html}}),o.a.createElement("div",{className:"post-date"},t.date),t.photogroupId&&o.a.createElement(Ft,{id:t.photogroupId}))})},$t=function(e){var t=e.id,n=e.classNames,r=e.match,i=t||r.params.id;return o.a.createElement(Oe,{id:i,spinnerAtContent:!0},function(e){var t=e.findIndex(function(e){return e.id===i});return o.a.createElement(Ut,{data:e,pageSize:1,currentPageIndex:t+1,infiniteLoopMode:!0},function(e){var t=e.currentPageData,r=e.currentPageIndex,i=e.totalPages,a=e.next;return o.a.createElement(Yt,{next:a,totalLen:i,index:r,post:t[0],className:n})})})};function Qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Kt=(Qt(Wt={},d.type.photo.value,Z(function(e){var t=e.id;return o.a.createElement(Ot,{id:t,className:"cover-image"})},.763924)),Qt(Wt,d.type.story.value,function(e){var t=e.id;return o.a.createElement($t,{id:t,className:"cover-story"})}),Wt),Xt=function(){return o.a.createElement(fe,null,function(e){var t=e.type,n=e.content_id,r=Kt[t];return o.a.createElement(r,{id:n})})};n("DXLO");function Zt(){return(Zt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Jt(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var en=function(e){var t=e.data,n=void 0===t?[]:t,r=e.itemRenderer,i=void 0===r?s.s:r,a=e.emptyRenderer,c=e.beforeRenderer,l=void 0===c?s.s:c,u=e.afterRenderer,p=void 0===u?s.s:u,f=e.className,d=Jt(e,["data","itemRenderer","emptyRenderer","beforeRenderer","afterRenderer","className"]);return n.length?o.a.createElement(o.a.Fragment,null,l(n),o.a.createElement("ul",Zt({className:K()("base-list",f)},d),n.map(function(e,t){return o.a.createElement("li",{className:"base-list-item"},i({item:e,index:t}))})),p(n)):a?a():o.a.createElement(re,null)};n("GtDr");function tn(){return(tn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function nn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function rn(){return(rn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var on=function(e){var t=e.pagingOption,n=e.listOption;return o.a.createElement(Ut,t,function(t){return o.a.createElement(en,rn({},n,{data:t.currentPageData,afterRenderer:function(){return e.children(t)}}))})},an=Object(s.p)()?function(e){var t=e.className,n=nn(e,["className"]);return o.a.createElement(en,tn({className:K()("letter-paper-list",t)},n))}:en;function cn(e){return(cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ln(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function sn(e){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function un(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pn(e,t){return(pn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var dn=function(e){var t=e.item;return o.a.createElement(Fe.Link,{key:t.id,to:"".concat(g,"/").concat(t.id)},t.title)},mn=function(){return o.a.createElement(Oe,null,function(e){return o.a.createElement(Fe.HashRouter,null,o.a.createElement(an,{className:"post-list",data:e,itemRenderer:dn}))})},hn=function(e){function t(){var e,n,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,c=new Array(a),l=0;l<a;l++)c[l]=arguments[l];return r=this,i=(e=sn(t)).call.apply(e,[this].concat(c)),n=!i||"object"!==cn(i)&&"function"!=typeof i?un(r):i,fn(un(n),"renderTick",function(e){var t=e.currentPageIndex,n=e.totalPages,r=e.next;return o.a.createElement(ee,{current:t,total:n,onClick:r,fixedTop:!0})}),fn(un(n),"renderList",function(){return o.a.createElement(Oe,null,function(e){return o.a.createElement(Fe.HashRouter,null,o.a.createElement(on,{pagingOption:{data:e,pageSize:10,infiniteLoopMode:!0},listOption:{className:"post-list",itemRenderer:dn}},n.renderTick))})}),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pn(e,t)}(t,o.a.PureComponent),n=t,(r=[{key:"render",value:function(){return o.a.createElement(ie,{top:"文字",down:this.renderList(),padding:"0 10px"})}}])&&ln(n.prototype,r),i&&ln(n,i),t}(),bn=function(){return Object(s.p)()?o.a.createElement(mn,null):o.a.createElement(hn,null)},yn=function(){return o.a.createElement(ke,null,function(e){return o.a.createElement(Fe.HashRouter,null,o.a.createElement(an,{data:e,className:"photo-group-title-list",itemRenderer:function(e){var t=e.item;return o.a.createElement(Fe.Link,{key:t.id,to:"".concat(w,"/").concat(t.id)},t.title)}}))})},vn=function(){return Object(s.p)()?o.a.createElement(yn,null):o.a.createElement(ie,{top:"照片",down:o.a.createElement(yn,null),padding:"0 10px"})},gn=function(){var e=o.a.createElement(an,{className:"post-list",data:N(),itemRenderer:function(e){var t=e.item;return o.a.createElement(Fe.Link,{key:t,to:"".concat(g,"/").concat(t),onClick:function(){!function(e){var t=localStorage.getItem(y);t.includes(e)||localStorage.setItem(y,t+",".concat(e))}(t)}},t.slice(12))}});return Object(r.useContext)(R)[b.ENABLE_UPDATES_ENTRY]&&o.a.createElement(Fe.HashRouter,null,o.a.createElement(ie,{top:"最近更新",down:e,padding:"0 10px"}))};function On(){return(On=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function wn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var En=function(e){var t=e.to,n=e.onClick,r=wn(e,["to","onClick"]);return o.a.createElement(Fe.Route,{path:t,children:function(e){var i=e.match;return o.a.createElement("li",{className:i?"active":"",onClick:n||function(){}},o.a.createElement(Fe.Link,On({to:t},r)))}})};n("AdgS");function xn(){return(xn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function jn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Pn=function(e){var t=e.sizeStr;return o.a.createElement("div",{className:"logo",dangerouslySetInnerHTML:{__html:Object(s.i)({small:3,middle:4,big:5}[t])}})};n("Dk2R");function kn(){return(kn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Sn(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Cn=function(e){var t=e.href,n=e.text,r=e.type,i=e.command,a=e.className,c=Sn(e,["href","text","type","command","className"]);return r===m?o.a.createElement("span",{className:K()("command base-link",a),"data-cmd":i},n):o.a.createElement("a",kn({className:K()("base-link",a),href:t,target:"_blank"},c),n)};function Tn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var _n=function(){var e=Tn(Object(r.useState)(!0),2),t=e[0],n=e[1],i=Object(r.useContext)(A).setLeftSpaceContent;return Object(r.useEffect)(function(){i(t?"":o.a.createElement(Ln,null))},[t]),o.a.createElement("span",{onClick:function(){return n(!t)},style:{cursor:"pointer"},className:K()("setting-button",{closed:!t})},t?"设置":"关闭")};n("ETDC");function Nn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var In=function(e){var t=e.label,n=void 0===t?"配置项":t,i=e.defaultValue,a=e.onText,c=void 0===a?"开":a,l=e.offText,s=void 0===l?"关":l,u=e.onClick,p=void 0===u?function(){}:u,f=Nn(Object(r.useState)(i),2),d=f[0],m=f[1];return Object(r.useEffect)(function(){p(d)},[d]),o.a.createElement("div",{className:K()("radio-button",{on:d}),onClick:function(){m(!d)}},o.a.createElement("span",{className:"label"},n,"："),o.a.createElement("span",{className:"on-text"},c),o.a.createElement("span",{className:"slash"},"／"),o.a.createElement("span",{className:"off-text"},s))},Ln=(n("gy2t"),function(){var e=Object(r.useContext)(A),t=e.toggleSpaceGuideLine,n=e.showSpaceGuideLine,i=Object(r.useContext)(R),a=i[b.ENABLE_UPDATES_ENTRY],c=[o.a.createElement(In,{label:"最近更新",defaultValue:a,onClick:function(e){i.setLocalStorageVal(b.ENABLE_UPDATES_ENTRY,e)}}),o.a.createElement(In,{label:"布局网格",onClick:t,defaultValue:n})],l=[o.a.createElement(Cn,{className:"exit-blog",text:"退出博客",type:"command",command:"blog -e"})];return o.a.createElement(ie,{fullHeight:!0,down:o.a.createElement("div",{className:"setting-panel"},o.a.createElement(en,{data:c,itemRenderer:function(e){return e.item}}),o.a.createElement(en,{className:"bottom-setting-list",data:l,itemRenderer:function(e){return e.item}}))})}),Dn=(n("AAEI"),Object(s.p)()?function(){var e=jn(Object(r.useState)(!0),2),t=e[0],n=e[1],i=t?{"data-close":!0}:{},a=function(){n(!0)};return o.a.createElement(Fe.HashRouter,null,o.a.createElement("div",{className:K()("top-bar",{close:t})},o.a.createElement(Fe.Link,{to:P},o.a.createElement("div",{className:"logo",dangerouslySetInnerHTML:{__html:Object(s.i)()},onClick:a})),o.a.createElement("ul",xn({className:"mobile nav"},i,{onClick:function(e){e.stopPropagation(),t&&n(!1)}}),o.a.createElement(En,{onClick:a,to:w},"JPG"),o.a.createElement(En,{onClick:a,to:g},"TXT"))))}:function(){var e=[{text:"许可协议",href:"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh",className:"license"},{text:"FUFU",href:"https://fufu.im",className:"license"},{customRenderer:function(){return o.a.createElement(_n,null)}}],t=[{type:"link",text:"文字",route:g},{type:"link",text:"相（ xiàng ）片",route:w}];Object(r.useContext)(R)[b.ENABLE_UPDATES_ENTRY]&&t.push({type:"link",text:"diff",route:j});var n=o.a.createElement(en,{data:e,className:"footer",itemRenderer:function(e){var t=e.item;return t.customRenderer?t.customRenderer():o.a.createElement(Cn,t)}});return o.a.createElement(ie,{alignTopItems:"center",withGuideLine:!0,top:o.a.createElement("div",{className:"logo-wrapper"},o.a.createElement(Fe.HashRouter,null,o.a.createElement(Fe.Link,{to:P},o.a.createElement(Pn,null)))),down:o.a.createElement(Fe.HashRouter,null,o.a.createElement("div",{className:"nav pc"},o.a.createElement(en,{top:!0,data:t,itemRenderer:function(e){var t=e.item;return o.a.createElement(En,{to:t.route},t.text)}}),n))})}),An=function(){return o.a.createElement(Fe.HashRouter,null,o.a.createElement(Ze,null,o.a.createElement(Fe.Route,{exact:!0,path:P,component:Xt}),o.a.createElement(Fe.Route,{path:g,exact:!0,component:bn}),o.a.createElement(Fe.Route,{path:w,exact:!0,component:vn}),o.a.createElement(Fe.Route,{path:E,component:Nt}),o.a.createElement(Fe.Route,{path:j,component:gn}),o.a.createElement(Fe.Route,{path:x,component:Ot}),o.a.createElement(Fe.Route,{path:O,component:$t})))};function Rn(e){return(Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function zn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mn(n,!0).forEach(function(t){Hn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mn(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Bn(e){return(Bn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Gn(e,t){return(Gn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Un=$(qe),Wn=$(Dn),Fn=$(ne),Yn=function(e){function t(){var e,n,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,c=new Array(a),l=0;l<a;l++)c[l]=arguments[l];return r=this,i=(e=Bn(t)).call.apply(e,[this].concat(c)),n=!i||"object"!==Rn(i)&&"function"!=typeof i?Vn(r):i,Hn(Vn(n),"state",zn({sideSpaceContent:null,leftSpaceContent:null},C())),Hn(Vn(n),"toggleSpaceGuideLine",function(e){n.setState({showSpaceGuideLine:e},function(){localStorage.setItem(b.SHOW_SPACE_GUIDELINE,e)})}),Hn(Vn(n),"setSpaceContext",function(e,t){n.setState(Hn({},e,t))}),Hn(Vn(n),"setLocalStorageVal",function(e,t){n.setState(Hn({},e,t),function(){localStorage.setItem(e,t)})}),Hn(Vn(n),"getLocalStorageVal",function(e){return n.state[e]}),Hn(Vn(n),"renderPcView",function(){var e=$(function(){return n.state.sideSpaceContent});return o.a.createElement(A.Provider,{value:{setLeftSpaceContent:function(e){n.setSpaceContext("leftSpaceContent",e)},setSideSpaceContent:function(e){n.setSpaceContext("sideSpaceContent",e)},toggleSpaceGuideLine:n.toggleSpaceGuideLine,showSpaceGuideLine:n.state.showSpaceGuideLine}},o.a.createElement(R.Provider,{value:zn({},T(n.state),{getLocalStorageVal:n.getLocalStorageVal,setLocalStorageVal:n.setLocalStorageVal})},o.a.createElement(Un,{top:!0,bottom:!0,left:o.a.createElement(X,{cols:[n.state.leftSpaceContent,o.a.createElement(Wn,{right:!0,left:!0}),n.state.sideSpaceContent?o.a.createElement(e,{right:!0}):o.a.createElement(Fn,{right:!0})]}),right:o.a.createElement(An,null)})))}),Hn(Vn(n),"renderMobileView",function(){return o.a.createElement(We,{top:o.a.createElement(Dn,null),down:o.a.createElement(An,null)})}),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gn(e,t)}(t,r["Component"]),n=t,(i=[{key:"render",value:function(){var e=Object(s.p)();return o.a.createElement("div",{className:K()("App",{mobile:e})},e?this.renderMobileView():this.renderPcView())}}])&&qn(n.prototype,i),a&&qn(n,a),t}();function $n(e,t,n,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,o)}var Qn,Kn,Xn=new c.default({uri:"https://api.zjh.im/graphql"}),Zn=function(){return o.a.createElement(l.ApolloProvider,{client:Xn},o.a.createElement(Yn,null))},Jn=function(e,t){t?a.a.unmountComponentAtNode(e):a.a.render(o.a.createElement(Zn,null),e)},er=function(e){var t=h.map(function(e){return function(){return Xn.query({query:Ne,variables:{id:e}})}});return Object(s.u)(t,e)};t.default={shortopts:"e",handler:(Qn=regeneratorRuntime.mark(function e(){var t,n,r,o,i,a,c=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=c.length>0&&void 0!==c[0]?c[0]:{},c.length>1&&c[1],c.length>2&&c[2],c.length>3&&c[3],n=c.length>4?c[4]:void 0,r=t.e,o=Object(s.a)("#gui"),i=document.body,!r){e.next=15;break}return Jn(o,r),o.classList.remove("blog"),i.classList.remove("white-bg"),e.abrupt("return","Goodbye");case 15:if(!Object(s.o)(o)){e.next=33;break}return i.classList.add("white-bg"),e.next=19,Xn.query({query:pe});case 19:return n("加载博客配置 [DONE]",!0),e.next=22,Xn.query({query:ve});case 22:return a=e.sent,_(a),n("加载博文目录 [DONE]",!0),e.next=27,Xn.query({query:Pe});case 27:return n("加载照片目录 [DONE]",!0),e.next=30,er(function(e){n("加载第 ".concat(e+1," 组照片信息 [DONE]"),!0)});case 30:return o.classList.add("blog"),Jn(o),e.abrupt("return","Welcome");case 33:return e.abrupt("return","");case 34:case"end":return e.stop()}},e)}),Kn=function(){var e=this,t=arguments;return new Promise(function(n,r){var o=Qn.apply(e,t);function i(e){$n(o,n,r,i,a,"next",e)}function a(e){$n(o,n,r,i,a,"throw",e)}i(void 0)})},function(){return Kn.apply(this,arguments)})}},crby:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".progress-number {\n  font-family: monospace; }\n  .progress-number .current {\n    color: #000;\n    font-size: 16px; }\n  .progress-number .total {\n    color: #ccc;\n    font-size: 12px; }\n\n.tick-indicator {\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-start; }\n  .tick-indicator.absolute-right {\n    display: inline-flex;\n    position: absolute;\n    right: 0; }\n  .tick-indicator.fixed-top {\n    position: fixed;\n    top: 0;\n    align-items: flex-start; }\n    .tick-indicator.fixed-top:hover {\n      cursor: pointer; }\n      .tick-indicator.fixed-top:hover .tick {\n        background: #ff8888; }\n        .tick-indicator.fixed-top:hover .tick.active {\n          background: #000; }\n  .tick-indicator.vertical {\n    flex-direction: column; }\n    .tick-indicator.vertical:hover {\n      cursor: pointer; }\n      .tick-indicator.vertical:hover .tick {\n        background: #ff8888; }\n        .tick-indicator.vertical:hover .tick.active::before {\n          opacity: 1;\n          top: -7px; }\n    .tick-indicator.vertical .tick {\n      position: relative;\n      width: 6px;\n      height: 1px;\n      background: #ccc;\n      transition: all .3s; }\n      .tick-indicator.vertical .tick:not(:last-child) {\n        margin-bottom: 5px; }\n      .tick-indicator.vertical .tick.active::before {\n        opacity: 0;\n        content: attr(data-title);\n        position: absolute;\n        width: 100px;\n        text-align: right;\n        right: 17px;\n        top: -6px;\n        font-size: 10px;\n        transition: .2s; }\n      .tick-indicator.vertical .tick.active {\n        width: 12px;\n        height: 1px;\n        background: #000; }\n  .tick-indicator .tick {\n    width: 1px;\n    height: 6px;\n    background: #ccc;\n    margin-right: 5px; }\n    .tick-indicator .tick.active {\n      width: 1px;\n      height: 12px;\n      background: #000; }\n",""])},dIij:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".tooltip {\n  position: absolute;\n  transition: all .1s;\n  top: 0;\n  left: 0;\n  will-change: opacity, transform;\n  mix-blend-mode: difference;\n  font-size: 12px;\n  opacity: 0;\n  color: #ccc; }\n\n.tooltip-wrapper {\n  position: relative; }\n  .tooltip-wrapper:hover .tooltip {\n    opacity: 1; }\n",""])},eE57:function(e,t,n){var r=n("sEG9");(e.exports=n("I1BE")(!1)).push([e.i,".setting-panel {\n  padding: 0 10px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between; }\n  .setting-panel .bottom-setting-list {\n    color: #ccc; }\n  .setting-panel .exit-blog:hover:after {\n    content: '';\n    display: inline-block;\n    position: absolute;\n    width: 6px;\n    height: 6px;\n    background: url("+r(n("99iR"))+") no-repeat;\n    background-size: auto; }\n\n.setting-button:hover:after {\n  content: '';\n  display: inline-block;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n  background: url("+r(n("oiG0"))+") no-repeat;\n  background-size: auto; }\n\n.setting-button.closed:hover:after {\n  content: '';\n  display: inline-block;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n  background: url("+r(n("mfY5"))+") no-repeat;\n  background-size: auto; }\n",""])},gvyp:function(e,t,n){var r=n("sEG9");(e.exports=n("I1BE")(!1)).push([e.i,'@charset "UTF-8";\n.base-list {\n  margin: 0;\n  padding: 0; }\n  .base-list li.base-list-item {\n    list-style: none;\n    margin-bottom: 5px; }\n    .base-list li.base-list-item a[target="_blank"]:hover:after {\n      content: \'\';\n      display: inline-block;\n      position: absolute;\n      width: 6px;\n      height: 6px;\n      background: url('+r(n("5qoC"))+") no-repeat;\n      background-size: auto; }\n\n.App:not(.mobile) .base-list li.base-list-item:hover, .App:not(.mobile) .base-list li.base-list-item:hover a {\n  color: #000; }\n\n.App:not(.mobile) .base-list li.base-list-item:hover:before {\n  content: '\\B7';\n  position: absolute;\n  margin-left: -10px;\n  font-weight: bolder; }\n",""])},gy2t:function(e,t,n){var r=n("eE57");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},hUxU:function(e,t,n){var r=n("dIij");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},mfY5:function(e,t){e.exports="data:image/svg+xml,%3Csvg width='7' height='7' viewBox='0 0 7 7' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath d='M1 1L2.4156 2.4156L6 6' stroke='black'/%3E %3Cpath d='M1 6L6 1' stroke='black'/%3E %3C/svg%3E"},oiG0:function(e,t){e.exports="data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.214657 4.49877C0.266664 4.58295 0.322377 4.66387 0.381493 4.74148C0.535993 4.9443 0.83084 4.94082 1.01217 4.76159V4.76159C1.15883 4.61663 1.38297 4.58449 1.56445 4.6824L2.05797 4.94866C2.23946 5.04658 2.32551 5.25984 2.26281 5.45629V5.45629C2.18816 5.69019 2.32497 5.94151 2.56857 5.97215C2.82816 6.0048 3.09278 6.00798 3.35635 5.98017C3.60535 5.9539 3.74725 5.69812 3.67112 5.45959V5.45959C3.60784 5.26132 3.69469 5.04609 3.87786 4.94727L4.35127 4.69186C4.54297 4.58843 4.77975 4.62238 4.93467 4.77551V4.77551C5.1243 4.96294 5.4323 4.96895 5.59544 4.75806C5.72241 4.59393 5.83047 4.41904 5.91875 4.23647C6.02068 4.02565 5.88223 3.78886 5.65366 3.73801V3.73801C5.47032 3.69722 5.3399 3.53459 5.3399 3.34677V2.81547C5.3399 2.61267 5.48073 2.43707 5.67869 2.39302V2.39302C5.91763 2.33986 6.06763 2.09737 5.96999 1.8729C5.9148 1.74605 5.84967 1.62122 5.77433 1.49927C5.71689 1.40631 5.65494 1.31731 5.58887 1.23237C5.44692 1.04988 5.17977 1.0524 5.01534 1.21492V1.21492C4.88272 1.34601 4.68003 1.37507 4.51592 1.28653L3.97224 0.993212C3.80289 0.901844 3.72259 0.702843 3.7811 0.519524V0.519524C3.85012 0.303282 3.72555 0.0706682 3.50107 0.0370154C3.21498 -0.00587298 2.92196 -0.0128539 2.63025 0.0181328C2.41725 0.0407575 2.29357 0.258609 2.3587 0.46266V0.46266C2.41216 0.630156 2.33879 0.811981 2.18405 0.895463L1.63709 1.19055C1.45996 1.28612 1.24117 1.25475 1.09803 1.11326V1.11326C0.927217 0.944429 0.651706 0.93409 0.494865 1.11597C0.320974 1.31763 0.177344 1.53803 0.0658093 1.77078C-0.0380996 1.98761 0.104905 2.23004 0.33961 2.28226V2.28226C0.528797 2.32436 0.663382 2.49218 0.663382 2.68599L0.663382 3.20561C0.663382 3.40924 0.521978 3.58556 0.323206 3.62979V3.62979C0.0816768 3.68352 -0.0688889 3.92973 0.0324036 4.15548C0.0846433 4.27191 0.14533 4.38657 0.214657 4.49877ZM2.16055 3.44894C2.42646 3.87933 3.0154 4.02679 3.47598 3.77831C3.93656 3.52982 4.09436 2.97948 3.82845 2.54909C3.56253 2.1187 2.97359 1.97123 2.51302 2.21972C2.05244 2.46821 1.89463 3.01855 2.16055 3.44894Z' fill='black'/%3E %3C/svg%3E"},"q5+k":function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=void 0;var o,i=r(n("Bp9Y")),a="clearTimeout",c=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-s)),r=setTimeout(e,n);return s=t,r},l=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};i.default&&["","webkit","moz","o","ms"].some(function(e){var t=l(e,"request");if(t in window)return a=l(e,"cancel"),c=function(e){return window[t](e)}});var s=(new Date).getTime();(o=function(e){return c(e)}).cancel=function(e){window[a]&&"function"==typeof window[a]&&window[a](e)};var u=o;t.default=u,e.exports=t.default},qwjn:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,'@charset "UTF-8";\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: PingFang SC, "\\5FAE\\8F6F\\96C5\\9ED1", Arial;\n  font-size: 12px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\n#gui.blog {\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column; }\n\n.App {\n  height: 100%; }\n  .App.mobile {\n    font-size: 14px; }\n\n.hide {\n  display: none !important; }\n\n.mobile * {\n  -webkit-tap-highlight-color: transparent;\n  -webkit-overflow-scrolling: touch; }\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace; }\n\n.left-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 100px;\n  height: calc(100% - 100px); }\n  .left-wrapper a.license {\n    width: 90px;\n    font-size: 10px;\n    color: #ccc; }\n',""])},rjIN:function(e,t,n){(e.exports=n("I1BE")(!1)).push([e.i,".letter-paper-list {\n  display: flex;\n  height: calc(100% - 34px);\n  flex-direction: column;\n  overflow: auto;\n  border-bottom: solid 2px #ff8888;\n  border-top: solid 2px #ff8888;\n  padding-bottom: 29px; }\n  .letter-paper-list li.base-list-item {\n    line-height: 2;\n    margin-bottom: 0; }\n    .letter-paper-list li.base-list-item:after {\n      content: '';\n      display: block;\n      border-bottom: dashed 1px #ff8888; }\n  .letter-paper-list + .address {\n    height: 21px;\n    display: flex;\n    color: #ff8888;\n    justify-content: space-between; }\n",""])},sEG9:function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},uAuk:function(e,t,n){var r=n("sEG9");(e.exports=n("I1BE")(!1)).push([e.i,".radio-button {\n  cursor: pointer; }\n  .radio-button:hover:after {\n    content: '';\n    display: inline-block;\n    position: absolute;\n    width: 6px;\n    height: 6px;\n    background: url("+r(n("RiW/"))+") no-repeat;\n    background-size: auto; }\n  .radio-button .on-text {\n    color: #dcdcda;\n    transition: all .3s; }\n  .radio-button .off-text {\n    color: #000;\n    transition: all .3s; }\n  .radio-button.on:hover:after {\n    content: '';\n    display: inline-block;\n    position: absolute;\n    width: 6px;\n    height: 6px;\n    background: url("+r(n("2L9y"))+") no-repeat;\n    background-size: auto; }\n  .radio-button.on .on-text {\n    color: #000; }\n  .radio-button.on .off-text {\n    color: #dcdcda; }\n",""])},vzVe:function(e,t,n){var r=n("B0Af");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n("aET+")(r,o);r.locals&&(e.exports=r.locals)},xU8c:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,i,a,c,l,s,u,p,f,d,m,h=r(n("Bp9Y")),b="transform";if(t.transform=b,t.animationEnd=a,t.transitionEnd=i,t.transitionDelay=u,t.transitionTiming=s,t.transitionDuration=l,t.transitionProperty=c,t.animationDelay=m,t.animationTiming=d,t.animationDuration=f,t.animationName=p,h.default){var y=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),i="",a=0;a<o.length;a++){var c=o[a];if(c+"TransitionProperty"in n){i="-"+c.toLowerCase(),e=r[c]("TransitionEnd"),t=r[c]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:i}}();o=y.prefix,t.transitionEnd=i=y.transitionEnd,t.animationEnd=a=y.animationEnd,t.transform=b=o+"-"+b,t.transitionProperty=c=o+"-transition-property",t.transitionDuration=l=o+"-transition-duration",t.transitionDelay=u=o+"-transition-delay",t.transitionTiming=s=o+"-transition-timing-function",t.animationName=p=o+"-animation-name",t.animationDuration=f=o+"-animation-duration",t.animationTiming=d=o+"-animation-delay",t.animationDelay=m=o+"-animation-timing-function"}var v={transform:b,end:i,property:c,timing:s,delay:u,duration:l};t.default=v},xfxO:function(e,t,n){"use strict";t.__esModule=!0,t.nameShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};o(n("q1tI"));var r=o(n("17x9"));function o(e){return e&&e.__esModule?e:{default:e}}t.nameShape=r.default.oneOfType([r.default.string,r.default.shape({enter:r.default.string,leave:r.default.string,active:r.default.string}),r.default.shape({enter:r.default.string,enterActive:r.default.string,leave:r.default.string,leaveActive:r.default.string,appear:r.default.string,appearActive:r.default.string})])},yD6e:function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},ycFn:function(e,t,n){"use strict";var r=n("TqRt");t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n("yD6e"));e.exports=t.default},zB99:function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=f(n("ycFn")),i=f(n("VOcB")),a=f(n("q5+k")),c=n("xU8c"),l=f(n("q1tI")),s=f(n("17x9")),u=n("i8i4"),p=n("xfxO");function f(e){return e&&e.__esModule?e:{default:e}}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=[];c.transitionEnd&&m.push(c.transitionEnd),c.animationEnd&&m.push(c.animationEnd);s.default.node,p.nameShape.isRequired,s.default.bool,s.default.bool,s.default.bool,s.default.number,s.default.number,s.default.number;var h=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.componentWillAppear=function(e){r.props.appear?r.transition("appear",e,r.props.appearTimeout):e()},r.componentWillEnter=function(e){r.props.enter?r.transition("enter",e,r.props.enterTimeout):e()},r.componentWillLeave=function(e){r.props.leave?r.transition("leave",e,r.props.leaveTimeout):e()},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach(function(e){clearTimeout(e)}),this.classNameAndNodeQueue.length=0},t.prototype.transition=function(e,t,n){var r=(0,u.findDOMNode)(this);if(r){var a=this.props.name[e]||this.props.name+"-"+e,l=this.props.name[e+"Active"]||a+"-active",s=null,p=void 0;(0,o.default)(r,a),this.queueClassAndNode(l,r);var f=function(e){e&&e.target!==r||(clearTimeout(s),p&&p(),(0,i.default)(r,a),(0,i.default)(r,l),p&&p(),t&&t())};n?(s=setTimeout(f,n),this.transitionTimeouts.push(s)):c.transitionEnd&&(p=function(e,t){return m.length?m.forEach(function(n){return e.addEventListener(n,t,!1)}):setTimeout(t,0),function(){m.length&&m.forEach(function(n){return e.removeEventListener(n,t,!1)})}}(r,f))}else t&&t()},t.prototype.queueClassAndNode=function(e,t){var n=this;this.classNameAndNodeQueue.push({className:e,node:t}),this.rafHandle||(this.rafHandle=(0,a.default)(function(){return n.flushClassNameAndNodeQueue()}))},t.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach(function(e){e.node.scrollTop,(0,o.default)(e.node,e.className)}),this.classNameAndNodeQueue.length=0,this.rafHandle=null},t.prototype.render=function(){var e=r({},this.props);return delete e.name,delete e.appear,delete e.enter,delete e.leave,delete e.appearTimeout,delete e.enterTimeout,delete e.leaveTimeout,delete e.children,l.default.cloneElement(l.default.Children.only(this.props.children),e)},t}(l.default.Component);h.displayName="CSSTransitionGroupChild",h.propTypes={},t.default=h,e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcG9zdC9zdHlsZS5zY3NzP2JkODYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2ljb25zL3N3aXRjaC1vbi5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2ljb25zL2xpbmstb3V0LnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9waG90b3Mvc3R5bGUuc2Nzcz83OTEzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9pY29ucy9wb3dlci1vZmYuc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL25hdi9zdHlsZS5zY3NzPzliYzQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvbmF2L21vYmlsZS9zdHlsZS5zY3NzP2QxNTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3NwaW5uZXIvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGlzdC9iYXNlX2xpc3Qvc3R5bGUuc2Nzcz8yOTkwIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL25hdi9tb2JpbGUvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9wb3N0L3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2N1c3RvbV9saW5rL2Jhc2UtbGluay5zY3NzPzc5OGIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3JhZGlvX2J0bi9zdHlsZS5zY3NzP2Q1ZDkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvbGV0dGVyX3BhcGVyX2xpc3Qvc3R5bGUuc2Nzcz9mYjM5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9wcm9ncmVzc19pbmRpY2F0b3Ivc3R5bGUuc2Nzcz83ZWQ2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3Bob3Rvcy9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL0ltZy9zdHlsZS5zY3NzPzViMjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvbmF2L3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL3N0eWxlcy9pbmRleC5zY3NzPzhjZjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvSW1nL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYWluLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9pY29ucy9zd2l0Y2gtb2ZmLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3VzdG9tX2xpbmsvYmFzZS1saW5rLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xheW91dC9nb2xkZW5fcmF0aW9fdG9wX2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbmZpZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvdXRpbHMvbG9jYWxfc3RvcmFnZV9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb250ZXh0L3NwYWNlX2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2F0dGFjaF9ndWlkZV9saW5lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9sYXlvdXQvY29sdW1ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9wcm9ncmVzc19pbmRpY2F0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xheW91dC9jb25zdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xheW91dC9ibG9nX3RvcF9kb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9zcGlubmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9zcGlubmVyL3Bvc2l0aW9uZWRfc3Bpbm5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvcXVlcnlfd2l0aF9zcGlubmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb250YWluZXJzL2NvdmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb250YWluZXJzL3Bvc3RfbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29udGFpbmVycy9waG90b19ncm91cHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbnRhaW5lcnMvcGhvdG9fZ3JvdXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xheW91dC9sci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L3RkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9lcnJvcl9ib3VuZGFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29udGFpbmVycy9waG90by9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3Vyc29yX3Rvb2xsdGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL0ltZy9pbWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG8vcGhvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcGhvdG9zL3Bob3Rvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9waG90b2dyb3VwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvcGFnaW5nX3N0YXRlX21hbmFnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcG9zdC9wb3N0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3Bvc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvaG9tZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvbGlzdC9iYXNlX2xpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvcGFnaW5nX2xpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvbGV0dGVyX3BhcGVyX2xpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvcG9zdF9saXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3Bob3RvX2dyb3Vwcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9kaWZmX2NzX3Bvc3RzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL25hdi9saXN0X2l0ZW1fbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9uYXYvbW9iaWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9sb2dvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9jdXN0b21fbGluay9iYXNlX2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvc2V0dGluZ3MvYnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9yYWRpb19idG4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvc2V0dGluZ3Mvc2V0dGluZ19wYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9uYXYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvbmF2L3BjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3Byb2dyZXNzX2luZGljYXRvci9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9jdXJzb3JfdG9vbGx0aXAvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy9zZXR0aW5ncy9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3V0aWxfY29tcC9saXN0L2Jhc2VfbGlzdC9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9jb21wb25lbnRzL3NldHRpbmdzL3N0eWxlLnNjc3M/NmNlMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvY3Vyc29yX3Rvb2xsdGlwL3N0eWxlLnNjc3M/YjZhMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvaWNvbnMvY3Jvc3Muc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AemhvdWppYWhhby9ibG9nL2xpYi9pY29ucy9jb25maWcuc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL2xpc3QvbGV0dGVyX3BhcGVyX2xpc3Qvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHpob3VqaWFoYW8vYmxvZy9saWIvY29tcG9uZW50cy91dGlsX2NvbXAvcmFkaW9fYnRuL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B6aG91amlhaGFvL2Jsb2cvbGliL2NvbXBvbmVudHMvdXRpbF9jb21wL3NwaW5uZXIvc3R5bGUuc2Nzcz83NjMxIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9oYXNDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMyIiwiX1RyYW5zaXRpb25Hcm91cDIiLCJfQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQyIiwiX1Byb3BUeXBlcyIsIm9iaiIsImRlZmF1bHQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIm5hbWVTaGFwZSIsImlzUmVxdWlyZWQiLCJib29sIiwidHJhbnNpdGlvblRpbWVvdXQiLCJDU1NUcmFuc2l0aW9uR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RlbXAiLCJfdGhpcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImNvbmNhdCIsIl93cmFwQ2hpbGQiLCJjaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJuYW1lIiwicHJvcHMiLCJ0cmFuc2l0aW9uTmFtZSIsImFwcGVhciIsInRyYW5zaXRpb25BcHBlYXIiLCJlbnRlciIsInRyYW5zaXRpb25FbnRlciIsImxlYXZlIiwidHJhbnNpdGlvbkxlYXZlIiwiYXBwZWFyVGltZW91dCIsInRyYW5zaXRpb25BcHBlYXJUaW1lb3V0IiwiZW50ZXJUaW1lb3V0IiwidHJhbnNpdGlvbkVudGVyVGltZW91dCIsImxlYXZlVGltZW91dCIsInRyYW5zaXRpb25MZWF2ZVRpbWVvdXQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJyZW5kZXIiLCJjaGlsZEZhY3RvcnkiLCJDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImRlZmF1bHRQcm9wcyIsIm1vZHVsZSIsImNvbnRlbnQiLCJvcHRpb25zIiwidHJhbnNmb3JtIiwidW5kZWZpbmVkIiwibG9jYWxzIiwiZ2V0Q2hpbGRNYXBwaW5nIiwiY2hpbGRyZW4iLCJyZXN1bHQiLCJfcmVhY3QiLCJDaGlsZHJlbiIsIm1hcCIsImZvckVhY2giLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJwcmV2IiwibmV4dCIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwicHVzaCIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIl9kZWZhdWx0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJsZW4iLCJmaWx0ZXIiLCJmbiIsInJlZHVjZSIsImN1cnJlbnQiLCJfY2hhaW5GdW5jdGlvbjIiLCJfQ2hpbGRNYXBwaW5nIiwiYW55IiwiZnVuYyIsIm5vZGUiLCJUcmFuc2l0aW9uR3JvdXAiLCJjb250ZXh0IiwicGVyZm9ybUFwcGVhciIsImNvbXBvbmVudCIsImN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzIiwiY29tcG9uZW50V2lsbEFwcGVhciIsIl9oYW5kbGVEb25lQXBwZWFyaW5nIiwiYmluZCIsImNvbXBvbmVudERpZEFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJwZXJmb3JtTGVhdmUiLCJwZXJmb3JtRW50ZXIiLCJjb21wb25lbnRXaWxsRW50ZXIiLCJfaGFuZGxlRG9uZUVudGVyaW5nIiwiY29tcG9uZW50RGlkRW50ZXIiLCJjb21wb25lbnRXaWxsTGVhdmUiLCJfaGFuZGxlRG9uZUxlYXZpbmciLCJjb21wb25lbnREaWRMZWF2ZSIsImtleXNUb0VudGVyIiwic2V0U3RhdGUiLCJzdGF0ZSIsIm5ld0NoaWxkcmVuIiwiY2hpbGRSZWZzIiwiY29tcG9uZW50V2lsbE1vdW50Iiwia2V5c1RvTGVhdmUiLCJjb21wb25lbnREaWRNb3VudCIsImluaXRpYWxDaGlsZE1hcHBpbmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwibmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJoYXNQcmV2IiwiaGFzTmV4dCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl90aGlzMiIsIl90aGlzMyIsImNoaWxkcmVuVG9SZW5kZXIiLCJfbG9vcCIsImlzQ2FsbGJhY2tSZWYiLCJyZWYiLCJmYWN0b3J5Q2hpbGQiLCJyIiwiY2xvbmVFbGVtZW50IiwicmVwbGFjZUNsYXNzTmFtZSIsIm9yaWdDbGFzcyIsImNsYXNzVG9SZW1vdmUiLCJyZXBsYWNlIiwiUmVnRXhwIiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsInNldEF0dHJpYnV0ZSIsImJhc2VWYWwiLCJyZXZlcnNlIiwidG9wIiwiZG93biIsInJhdGlvIiwiY29udGFpbmVyU3R5bGUiLCJkaXNwbGF5IiwicG9zaXRpb24iLCJmbGV4RGlyZWN0aW9uIiwiaGVpZ2h0Iiwid2lkdGgiLCJkb3duSHQiLCJ0b3BIdCIsInN0eWxlIiwidHlwZSIsInBob3RvIiwic3RvcnkiLCJuYXZJdGVtVHlwZSIsInBob3RvR3JvdXBzSWRBcnIiLCJsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5IiwiRU5BQkxFX1VQREFURVNfRU5UUlkiLCJTSE9XX1NQQUNFX0dVSURFTElORSIsImxvY2FsU3RvcmFnZURhdGFLZXkiLCJSb3V0ZXMiLCJzdHJUb0Jvb2wiLCJzdHIiLCJsb2FkTG9jYWxTdG9yYWdlVmFsdWVzIiwicmV0IiwiZW50cmllcyIsInZhbCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJsb2FkTG9jYWxTdG9yYWdlVmFsdWVzRnJvbSIsInNhdmVQb3N0c0RhdGFUb0xvY2FsU3RvcmFnZSIsInF1ZXJ5UmVzIiwiZGF0YSIsInBvc3RzIiwiaWRBcnIiLCJfaWQiLCJoYXNMb2NhbERhdGEiLCJzZXRJdGVtIiwiZGlmZkNTUG9zdHMiLCJjbGllbnRQb3N0c1N0ciIsInNlcnZlclBvc3RzU3RyIiwiY2xpZW50UG9zdHMiLCJzcGxpdCIsImlkIiwiaW5jbHVkZXMiLCJTcGFjZUNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJyZXNldFNwYWNlIiwic2V0U2lkZVNwYWNlQ29udGVudCIsIkxvY2FsU3RvcmFnZUNvbnRleHQiLCJXaXRoU3BhY2VDb250ZXh0SE9DIiwiQ29uc3VtZXIiLCJzcGFjZUNvbnRleHQiLCJERUZBVUxUX0dVSURFTElORV9DT0xPUiIsIldpdGhHdWlkZUxpbmVCYXNlSE9DIiwic2hvdyIsIlJlYWN0RG9tIiwicmVuZGVyR3VpZGVMaW5lcyIsIiRyb290RG9tIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiJGNvbnRhaW5lciIsInJlY3RPYmoiLCJzaG93U3BhY2VHdWlkZUxpbmUiLCJzaG93VG9wTGluZSIsInNob3dCb3RMaW5lIiwiYm90dG9tIiwic2hvd0xlZnRMaW5lIiwibGVmdCIsInNob3dSaWdodExpbmUiLCJyaWdodCIsImNvbG9yIiwiY29tbW9uR3VpZGVMaW5lU3R5bGUiLCJiYWNrZ3JvdW5kIiwiekluZGV4IiwiaG9yaXpHdWlkZUxpbmVTdHlsZSIsInZlcnRpR3VpZGVMaW5lU3R5bGUiLCJQdXJlQ29tcG9uZW50IiwiZmluZERPTU5vZGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJoYW5kbGVSZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJuZXh0Q29udGV4dCIsIldpdGhHdWlkZUxpbmUiLCJDb21wIiwiY29scyIsImNvbCIsImZsZXgiLCJDb21wT2Zmc2V0IiwicmV0Q29tcCIsImlzTW9iaWxlIiwiVGlja0luZGljYXRvciIsInRvdGFsIiwidmVydGljYWwiLCJvbkNsaWNrIiwiYWJzUmlnaHQiLCJmaXhlZFRvcCIsIm51bSIsInByb2dyZXNzIiwiY29tcGxldGlvbldpdGgiLCJjbiIsImtleXMiLCJpc0FjdGl2ZSIsImRhdGEtdGl0bGUiLCJhY3RpdmUiLCJQaG90b1RpY2tJbmRpY2F0b3IiLCJHT0xERU5fUkFUSU8iLCJFbXB0eURpdiIsIkVtcHR5UGxhY2VIb2xkZXIiLCJFbXB0eURpdldpdGhHdWlkZUxpbmUiLCJhbGlnblRvcEl0ZW1zIiwicGFkZGluZyIsImZ1bGxIZWlnaHQiLCJ3aXRoR3VpZGVMaW5lIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiVGlja0xvYWRlciIsImFic0NlbnRlciIsImNsYXNzbmFtZSIsImNlbnRlciIsInBvc2l0aW9uZWRTcGlubmVyIiwic3Bpbm5lckF0Q29udGVudCIsInJlc3QiLCJzcGlubmVyIiwibG9hZGluZyIsImVycm9yIiwicXVlcnlDb3ZlcnMiLCJncWwiLCJDb3ZlciIsInF1ZXJ5IiwiY292ZXIiLCJjb3ZlcnMiLCJxdWVyeVBvc3RMaXN0IiwicG9zdEZvcm1hdHRlciIsInBvc3QiLCJtZCIsImRhdGUiLCJwaG90b2dyb3VwIiwicGhvdG9ncm91cElkIiwiaHRtbCIsImNvbnZlcnRlciIsIm1ha2VIdG1sIiwiQ05EYXRlU3RyaW5nIiwiRGF0ZSIsIlBvc3RMaXN0IiwicXVlcnlQaG90b0dyb3VwcyIsIlBob3RvR3JvdXBzIiwicGhvdG9ncm91cHMiLCJ2aXNpYmxlIiwicXVlcnlQaG90b0dyb3VwIiwidmFyaWFibGVzIiwicGhvdG9zIiwidXJsIiwiY29tcHV0ZUNvbnRhaW5lclN0eWxlIiwid2giLCJpbm5lckhlaWdodCIsImxyUGFkZGluZyIsImlubmVyV2lkdGgiLCJtYXJnaW4iLCJQY0xheW91dCIsInVwZGF0ZVN0eWxlIiwib3ZlcmZsb3ciLCJjb250ZW50SXRlbVN0eWxlIiwiRXJyb3JCb3VuZGFyeSIsImhhc0Vycm9yIiwiaW5mbyIsInF1ZXJ5SW1hZ2UiLCJQaG90byIsInRpdGxlIiwiQ3Vyc29yVG9vbHRpcCIsImNsaWVudFgiLCJjbGllbnRZIiwieCIsInkiLCJ0cmFuc2Zvcm1WYWwiLCJvbk1vdXNlTW92ZSIsImhhbmRsZU1vdXNlTW92ZSIsInNob3dUb29sdGlwIiwic2V0VG9vbHRpcFN0YXRlIiwiaGlkZVRvb2x0aXAiLCJ0b29sdGlwIiwiSW1nIiwiZGlzYWJsZUFuaW1hdGlvbiIsInNyYyIsIkZyYWdtZW50Iiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwiaGFzSW1nTG9hZGVkIiwic3RvcmUiLCJnZXQiLCJsb2FkSW1hZ2UiLCJvbkxvYWQiLCJub29wIiwiZ2V0SW1hZ2UiLCJ0aGVuIiwibG9hZGVkIiwiaGlkZVNwaW5uZXIiLCJyZW5kZXJJbWciLCJtYXRjaCIsInBhcmFtcyIsImluZGV4IiwiY3VycmVudEluZGV4IiwidGhyb3R0bGUiLCJpc0N1cnJlbnRJbWdSZWFkeSIsInRodW1ibmFpbE1vZGUiLCJyZW5kZXJUaWNrIiwidXJscyIsInRvdGFsTGVuIiwicHJldlN0YXRlIiwicGhvdG9VcmxBcnIiLCJwcmVMb2FkUGhvdG9zIiwiaGFzTXVsdGlQaG90b3MiLCJtYXhXaWR0aCIsImRhdGEtcHJvZyIsImhhbmRsZUN1cnJlbnRJbWdMb2FkIiwiY3Vyc29yIiwic2hvd05leHRUaHVtYm5haWwiLCJuZXh0SW5kZXgiLCJoaWRlIiwiUGhvdG9Hcm91cCIsIlBob3RvR3JvdXBXaXRoT2Zmc2V0IiwiUGhvdG9Hcm91cFRodW1ibmFpbCIsImdvdG8iLCJyb3V0ZSIsImxvY2F0aW9uIiwiaGFzaCIsIlBhZ2luZ1N0YXRlTWFuYWdlciIsImN1cnJlbnRQYWdlSW5kZXgiLCJwYWdlU2l6ZSIsInRvdGFsUGFnZXMiLCJNYXRoIiwiY2VpbCIsInN0YXJ0IiwiZW5kIiwiY3VycmVudFBhZ2VEYXRhIiwic2xpY2UiLCJoYXNOZXh0UGFnZSIsImhhc1ByZXZQYWdlIiwiaW5maW5pdGVMb29wTW9kZSIsImdldFN0YXRlQnlQcm9wc0FuZEN1cnJlbnRQYWdlSW5kZXgiLCJpc1ZhbGlkUHJvcHMiLCJQcm9wVHlwZXMiLCJhcnJheSIsIm51bWJlciIsIlBob3Rvc0F0dGFjaG1lbnQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNsYXNzTmFtZXMiLCJwb3N0SWQiLCJpZHgiLCJmaW5kSW5kZXgiLCJ0eXBlQ29tcE1hcCIsImNvbnRlbnRfaWQiLCJpdGVtUmVuZGVyZXIiLCJlbXB0eVJlbmRlcmVyIiwiYmVmb3JlUmVuZGVyZXIiLCJhZnRlclJlbmRlcmVyIiwiaXRlbSIsInBhZ2luZ09wdGlvbiIsImxpc3RPcHRpb24iLCJwYWdpbmdQcm9wcyIsIkxpc3QiLCJCYXNlTGlzdCIsImxpc3RJdGVtUmVuZGVyIiwidG8iLCJNb2JpbGVQb3N0TGlzdCIsIlBjUG9zdExpc3QiLCJyZW5kZXJMaXN0IiwicGhvdG9Hcm91cHMiLCJncm91cCIsImxpc3QiLCJsb2NhbFBvc3RzIiwibWFya1Bvc3RBc1JlYWQiLCJ1c2VDb250ZXh0IiwiTGlzdEl0ZW1MaW5rIiwicGF0aCIsInNpemVTdHIiLCJnZW5TdmdMb2dvIiwic21hbGwiLCJtaWRkbGUiLCJiaWciLCJCYXNlTGluayIsImhyZWYiLCJ0ZXh0IiwiY29tbWFuZCIsImRhdGEtY21kIiwiVG9nZ2xlQnRuIiwidXNlU3RhdGUiLCJjbG9zZWQiLCJ0b2dnbGVTZXR0aW5nIiwic2V0TGVmdFNwYWNlQ29udGVudCIsInVzZUVmZmVjdCIsIlJhZGlvQnRuIiwibGFiZWwiLCJkZWZhdWx0VmFsdWUiLCJvblRleHQiLCJvZmZUZXh0Iiwib24iLCJ0b2dnbGUiLCJ0b2dnbGVTcGFjZUd1aWRlTGluZSIsImxvY2FsU3RvcmFnZUNvbnRleHQiLCJzaG93VXBkYXRlc0VudHJ5IiwidG9wU2V0dGluZ0l0ZW1zIiwic2V0TG9jYWxTdG9yYWdlVmFsIiwiYm90dG9tU2V0dGluZ0l0ZW1zIiwiTmF2IiwidG9nZ2xlTmF2IiwiYXR0ciIsImNsb3NlIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsImZvb3RlckRhdGEiLCJjdXN0b21SZW5kZXJlciIsIm5hdkRhdGEiLCJmb290ZXIiLCJDb250ZW50IiwiZXhhY3QiLCJIb21lIiwiRGlmZkNTUG9zdExpc3QiLCJQb3N0IiwiUGNMYXlvdXRXaXRoR3VpZGVMaW5lIiwiTmF2V2l0aEd1aWRlTGluZSIsIkFwcCIsInNpZGVTcGFjZUNvbnRlbnQiLCJsZWZ0U3BhY2VDb250ZW50IiwiU2lkZVNwYWNlV2l0aEd1aWRlTGluZSIsIlByb3ZpZGVyIiwic2V0U3BhY2VDb250ZXh0IiwiZ2V0TG9jYWxTdG9yYWdlVmFsIiwiaXNNYmwiLCJtb2JpbGUiLCJyZW5kZXJNb2JpbGVWaWV3IiwicmVuZGVyUGNWaWV3IiwiY2xpZW50IiwiQXBvbGxvQ2xpZW50IiwidXJpIiwiQXBwV3JhcHBlciIsIkJsb2ciLCIkd3JhcHBlciIsInVubW91bnQiLCJSZWFjdERPTSIsImxvYWRJbWFnZXMiLCJjYkZuIiwicHJvbWlzZVF1ZXVlIiwicHJvbWlzZU9uZUJ5T25lIiwic2hvcnRvcHRzIiwiaGFuZGxlciIsInBhcmFtc09iaiIsInByaW50IiwiZXhpdCIsIiRibG9nV3JhcHBlciIsIiQiLCIkYm9keSIsImlzRWxlbWVudEVtcHR5IiwiYWRkIiwicG9zdERhdGEiLCJlc2NhcGUiLCJjb21wYXRSYWYiLCJfaW5ET00iLCJjYW5jZWwiLCJyYWYiLCJjdXJyIiwiZ2V0VGltZSIsIm1zIiwibWF4IiwicmVxIiwic2V0VGltZW91dCIsImdldEtleSIsInZlbmRvciIsImsiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsInNvbWUiLCJyYWZLZXkiLCJjYiIsInRlc3QiLCJhbmltYXRpb25FbmQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvblRpbWluZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nIiwidHJhbnNpdGlvblByb3BlcnR5IiwicHJlZml4IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0IiwidmVuZG9yTWFwIiwiTyIsInRvTG93ZXJDYXNlIiwiTW96IiwiV2Via2l0IiwidmVuZG9ycyIsImdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJ0aW1pbmciLCJkZWxheSIsImR1cmF0aW9uIiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJFcnJvciIsIm9uZU9mVHlwZSIsInN0cmluZyIsInNoYXBlIiwiZW50ZXJBY3RpdmUiLCJsZWF2ZUFjdGl2ZSIsImFwcGVhckFjdGl2ZSIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIl9oYXNDbGFzcyIsIl9hZGRDbGFzczIiLCJfcmVtb3ZlQ2xhc3MyIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZTIiLCJfcHJvcGVydGllcyIsIl9yZWFjdERvbSIsImV2ZW50cyIsIkNTU1RyYW5zaXRpb25Hcm91cENoaWxkIiwiZG9uZSIsInRyYW5zaXRpb24iLCJjbGFzc05hbWVBbmROb2RlUXVldWUiLCJ0cmFuc2l0aW9uVGltZW91dHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVubW91bnRlZCIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJhbmltYXRpb25UeXBlIiwiZmluaXNoQ2FsbGJhY2siLCJhY3RpdmVDbGFzc05hbWUiLCJ0aW1lciIsInJlbW92ZUxpc3RlbmVycyIsInF1ZXVlQ2xhc3NBbmROb2RlIiwiZmluaXNoIiwibGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsInJhZkhhbmRsZSIsImZsdXNoQ2xhc3NOYW1lQW5kTm9kZVF1ZXVlIiwic2Nyb2xsVG9wIiwib25seSJdLCJtYXBwaW5ncyI6IjZGQUVBQSxFQUFRQyxZQUFhLEVBRXJCLElBQUlDLEVBQVdDLE9BQU9DLFFBQVUsU0FBVUMsR0FBVSxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUFFLElB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V0FDeEQvakIsS0FBS2tqQixXQUNSbGpCLEtBQUsraUIsc0JBQXNCemYsUUFBUSxTQUFVdkUsR0FJM0NBLEVBQUkrRixLQUFLa2YsV0FFVCxFQUFJMUIsRUFBV3RqQixTQUFTRCxFQUFJK0YsS0FBTS9GLEVBQUlpSixhQUcxQ2hJLEtBQUsraUIsc0JBQXNCNWtCLE9BQVMsRUFDcEM2QixLQUFLOGpCLFVBQVksTUFHbkJsQixFQUF3QnRrQixVQUFVOEQsT0FBUyxXQUN6QyxJQUFJekIsRUFBUTlDLEVBQVMsR0FBSW1DLEtBQUtXLE9BUzlCLGNBUk9BLEVBQU1ELFlBQ05DLEVBQU1FLGNBQ05GLEVBQU1JLGFBQ05KLEVBQU1NLGFBQ05OLEVBQU1RLHFCQUNOUixFQUFNVSxvQkFDTlYsRUFBTVksb0JBQ05aLEVBQU1zQyxTQUNOeEUsRUFBUU8sUUFBUXlJLGFBQWFoSixFQUFRTyxRQUFRb0UsU0FBUzZnQixLQUFLamtCLEtBQUtXLE1BQU1zQyxVQUFXdEMsSUFHbkZpaUIsRUEvSXFCLENBZ0o1Qm5rQixFQUFRTyxRQUFRc0QsV0FFbEJzZ0IsRUFBd0JyZ0IsWUFBYywwQkFHdENxZ0IsRUFBd0JwZ0IsVUFBZ0UsR0FFeEY3RSxFQUFRcUIsUUFBVTRqQixFQUNsQmxnQixFQUFPL0UsUUFBVUEsRUFBaUIiLCJmaWxlIjoiMi43OGY5NDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uR3JvdXAnKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxudmFyIF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IHJlcXVpcmUoJy4vQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQnKTtcblxudmFyIF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICB0cmFuc2l0aW9uTmFtZTogX1Byb3BUeXBlcy5uYW1lU2hhcGUuaXNSZXF1aXJlZCxcblxuICB0cmFuc2l0aW9uQXBwZWFyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRyYW5zaXRpb25FbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0cmFuc2l0aW9uTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgdHJhbnNpdGlvbkFwcGVhclRpbWVvdXQ6ICgwLCBfUHJvcFR5cGVzLnRyYW5zaXRpb25UaW1lb3V0KSgnQXBwZWFyJyksXG4gIHRyYW5zaXRpb25FbnRlclRpbWVvdXQ6ICgwLCBfUHJvcFR5cGVzLnRyYW5zaXRpb25UaW1lb3V0KSgnRW50ZXInKSxcbiAgdHJhbnNpdGlvbkxlYXZlVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdMZWF2ZScpXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICB0cmFuc2l0aW9uQXBwZWFyOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkVudGVyOiB0cnVlLFxuICB0cmFuc2l0aW9uTGVhdmU6IHRydWVcbn07XG5cbnZhciBDU1NUcmFuc2l0aW9uR3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ1NTVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDU1NUcmFuc2l0aW9uR3JvdXAoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDU1NUcmFuc2l0aW9uR3JvdXApO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLl93cmFwQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQyLmRlZmF1bHQsIHtcbiAgICAgICAgbmFtZTogX3RoaXMucHJvcHMudHJhbnNpdGlvbk5hbWUsXG4gICAgICAgIGFwcGVhcjogX3RoaXMucHJvcHMudHJhbnNpdGlvbkFwcGVhcixcbiAgICAgICAgZW50ZXI6IF90aGlzLnByb3BzLnRyYW5zaXRpb25FbnRlcixcbiAgICAgICAgbGVhdmU6IF90aGlzLnByb3BzLnRyYW5zaXRpb25MZWF2ZSxcbiAgICAgICAgYXBwZWFyVGltZW91dDogX3RoaXMucHJvcHMudHJhbnNpdGlvbkFwcGVhclRpbWVvdXQsXG4gICAgICAgIGVudGVyVGltZW91dDogX3RoaXMucHJvcHMudHJhbnNpdGlvbkVudGVyVGltZW91dCxcbiAgICAgICAgbGVhdmVUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uTGVhdmVUaW1lb3V0XG4gICAgICB9LCBjaGlsZCk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICAvLyBXZSBuZWVkIHRvIHByb3ZpZGUgdGhpcyBjaGlsZEZhY3Rvcnkgc28gdGhhdFxuICAvLyBSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkIGNhbiByZWNlaXZlIHVwZGF0ZXMgdG8gbmFtZSwgZW50ZXIsIGFuZFxuICAvLyBsZWF2ZSB3aGlsZSBpdCBpcyBsZWF2aW5nLlxuXG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uR3JvdXAyLmRlZmF1bHQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IGNoaWxkRmFjdG9yeTogdGhpcy5fd3JhcENoaWxkIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ1NTVHJhbnNpdGlvbkdyb3VwLmRpc3BsYXlOYW1lID0gJ0NTU1RyYW5zaXRpb25Hcm91cCc7XG5cblxuQ1NTVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuQ1NTVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ1NTVHJhbnNpdGlvbkdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nNicgaGVpZ2h0PSc0JyB2aWV3Qm94PScwIDAgNiA0JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFICUzQ3JlY3QgeD0nLTAuNScgeT0nMC41JyB3aWR0aD0nNScgaGVpZ2h0PScyLjcyNzI3JyByeD0nMS4zNjM2NCcgdHJhbnNmb3JtPSdtYXRyaXgoLTEgMCAwIDEgNSAwKScgZmlsbD0nJTIzNkJDQkE4JyBzdHJva2U9JyUyMzZCQ0JBOCcvJTNFICUzQ2NpcmNsZSByPScxJyB0cmFuc2Zvcm09J21hdHJpeCgtMSAwIDAgMSAxLjkgMS44OTk5KScgZmlsbD0nd2hpdGUnLyUzRSAlM0Mvc3ZnJTNFXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nNicgaGVpZ2h0PSc2JyB2aWV3Qm94PScwIDAgNiA2JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFICUzQ3BhdGggZD0nTTEgNUw1LjUgMC41JyBzdHJva2U9J2JsYWNrJy8lM0UgJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTUgMUgyLjVWMEg2VjMuNUg1VjFaJyBmaWxsPSdibGFjaycvJTNFICUzQy9zdmclM0VcIiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cbmZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbikge1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gbmV4dFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2W2tleV07XG4gIH1cblxuICAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IHt9O1xuXG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShwcmV2S2V5KSkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaSA9IHZvaWQgMDtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9XG5cbiAgLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzUnIGhlaWdodD0nNicgdmlld0JveD0nMCAwIDUgNicgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSAlM0NwYXRoIGZpbGwtcnVsZT0nZXZlbm9kZCcgY2xpcC1ydWxlPSdldmVub2RkJyBkPSdNMSAxLjVDMC4zOTI3NzggMS45NTYxIDAgMi42ODIyOCAwIDMuNTAwMThDMCA0Ljg4MDg5IDEuMTE5MjkgNi4wMDAxOCAyLjUgNi4wMDAxOEMzLjg4MDcxIDYuMDAwMTggNSA0Ljg4MDg5IDUgMy41MDAxOEM1IDIuNjgyMjggNC42MDcyMiAxLjk1NjEgNCAxLjVWMy41MDAxOEM0IDQuMzI4NjEgMy4zMjg0MyA1LjAwMDE4IDIuNSA1LjAwMDE4QzEuNjcxNTcgNS4wMDAxOCAxIDQuMzI4NjEgMSAzLjUwMDE4VjEuNVonIGZpbGw9J2JsYWNrJy8lM0UgJTNDcmVjdCB4PScyJyB3aWR0aD0nMScgaGVpZ2h0PSczJyByeD0nMC41JyBmaWxsPSdibGFjaycvJTNFICUzQy9zdmclM0VcIiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNwaW5uZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuLm1vYmlsZSAuc3Bpbm5lcixcXG4uc3Bpbm5lci5jZW50ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogY2FsYyg1MCUgLSAyLjVweCk7XFxuICB0b3A6IGNhbGMoNTAlIC0gMi41cHgpOyB9XFxuXFxuLnNwaW5uZXIgPiBkaXYge1xcbiAgd2lkdGg6IDVweDtcXG4gIGhlaWdodDogNXB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyLXJhZGl1czogMHB4OyB9XFxuXFxuLnNxdWFyZTEsIC5zcXVhcmUyLCAuc3F1YXJlMywgLnNxdWFyZTQge1xcbiAgYW5pbWF0aW9uOiBzay1jdWJlbW92ZSAxLjJzIGluZmluaXRlIGN1YmljLWJlemllcigwLCAwLCAwLCAwLjk3KTsgfVxcblxcbi5zcXVhcmUxIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxuICBhbmltYXRpb24tZGVsYXk6IC0wLjVzOyB9XFxuXFxuLnNxdWFyZTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGFuaW1hdGlvbi1kZWxheTogLTAuOXM7IH1cXG5cXG4uc3F1YXJlMyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgYW5pbWF0aW9uLWRlbGF5OiAtMS4zczsgfVxcblxcbi5ibGluay1kb3Qge1xcbiAgYW5pbWF0aW9uLW5hbWU6IGJsaW5rLWRvdDtcXG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogLjNzO1xcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7IH1cXG5cXG5Aa2V5ZnJhbWVzIGJsaW5rLWRvdCB7XFxuICBmcm9tIHtcXG4gICAgY29sb3I6ICNmZmY7IH1cXG4gIHRvIHtcXG4gICAgY29sb3I6ICNmZjg4ODg7IH0gfVxcblxcbkBrZXlmcmFtZXMgc2stY3ViZW1vdmUge1xcbiAgMjUlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDdweCk7IH1cXG4gIDUwJSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCg3cHgpIHRyYW5zbGF0ZVkoN3B4KTsgfVxcbiAgNzUlIHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDBweCkgdHJhbnNsYXRlWSg3cHgpOyB9IH1cXG5cXG4uc2VjdG9yLmxvYWRlciB7XFxuICB3aWR0aDogMWVtO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBmb250LXNpemU6IDEwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxNXB4KSwgKG1heC1oZWlnaHQ6IDE1cHgpIHtcXG4gICAgLnNlY3Rvci5sb2FkZXIge1xcbiAgICAgIGZvbnQtc2l6ZTogNXB4OyB9IH1cXG4gIC5zZWN0b3IubG9hZGVyLmNlbnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAzOC4yJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7IH1cXG4gIC5zZWN0b3IubG9hZGVyOmJlZm9yZSwgLnNlY3Rvci5sb2FkZXI6YWZ0ZXIge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgdG9wOiAwO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDFlbTtcXG4gICAgaGVpZ2h0OiAxZW07XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm9yZGVyLXdpZHRoOiAwLjVlbTtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgYm9yZGVyLXJhZGl1czogMWVtO1xcbiAgICBhbmltYXRpb246IHNwaW4gMXMgaW5maW5pdGU7IH1cXG4gIC5zZWN0b3IubG9hZGVyOmFmdGVyIHtcXG4gICAgbGVmdDogMDtcXG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICMwMDA7IH1cXG4gIC5zZWN0b3IubG9hZGVyOmJlZm9yZSB7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3JkZXItcmlnaHQtY29sb3I6ICMwMDA7XFxuICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMjVzOyB9XFxuXFxuQGtleWZyYW1lcyBzcGluIHtcXG4gIGZyb20ge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG4udGljay1sb2FkZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAudGljay1sb2FkZXI6YmVmb3JlLCAudGljay1sb2FkZXI6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiA2cHg7XFxuICAgIGJhY2tncm91bmQ6ICMwMDA7XFxuICAgIGhlaWdodDogMXB4OyB9XFxuICAudGljay1sb2FkZXI6YmVmb3JlIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgICBhbmltYXRpb246IHRlc3QgLjVzIGluZmluaXRlOyB9XFxuICAudGljay1sb2FkZXI6YWZ0ZXIge1xcbiAgICBhbmltYXRpb246IHRlc3QgLjVzIGluZmluaXRlIHJldmVyc2U7IH1cXG5cXG5Aa2V5ZnJhbWVzIHRlc3Qge1xcbiAgMCUge1xcbiAgICB3aWR0aDogNnB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjY2NjOyB9XFxuICA1MCUge1xcbiAgICB3aWR0aDogMTJweDtcXG4gICAgYmFja2dyb3VuZDogIzAwMDsgfVxcbiAgMTAwJSB7XFxuICAgIHdpZHRoOiA2cHg7XFxuICAgIGJhY2tncm91bmQ6ICNjY2M7IH0gfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvcC1iYXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXG4gIC50b3AtYmFyIGEsIC50b3AtYmFyIC5sb2dvIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgY29sb3I6ICMwMDA7XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjNzIGVhc2UtaW4tb3V0OyB9XFxuICAudG9wLWJhci5jbG9zZSBhLCAudG9wLWJhci5jbG9zZSAubG9nbyB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuICAudG9wLWJhciAubW9iaWxlLm5hdiB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgbGluZS1oZWlnaHQ6IDI7XFxuICAgIHRyYW5zaXRpb246IGFsbCwgLjNzO1xcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICB3aWR0aDogMTAwcHg7XFxuICAgIG1hcmdpbjogMDsgfVxcbiAgICAudG9wLWJhciAubW9iaWxlLm5hdiBhIHtcXG4gICAgICBjb2xvcjogI2NjYzsgfVxcbiAgICAudG9wLWJhciAubW9iaWxlLm5hdiBsaSB7XFxuICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IC4zczsgfVxcbiAgICAgIC50b3AtYmFyIC5tb2JpbGUubmF2IGxpLmFjdGl2ZSB7XFxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsgfVxcbiAgICAudG9wLWJhciAubW9iaWxlLm5hdjpub3QoW2RhdGEtY2xvc2VdKSBsaSB7XFxuICAgICAgb3BhY2l0eTogMTtcXG4gICAgICB0cmFuc2l0aW9uLWRlbGF5OiAuMnM7IH1cXG4gICAgLnRvcC1iYXIgLm1vYmlsZS5uYXY6bm90KFtkYXRhLWNsb3NlXSk6OmFmdGVyLCAudG9wLWJhciAubW9iaWxlLm5hdjpub3QoW2RhdGEtY2xvc2VdKTo6YmVmb3JlIHtcXG4gICAgICBoZWlnaHQ6IDFweDtcXG4gICAgICBvcGFjaXR5OiAwOyB9XFxuICAgIC50b3AtYmFyIC5tb2JpbGUubmF2W2RhdGEtY2xvc2VdIGxpIHtcXG4gICAgICBvcGFjaXR5OiAwOyB9XFxuICAgICAgLnRvcC1iYXIgLm1vYmlsZS5uYXZbZGF0YS1jbG9zZV0gbGksIC50b3AtYmFyIC5tb2JpbGUubmF2W2RhdGEtY2xvc2VdIGxpICoge1xcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH1cXG4gICAgLnRvcC1iYXIgLm1vYmlsZS5uYXZbZGF0YS1jbG9zZV0ge1xcbiAgICAgIGhlaWdodDogNnB4O1xcbiAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgdHJhbnNpdGlvbi1kZWxheTogLjJzOyB9XFxuICAgIC50b3AtYmFyIC5tb2JpbGUubmF2OjpiZWZvcmUge1xcbiAgICAgIHRvcDogMDsgfVxcbiAgICAudG9wLWJhciAubW9iaWxlLm5hdjo6YWZ0ZXIge1xcbiAgICAgIGJvdHRvbTogMDsgfVxcbiAgICAudG9wLWJhciAubW9iaWxlLm5hdjo6YmVmb3JlLCAudG9wLWJhciAubW9iaWxlLm5hdjo6YWZ0ZXIge1xcbiAgICAgIHRyYW5zaXRpb246IGFsbCwgLjJzO1xcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHJpZ2h0OiAwO1xcbiAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgIHdpZHRoOiA4cHg7XFxuICAgICAgaGVpZ2h0OiAycHg7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7XFxuLnBvc3QtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogNTBweDsgfVxcblxcbi5wb3N0LWNvbnRlbnQge1xcbiAgbGluZS1oZWlnaHQ6IDEuODsgfVxcblxcbi5wb3N0LWRhdGUge1xcbiAgbWFyZ2luLXRvcDogNTBweDsgfVxcblxcbi5wb3N0LWNvbnRlbnQgaW1nIHtcXG4gIG1heC13aWR0aDogODAlO1xcbiAgbWF4LWhlaWdodDogNTAwcHg7IH1cXG5cXG4ubWFya2Rvd24tYm9keSB7XFxuICBmb250LWZhbWlseTogUGluZ0ZhbmcgU0MsIFxcXCJcXFxcNUZBRVxcXFw4RjZGXFxcXDk2QzVcXFxcOUVEMVxcXCIsIEFyaWFsO1xcbiAgbWFyZ2luOiAwOyB9XFxuXFxuLnBob3Rvcy1hdHRhY2htZW50IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGNvbG9yOiAjY2NjO1xcbiAgbWFyZ2luLXRvcDogMTBweDsgfVxcbiAgLnBob3Rvcy1hdHRhY2htZW50IC50b29sdGlwIHtcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLnBob3Rvcy1hdHRhY2htZW50IC5waG90b3Mge1xcbiAgICBvcGFjaXR5OiAuNTtcXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuMnM7XFxuICAgIGN1cnNvcjogcG9pbnRlciAhaW1wb3J0YW50OyB9XFxuICAucGhvdG9zLWF0dGFjaG1lbnQ6aG92ZXIgLnBob3RvcyB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG5cXG4uQXBwLm1vYmlsZSAucG9zdC1jb250ZW50IGltZyB7XFxuICBtYXgtd2lkdGg6IDEwMCU7IH1cXG5cXG4uQXBwOm5vdCgubW9iaWxlKSAucG9zdC1jb250ZW50IC5zaWRlLWNvbnRlbnQge1xcbiAgd2lkdGg6IGNhbGMoMzguMiUgLSAyMHB4KTtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICBjb2xvcjogI2NjYztcXG4gIG1hcmdpbjogM3B4IDIwcHggMCAwOyB9XFxuICAuQXBwOm5vdCgubW9iaWxlKSAucG9zdC1jb250ZW50IC5zaWRlLWNvbnRlbnQgcCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cXG4gIC5BcHA6bm90KC5tb2JpbGUpIC5wb3N0LWNvbnRlbnQgLnNpZGUtY29udGVudC53aXRoLWltZyB7XFxuICAgIG1hcmdpbi10b3A6IDVweDsgfVxcbiAgICAuQXBwOm5vdCgubW9iaWxlKSAucG9zdC1jb250ZW50IC5zaWRlLWNvbnRlbnQud2l0aC1pbWcgaW1nIHtcXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Jhc2UtbGluay5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Jhc2UtbGluay5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYmFzZS1saW5rLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnBob3RvcyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxcbiAgLnBob3RvcyAudGh1bWJuYWlsLXByb2dyZXNzLXdyYXBwZXIge1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7IH1cXG4gIC5waG90b3MgLnRodW1ibmFpbCB7XFxuICAgIGhlaWdodDogMjBweDtcXG4gICAgd2lkdGg6IDIwcHg7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xcbiAgICBvcGFjaXR5OiAuMjtcXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAuM3M7IH1cXG4gICAgLnBob3RvcyAudGh1bWJuYWlsIGltZyB7XFxuICAgICAgbWF4LXdpZHRoOiAyMHB4OyB9XFxuICAgIC5waG90b3MgLnRodW1ibmFpbDpob3ZlciB7XFxuICAgICAgb3BhY2l0eTogMTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7XFxuLmxvZ28td3JhcHBlciB7XFxuICB3aWR0aDogOTBweDsgfVxcblxcbi5uYXYucGMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiAxMDAlOyB9XFxuICAubmF2LnBjIHVsIHtcXG4gICAgd2lkdGg6IDkwcHg7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTsgfVxcbiAgICAubmF2LnBjIHVsIGxpLmFjdGl2ZSBhIHtcXG4gICAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50OyB9XFxuICAgIC5uYXYucGMgdWwgbGkuYWN0aXZlOmJlZm9yZSB7XFxuICAgICAgY29udGVudDogJ1xcXFxCNyc7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMTBweDtcXG4gICAgICBmb250LXdlaWdodDogYm9sZGVyOyB9XFxuICAubmF2LnBjIC5mb290ZXIge1xcbiAgICB3aWR0aDogOTBweDtcXG4gICAgY29sb3I6ICNjY2M7IH1cXG4gICAgLm5hdi5wYyAuZm9vdGVyIGEsIC5uYXYucGMgLmZvb3RlciBkaXYge1xcbiAgICAgIGNvbG9yOiAjY2NjO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kZXguc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmV4YW1wbGUtZW50ZXIge1xcbiAgb3BhY2l0eTogMC44OyB9XFxuXFxuLmV4YW1wbGUtZW50ZXIuZXhhbXBsZS1lbnRlci1hY3RpdmUge1xcbiAgb3BhY2l0eTogMTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMjAwbXMgZWFzZS1pbjsgfVxcblxcbi5leGFtcGxlLWxlYXZlIHtcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG4uZXhhbXBsZS1sZWF2ZS5leGFtcGxlLWxlYXZlLWFjdGl2ZSB7XFxuICBkaXNwbGF5OiBub25lOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoYWluKCl7XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gIHZhciBhcmdzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXG5cbiAgYXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGZuKXsgcmV0dXJuIGZuICE9IG51bGwgfSlcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSByZXR1cm4gYXJnc1swXVxuXG4gIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbihjdXJyZW50LCBuZXh0KXtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgY3VycmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgbmV4dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nNicgaGVpZ2h0PSc0JyB2aWV3Qm94PScwIDAgNiA0JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFICUzQ3JlY3QgeD0nMC41JyB5PScwLjUnIHdpZHRoPSc1JyBoZWlnaHQ9JzIuNzI3MjcnIHJ4PScxLjM2MzY0JyBmaWxsPSclMjNDQ0NDQ0MnIHN0cm9rZT0nJTIzQ0NDQ0NDJy8lM0UgJTNDY2lyY2xlIGN4PSc0LjEnIGN5PScxLjg5OTknIHI9JzEnIGZpbGw9J3doaXRlJy8lM0UgJTNDL3N2ZyUzRVwiIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY2hhaW5GdW5jdGlvbiA9IHJlcXVpcmUoJ2NoYWluLWZ1bmN0aW9uJyk7XG5cbnZhciBfY2hhaW5GdW5jdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGFpbkZ1bmN0aW9uKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfQ2hpbGRNYXBwaW5nID0gcmVxdWlyZSgnLi91dGlscy9DaGlsZE1hcHBpbmcnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBjaGlsZEZhY3Rvcnk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZVxufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnc3BhbicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25Hcm91cCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLnBlcmZvcm1BcHBlYXIgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIoX3RoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRBcHBlYXIoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBhcHBlYXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgICBfdGhpcy5wZXJmb3JtTGVhdmUoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxFbnRlcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKF90aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcigpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyB3YXMgcmVtb3ZlZCBiZWZvcmUgaXQgaGFkIGZ1bGx5IGVudGVyZWQuIFJlbW92ZSBpdC5cbiAgICAgICAgX3RoaXMucGVyZm9ybUxlYXZlKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxMZWF2ZShfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcuYmluZChfdGhpcywga2V5LCBjb21wb25lbnQpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIHNvbWV3aGF0IGRhbmdlcm91cyBiL2MgaXQgY2FsbHMgc2V0U3RhdGUoKVxuICAgICAgICAvLyBhZ2FpbiwgZWZmZWN0aXZlbHkgbXV0YXRpbmcgdGhlIGNvbXBvbmVudCBiZWZvcmUgYWxsIHRoZSB3b3JrXG4gICAgICAgIC8vIGlzIGRvbmUuXG4gICAgICAgIF90aGlzLl9oYW5kbGVEb25lTGVhdmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lTGVhdmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRMZWF2ZSkge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmIChjdXJyZW50Q2hpbGRNYXBwaW5nICYmIGN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIGVudGVyZWQgYWdhaW4gYmVmb3JlIGl0IGZ1bGx5IGxlZnQuIEFkZCBpdCBhZ2Fpbi5cbiAgICAgICAgX3RoaXMua2V5c1RvRW50ZXIucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcbiAgICAgICAgICBkZWxldGUgbmV3Q2hpbGRyZW5ba2V5XTtcbiAgICAgICAgICByZXR1cm4geyBjaGlsZHJlbjogbmV3Q2hpbGRyZW4gfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNoaWxkUmVmcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNoaWxkcmVuOiAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKHByb3BzLmNoaWxkcmVuKVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyA9IHt9O1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBpbml0aWFsQ2hpbGRNYXBwaW5nID0gdGhpcy5zdGF0ZS5jaGlsZHJlbjtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdGlhbENoaWxkTWFwcGluZykge1xuICAgICAgaWYgKGluaXRpYWxDaGlsZE1hcHBpbmdba2V5XSkge1xuICAgICAgICB0aGlzLnBlcmZvcm1BcHBlYXIoa2V5LCB0aGlzLmNoaWxkUmVmc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgbmV4dENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNoaWxkcmVuOiAoMCwgX0NoaWxkTWFwcGluZy5tZXJnZUNoaWxkTWFwcGluZ3MpKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dENoaWxkTWFwcGluZykge1xuICAgICAgdmFyIGhhc1ByZXYgPSBwcmV2Q2hpbGRNYXBwaW5nICYmIHByZXZDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgIWhhc1ByZXYgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNOZXh0ID0gbmV4dENoaWxkTWFwcGluZyAmJiBuZXh0Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KF9rZXkpO1xuICAgICAgaWYgKHByZXZDaGlsZE1hcHBpbmdbX2tleV0gJiYgIWhhc05leHQgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNbX2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9MZWF2ZS5wdXNoKF9rZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIHdhbnQgdG8gc29tZWRheSBjaGVjayBmb3IgcmVvcmRlcmluZywgd2UgY291bGQgZG8gaXQgaGVyZS5cbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBrZXlzVG9FbnRlciA9IHRoaXMua2V5c1RvRW50ZXI7XG4gICAgdGhpcy5rZXlzVG9FbnRlciA9IFtdO1xuICAgIGtleXNUb0VudGVyLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5wZXJmb3JtRW50ZXIoa2V5LCBfdGhpczIuY2hpbGRSZWZzW2tleV0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGtleXNUb0xlYXZlID0gdGhpcy5rZXlzVG9MZWF2ZTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gICAga2V5c1RvTGVhdmUuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnBlcmZvcm1MZWF2ZShrZXksIF90aGlzMi5jaGlsZFJlZnNba2V5XSk7XG4gICAgfSk7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBUT0RPOiB3ZSBjb3VsZCBnZXQgcmlkIG9mIHRoZSBuZWVkIGZvciB0aGUgd3JhcHBlciBub2RlXG4gICAgLy8gYnkgY2xvbmluZyBhIHNpbmdsZSBjaGlsZFxuICAgIHZhciBjaGlsZHJlblRvUmVuZGVyID0gW107XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChrZXkpIHtcbiAgICAgIHZhciBjaGlsZCA9IF90aGlzMy5zdGF0ZS5jaGlsZHJlbltrZXldO1xuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIHZhciBpc0NhbGxiYWNrUmVmID0gdHlwZW9mIGNoaWxkLnJlZiAhPT0gJ3N0cmluZyc7XG4gICAgICAgIHZhciBmYWN0b3J5Q2hpbGQgPSBfdGhpczMucHJvcHMuY2hpbGRGYWN0b3J5KGNoaWxkKTtcbiAgICAgICAgdmFyIHJlZiA9IGZ1bmN0aW9uIHJlZihyKSB7XG4gICAgICAgICAgX3RoaXMzLmNoaWxkUmVmc1trZXldID0gcjtcbiAgICAgICAgfTtcblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShpc0NhbGxiYWNrUmVmLCAnc3RyaW5nIHJlZnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gY2hpbGRyZW4gb2YgVHJhbnNpdGlvbkdyb3VwIGFuZCB3aWxsIGJlIGlnbm9yZWQuICcgKyAnUGxlYXNlIHVzZSBhIGNhbGxiYWNrIHJlZiBpbnN0ZWFkOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCN0aGUtcmVmLWNhbGxiYWNrLWF0dHJpYnV0ZScpIDogdm9pZCAwO1xuXG4gICAgICAgIC8vIEFsd2F5cyBjaGFpbmluZyB0aGUgcmVmcyBsZWFkcyB0byBwcm9ibGVtcyB3aGVuIHRoZSBjaGlsZEZhY3RvcnlcbiAgICAgICAgLy8gd3JhcHMgdGhlIGNoaWxkLiBUaGUgY2hpbGQgcmVmIGNhbGxiYWNrIGdldHMgY2FsbGVkIHR3aWNlIHdpdGggdGhlXG4gICAgICAgIC8vIHdyYXBwZXIgYW5kIHRoZSBjaGlsZC4gU28gd2Ugb25seSBuZWVkIHRvIGNoYWluIHRoZSByZWYgaWYgdGhlXG4gICAgICAgIC8vIGZhY3RvcnlDaGlsZCBpcyBub3QgZGlmZmVyZW50IGZyb20gY2hpbGQuXG4gICAgICAgIGlmIChmYWN0b3J5Q2hpbGQgPT09IGNoaWxkICYmIGlzQ2FsbGJhY2tSZWYpIHtcbiAgICAgICAgICByZWYgPSAoMCwgX2NoYWluRnVuY3Rpb24yLmRlZmF1bHQpKGNoaWxkLnJlZiwgcmVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgbGVhdmluZy5cbiAgICAgICAgLy8gVGhlIG5vcm1hbCBSZWFjdCB3YXkgdG8gZG8gaXQgd29uJ3Qgd29yayBzaW5jZSB0aGUgY2hpbGQgd2lsbCBoYXZlXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiByZW1vdmVkLiBJbiBjYXNlIHlvdSBuZWVkIHRoaXMgYmVoYXZpb3IgeW91IGNhbiBwcm92aWRlXG4gICAgICAgIC8vIGEgY2hpbGRGYWN0b3J5IGZ1bmN0aW9uIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmVcbiAgICAgICAgLy8gbGVhdmluZy5cbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZmFjdG9yeUNoaWxkLCB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgcmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdGF0ZS5jaGlsZHJlbikge1xuICAgICAgX2xvb3Aoa2V5KTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgZm9yd2FyZCBUcmFuc2l0aW9uR3JvdXAgcHJvcHMgdG8gcHJpbWl0aXZlIERPTSBub2Rlc1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTmFtZTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5jaGlsZEZhY3Rvcnk7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25FbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25BcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5jb21wb25lbnQ7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsIHByb3BzLCBjaGlsZHJlblRvUmVuZGVyKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb25Hcm91cCc7XG5cblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNpdGlvbkdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYmFzZS1saW5rLmNvbW1hbmQ6aG92ZXIge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZXZlcnNlLFxuICAgIHRvcCxcbiAgICBkb3duLFxuICAgIHJhdGlvID0gMC42MTgsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBjb250YWluZXJTdHlsZSA9IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZmxleERpcmVjdGlvbjogcmV2ZXJzZSA/ICdjb2x1bW4tcmV2ZXJzZScgOiAnY29sdW1uJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9O1xuXG4gIGNvbnN0IGRvd25IdCA9IGAke3JhdGlvICogMTAwfSVgO1xuICBjb25zdCB0b3BIdCA9IGAkeygxIC0gcmF0aW8pICogMTAwfSVgO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgc3R5bGU9e2NvbnRhaW5lclN0eWxlfVxuICAgID5cbiAgICAgIDxkaXYgc3R5bGU9e3toZWlnaHQ6IHRvcEh0fX0+e3RvcH08L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3toZWlnaHQ6IGRvd25IdH19Pntkb3dufTwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59IiwiZXhwb3J0IGNvbnN0IGFwaUVuZFBvaW50ID0gJ2h0dHBzOi8vYXBpLnpqaC5pbSc7XG5leHBvcnQgY29uc3QgY29udGVudCA9IHtcbiAgY292ZXI6IHtcbiAgICB0eXBlOiB7XG4gICAgICBwaG90bzoge3ZhbHVlOiAncGhvdG8nfSxcbiAgICAgIHN0b3J5OiB7dmFsdWU6ICdzdG9yeSd9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbmF2SXRlbVR5cGUgPSB7XG4gIGxpbms6ICdsaW5rJyxcbiAgY29tbWFuZDogJ2NvbW1hbmQnLFxufTtcblxuZXhwb3J0IGNvbnN0IHBob3RvR3JvdXBzSWRBcnIgPSBbXG4gICc1Y2Q2Y2ZiZWM5ZjExZDAwMTE3NDJlNTUnLFxuICAnNWNkNmY1MWVjOWYxMWQwMDExNzQyZTU5JyxcbiAgJzVjZDc4YjIwMzRkMWRkMDAxMTZjMjAxMicsXG4gICc1Y2RiYTEwMTQ3NmQ5YzAwMTFjYzI5ODcnLFxuXTtcblxuZXhwb3J0IGNvbnN0IGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkgPSB7XG4gIEVOQUJMRV9VUERBVEVTX0VOVFJZOiAnZW5hYmxlVXBkYXRlc0VudHJ5JyxcbiAgU0hPV19TUEFDRV9HVUlERUxJTkU6ICdzaG93U3BhY2VHdWlkZUxpbmUnLFxufTtcblxuZXhwb3J0IGNvbnN0IGxvY2FsU3RvcmFnZURhdGFLZXkgPSB7XG4gIENMSUVOVF9QT1NUX0xJU1Q6ICdjbGllbnRQb3N0TGlzdCcsXG4gIFNFUlZFUl9QT1NUX0xJU1Q6ICdzZXJ2ZXJQb3N0TGlzdCcsXG59O1xuXG5leHBvcnQgY29uc3QgUm91dGVzID0ge1xuICBzdG9yaWVzOiAnL3N0b3JpZXMnLFxuICBzdG9yeTogJy9zdG9yaWVzLzppZCcsXG4gIHBob3RvR3JvdXBzOiAnL3Bob3RvcycsXG4gIHBob3RvR3JvdXA6ICcvcGhvdG9zLzppZCcsXG4gIHBob3RvOiAnL3Bob3RvLzppZCcsXG4gIHVwZGF0ZXM6ICcvdW5yZWFkJyxcbiAgaG9tZTogJy8nLFxufTsiLCJpbXBvcnQge2xvY2FsU3RvcmFnZURhdGFLZXksIGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXl9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmNvbnN0IHN0clRvQm9vbCA9IChzdHIpID0+IHtcbiAgaWYgKHN0ciA9PT0gJ2ZhbHNlJykgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoc3RyID09PSAndHJ1ZScpIHsgcmV0dXJuIHRydWUgfVxuICByZXR1cm4gc3RyO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBPYmplY3QuZW50cmllcyhsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5KS5mb3JFYWNoKChbLCB2YWxdKSA9PiB7XG4gICAgcmV0W3ZhbF0gPSBzdHJUb0Jvb2wobG9jYWxTdG9yYWdlLmdldEl0ZW0odmFsKSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXNGcm9tID0gKHNvdXJjZSkgPT4ge1xuICBjb25zdCByZXQgPSB7fTtcbiAgT2JqZWN0LmVudHJpZXMobG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleSkuZm9yRWFjaCgoWyx2YWxdKSA9PiB7XG4gICAgcmV0W3ZhbF0gPSBzdHJUb0Jvb2woc291cmNlW3ZhbF0pO1xuICB9KTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmV4cG9ydCBjb25zdCBzYXZlUG9zdHNEYXRhVG9Mb2NhbFN0b3JhZ2UgPSAocXVlcnlSZXMpID0+IHtcbiAgaWYgKCFxdWVyeVJlcyB8fCAhcXVlcnlSZXMuZGF0YSB8fCAhcXVlcnlSZXMuZGF0YS5wb3N0cy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpZEFyciA9IHF1ZXJ5UmVzLmRhdGEucG9zdHMubWFwKCh7X2lkOiBpZH0pID0+IGlkKTtcbiAgY29uc3QgaGFzTG9jYWxEYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdG9yYWdlRGF0YUtleS5DTElFTlRfUE9TVF9MSVNUKTtcblxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICBoYXNMb2NhbERhdGFcbiAgICAgID8gbG9jYWxTdG9yYWdlRGF0YUtleS5TRVJWRVJfUE9TVF9MSVNUXG4gICAgICA6IGxvY2FsU3RvcmFnZURhdGFLZXkuQ0xJRU5UX1BPU1RfTElTVCxcbiAgICBpZEFyclxuICApXG59O1xuXG5leHBvcnQgY29uc3QgYXBwZW5kUG9zdFRvTG9jYWwgPSAoaWQpID0+IHtcbiAgY29uc3QgbG9jYWxQb3N0cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFxuICAgIGxvY2FsU3RvcmFnZURhdGFLZXkuQ0xJRU5UX1BPU1RfTElTVFxuICApO1xuICBpZiAoIWxvY2FsUG9zdHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICBsb2NhbFN0b3JhZ2VEYXRhS2V5LkNMSUVOVF9QT1NUX0xJU1QsXG4gICAgICBsb2NhbFBvc3RzICsgYCwke2lkfWBcbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkaWZmQ1NQb3N0cyA9ICgpID0+IHtcbiAgY29uc3QgY2xpZW50UG9zdHNTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICBsb2NhbFN0b3JhZ2VEYXRhS2V5LkNMSUVOVF9QT1NUX0xJU1RcbiAgKTtcbiAgY29uc3Qgc2VydmVyUG9zdHNTdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICBsb2NhbFN0b3JhZ2VEYXRhS2V5LlNFUlZFUl9QT1NUX0xJU1RcbiAgKTtcblxuICBpZiAoIShjbGllbnRQb3N0c1N0ciAmJiBzZXJ2ZXJQb3N0c1N0cikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjbGllbnRQb3N0cyA9IGNsaWVudFBvc3RzU3RyLnNwbGl0KCcsJyk7XG4gIGNvbnN0IHNlcnZlclBvc3RzID0gc2VydmVyUG9zdHNTdHIuc3BsaXQoJywnKTtcblxuICByZXR1cm4gc2VydmVyUG9zdHMuZmlsdGVyKChpZCkgPT4ge1xuICAgIHJldHVybiAhY2xpZW50UG9zdHMuaW5jbHVkZXMoaWQpO1xuICB9KVxuXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7bG9hZExvY2FsU3RvcmFnZVZhbHVlc30gZnJvbSAnLi4vdXRpbHMvbG9jYWxfc3RvcmFnZV9tYW5hZ2VyJztcblxuZXhwb3J0IGNvbnN0IFNwYWNlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICByZXNldFNwYWNlOiAoKSA9PiB7fSxcbiAgc2V0U2lkZVNwYWNlQ29udGVudDogKCkgPT4ge31cbn0pO1xuXG5leHBvcnQgY29uc3QgTG9jYWxTdG9yYWdlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAuLi5sb2FkTG9jYWxTdG9yYWdlVmFsdWVzKClcbn0pO1xuXG4vLyBtYWtlIHVzZSBvZiBuZWdhdGl2ZSBzcGFjZS5cbmV4cG9ydCBjb25zdCBXaXRoU3BhY2VDb250ZXh0SE9DID0gKENvbXBvbmVudCkgPT4ge1xuICByZXR1cm4gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTcGFjZUNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtcbiAgICAgICAgICAoey4uLnNwYWNlQ29udGV4dH0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8Q29tcG9uZW50IHsuLi5zcGFjZUNvbnRleHR9IHsuLi5wcm9wc30vPjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIDwvU3BhY2VDb250ZXh0LkNvbnN1bWVyPlxuICAgIClcbiAgfVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQge1dpdGhTcGFjZUNvbnRleHRIT0N9IGZyb20gJy4uLy4uLy4uL2NvbnRleHQvc3BhY2VfY29udGV4dCc7XG5cbmNvbnN0IERFRkFVTFRfR1VJREVMSU5FX0NPTE9SID0gJ2N5YW4nO1xuXG5jb25zdCBXaXRoR3VpZGVMaW5lQmFzZUhPQyA9IChDb21wb25lbnQpID0+IHtcbiAgcmV0dXJuIGNsYXNzIFdpdGhHdWlkZUxpbmVCYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLiRyb290RG9tID0gUmVhY3REb20uZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB0aGlzLiRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy4kY29udGFpbmVyKTtcblxuICAgICAgdGhpcy5oYW5kbGVSZXNpemUoKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVzaXplKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgICBSZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuJGNvbnRhaW5lcik7XG4gICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNob3dTcGFjZUd1aWRlTGluZSAhPT0gdGhpcy5wcm9wcy5zaG93U3BhY2VHdWlkZUxpbmUpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUobmV4dFByb3BzLnNob3dTcGFjZUd1aWRlTGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUmVzaXplID0gKHNob3cpID0+IHtcbiAgICAgIFJlYWN0RG9tLnJlbmRlcihcbiAgICAgICAgdGhpcy5yZW5kZXJHdWlkZUxpbmVzKHRoaXMuJHJvb3REb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHNob3cpLFxuICAgICAgICB0aGlzLiRjb250YWluZXJcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlbmRlckd1aWRlTGluZXMgPSAocmVjdE9iaiwgc2hvdyA9IHRoaXMucHJvcHMuc2hvd1NwYWNlR3VpZGVMaW5lKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvcDogc2hvd1RvcExpbmUsXG4gICAgICAgIGJvdHRvbTogc2hvd0JvdExpbmUsXG4gICAgICAgIGxlZnQ6IHNob3dMZWZ0TGluZSxcbiAgICAgICAgcmlnaHQ6IHNob3dSaWdodExpbmUsXG4gICAgICAgIGNvbG9yID0gREVGQVVMVF9HVUlERUxJTkVfQ09MT1IsXG4gICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKCFzaG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tbW9uR3VpZGVMaW5lU3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcixcbiAgICAgICAgekluZGV4OiAxMDAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBob3Jpekd1aWRlTGluZVN0eWxlID0ge1xuICAgICAgICAuLi5jb21tb25HdWlkZUxpbmVTdHlsZSxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmVydGlHdWlkZUxpbmVTdHlsZSA9IHtcbiAgICAgICAgLi4uY29tbW9uR3VpZGVMaW5lU3R5bGUsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSA9IHJlY3RPYmo7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHNob3dUb3BMaW5lICYmIDxkaXYgc3R5bGU9e3suLi5ob3Jpekd1aWRlTGluZVN0eWxlLCB0b3B9fS8+LFxuICAgICAgICBzaG93Qm90TGluZSAmJiA8ZGl2IHN0eWxlPXt7Li4uaG9yaXpHdWlkZUxpbmVTdHlsZSwgdG9wOiBib3R0b219fS8+LFxuICAgICAgICBzaG93TGVmdExpbmUgJiYgPGRpdiBzdHlsZT17ey4uLnZlcnRpR3VpZGVMaW5lU3R5bGUsIGxlZnR9fS8+LFxuICAgICAgICBzaG93UmlnaHRMaW5lICYmIDxkaXYgc3R5bGU9e3suLi52ZXJ0aUd1aWRlTGluZVN0eWxlLCBsZWZ0OiByaWdodH19Lz4sXG4gICAgICBdO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4udGhpcy5wcm9wc30gLz5cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBXaXRoR3VpZGVMaW5lID0gKENvbXApID0+IFdpdGhTcGFjZUNvbnRleHRIT0MoV2l0aEd1aWRlTGluZUJhc2VIT0MoQ29tcCkpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY29scyB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlID0ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9O1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgIHtcbiAgICAgICAgY29scy5tYXAoY29sID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2ZsZXg6ICcxJ319Pntjb2x9PC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuaW1wb3J0IEJsb2dUb3BEb3duIGZyb20gJy4vYmxvZ190b3BfZG93bic7XG5cbmNvbnN0IENvbXBPZmZzZXQgPSAoQ29tcCwgcmF0aW8pID0+IChwcm9wcykgPT4ge1xuICBjb25zdCByZXRDb21wID0gPENvbXAgey4uLnByb3BzfS8+O1xuICByZXR1cm4gaXNNb2JpbGUoKVxuICAgID8gcmV0Q29tcFxuICAgIDogPEJsb2dUb3BEb3duIHRvcD17bnVsbH0gZG93bj17cmV0Q29tcH0gcmF0aW89e3JhdGlvfSAvPlxufTtcblxuZXhwb3J0IHtkZWZhdWx0IGFzIEdvbGRlblRvcERvd259IGZyb20gJy4vZ29sZGVuX3JhdGlvX3RvcF9kb3duJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBCbG9nVG9wRG93bn0gZnJvbSAnLi9ibG9nX3RvcF9kb3duJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBDb2x1bW5zfSBmcm9tICcuL2NvbHVtbnMnO1xuZXhwb3J0IHsgQ29tcE9mZnNldCB9XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuaW1wb3J0IHsgY29tcGxldGlvbldpdGggfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5pbXBvcnQge0Jsb2dUb3BEb3duLCBDb21wT2Zmc2V0fSBmcm9tICcuLi9sYXlvdXQnO1xuaW1wb3J0IHsgQklHX1JBVElPIH0gZnJvbSAnLi4vbGF5b3V0L2NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudCwgdG90YWwgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3MtbnVtYmVyXCI+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXJyZW50XCI+e2NvbXBsZXRpb25XaXRoKCcwJykoY3VycmVudCwgdG90YWwpfTwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvdGFsXCI+e3Byb3BzLnRvdGFsfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCByYW5nZSA9IG51bSA9PiBbLi4uQXJyYXkobnVtKS5rZXlzKCldO1xuXG5leHBvcnQgY29uc3QgVGlja0luZGljYXRvciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgY3VycmVudCxcbiAgICB0b3RhbCxcbiAgICB2ZXJ0aWNhbCxcbiAgICBvbkNsaWNrID0gKCkgPT4ge30sXG4gICAgYWJzUmlnaHQsXG4gICAgZml4ZWRUb3AsXG4gIH0gPSBwcm9wcztcbiAgaWYgKHRvdGFsIDwgMikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcHJvZ3Jlc3MgPSAoY3VycmVudCkgPT4gYCR7Y29tcGxldGlvbldpdGgoJzAnKShjdXJyZW50LCB0b3RhbCl9IC8gJHt0b3RhbH1gO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbigndGljay1pbmRpY2F0b3InLCB7XG4gICAgICAgICdhYnNvbHV0ZS1yaWdodCc6IGFic1JpZ2h0LFxuICAgICAgICAnZml4ZWQtdG9wJzogZml4ZWRUb3AsXG4gICAgICAgIHZlcnRpY2FsXG4gICAgICB9KX1cbiAgICAgIG9uQ2xpY2s9eygpID0+IHsgb25DbGljayhjdXJyZW50KSB9fVxuICAgID5cbiAgICAgIHtcbiAgICAgICAgcmFuZ2UodG90YWwpLm1hcChpID0+IHtcbiAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGkgPT09IGN1cnJlbnQgLSAxO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGRhdGEtdGl0bGU9e3Byb2dyZXNzKGkgKyAxKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbigndGljaycsIHtcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApXG59O1xuXG5leHBvcnQgY29uc3QgUGhvdG9UaWNrSW5kaWNhdG9yID0gQ29tcE9mZnNldChUaWNrSW5kaWNhdG9yLCBCSUdfUkFUSU8pO1xuXG4iLCJjb25zdCBHT0xERU5fUkFUSU8gPSAwLjYxODtcbmNvbnN0IEJJR19SQVRJTyA9IEdPTERFTl9SQVRJTyArICgxIC0gR09MREVOX1JBVElPKSAqICgxIC0gR09MREVOX1JBVElPKTtcblxuZXhwb3J0IHtcbiAgR09MREVOX1JBVElPLFxuICBCSUdfUkFUSU8sXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBQcm9ncmVzc0luZGljYXRvciB9IGZyb20gJy4vcHJvZ3Jlc3NfaW5kaWNhdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vcHJvZ3Jlc3NfaW5kaWNhdG9yJztcblxuZXhwb3J0IGNvbnN0IEVtcHR5RGl2ID0gKCkgPT4ge1xuICByZXR1cm4gPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywgaGVpZ2h0OiAnMTAwJSd9fSAvPlxufTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5UGxhY2VIb2xkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gc3R5bGU9e3tjb2xvcjogJyNjY2MnfX0+5pegPC9zcGFuPlxuICApXG59O1xuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBHb2xkZW5Ub3BEb3duIGZyb20gJy4vZ29sZGVuX3JhdGlvX3RvcF9kb3duJ1xuaW1wb3J0IHtXaXRoR3VpZGVMaW5lfSBmcm9tICcuLi9hdHRhY2hfZ3VpZGVfbGluZSc7XG5pbXBvcnQge0VtcHR5RGl2fSBmcm9tICcuLi9pbmRleCc7XG5cbmNvbnN0IEVtcHR5RGl2V2l0aEd1aWRlTGluZSA9IFdpdGhHdWlkZUxpbmUoRW1wdHlEaXYpO1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge3RvcCwgZG93biwgYWxpZ25Ub3BJdGVtcywgcmF0aW8sIHBhZGRpbmcsIGZ1bGxIZWlnaHQsIHdpdGhHdWlkZUxpbmV9ID0gcHJvcHM7XG5cbiAgcmV0dXJuIChcbiAgICA8R29sZGVuVG9wRG93blxuICAgICAgcmF0aW89e3JhdGlvfVxuICAgICAgdG9wPXsoXG4gICAgICAgIDxHb2xkZW5Ub3BEb3duXG4gICAgICAgICAgZG93bj17KFxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6IGFsaWduVG9wSXRlbXMgfHwgJ3Vuc2V0J1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dG9wfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB0b3A9e3dpdGhHdWlkZUxpbmUgPyA8RW1wdHlEaXZXaXRoR3VpZGVMaW5lIHRvcCBib3R0b20vPiA6IG51bGx9XG4gICAgICAgICAgcmV2ZXJzZVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIGRvd249eyhcbiAgICAgICAgPGRpdiBzdHlsZT17e3BhZGRpbmcsIGhlaWdodDogZnVsbEhlaWdodCA/ICcxMDAlJyA6ICdhdXRvJ319PlxuICAgICAgICAgIHtkb3dufVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgLz5cbiAgKVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQge2lzTW9iaWxlfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbmV4cG9ydCBjb25zdCBCbGlua0RvdCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9XCJibGluay1kb3RcIj7Ctzwvc3Bhbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBTZWN0b3JMb2FkZXIgPSAoeyBhYnNDZW50ZXIgPSB0cnVlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZShcInNlY3RvclwiLCBcImxvYWRlclwiLCB7XG4gICAgICAgIGNlbnRlcjogYWJzQ2VudGVyICYmIGlzTW9iaWxlKCksXG4gICAgICB9KX1cbiAgICAvPlxuICApXG59O1xuXG5leHBvcnQgY29uc3QgVGlja0xvYWRlciA9ICh7IGFic0NlbnRlciA9IHRydWUgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lKFwidGljay1sb2FkZXJcIiwge1xuICAgICAgICBjZW50ZXI6IGFic0NlbnRlciAmJiBpc01vYmlsZSgpLFxuICAgICAgfSl9XG4gICAgLz5cbiAgKVxufTtcblxuY29uc3Qgd2Fsa2luZ1NxdWFyZSA9ICh7Y2VudGVyfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWUoXG4gICAgICBcInNwaW5uZXJcIixcbiAgICAgIHtjZW50ZXI6IGNlbnRlcn1cbiAgICApfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3F1YXJlMVwiIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNxdWFyZTJcIiAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcXVhcmUzXCIgLz5cbiAgICA8L2Rpdj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGlja0xvYWRlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcbmltcG9ydCBCbG9nVG9wRG93biBmcm9tICcuLi9sYXlvdXQvYmxvZ190b3BfZG93bic7XG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi9zcGlubmVyJztcblxuY29uc3QgcG9zaXRpb25lZFNwaW5uZXIgPSAoKSA9PiB7XG4gIHJldHVybiBpc01vYmlsZSgpXG4gICAgPyA8U3Bpbm5lciAvPlxuICAgIDogPEJsb2dUb3BEb3duIHRvcD17bnVsbH0gZG93bj17PFNwaW5uZXIvPn0gLz5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBvc2l0aW9uZWRTcGlubmVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcInJlYWN0LWFwb2xsb1wiO1xuaW1wb3J0IFBvc2l0aW9uZWRTcGlubmVyIGZyb20gJy4uL3NwaW5uZXIvcG9zaXRpb25lZF9zcGlubmVyJztcbmltcG9ydCBTcGlubmVyIGZyb20gJy4uL3NwaW5uZXInO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc3Bpbm5lckF0Q29udGVudCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIGNvbnN0IHNwaW5uZXIgPSBwcm9wcy5zcGlubmVyIHx8IChcbiAgICBzcGlubmVyQXRDb250ZW50XG4gICAgICA/IDxQb3NpdGlvbmVkU3Bpbm5lciAvPlxuICAgICAgOiA8U3Bpbm5lciAvPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5XG4gICAgICB7Li4ucmVzdH1cbiAgICA+XG4gICAgICB7KHtkYXRhLCBsb2FkaW5nLCBlcnJvcn0pID0+IHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuICc6KCdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9hZGluZ1xuICAgICAgICAgID8gc3Bpbm5lclxuICAgICAgICAgIDogcHJvcHMuY2hpbGRyZW4oe2Vycm9yLCBkYXRhfSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnk+XG4gIClcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ3FsIGZyb20gXCJncmFwaHFsLXRhZ1wiO1xuXG5pbXBvcnQgUXVlcnlXaXRoU3Bpbm5lciBmcm9tICcuLi8uLi9jb21wb25lbnRzL3V0aWxfY29tcC9xdWVyeV93aXRoX3NwaW5uZXInXG5cbmNvbnN0IHF1ZXJ5Q292ZXJzID0gZ3FsYFxuICBxdWVyeSB7XG4gICAgY292ZXJzIHtcbiAgICAgIGNvbnRlbnRfaWRcbiAgICAgIHR5cGVcbiAgICAgIHNob3dcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IENvdmVyID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeUNvdmVyc31cbiAgICA+XG4gICAgICB7KHtkYXRhfSkgPT4ge1xuICAgICAgICBjb25zdCBjb3ZlciA9IGRhdGEuY292ZXJzLmZpbHRlcigoe3Nob3d9KSA9PiBzaG93KVswXTtcbiAgICAgICAgaWYgKCFjb3ZlcikgcmV0dXJuICc6fCc7XG4gICAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbihjb3Zlcik7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IHsgcXVlcnlDb3ZlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IENvdmVyO1xuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ3FsIGZyb20gXCJncmFwaHFsLXRhZ1wiO1xuXG5pbXBvcnQgUXVlcnlXaXRoU3Bpbm5lciBmcm9tICcuLi8uLi9jb21wb25lbnRzL3V0aWxfY29tcC9xdWVyeV93aXRoX3NwaW5uZXInXG5pbXBvcnQge0NORGF0ZVN0cmluZ30gZnJvbSAnQHpob3VqaWFoYW8vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgcXVlcnlQb3N0TGlzdCA9IGdxbGBcbiAge1xuICAgIHBvc3RzIHtcbiAgICAgIF9pZFxuICAgICAgdGl0bGVcbiAgICAgIGRhdGVcbiAgICAgIGNvbnRlbnRcbiAgICAgIHBob3RvZ3JvdXAge1xuICAgICAgICB0aXRsZVxuICAgICAgICBfaWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IG1kMmh0bSA9IG1kID0+IHdpbmRvdy5jb252ZXJ0ZXIgJiYgbWRcbiAgPyB3aW5kb3cuY29udmVydGVyLm1ha2VIdG1sKG1kKVxuICA6IG1kO1xuXG5jb25zdCBwb3N0Rm9ybWF0dGVyID0gKHBvc3QpID0+IHtcbiAgY29uc3QgeyBjb250ZW50LCBkYXRlLCBwaG90b2dyb3VwIH0gPSBwb3N0O1xuICByZXR1cm4ge1xuICAgIC4uLnBvc3QsXG4gICAgcGhvdG9ncm91cElkOiBwaG90b2dyb3VwID8gcGhvdG9ncm91cC5faWQgOiBudWxsLFxuICAgIGh0bWw6IG1kMmh0bShjb250ZW50KSxcbiAgICBkYXRlOiBDTkRhdGVTdHJpbmcobmV3IERhdGUoZGF0ZSkpXG4gIH1cbn07XG5cbmNvbnN0IFBvc3RMaXN0ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeVBvc3RMaXN0fVxuICAgICAgc3Bpbm5lckF0Q29udGVudD17cHJvcHMuc3Bpbm5lckF0Q29udGVudH1cbiAgICA+XG4gICAgICB7KHtkYXRhfSkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oZGF0YS5wb3N0cy5tYXAoKHtfaWQ6IGlkLCBkYXRlLCAuLi5yZXN0fSkgPT4gKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBkYXRlLFxuICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgfSkpLm1hcChwb3N0Rm9ybWF0dGVyKSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9zdExpc3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdxbCBmcm9tIFwiZ3JhcGhxbC10YWdcIjtcblxuaW1wb3J0IFF1ZXJ5V2l0aFNwaW5uZXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy91dGlsX2NvbXAvcXVlcnlfd2l0aF9zcGlubmVyJ1xuXG5leHBvcnQgY29uc3QgcXVlcnlQaG90b0dyb3VwcyA9IGdxbGBcbiAge1xuICAgIHBob3RvZ3JvdXBzIHtcbiAgICAgIF9pZFxuICAgICAgdGl0bGVcbiAgICAgIGRhdGVcbiAgICAgIHZpc2libGVcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBob3RvR3JvdXBzID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeVBob3RvR3JvdXBzfVxuICAgID5cbiAgICAgIHsoe2RhdGF9KSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbihcbiAgICAgICAgICBkYXRhLnBob3RvZ3JvdXBzXG4gICAgICAgICAgICAuZmlsdGVyKCh7dmlzaWJsZX0pID0+IHZpc2libGUpXG4gICAgICAgICAgICAubWFwKCh7X2lkOiBpZCwgLi4ucmVzdH0pID0+ICh7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgfX1cbiAgICA8L1F1ZXJ5V2l0aFNwaW5uZXI+XG4gIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3RvR3JvdXBzO1xuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ3FsIGZyb20gXCJncmFwaHFsLXRhZ1wiO1xuaW1wb3J0IHthcGlFbmRQb2ludH0gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuXG5pbXBvcnQgUXVlcnlXaXRoU3Bpbm5lciBmcm9tICcuLi8uLi9jb21wb25lbnRzL3V0aWxfY29tcC9xdWVyeV93aXRoX3NwaW5uZXInXG5cblxuZXhwb3J0IGNvbnN0IHF1ZXJ5UGhvdG9Hcm91cCA9IGdxbGBcbiAgcXVlcnkgUGhvdG9ncm91cCgkaWQ6IElEISkge1xuICAgIHBob3RvZ3JvdXAoaWQ6ICRpZCkge1xuICAgICAgcGhvdG9zIHtcbiAgICAgICAgX2lkXG4gICAgICAgIHRpdGxlXG4gICAgICAgIGRhdGVcbiAgICAgICAgY29udGVudCB7XG4gICAgICAgICAgdXJsIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5jb25zdCBQaG90b0dyb3VwcyA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeVdpdGhTcGlubmVyXG4gICAgICBxdWVyeT17cXVlcnlQaG90b0dyb3VwfVxuICAgICAgc3Bpbm5lcj17cHJvcHMuc3Bpbm5lcn1cbiAgICAgIHZhcmlhYmxlcz17e1xuICAgICAgICBpZDogcHJvcHMuaWQsXG4gICAgICB9fVxuICAgID5cbiAgICAgIHsoe2RhdGF9KSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbihkYXRhLnBob3RvZ3JvdXAucGhvdG9zLm1hcCgoe2NvbnRlbnQsIC4uLnJlc3R9KSA9PiAoe1xuICAgICAgICAgIHVybDogYXBpRW5kUG9pbnQgKyBjb250ZW50LnVybCxcbiAgICAgICAgICAuLi5yZXN0XG4gICAgICAgIH0pKSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGhvdG9Hcm91cHM7XG5cblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEdPTERFTl9SQVRJTyB9IGZyb20gJy4uL2NvbnN0J1xuXG5jb25zdCBjb21wdXRlQ29udGFpbmVyU3R5bGUgPSAoKSA9PiB7XG4gIGNvbnN0IGJhc2VQYWRkaW5nID0gNTA7XG4gIGNvbnN0IHdoID0gd2luZG93LmlubmVySGVpZ2h0O1xuICBjb25zdCB3dyA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICBjb25zdCBjb250YWluZXJDb250ZW50SHQgPSB3aCAtIDIgKiBiYXNlUGFkZGluZztcbiAgY29uc3QgY29udGFpbmVyQ29udGVudFdkID0gY29udGFpbmVyQ29udGVudEh0ICogKDEgKyBHT0xERU5fUkFUSU8pO1xuICBjb25zdCBsclBhZGRpbmcgPSAod3cgLSBjb250YWluZXJDb250ZW50V2QpIC8gMjtcblxuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB3aWR0aDogYGNhbGMoMTAwJSAtICR7MiAqIGxyUGFkZGluZ31weClgLFxuICAgIGhlaWdodDogYGNhbGMoMTAwJSAtICR7MiAqIGJhc2VQYWRkaW5nfXB4KWAsXG4gICAgbWFyZ2luOiBgJHtiYXNlUGFkZGluZ30gJHtsclBhZGRpbmd9YFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGNMYXlvdXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0eWxlOiBjb21wdXRlQ29udGFpbmVyU3R5bGUoKSxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy51cGRhdGVTdHlsZSlcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc3R5bGU6IGNvbXB1dGVDb250YWluZXJTdHlsZSgpLFxuICAgIH0pXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtsZWZ0LCByaWdodH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBsclwiIHN0eWxlPXt0aGlzLnN0YXRlLnN0eWxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWZ0XCIgc3R5bGU9e3tmbGV4OiAoR09MREVOX1JBVElPICsgMSl9fT57bGVmdH08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFwiIHN0eWxlPXt7XG4gICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICB9fT57cmlnaHR9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBjb250YWluZXJTdHlsZSA9IHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG59O1xuXG5jb25zdCBjb250ZW50SXRlbVN0eWxlID0ge1xuICBwYWRkaW5nOiAzMCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICh7dG9wLCBkb3dufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIHRkXCIgc3R5bGU9e2NvbnRhaW5lclN0eWxlfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wXCIgc3R5bGU9e3tcbiAgICAgICAgLi4uY29udGVudEl0ZW1TdHlsZSxcbiAgICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIH19Pnt0b3B9PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRvd25cIiBzdHlsZT17e1xuICAgICAgICAuLi5jb250ZW50SXRlbVN0eWxlLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgIH19Pntkb3dufTwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBoYXNFcnJvcjogZmFsc2UgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBpbmZvKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc0Vycm9yOiB0cnVlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmhhc0Vycm9yKSB7XG4gICAgICByZXR1cm4gJzooJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFcnJvckJvdW5kYXJ5IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBncWwgZnJvbSBcImdyYXBocWwtdGFnXCI7XG5pbXBvcnQge2FwaUVuZFBvaW50fSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cbmltcG9ydCBRdWVyeVdpdGhTcGlubmVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdXRpbF9jb21wL3F1ZXJ5X3dpdGhfc3Bpbm5lcidcblxuXG5jb25zdCBxdWVyeUltYWdlID0gZ3FsYFxuICBxdWVyeSBQaG90bygkaWQ6IElEISkge1xuICAgIHBob3RvKGlkOiAkaWQpIHtcbiAgICAgIF9pZFxuICAgICAgdGl0bGVcbiAgICAgIGRhdGVcbiAgICAgIGNvbnRlbnQge1xuICAgICAgICB1cmxcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBob3RvID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5V2l0aFNwaW5uZXJcbiAgICAgIHF1ZXJ5PXtxdWVyeUltYWdlfVxuICAgICAgdmFyaWFibGVzPXt7XG4gICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgeyh7ZGF0YX0pID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgICB1cmw6IGFwaUVuZFBvaW50ICsgZGF0YS5waG90by5jb250ZW50LnVybCxcbiAgICAgICAgICB0aXRsZTogZGF0YS5waG90by50aXRsZSxcbiAgICAgICAgfSk7XG4gICAgICB9fVxuICAgIDwvUXVlcnlXaXRoU3Bpbm5lcj5cbiAgKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGhvdG87XG5cblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtub29wLCBpc01vYmlsZX0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmNsYXNzIEN1cnNvclRvb2x0aXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgc2hvdzogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHtib3R0b20sIGxlZnR9ID0gdGhpcy5zZWxmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgeDogbGVmdCxcbiAgICAgIHk6IGJvdHRvbVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlTW91c2VNb3ZlID0gKHtjbGllbnRYLCBjbGllbnRZfSkgPT4ge1xuICAgIGNvbnN0IHt0b3AsIGxlZnR9ID0gdGhpcy5zZWxmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgeDogY2xpZW50WCAtIGxlZnQsXG4gICAgICB5OiBjbGllbnRZIC0gdG9wXG4gICAgfSlcbiAgfTtcblxuICBzZXRUb29sdGlwU3RhdGUgPSAoc2hvdykgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93IH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgdHJhbnNmb3JtVmFsID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5zdGF0ZS54ICsgMjB9cHgsICR7dGhpcy5zdGF0ZS55ICsgMjB9cHgsIDApYDtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBvbk1vdXNlTW92ZT17dGhpcy5oYW5kbGVNb3VzZU1vdmV9XG4gICAgICAgIHJlZj17KHJlZikgPT4gdGhpcy5zZWxmID0gcmVmfVxuICAgICAgICBjbGFzc05hbWU9XCJ0b29sdGlwLXdyYXBwZXJcIlxuICAgICAgPlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAgICAgc2hvd1Rvb2x0aXA6ICgpID0+IHsgdGhpcy5zZXRUb29sdGlwU3RhdGUodHJ1ZSkgfSxcbiAgICAgICAgICBoaWRlVG9vbHRpcDogKCkgPT4geyB0aGlzLnNldFRvb2x0aXBTdGF0ZShmYWxzZSkgfSxcbiAgICAgICAgfSl9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBrZXk9ezJ9XG4gICAgICAgICAgY2xhc3NOYW1lPVwidG9vbHRpcFwiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtVmFsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3cgPyB0aGlzLnByb3BzLnRvb2x0aXAgOiBudWxsIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEN1cnNvclRvb2x0aXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ1NTVHJhbnNpdGlvbkdyb3VwIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuaW1wb3J0IHsgZ2V0SW1hZ2UsIHN0b3JlLCBub29wIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCBTcGlubmVyIGZyb20gXCIuLi91dGlsX2NvbXAvc3Bpbm5lclwiXG5pbXBvcnQgQ3Vyc29yVG9vbHRpcCBmcm9tICcuLi91dGlsX2NvbXAvY3Vyc29yX3Rvb2xsdGlwJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jbGFzcyBJbWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCBoYXNJbWdMb2FkZWQgPSBzdG9yZS5nZXQocHJvcHMudXJsKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZzogIWhhc0ltZ0xvYWRlZCxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgIH07XG4gICAgdGhpcy5sb2FkSW1hZ2UgPSB0aGlzLmxvYWRJbWFnZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkSW1hZ2UodGhpcy5wcm9wcy5zcmMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zcmMgIT09IG5leHRQcm9wcy5zcmMpIHtcbiAgICAgIHRoaXMubG9hZEltYWdlKG5leHRQcm9wcy5zcmMpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWRJbWFnZSAodXJsKSB7XG4gICAgY29uc3Qgb25Mb2FkID0gdGhpcy5wcm9wcy5vbkxvYWQgfHwgbm9vcDtcbiAgICBpZiAoc3RvcmUuZ2V0KHVybCkpIHtcbiAgICAgIG9uTG9hZCh1cmwpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmc6IHRydWV9KTtcbiAgICBnZXRJbWFnZSh1cmwpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIG9uTG9hZCh1cmwpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9O1xuXG4gIHJlbmRlckltZyA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlQW5pbWF0aW9uKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXt0aGlzLnByb3BzLnNyY31cbiAgICAgICAgICBrZXk9e3RoaXMucHJvcHMuc3JjfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja31cbiAgICAgICAgICBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxDU1NUcmFuc2l0aW9uR3JvdXBcbiAgICAgICAgY29tcG9uZW50PXtSZWFjdC5GcmFnbWVudH1cbiAgICAgICAgdHJhbnNpdGlvbk5hbWU9XCJleGFtcGxlXCJcbiAgICAgICAgdHJhbnNpdGlvbkVudGVyVGltZW91dD17MzAwfVxuICAgICAgICB0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXszMDB9XG4gICAgICA+XG4gICAgICAgIDxDdXJzb3JUb29sdGlwXG4gICAgICAgICAgdG9vbHRpcD17dGhpcy5wcm9wcy50b29sdGlwfVxuICAgICAgICA+XG4gICAgICAgICAge1xuICAgICAgICAgICAgKHsgc2hvd1Rvb2x0aXAsIGhpZGVUb29sdGlwIH0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e3RoaXMucHJvcHMuc3JjfVxuICAgICAgICAgICAgICAgICAga2V5PXt0aGlzLnByb3BzLnNyY31cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja31cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLnN0eWxlfVxuICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtzaG93VG9vbHRpcH1cbiAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGlkZVRvb2x0aXB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgPC9DdXJzb3JUb29sdGlwPlxuICAgICAgPC9DU1NUcmFuc2l0aW9uR3JvdXA+XG4gICAgKVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgcmV0dXJuICc6KCdcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5sb2FkaW5nICYmICF0aGlzLnByb3BzLmxvYWRlZFxuICAgICAgPyAoIXRoaXMucHJvcHMuaGlkZVNwaW5uZXIgJiYgPFNwaW5uZXIvPilcbiAgICAgIDogdGhpcy5yZW5kZXJJbWcoKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltZztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBJbWcgZnJvbSAnLi4vSW1nL2ltZyc7XG5cbmNvbnN0IFBob3RvID0gKHtwaG90bywgY2xhc3NOYW1lLCAuLi5yZXN0fSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgcG9zdCAke2NsYXNzTmFtZX1gfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jb250ZW50XCI+XG4gICAgICAgIDxJbWcgc3JjPXtwaG90by51cmx9IHsuLi5yZXN0fSB0b29sdGlwPXtwaG90by50aXRsZX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWFnZS10aXRsZVwiIHN0eWxlPXt7Y29sb3I6ICcjZmZmJ319PntwaG90by50aXRsZX08L2Rpdj5cbiAgICAgICAgPC9JbWc+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBob3RvIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtkZWZhdWx0IGFzIFBob3RvUHJvdmlkZXJ9IGZyb20gJy4uLy4uL2NvbnRhaW5lcnMvcGhvdG8nO1xuaW1wb3J0IFBob3RvIGZyb20gJy4vcGhvdG8nO1xuXG5leHBvcnQgZGVmYXVsdCAoe2lkLCBtYXRjaH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UGhvdG9Qcm92aWRlclxuICAgICAgaWQ9e2lkIHx8IG1hdGNoLnBhcmFtcy5pZH1cbiAgICA+XG4gICAgICB7KHBob3RvKSA9PiB7XG4gICAgICAgIHJldHVybiA8UGhvdG8gcGhvdG89e3Bob3RvfS8+XG4gICAgICB9fVxuICAgIDwvUGhvdG9Qcm92aWRlcj5cbiAgKVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7IGdldEltYWdlLCB0aHJvdHRsZSwgbm9vcCwgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcblxuaW1wb3J0IHsgUHJvZ3Jlc3NJbmRpY2F0b3IsIFRpY2tJbmRpY2F0b3IsIFBob3RvVGlja0luZGljYXRvciB9IGZyb20gJy4uL3V0aWxfY29tcCc7XG5pbXBvcnQgUGhvdG8gZnJvbSBcIi4uL3Bob3RvL3Bob3RvXCI7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcbmltcG9ydCB7Q29tcE9mZnNldH0gZnJvbSAnLi4vdXRpbF9jb21wL2xheW91dCc7XG5pbXBvcnQge0JJR19SQVRJT30gZnJvbSAnLi4vdXRpbF9jb21wL2xheW91dC9jb25zdCc7XG5pbXBvcnQgeyBXaXRoU3BhY2VDb250ZXh0SE9DIH0gZnJvbSAnLi4vLi4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcblxuY2xhc3MgUGhvdG9zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRJbmRleDogMCxcbiAgICAgIGlzQ3VycmVudEltZ1JlYWR5OiBmYWxzZSxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCBwaG90b1VybEFyciA9IHRoaXMucHJvcHMucGhvdG9zLm1hcCgoe3VybH0pID0+IHVybCk7XG4gICAgdGhpcy5wcmVMb2FkUGhvdG9zKHBob3RvVXJsQXJyKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuc2V0U2lkZVNwYWNlQ29udGVudChudWxsKTtcbiAgfVxuXG4gIHJlbmRlclRpY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnN0YXRlLmN1cnJlbnRJbmRleDtcbiAgICBjb25zdCBwaG90b3MgPSB0aGlzLnByb3BzLnBob3RvcztcbiAgICBjb25zdCB0b3RhbCA9IHBob3Rvcy5sZW5ndGg7XG5cbiAgICB0aGlzLnByb3BzLnNldFNpZGVTcGFjZUNvbnRlbnQoXG4gICAgICA8UGhvdG9UaWNrSW5kaWNhdG9yXG4gICAgICAgIGN1cnJlbnQ9e2luZGV4ICsgMX1cbiAgICAgICAgdG90YWw9e3RvdGFsfVxuICAgICAgICBvbkNsaWNrPXt0aHJvdHRsZSh0aGlzLm5leHQsIDMwMCl9XG4gICAgICAgIHZlcnRpY2FsXG4gICAgICAgIGFic1JpZ2h0XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgaGFuZGxlQ3VycmVudEltZ0xvYWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0N1cnJlbnRJbWdSZWFkeTogdHJ1ZSxcbiAgICB9LCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMudGh1bWJuYWlsTW9kZSkge1xuICAgICAgICB0aGlzLnJlbmRlclRpY2soKTtcbiAgICAgIH1cbiAgICB9KVxuICB9O1xuXG4gIHByZUxvYWRQaG90b3MgPSAodXJscykgPT4ge1xuICAgIHVybHMubWFwKGdldEltYWdlKVxuICB9O1xuXG4gIG5leHRJbmRleCA9IChjdXJyZW50SW5kZXgpID0+IHtcbiAgICBpZiAoKGN1cnJlbnRJbmRleCArIDEpIDw9IHRoaXMucHJvcHMucGhvdG9zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBjdXJyZW50SW5kZXggKyAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBuZXh0ID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5waG90b3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2lzQ3VycmVudEltZ1JlYWR5OiBmYWxzZX0pO1xuICAgIGNvbnN0IHRvdGFsTGVuID0gdGhpcy5wcm9wcy5waG90b3MubGVuZ3RoO1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRJbmRleCA8IHRvdGFsTGVuIC0gMSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHtcbiAgICAgICAgY3VycmVudEluZGV4OiBwcmV2U3RhdGUuY3VycmVudEluZGV4ICsgMVxuICAgICAgfSksIHRoaXMucmVuZGVyVGljayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50SW5kZXg6IDBcbiAgICAgIH0sIHRoaXMucmVuZGVyVGljayk7XG4gICAgfVxuICAgIC8vIHRoaXMucmVuZGVyVGljaygpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudEluZGV4O1xuICAgIGNvbnN0IHBob3RvcyA9IHRoaXMucHJvcHMucGhvdG9zO1xuICAgIGNvbnN0IHRvdGFsID0gcGhvdG9zLmxlbmd0aDtcbiAgICBjb25zdCBoYXNNdWx0aVBob3RvcyA9IHRvdGFsID4gMTtcblxuICAgIGlmICghcGhvdG9zIHx8ICFwaG90b3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJzooIG5vdCBmb3VuZCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwicGhvdG9zXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBtYXhXaWR0aDogdGhpcy5wcm9wcy50aHVtYm5haWxNb2RlID8gMzAgOiAndW5zZXQnLFxuICAgICAgICB9fVxuICAgICAgICBkYXRhLXByb2c9e2Ake2luZGV4ICsgMX0gb2YgJHtwaG90b3MubGVuZ3RofWB9XG4gICAgICA+XG4gICAgICAgIDxQaG90b1xuICAgICAgICAgIHBob3RvPXtwaG90b3NbaW5kZXhdfVxuICAgICAgICAgIG9uTG9hZD17dGhpcy5oYW5kbGVDdXJyZW50SW1nTG9hZH1cbiAgICAgICAgICBvbkNsaWNrPXtoYXNNdWx0aVBob3RvcyA/IHRocm90dGxlKHRoaXMubmV4dCwgMzAwKSA6IG5vb3B9XG4gICAgICAgICAgc3R5bGU9e3sgY3Vyc29yOiBoYXNNdWx0aVBob3RvcyA/ICdwb2ludGVyJyA6ICdkZWZhdWx0J319XG4gICAgICAgICAgaGlkZVNwaW5uZXI9e3RoaXMucHJvcHMuaGlkZVNwaW5uZXJ9XG4gICAgICAgIC8+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnNob3dOZXh0VGh1bWJuYWlsICYmIGhhc011bHRpUGhvdG9zICYmIHRoaXMuc3RhdGUuaXNDdXJyZW50SW1nUmVhZHkgJiYgKCA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbC1wcm9ncmVzcy13cmFwcGVyXCI+XG4gICAgICAgICAgICAgIDxQaG90b1xuICAgICAgICAgICAgICAgIHBob3RvPXtwaG90b3NbdGhpcy5uZXh0SW5kZXgoaW5kZXgpXX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFwidGh1bWJuYWlsXCIsIHtoaWRlOiAhdGhpcy5zdGF0ZS5pc0N1cnJlbnRJbWdSZWFkeX0pfVxuICAgICAgICAgICAgICAgIGRpc2FibGVBbmltYXRpb25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYXNNdWx0aVBob3RvcyA/IHRocm90dGxlKHRoaXMubmV4dCwgMzAwKSA6IG5vb3B9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgY3Vyc29yOiBoYXNNdWx0aVBob3RvcyA/ICdwb2ludGVyJyA6ICdkZWZhdWx0J319XG4gICAgICAgICAgICAgICAgaGlkZVNwaW5uZXJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzTW9iaWxlKCkgJiYgKFxuICAgICAgICAgICAgICAgICAgPFRpY2tJbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudD17aW5kZXggKyAxfVxuICAgICAgICAgICAgICAgICAgICB0b3RhbD17dG90YWx9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2l0aFNwYWNlQ29udGV4dEhPQyhQaG90b3MpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ29tcE9mZnNldCB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgeyBCSUdfUkFUSU8gfSBmcm9tIFwiLi4vdXRpbF9jb21wL2xheW91dC9jb25zdFwiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFBob3Rvc1Byb3ZpZGVyfSBmcm9tICcuLi8uLi9jb250YWluZXJzL3Bob3RvX2dyb3VwJ1xuaW1wb3J0IFBob3RvcyBmcm9tIFwiLi4vcGhvdG9zL3Bob3Rvc1wiO1xuXG5jb25zdCBQaG90b0dyb3VwID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtpZCwgbWF0Y2gsIC4uLnJlc3R9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPFBob3Rvc1Byb3ZpZGVyXG4gICAgICBpZD17aWQgfHwgbWF0Y2gucGFyYW1zLmlkfVxuICAgICAgc3Bpbm5lcj17cmVzdC5zcGlubmVyfVxuICAgID5cbiAgICAgIHsocGhvdG9zKSA9PiAoXG4gICAgICAgIDxQaG90b3NcbiAgICAgICAgICBwaG90b3M9e3Bob3Rvc31cbiAgICAgICAgICBzaG93TmV4dFRodW1ibmFpbFxuICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L1Bob3Rvc1Byb3ZpZGVyPlxuICApXG59O1xuXG5jb25zdCBQaG90b0dyb3VwV2l0aE9mZnNldCA9IENvbXBPZmZzZXQoUGhvdG9Hcm91cCwgQklHX1JBVElPKTtcbmNvbnN0IFBob3RvR3JvdXBUaHVtYm5haWwgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBpZCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPFBob3RvR3JvdXBcbiAgICAgIGlkPXtpZH1cbiAgICAgIHNob3dOZXh0VGh1bWJuYWlsPXtmYWxzZX1cbiAgICAgIHRodW1ibmFpbE1vZGU9e3RydWV9XG4gICAgICB7Li4ucmVzdH1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IHtcbiAgUGhvdG9Hcm91cCBhcyBCYXNlUGhvdG9Hcm91cCxcbiAgUGhvdG9Hcm91cFdpdGhPZmZzZXQsXG4gIFBob3RvR3JvdXBUaHVtYm5haWxcbn1cbiIsImltcG9ydCB7Um91dGVzfSBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCBnb3RvID0gKHJvdXRlKSA9PiB7XG4gIGxvY2F0aW9uLmhhc2ggPSBgIyR7cm91dGV9YFxufTtcblxuY29uc3QgZ290b1Bob3RvR3JvdXAgPSAoaWQpID0+IHtnb3RvKGAke1JvdXRlcy5waG90b0dyb3Vwc30vJHtpZH1gKX07XG5cbmNvbnN0IGdvdG9Qb3N0ID0gKGlkKSA9PiB7Z290byhgJHtSb3V0ZXMuc3Rvcmllc30vJHtpZH1gKX07XG5cbmV4cG9ydCB7XG4gIGdvdG8sXG4gIGdvdG9Qb3N0LFxuICBnb3RvUGhvdG9Hcm91cCxcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnaW5nU3RhdGVNYW5hZ2VyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkUHJvcHMocHJvcHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleCgpO1xuICB9XG5cbiAgZ2V0U3RhdGVCeVByb3BzQW5kQ3VycmVudFBhZ2VJbmRleCA9IChwcm9wcyA9IHRoaXMucHJvcHMsIGN1cnJlbnRQYWdlSW5kZXggPSBwcm9wcy5jdXJyZW50UGFnZUluZGV4KSA9PiB7XG4gICAgY29uc3QgeyBwYWdlU2l6ZSwgZGF0YSB9ID0gcHJvcHM7XG4gICAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbChkYXRhLmxlbmd0aCAvIHBhZ2VTaXplKTtcbiAgICBjb25zdCBzdGFydCA9IChjdXJyZW50UGFnZUluZGV4IC0gMSkgKiBwYWdlU2l6ZTtcbiAgICBjb25zdCBlbmQgPSBjdXJyZW50UGFnZUluZGV4ICogcGFnZVNpemU7XG4gICAgY29uc3QgY3VycmVudFBhZ2VEYXRhID0gZGF0YS5zbGljZShzdGFydCwgIGVuZCkgfHwgW107XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGFzTmV4dFBhZ2U6IGN1cnJlbnRQYWdlSW5kZXggPCB0b3RhbFBhZ2VzLFxuICAgICAgaGFzUHJldlBhZ2U6IGN1cnJlbnRQYWdlSW5kZXggPiAxLFxuICAgICAgY3VycmVudFBhZ2VJbmRleCxcbiAgICAgIGN1cnJlbnRQYWdlRGF0YSxcbiAgICAgIHRvdGFsUGFnZXMsXG4gICAgfVxuICB9O1xuXG4gIG5leHQgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmhhc05leHRQYWdlICYmICF0aGlzLnByb3BzLmluZmluaXRlTG9vcE1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PlxuICAgICAgdGhpcy5nZXRTdGF0ZUJ5UHJvcHNBbmRDdXJyZW50UGFnZUluZGV4KFxuICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2U3RhdGUuaGFzTmV4dFBhZ2VcbiAgICAgICAgICA/IHByZXZTdGF0ZS5jdXJyZW50UGFnZUluZGV4ICsgMVxuICAgICAgICAgIDogMVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcHJldiA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaGFzUHJldlBhZ2UgJiYgIXRoaXMucHJvcHMuaW5maW5pdGVMb29wTW9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PlxuICAgICAgdGhpcy5nZXRTdGF0ZUJ5UHJvcHNBbmRDdXJyZW50UGFnZUluZGV4KFxuICAgICAgICB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2U3RhdGUuaGFzUHJldlBhZ2VcbiAgICAgICAgICA/IHByZXZTdGF0ZS5jdXJyZW50UGFnZUluZGV4IC0gMVxuICAgICAgICAgIDogcHJldlN0YXRlLnRvdGFsUGFnZXNcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIGlzVmFsaWRQcm9wcyA9IChwcm9wcyA9IHRoaXMucHJvcHMpID0+IHtcbiAgICBjb25zdCB7ZGF0YSwgcGFnZVNpemUsIGN1cnJlbnRQYWdlSW5kZXggPSAxfSA9IHByb3BzO1xuICAgIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyBwYWdlU2l6ZSk7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoXG4gICAgICAmJiBwYWdlU2l6ZSA+IDBcbiAgICAgICYmIGN1cnJlbnRQYWdlSW5kZXggPj0gMVxuICAgICAgJiYgY3VycmVudFBhZ2VJbmRleCA8PSB0b3RhbFBhZ2VzO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkUHJvcHModGhpcy5wcm9wcykgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgbmV4dDogdGhpcy5uZXh0LFxuICAgICAgcHJldjogdGhpcy5wcmV2LFxuICAgIH0pXG4gIH1cbn1cblxuUGFnaW5nU3RhdGVNYW5hZ2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY3VycmVudFBhZ2VJbmRleDogMSxcbn07XG5cblBhZ2luZ1N0YXRlTWFuYWdlci5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBwYWdlU2l6ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBjdXJyZW50UGFnZUluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIjtcbmltcG9ydCB7IEJsb2dUb3BEb3duIH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXRcIjtcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcbmltcG9ydCB7UGhvdG9Hcm91cFRodW1ibmFpbH0gZnJvbSAnLi4vcGhvdG9ncm91cCc7XG5pbXBvcnQge2dvdG9QaG90b0dyb3VwLCBnb3RvUG9zdH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IFRpY2tMb2FkZXIgZnJvbSAnLi4vdXRpbF9jb21wL3NwaW5uZXInO1xuaW1wb3J0IHtUaWNrSW5kaWNhdG9yfSBmcm9tICcuLi91dGlsX2NvbXAvcHJvZ3Jlc3NfaW5kaWNhdG9yJztcbmltcG9ydCBQYWdpbmdTdGF0ZU1hbmFnZXIgZnJvbSAnLi4vdXRpbF9jb21wL3BhZ2luZ19zdGF0ZV9tYW5hZ2VyJztcblxuY29uc3QgUGhvdG9zQXR0YWNobWVudCA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInBob3Rvcy1hdHRhY2htZW50XCJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgZ290b1Bob3RvR3JvdXAocHJvcHMuaWQpXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGFiZWxcIj7pmYQ8L2Rpdj5cbiAgICAgIDxQaG90b0dyb3VwVGh1bWJuYWlsXG4gICAgICAgIGlkPXtwcm9wcy5pZH1cbiAgICAgICAgaGlkZVNwaW5uZXI9e2lzTW9iaWxlKCl9XG4gICAgICAgIHNwaW5uZXI9ezxUaWNrTG9hZGVyIGFic0NlbnRlcj17ZmFsc2V9Lz59XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59O1xuXG5leHBvcnQgZGVmYXVsdCAocHJvcHMpID0+IHtcbiAgY29uc3Qge3Bvc3QsIGNsYXNzTmFtZSwgdG90YWxMZW4sIGluZGV4LCBuZXh0fSA9IHByb3BzO1xuICBpZiAoaXNNb2JpbGUoKSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YHBvc3QgJHtjbGFzc05hbWV9YH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC10aXRsZVwiPntwb3N0LnRpdGxlfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtY29udGVudCBtYXJrZG93bi1ib2R5XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHBvc3QuaHRtbH19IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1kYXRlXCI+e3Bvc3QuZGF0ZX08L2Rpdj5cbiAgICAgICAge3Bvc3QucGhvdG9ncm91cElkICYmIDxQaG90b3NBdHRhY2htZW50IGlkPXtwb3N0LnBob3RvZ3JvdXBJZH0vPn1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEJsb2dUb3BEb3duXG4gICAgICB0b3A9e1tcbiAgICAgICAgcG9zdC50aXRsZSwgKFxuICAgICAgICA8VGlja0luZGljYXRvclxuICAgICAgICAgIHRvdGFsPXt0b3RhbExlbn1cbiAgICAgICAgICBjdXJyZW50PXtpbmRleH1cbiAgICAgICAgICBvbkNsaWNrPXtuZXh0fVxuICAgICAgICAgIGZpeGVkVG9wXG4gICAgICAgIC8+XG4gICAgICApXX1cbiAgICAgIHBhZGRpbmc9XCIwIDEwcHhcIlxuICAgICAgZG93bj17KFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHBvc3QgJHtjbGFzc05hbWV9YH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNvbnRlbnQgbWFya2Rvd24tYm9keVwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBwb3N0Lmh0bWx9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1kYXRlXCI+e3Bvc3QuZGF0ZX08L2Rpdj5cbiAgICAgICAgICB7cG9zdC5waG90b2dyb3VwSWQgJiYgPFBob3Rvc0F0dGFjaG1lbnQgaWQ9e3Bvc3QucGhvdG9ncm91cElkfS8+fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgLz5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBQb3N0c1Byb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29udGFpbmVycy9wb3N0X2xpc3QnO1xuaW1wb3J0IFBvc3QgZnJvbSAnLi9wb3N0JztcbmltcG9ydCBQYWdpbmdTdGF0ZU1hbmFnZXIgZnJvbSAnLi4vdXRpbF9jb21wL3BhZ2luZ19zdGF0ZV9tYW5hZ2VyJztcblxuZXhwb3J0IGRlZmF1bHQgKHtpZCwgY2xhc3NOYW1lcywgbWF0Y2h9KSA9PiB7XG4gIGNvbnN0IHBvc3RJZCA9IGlkIHx8IG1hdGNoLnBhcmFtcy5pZDtcbiAgcmV0dXJuIChcbiAgICA8UG9zdHNQcm92aWRlclxuICAgICAgaWQ9e3Bvc3RJZH1cbiAgICAgIHNwaW5uZXJBdENvbnRlbnRcbiAgICA+XG4gICAgICB7KHBvc3RzKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHBvc3RzLmZpbmRJbmRleCgoe2lkOiB0YXJnZXRJZH0pID0+IHRhcmdldElkID09PSBwb3N0SWQpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxQYWdpbmdTdGF0ZU1hbmFnZXJcbiAgICAgICAgICAgIGRhdGE9e3Bvc3RzfVxuICAgICAgICAgICAgcGFnZVNpemU9ezF9XG4gICAgICAgICAgICBjdXJyZW50UGFnZUluZGV4PXtpZHggKyAxfVxuICAgICAgICAgICAgaW5maW5pdGVMb29wTW9kZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZURhdGEsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VJbmRleCxcbiAgICAgICAgICAgICAgICB0b3RhbFBhZ2VzOiB0b3RhbExlbixcbiAgICAgICAgICAgICAgICBuZXh0XG4gICAgICAgICAgICAgIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPFBvc3RcbiAgICAgICAgICAgICAgICAgICAgbmV4dD17bmV4dH1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxMZW49e3RvdGFsTGVufVxuICAgICAgICAgICAgICAgICAgICBpbmRleD17Y3VycmVudFBhZ2VJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgcG9zdD17Y3VycmVudFBhZ2VEYXRhWzBdfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXN9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvUGFnaW5nU3RhdGVNYW5hZ2VyPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUG9zdHNQcm92aWRlcj5cbiAgKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQklHX1JBVElPIH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXQvY29uc3RcIjtcbmltcG9ydCB7IENvbXBPZmZzZXQgfSBmcm9tIFwiLi4vdXRpbF9jb21wL2xheW91dFwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDb3ZlclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29udGFpbmVycy9jb3Zlcic7XG5pbXBvcnQgUGhvdG8gZnJvbSBcIi4uL3Bob3RvXCI7XG5pbXBvcnQgUG9zdCBmcm9tICcuLi9wb3N0J1xuaW1wb3J0IHsgY29udGVudCB9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuY29uc3QgQ292ZXJQaG90byA9ICh7aWR9KSA9PiAoXG4gIDxQaG90byBpZD17aWR9IGNsYXNzTmFtZT1cImNvdmVyLWltYWdlXCIgLz5cbik7XG5jb25zdCB0eXBlQ29tcE1hcCA9IHtcbiAgW2NvbnRlbnQuY292ZXIudHlwZS5waG90by52YWx1ZV06IENvbXBPZmZzZXQoQ292ZXJQaG90bywgQklHX1JBVElPKSxcbiAgW2NvbnRlbnQuY292ZXIudHlwZS5zdG9yeS52YWx1ZV06ICh7aWR9KSA9PiAoXG4gICAgPFBvc3QgaWQ9e2lkfSBjbGFzc05hbWU9XCJjb3Zlci1zdG9yeVwiLz5cbiAgKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q292ZXJQcm92aWRlcj5cbiAgICAgIHsoY292ZXIpID0+IHtcbiAgICAgICAgY29uc3Qge3R5cGUsIGNvbnRlbnRfaWQ6IGlkfSA9IGNvdmVyO1xuICAgICAgICBjb25zdCBDb3ZlciA9IHR5cGVDb21wTWFwW3R5cGVdO1xuICAgICAgICByZXR1cm4gPENvdmVyIGlkPXtpZH0vPlxuICAgICAgfX1cbiAgICA8L0NvdmVyUHJvdmlkZXI+XG4gICk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWUgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7bm9vcH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJ1xuaW1wb3J0IHtFbXB0eVBsYWNlSG9sZGVyfSBmcm9tICcuLi8uLi9pbmRleCc7XG5cbmV4cG9ydCBkZWZhdWx0IChcbiAge1xuICAgIGRhdGEgPSBbXSxcbiAgICBpdGVtUmVuZGVyZXIgPSBub29wLFxuICAgIGVtcHR5UmVuZGVyZXIsXG4gICAgYmVmb3JlUmVuZGVyZXIgPSBub29wLFxuICAgIGFmdGVyUmVuZGVyZXIgPSBub29wLFxuICAgIGNsYXNzTmFtZSxcbiAgICAuLi5yZXN0XG4gIH1cbikgPT4ge1xuICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGVtcHR5UmVuZGVyZXJcbiAgICAgICAgPyBlbXB0eVJlbmRlcmVyKClcbiAgICAgICAgOiA8RW1wdHlQbGFjZUhvbGRlciAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7YmVmb3JlUmVuZGVyZXIoZGF0YSl9XG4gICAgICA8dWwgY2xhc3NOYW1lPXtjbGFzc25hbWUoJ2Jhc2UtbGlzdCcsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICAgICAge1xuICAgICAgICAgIGRhdGEubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImJhc2UtbGlzdC1pdGVtXCI+XG4gICAgICAgICAgICAgICAge2l0ZW1SZW5kZXJlcih7aXRlbSwgaW5kZXh9KX1cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICA8L3VsPlxuICAgICAge2FmdGVyUmVuZGVyZXIoZGF0YSl9XG4gICAgPC8+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBhZ2luZ1N0YXRlTWFuYWdlciBmcm9tICcuLi8uLi9wYWdpbmdfc3RhdGVfbWFuYWdlcic7XG5pbXBvcnQgQmFzZUxpc3QgZnJvbSAnLi4vYmFzZV9saXN0JztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwYWdpbmdPcHRpb24sXG4gICAgbGlzdE9wdGlvbixcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxQYWdpbmdTdGF0ZU1hbmFnZXIgey4uLnBhZ2luZ09wdGlvbn0+XG4gICAgICB7KHBhZ2luZ1Byb3BzKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEJhc2VMaXN0XG4gICAgICAgICAgICB7Li4ubGlzdE9wdGlvbn1cbiAgICAgICAgICAgIGRhdGE9e3BhZ2luZ1Byb3BzLmN1cnJlbnRQYWdlRGF0YX1cbiAgICAgICAgICAgIGFmdGVyUmVuZGVyZXI9eygpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHBhZ2luZ1Byb3BzKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUGFnaW5nU3RhdGVNYW5hZ2VyPlxuICApXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge2lzTW9iaWxlfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIlxuXG5pbXBvcnQgQmFzZUxpc3QgZnJvbSAnLi9iYXNlX2xpc3QnXG5pbXBvcnQgTGV0dGVyUGFwZXJMaXN0IGZyb20gJy4vbGV0dGVyX3BhcGVyX2xpc3QnXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgUGFnaW5nTGlzdCB9IGZyb20gJy4vcGFnaW5nX2xpc3QnO1xuXG5jb25zdCBMaXN0ID0gaXNNb2JpbGUoKSA/IExldHRlclBhcGVyTGlzdCA6IEJhc2VMaXN0O1xuZXhwb3J0IGRlZmF1bHQgTGlzdDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQge2RlZmF1bHQgYXMgQmFzZUxpc3R9IGZyb20gJy4uL2Jhc2VfbGlzdCdcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbmV4cG9ydCBkZWZhdWx0ICh7Y2xhc3NOYW1lLCAuLi5yZXN0fSkgPT4ge1xuICBjb25zdCByZW5kZXJBZGRyID0gKCkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkcmVzc1wiPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYWRkclwiPlxuICAgICAgICB7J+WcsOWdgO+8muW5v+S4nOODu+a3seWcs+W4guODu+WNl+WxseWMuid9XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJwYWdlLWluZGV4XCI+56ysIDEg6aG1PC9zcGFuPlxuICAgIDwvZGl2PlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPEJhc2VMaXN0XG4gICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZShcImxldHRlci1wYXBlci1saXN0XCIsIGNsYXNzTmFtZSl9XG4gICAgICAvLyBhZnRlclJlbmRlcmVyPXtyZW5kZXJBZGRyfVxuICAgICAgey4uLnJlc3R9XG4gICAgLz5cbiAgKVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCB7aXNNb2JpbGV9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFBvc3RzUHJvdmlkZXJ9IGZyb20gJy4uLy4uL2NvbnRhaW5lcnMvcG9zdF9saXN0JztcbmltcG9ydCB7IEJsb2dUb3BEb3duIH0gZnJvbSBcIi4uL3V0aWxfY29tcC9sYXlvdXRcIjtcbmltcG9ydCBMaXN0LCB7IFBhZ2luZ0xpc3QgfSBmcm9tICcuLi91dGlsX2NvbXAvbGlzdCc7XG5pbXBvcnQge1JvdXRlc30gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtUaWNrSW5kaWNhdG9yfSBmcm9tICcuLi91dGlsX2NvbXAvcHJvZ3Jlc3NfaW5kaWNhdG9yJztcblxuY29uc3QgbGlzdEl0ZW1SZW5kZXIgPSAoe2l0ZW06IHBvc3R9KSA9PiAoXG4gIDxMaW5rIGtleT17cG9zdC5pZH0gdG89e2Ake1JvdXRlcy5zdG9yaWVzfS8ke3Bvc3QuaWR9YH0+XG4gICAge3Bvc3QudGl0bGV9XG4gIDwvTGluaz5cbik7XG5cbmNvbnN0IE1vYmlsZVBvc3RMaXN0ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQb3N0c1Byb3ZpZGVyPlxuICAgICAgeyhwb3N0cykgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSb3V0ZXI+XG4gICAgICAgICAgICA8TGlzdFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwb3N0LWxpc3RcIlxuICAgICAgICAgICAgICBkYXRhPXtwb3N0c31cbiAgICAgICAgICAgICAgaXRlbVJlbmRlcmVyPXtsaXN0SXRlbVJlbmRlcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICAgIClcbiAgICAgIH19XG4gICAgPC9Qb3N0c1Byb3ZpZGVyPlxuICApXG59O1xuXG5jbGFzcyBQY1Bvc3RMaXN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlclRpY2sgPSAoe1xuICAgIGN1cnJlbnRQYWdlSW5kZXgsXG4gICAgdG90YWxQYWdlczogdG90YWwsXG4gICAgbmV4dFxuICB9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUaWNrSW5kaWNhdG9yXG4gICAgICAgIGN1cnJlbnQ9e2N1cnJlbnRQYWdlSW5kZXh9XG4gICAgICAgIHRvdGFsPXt0b3RhbH1cbiAgICAgICAgb25DbGljaz17bmV4dH1cbiAgICAgICAgZml4ZWRUb3BcbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJMaXN0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8UG9zdHNQcm92aWRlcj5cbiAgICAgICAgeyhwb3N0cykgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um91dGVyPlxuICAgICAgICAgICAgICA8UGFnaW5nTGlzdFxuICAgICAgICAgICAgICAgIHBhZ2luZ09wdGlvbj17e1xuICAgICAgICAgICAgICAgICAgZGF0YTogcG9zdHMsXG4gICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICAgICAgICAgICAgICBpbmZpbml0ZUxvb3BNb2RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgbGlzdE9wdGlvbj17e1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAncG9zdC1saXN0JyxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZW5kZXJlcjogbGlzdEl0ZW1SZW5kZXIsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlclRpY2t9XG4gICAgICAgICAgICAgIDwvUGFnaW5nTGlzdD5cbiAgICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICAgIClcbiAgICAgICAgfX1cbiAgICAgIDwvUG9zdHNQcm92aWRlcj5cbiAgICApXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8QmxvZ1RvcERvd24gdG9wPVwi5paH5a2XXCIgZG93bj17dGhpcy5yZW5kZXJMaXN0KCl9IHBhZGRpbmc9XCIwIDEwcHhcIiAvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIGlzTW9iaWxlKClcbiAgICAgID8gPE1vYmlsZVBvc3RMaXN0IC8+XG4gICAgICA6IDxQY1Bvc3RMaXN0IC8+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQgeyBCbG9nVG9wRG93biB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi91dGlsX2NvbXAvbGlzdCc7XG5pbXBvcnQge2RlZmF1bHQgYXMgUGhvdG9Hcm91cHNQcm92aWRlcn0gZnJvbSAnLi4vLi4vY29udGFpbmVycy9waG90b19ncm91cHMnO1xuaW1wb3J0IHtSb3V0ZXN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuY29uc3QgUGhvdG9Hcm91cHMgPSAoKSA9PiB7XG5cbiAgcmV0dXJuIChcbiAgICA8UGhvdG9Hcm91cHNQcm92aWRlcj5cbiAgICAgIHsocGhvdG9Hcm91cHMpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Um91dGVyPlxuICAgICAgICAgICAgPExpc3RcbiAgICAgICAgICAgICAgZGF0YT17cGhvdG9Hcm91cHN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBob3RvLWdyb3VwLXRpdGxlLWxpc3RcIlxuICAgICAgICAgICAgICBpdGVtUmVuZGVyZXI9e1xuICAgICAgICAgICAgICAgICh7aXRlbTogZ3JvdXB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8TGluayBrZXk9e2dyb3VwLmlkfSB0bz17YCR7Um91dGVzLnBob3RvR3JvdXBzfS8ke2dyb3VwLmlkfWB9PlxuICAgICAgICAgICAgICAgICAgICB7Z3JvdXAudGl0bGV9XG4gICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvUGhvdG9Hcm91cHNQcm92aWRlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIHJldHVybiBpc01vYmlsZSgpXG4gICAgPyA8UGhvdG9Hcm91cHMgLz5cbiAgICA6IDxCbG9nVG9wRG93biB0b3A9XCLnhafniYdcIiBkb3duPXs8UGhvdG9Hcm91cHMgLz59IHBhZGRpbmc9XCIwIDEwcHhcIiAvPlxufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgeyBkaWZmQ1NQb3N0cyB9IGZyb20gJy4uLy4uL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5pbXBvcnQgeyBCbG9nVG9wRG93biB9IGZyb20gXCIuLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgeyBhcHBlbmRQb3N0VG9Mb2NhbCBhcyBtYXJrUG9zdEFzUmVhZCB9IGZyb20gJy4uLy4uL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi91dGlsX2NvbXAvbGlzdCc7XG5pbXBvcnQge2xvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXksIFJvdXRlc30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7TG9jYWxTdG9yYWdlQ29udGV4dH0gZnJvbSAnLi4vLi4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcblxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGxpc3QgPSAoXG4gICAgPExpc3RcbiAgICAgIGNsYXNzTmFtZT1cInBvc3QtbGlzdFwiXG4gICAgICBkYXRhPXtkaWZmQ1NQb3N0cygpfVxuICAgICAgaXRlbVJlbmRlcmVyPXtcbiAgICAgICAgKHtpdGVtOiBpZH0pID0+IChcbiAgICAgICAgICA8TGlua1xuICAgICAgICAgICAga2V5PXtpZH1cbiAgICAgICAgICAgIHRvPXtgJHtSb3V0ZXMuc3Rvcmllc30vJHtpZH1gfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge21hcmtQb3N0QXNSZWFkKGlkKX19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2lkLnNsaWNlKDEyKX1cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAvPlxuICApO1xuXG4gIGNvbnN0IGxvY2FsU3RvcmFnZUNvbnRleHQgPSB1c2VDb250ZXh0KExvY2FsU3RvcmFnZUNvbnRleHQpO1xuXG4gIGNvbnN0IHNob3dVcGRhdGVzID0gbG9jYWxTdG9yYWdlQ29udGV4dFtcbiAgICBsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5LkVOQUJMRV9VUERBVEVTX0VOVFJZXG4gIF07XG5cbiAgcmV0dXJuIHNob3dVcGRhdGVzICYmIChcbiAgICA8Um91dGVyPlxuICAgICAgPEJsb2dUb3BEb3duIHRvcD1cIuacgOi/keabtOaWsFwiIGRvd249e2xpc3R9IHBhZGRpbmc9XCIwIDEwcHhcIiAvPlxuICAgIDwvUm91dGVyPlxuICApXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZSwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmNvbnN0IExpc3RJdGVtTGluayA9ICh7IHRvLCBvbkNsaWNrLCAuLi5yZXN0IH0pID0+IChcbiAgPFJvdXRlXG4gICAgcGF0aD17dG99XG4gICAgY2hpbGRyZW49eyh7IG1hdGNoIH0pID0+IChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9e21hdGNoID8gXCJhY3RpdmVcIiA6IFwiXCJ9XG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2sgfHwgKCgpID0+IHt9KX1cbiAgICAgID5cbiAgICAgICAgPExpbmsgdG89e3RvfSB7Li4ucmVzdH0gLz5cbiAgICAgIDwvbGk+XG4gICAgKX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtTGluazsiLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZSBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBMaW5rfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgeyBnZW5TdmdMb2dvIH0gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbmltcG9ydCB7Um91dGVzfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XG5pbXBvcnQgTGlzdEl0ZW1MaW5rIGZyb20gJy4uL2xpc3RfaXRlbV9saW5rJztcbmltcG9ydCAnLi9zdHlsZS5zY3NzJ1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IFtjbG9zZWQsIHRvZ2dsZU5hdl0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgYXR0ciA9IGNsb3NlZCA/IHsnZGF0YS1jbG9zZSc6IHRydWV9IDoge307XG4gIGNvbnN0IGNsb3NlID0gKCkgPT4ge3RvZ2dsZU5hdih0cnVlKX07XG4gIHJldHVybiAoXG4gICAgPFJvdXRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWUoXCJ0b3AtYmFyXCIsIHtcbiAgICAgICAgY2xvc2U6IGNsb3NlZFxuICAgICAgfSl9PlxuICAgICAgICA8TGluayB0bz17Um91dGVzLmhvbWV9PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImxvZ29cIlxuICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgX19odG1sOiBnZW5TdmdMb2dvKClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkNsaWNrPXtjbG9zZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0xpbms+XG4gICAgICAgIDx1bFxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1vYmlsZSBuYXZcIlxuICAgICAgICAgIHsuLi5hdHRyfVxuICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaWYgKGNsb3NlZCkge1xuICAgICAgICAgICAgICB0b2dnbGVOYXYoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8TGlzdEl0ZW1MaW5rIG9uQ2xpY2s9e2Nsb3NlfSB0bz17Um91dGVzLnBob3RvR3JvdXBzfT5KUEc8L0xpc3RJdGVtTGluaz5cbiAgICAgICAgICA8TGlzdEl0ZW1MaW5rIG9uQ2xpY2s9e2Nsb3NlfSB0bz17Um91dGVzLnN0b3JpZXN9PlRYVDwvTGlzdEl0ZW1MaW5rPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9Sb3V0ZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Z2VuU3ZnTG9nb30gZnJvbSBcIkB6aG91amlhaGFvL3V0aWxzXCI7XG5cbi8qKlxuICog5Y2a5a6iIExPR09cbiAqIEBwYXJhbSB7c3RyaW5nfSBzaXplIFsnc21hbGwnLCAnbWlkZGxlJywgJ2JpZyddXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICh7c2l6ZVN0cn0pID0+IHtcbiAgY29uc3Qgc2l6ZU1hcCA9IHtcbiAgICBzbWFsbDogMyxcbiAgICBtaWRkbGU6IDQsXG4gICAgYmlnOiA1XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ29cIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgX19odG1sOiBnZW5TdmdMb2dvKHNpemVNYXBbc2l6ZVN0cl0pXG4gICAgfX0vPlxuICApXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbiBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IHtuYXZJdGVtVHlwZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcblxuaW1wb3J0ICcuL2Jhc2UtbGluay5zY3NzJ1xuXG5jb25zdCBCYXNlTGluayA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGhyZWYsIHRleHQsIHR5cGUsIGNvbW1hbmQsIGNsYXNzTmFtZSwgLi4ucmVzdCB9ID0gcHJvcHM7XG5cbiAgaWYgKHR5cGUgPT09IG5hdkl0ZW1UeXBlLmNvbW1hbmQpIHtcbiAgICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPXtjbihcImNvbW1hbmQgYmFzZS1saW5rXCIsIGNsYXNzTmFtZSl9IGRhdGEtY21kPXtjb21tYW5kfT57dGV4dH08L3NwYW4+XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxhXG4gICAgICBjbGFzc05hbWU9e2NuKFwiYmFzZS1saW5rXCIsIGNsYXNzTmFtZSl9XG4gICAgICBocmVmPXtocmVmfVxuICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgIHsuLi5yZXN0fVxuICAgID57dGV4dH08L2E+XG4gICk7XG59O1xuXG5leHBvcnQgeyBCYXNlTGluayB9XG4iLCJpbXBvcnQgY24gZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IFNwYWNlQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvc3BhY2VfY29udGV4dCc7XG5cbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7U2V0dGluZ1BhbmVsfSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgVG9nZ2xlQnRuID0gKCkgPT4ge1xuICBjb25zdCBbY2xvc2VkLCB0b2dnbGVTZXR0aW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCB7IHNldExlZnRTcGFjZUNvbnRlbnQgfSA9IHVzZUNvbnRleHQoU3BhY2VDb250ZXh0KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldExlZnRTcGFjZUNvbnRlbnQoXG4gICAgICBjbG9zZWQgPyAnJyA6IDxTZXR0aW5nUGFuZWwgLz5cbiAgICApXG4gIH0sIFtjbG9zZWRdKTtcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVTZXR0aW5nKCFjbG9zZWQpfVxuICAgICAgc3R5bGU9e3tjdXJzb3I6ICdwb2ludGVyJ319XG4gICAgICBjbGFzc05hbWU9e2NuKFwic2V0dGluZy1idXR0b25cIiwgeyBjbG9zZWQ6ICFjbG9zZWQgfSl9XG4gICAgPlxuICAgICAge2Nsb3NlZCA/ICforr7nva4nIDogJ+WFs+mXrSd9XG4gICAgPC9zcGFuPlxuICApXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2dnbGVCdG47XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNuIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5cbmV4cG9ydCBjb25zdCBSYWRpb0J0biA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbGFiZWwgPSAn6YWN572u6aG5JyxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICAgb25UZXh0ID0gJ+W8gCcsXG4gICAgb2ZmVGV4dCA9ICflhbMnLFxuICAgIG9uQ2xpY2sgPSAoKSA9PiB7fSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IFtvbiwgdG9nZ2xlXSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBvbkNsaWNrKG9uKVxuICB9LCBbb25dKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcInJhZGlvLWJ1dHRvblwiLCB7b259KX0gb25DbGljaz17KCkgPT4ge1xuICAgICAgdG9nZ2xlKCFvbik7XG4gICAgfX0+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJsYWJlbFwiPntsYWJlbH3vvJo8L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJvbi10ZXh0XCI+e29uVGV4dH08L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJzbGFzaFwiPu+8jzwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm9mZi10ZXh0XCI+e29mZlRleHR9PC9zcGFuPlxuICAgIDwvZGl2PlxuICApXG59OyIsImltcG9ydCBSZWFjdCwge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QmxvZ1RvcERvd259IGZyb20gJy4uL3V0aWxfY29tcC9sYXlvdXQnO1xuaW1wb3J0IHtSYWRpb0J0bn0gZnJvbSAnLi4vdXRpbF9jb21wL3JhZGlvX2J0bic7XG5pbXBvcnQge0xvY2FsU3RvcmFnZUNvbnRleHQsIFNwYWNlQ29udGV4dH0gZnJvbSAnLi4vLi4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcbmltcG9ydCB7IGRlZmF1bHQgYXMgQmFzZUxpc3QgfSBmcm9tICcuLi91dGlsX2NvbXAvbGlzdC9iYXNlX2xpc3QnXG5pbXBvcnQgeyBCYXNlTGluayB9IGZyb20gJy4uL3V0aWxfY29tcC9jdXN0b21fbGluay9iYXNlX2xpbmsnO1xuXG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5pbXBvcnQge2xvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXl9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qge1xuICAgIHRvZ2dsZVNwYWNlR3VpZGVMaW5lLFxuICAgIHNob3dTcGFjZUd1aWRlTGluZVxuICB9ID0gdXNlQ29udGV4dChTcGFjZUNvbnRleHQpO1xuXG4gIGNvbnN0IGxvY2FsU3RvcmFnZUNvbnRleHQgPSB1c2VDb250ZXh0KExvY2FsU3RvcmFnZUNvbnRleHQpO1xuICBjb25zdCBzaG93VXBkYXRlc0VudHJ5ID0gbG9jYWxTdG9yYWdlQ29udGV4dFtcbiAgICBsb2NhbFN0b3JhZ2VQcmVmZXJlbmNlS2V5LkVOQUJMRV9VUERBVEVTX0VOVFJZXG4gIF07XG5cbiAgY29uc3QgdG9wU2V0dGluZ0l0ZW1zID0gW1xuICAgIDxSYWRpb0J0blxuICAgICAgbGFiZWw9e1wi5pyA6L+R5pu05pawXCJ9XG4gICAgICBkZWZhdWx0VmFsdWU9e3Nob3dVcGRhdGVzRW50cnl9XG4gICAgICBvbkNsaWNrPXsoc3RhdGUpID0+IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlQ29udGV4dC5zZXRMb2NhbFN0b3JhZ2VWYWwoXG4gICAgICAgICAgbG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5FTkFCTEVfVVBEQVRFU19FTlRSWSxcbiAgICAgICAgICBzdGF0ZVxuICAgICAgICApXG4gICAgICB9fVxuICAgIC8+LFxuICAgIDxSYWRpb0J0blxuICAgICAgbGFiZWw9e1wi5biD5bGA572R5qC8XCJ9XG4gICAgICBvbkNsaWNrPXt0b2dnbGVTcGFjZUd1aWRlTGluZX1cbiAgICAgIGRlZmF1bHRWYWx1ZT17c2hvd1NwYWNlR3VpZGVMaW5lfVxuICAgIC8+XG4gIF07XG5cbiAgY29uc3QgYm90dG9tU2V0dGluZ0l0ZW1zID0gW1xuICAgIDxCYXNlTGlua1xuICAgICAgY2xhc3NOYW1lPVwiZXhpdC1ibG9nXCJcbiAgICAgIHRleHQ9XCLpgIDlh7rljZrlrqJcIlxuICAgICAgdHlwZT1cImNvbW1hbmRcIlxuICAgICAgY29tbWFuZD1cImJsb2cgLWVcIlxuICAgIC8+XG4gIF07XG5cbiAgY29uc3QgcmVuZGVyUGFuZWwgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2V0dGluZy1wYW5lbFwiPlxuICAgICAgICA8QmFzZUxpc3RcbiAgICAgICAgICBkYXRhPXt0b3BTZXR0aW5nSXRlbXN9XG4gICAgICAgICAgaXRlbVJlbmRlcmVyPXsoe2l0ZW19KSA9PiBpdGVtfVxuICAgICAgICAvPlxuICAgICAgICA8QmFzZUxpc3RcbiAgICAgICAgICBjbGFzc05hbWU9XCJib3R0b20tc2V0dGluZy1saXN0XCJcbiAgICAgICAgICBkYXRhPXtib3R0b21TZXR0aW5nSXRlbXN9XG4gICAgICAgICAgaXRlbVJlbmRlcmVyPXsoe2l0ZW19KSA9PiBpdGVtfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEJsb2dUb3BEb3duIGZ1bGxIZWlnaHQgZG93bj17cmVuZGVyUGFuZWwoKX0vPlxuICApXG59IiwiaW1wb3J0IHsgaXNNb2JpbGUgfSBmcm9tIFwiQHpob3VqaWFoYW8vdXRpbHNcIlxuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vYmlsZU5hdiB9IGZyb20gJy4vbW9iaWxlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgcGNOYXYgfSBmcm9tICcuL3BjJztcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5jb25zdCBOYXYgPSBpc01vYmlsZSgpID8gbW9iaWxlTmF2IDogcGNOYXY7XG5cbmV4cG9ydCBkZWZhdWx0IE5hdjtcblxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQge2xvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXksIFJvdXRlc30gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xuXG5pbXBvcnQgeyBCbG9nVG9wRG93biB9IGZyb20gXCIuLi8uLi91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQgTG9nbyBmcm9tICcuLi8uLi91dGlsX2NvbXAvbG9nbyc7XG5pbXBvcnQgTGlzdEl0ZW1MaW5rIGZyb20gJy4uL2xpc3RfaXRlbV9saW5rJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgQmFzZUxpc3QgfSBmcm9tICcuLi8uLi91dGlsX2NvbXAvbGlzdC9iYXNlX2xpc3QnXG5pbXBvcnQgeyBCYXNlTGluayB9IGZyb20gJy4uLy4uL3V0aWxfY29tcC9jdXN0b21fbGluay9iYXNlX2xpbmsnO1xuaW1wb3J0IHsgU2V0dGluZ0J0biB9IGZyb20gJy4uLy4uL3NldHRpbmdzJztcbmltcG9ydCB7TG9jYWxTdG9yYWdlQ29udGV4dH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBmb290ZXJEYXRhID0gW3tcbiAgICB0ZXh0OiAn6K645Y+v5Y2P6K6uJyxcbiAgICBocmVmOiAnaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLW5kLzQuMC9kZWVkLnpoJyxcbiAgICBjbGFzc05hbWU6ICdsaWNlbnNlJ1xuICB9LCB7XG4gICAgdGV4dDogJ0ZVRlUnLFxuICAgIGhyZWY6ICdodHRwczovL2Z1ZnUuaW0nLFxuICAgIGNsYXNzTmFtZTogJ2xpY2Vuc2UnXG4gIH0sIHtcbiAgICBjdXN0b21SZW5kZXJlcjogKCkgPT4ge1xuICAgICAgcmV0dXJuIDxTZXR0aW5nQnRuIC8+XG4gICAgfVxuICB9XTtcblxuICBjb25zdCBuYXZEYXRhID0gW3tcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGV4dDogJ+aWh+WtlycsXG4gICAgcm91dGU6IFJvdXRlcy5zdG9yaWVzXG4gIH0sIHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGV4dDogJ+ebuO+8iCB4acOgbmcg77yJ54mHJyxcbiAgICByb3V0ZTogUm91dGVzLnBob3RvR3JvdXBzXG4gIH1dO1xuXG4gIGNvbnN0IGxvY2FsU3RvcmFnZUNvbnRleHQgPSB1c2VDb250ZXh0KExvY2FsU3RvcmFnZUNvbnRleHQpO1xuXG4gIGNvbnN0IHNob3dVcGRhdGVzRW50cnkgPSBsb2NhbFN0b3JhZ2VDb250ZXh0W1xuICAgIGxvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXkuRU5BQkxFX1VQREFURVNfRU5UUllcbiAgXTtcblxuICBpZiAoc2hvd1VwZGF0ZXNFbnRyeSkge1xuICAgIG5hdkRhdGEucHVzaCh7XG4gICAgICB0eXBlOiAnbGluaycsXG4gICAgICB0ZXh0OiAnZGlmZicsXG4gICAgICByb3V0ZTogUm91dGVzLnVwZGF0ZXMsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGZvb3Rlckl0ZW1SZW5kZXIgPSAoe2l0ZW19KSA9PiB7XG4gICAgaWYgKGl0ZW0uY3VzdG9tUmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiBpdGVtLmN1c3RvbVJlbmRlcmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCYXNlTGlua1xuICAgICAgICB7Li4uaXRlbX1cbiAgICAgIC8+XG4gICAgKVxuICB9O1xuXG4gIGNvbnN0IGZvb3Rlcj0gKFxuICAgIDxCYXNlTGlzdFxuICAgICAgZGF0YT17Zm9vdGVyRGF0YX1cbiAgICAgIGNsYXNzTmFtZT1cImZvb3RlclwiXG4gICAgICBpdGVtUmVuZGVyZXI9e2Zvb3Rlckl0ZW1SZW5kZXJ9XG4gICAgLz5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxCbG9nVG9wRG93blxuICAgICAgYWxpZ25Ub3BJdGVtcz1cImNlbnRlclwiXG4gICAgICB3aXRoR3VpZGVMaW5lXG4gICAgICB0b3A9eyhcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dvLXdyYXBwZXJcIj5cbiAgICAgICAgICA8Um91dGVyPlxuICAgICAgICAgICAgPExpbmsgdG89e1JvdXRlcy5ob21lfT48TG9nbyAvPjwvTGluaz5cbiAgICAgICAgICA8L1JvdXRlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgZG93bj17KFxuICAgICAgICA8Um91dGVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2IHBjXCI+XG4gICAgICAgICAgICA8QmFzZUxpc3RcbiAgICAgICAgICAgICAgdG9wXG4gICAgICAgICAgICAgIGRhdGE9e25hdkRhdGF9XG4gICAgICAgICAgICAgIGl0ZW1SZW5kZXJlcj17KHtpdGVtfSkgPT4gKDxMaXN0SXRlbUxpbmsgdG89e2l0ZW0ucm91dGV9PntpdGVtLnRleHR9PC9MaXN0SXRlbUxpbms+KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7Zm9vdGVyfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1JvdXRlcj5cbiAgICAgICl9XG4gICAgLz5cbiAgKVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGV9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4vdXRpbF9jb21wL2Vycm9yX2JvdW5kYXJ5JztcbmltcG9ydCB7Um91dGVzfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUnO1xuaW1wb3J0IFBvc3RMaXN0IGZyb20gJy4vcG9zdF9saXN0JztcbmltcG9ydCBQaG90byBmcm9tICcuL3Bob3RvJztcbmltcG9ydCBQb3N0IGZyb20gJy4vcG9zdCc7XG5pbXBvcnQgUGhvdG9Hcm91cHMgZnJvbSAnLi9waG90b19ncm91cHMnO1xuaW1wb3J0IERpZmZDU1Bvc3RMaXN0IGZyb20gJy4vZGlmZl9jc19wb3N0cyc7XG5pbXBvcnQge1Bob3RvR3JvdXBXaXRoT2Zmc2V0IGFzIFBob3RvR3JvdXB9IGZyb20gJy4vcGhvdG9ncm91cCc7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50ID0gKCkgPT4gKFxuICA8Um91dGVyPlxuICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9e1JvdXRlcy5ob21lfSBjb21wb25lbnQ9e0hvbWV9IC8+XG4gICAgICA8Um91dGUgcGF0aD17Um91dGVzLnN0b3JpZXN9IGV4YWN0IGNvbXBvbmVudD17UG9zdExpc3R9IC8+XG4gICAgICA8Um91dGUgcGF0aD17Um91dGVzLnBob3RvR3JvdXBzfSBleGFjdCBjb21wb25lbnQ9e1Bob3RvR3JvdXBzfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9e1JvdXRlcy5waG90b0dyb3VwfSBjb21wb25lbnQ9e1Bob3RvR3JvdXB9IC8+XG4gICAgICA8Um91dGUgcGF0aD17Um91dGVzLnVwZGF0ZXN9IGNvbXBvbmVudD17RGlmZkNTUG9zdExpc3R9IC8+XG4gICAgICA8Um91dGUgcGF0aD17Um91dGVzLnBob3RvfSBjb21wb25lbnQ9e1Bob3RvfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9e1JvdXRlcy5zdG9yeX0gY29tcG9uZW50PXtQb3N0fSAvPlxuICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgPC9Sb3V0ZXI+XG4pO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIE5hdiB9IGZyb20gJy4vbmF2J1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWUgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCB7aXNNb2JpbGV9IGZyb20gXCJAemhvdWppYWhhby91dGlsc1wiO1xuXG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSBcIi4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0XCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgUGNMYXlvdXR9IGZyb20gJy4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L2xyJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBNb2JpbGVMYXlvdXR9IGZyb20gJy4vY29tcG9uZW50cy91dGlsX2NvbXAvbGF5b3V0L3RkJztcbmltcG9ydCB7IFNwYWNlQ29udGV4dCwgTG9jYWxTdG9yYWdlQ29udGV4dCB9IGZyb20gJy4vY29udGV4dC9zcGFjZV9jb250ZXh0JztcblxuaW1wb3J0IHtOYXYsIENvbnRlbnR9IGZyb20gJy4vY29tcG9uZW50cy9tYWluJztcbmltcG9ydCB7IFdpdGhHdWlkZUxpbmUgfSBmcm9tICcuL2NvbXBvbmVudHMvdXRpbF9jb21wL2F0dGFjaF9ndWlkZV9saW5lJztcbmltcG9ydCB7IEVtcHR5RGl2IH0gZnJvbSAnLi9jb21wb25lbnRzL3V0aWxfY29tcCc7XG5pbXBvcnQge2xvYWRMb2NhbFN0b3JhZ2VWYWx1ZXMsIGxvYWRMb2NhbFN0b3JhZ2VWYWx1ZXNGcm9tfSBmcm9tICcuL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5pbXBvcnQge2xvY2FsU3RvcmFnZVByZWZlcmVuY2VLZXl9IGZyb20gJy4vY29uZmlnJztcblxuY29uc3QgUGNMYXlvdXRXaXRoR3VpZGVMaW5lID0gV2l0aEd1aWRlTGluZShQY0xheW91dCk7XG5jb25zdCBOYXZXaXRoR3VpZGVMaW5lID0gV2l0aEd1aWRlTGluZShOYXYpO1xuXG5jb25zdCBFbXB0eURpdldpdGhHdWlkZUxpbmUgPSBXaXRoR3VpZGVMaW5lKEVtcHR5RGl2KTtcblxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gZ2xvYmFsIGFwcCBzdGF0ZVxuICBzdGF0ZSA9IHtcbiAgICBzaWRlU3BhY2VDb250ZW50OiBudWxsLFxuICAgIGxlZnRTcGFjZUNvbnRlbnQ6IG51bGwsXG5cbiAgICAvLyDphY3nva7poblcblxuICAgIC8vIGxvY2FsU3RvcmFnZSDphY3nva7poblcbiAgICAuLi5sb2FkTG9jYWxTdG9yYWdlVmFsdWVzKClcbiAgfTtcblxuICB0b2dnbGVTcGFjZUd1aWRlTGluZSA9IChzdGF0ZSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe3Nob3dTcGFjZUd1aWRlTGluZTogc3RhdGV9LCAoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgbG9jYWxTdG9yYWdlUHJlZmVyZW5jZUtleS5TSE9XX1NQQUNFX0dVSURFTElORSxcbiAgICAgICAgc3RhdGUsXG4gICAgICApXG4gICAgfSlcbiAgfTtcblxuICBzZXRTcGFjZUNvbnRleHQgPSAoa2V5LCB2YWwpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtba2V5XTogdmFsfSk7XG4gIH07XG5cbiAgc2V0TG9jYWxTdG9yYWdlVmFsID0gKGtleSwgdmFsKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7W2tleV06IHZhbH0sICgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsKTtcbiAgICB9KTtcbiAgfTtcblxuICBnZXRMb2NhbFN0b3JhZ2VWYWwgPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVba2V5XTtcbiAgfTtcblxuICByZW5kZXJQY1ZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgU2lkZVNwYWNlV2l0aEd1aWRlTGluZSA9IFdpdGhHdWlkZUxpbmUoKCkgPT4gdGhpcy5zdGF0ZS5zaWRlU3BhY2VDb250ZW50KTtcbiAgICByZXR1cm4gKFxuICAgICAgPFNwYWNlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICBzZXRMZWZ0U3BhY2VDb250ZW50OiAodmFsKSA9PiB7IHRoaXMuc2V0U3BhY2VDb250ZXh0KCdsZWZ0U3BhY2VDb250ZW50JywgdmFsKX0sXG4gICAgICAgIHNldFNpZGVTcGFjZUNvbnRlbnQ6ICh2YWwpID0+IHsgdGhpcy5zZXRTcGFjZUNvbnRleHQoJ3NpZGVTcGFjZUNvbnRlbnQnLCB2YWwpfSxcbiAgICAgICAgdG9nZ2xlU3BhY2VHdWlkZUxpbmU6IHRoaXMudG9nZ2xlU3BhY2VHdWlkZUxpbmUsXG4gICAgICAgIHNob3dTcGFjZUd1aWRlTGluZTogdGhpcy5zdGF0ZS5zaG93U3BhY2VHdWlkZUxpbmUsXG4gICAgICB9fT5cbiAgICAgICAgPExvY2FsU3RvcmFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tcbiAgICAgICAgICAuLi5sb2FkTG9jYWxTdG9yYWdlVmFsdWVzRnJvbSh0aGlzLnN0YXRlKSxcbiAgICAgICAgICBnZXRMb2NhbFN0b3JhZ2VWYWw6IHRoaXMuZ2V0TG9jYWxTdG9yYWdlVmFsLFxuICAgICAgICAgIHNldExvY2FsU3RvcmFnZVZhbDogdGhpcy5zZXRMb2NhbFN0b3JhZ2VWYWwsXG4gICAgICAgIH19PlxuICAgICAgICAgIDxQY0xheW91dFdpdGhHdWlkZUxpbmVcbiAgICAgICAgICAgIHRvcFxuICAgICAgICAgICAgYm90dG9tXG4gICAgICAgICAgICBsZWZ0PXsoXG4gICAgICAgICAgICAgIDxDb2x1bW5zXG4gICAgICAgICAgICAgICAgY29scz17W1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sZWZ0U3BhY2VDb250ZW50LFxuICAgICAgICAgICAgICAgICAgPE5hdldpdGhHdWlkZUxpbmUgcmlnaHQgbGVmdCAvPixcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2lkZVNwYWNlQ29udGVudFxuICAgICAgICAgICAgICAgICAgICA/IDxTaWRlU3BhY2VXaXRoR3VpZGVMaW5lIHJpZ2h0IC8+XG4gICAgICAgICAgICAgICAgICAgIDogPEVtcHR5RGl2V2l0aEd1aWRlTGluZSByaWdodCAvPlxuICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgcmlnaHQ9eyhcbiAgICAgICAgICAgICAgPENvbnRlbnQgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Mb2NhbFN0b3JhZ2VDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgPC9TcGFjZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKVxuICB9O1xuXG4gIHJlbmRlck1vYmlsZVZpZXcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2JpbGVMYXlvdXRcbiAgICAgICAgdG9wPXs8TmF2IC8+fVxuICAgICAgICBkb3duPXs8Q29udGVudCAvPn1cbiAgICAgIC8+XG4gICAgKVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpc01ibCA9IGlzTW9iaWxlKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWUoJ0FwcCcsIHttb2JpbGU6IGlzTWJsfSl9PlxuICAgICAgICAgIHtpc01ibCA/IHRoaXMucmVuZGVyTW9iaWxlVmlldygpIDogdGhpcy5yZW5kZXJQY1ZpZXcoKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwb2xsb0NsaWVudCBmcm9tIFwiYXBvbGxvLWJvb3N0XCI7XG5pbXBvcnQgeyBBcG9sbG9Qcm92aWRlciB9IGZyb20gXCJyZWFjdC1hcG9sbG9cIjtcblxuaW1wb3J0IHsgJCwgaXNFbGVtZW50RW1wdHkgfSBmcm9tICdAemhvdWppYWhhby91dGlscydcbmltcG9ydCB7IHF1ZXJ5Q292ZXJzIH0gZnJvbSBcIi4vY29udGFpbmVycy9jb3ZlclwiO1xuaW1wb3J0IHsgcXVlcnlQb3N0TGlzdCB9IGZyb20gJy4vY29udGFpbmVycy9wb3N0X2xpc3QnO1xuaW1wb3J0IHsgcXVlcnlQaG90b0dyb3VwcyB9IGZyb20gJy4vY29udGFpbmVycy9waG90b19ncm91cHMnO1xuaW1wb3J0IHsgcXVlcnlQaG90b0dyb3VwIH0gZnJvbSAnLi9jb250YWluZXJzL3Bob3RvX2dyb3VwJztcbmltcG9ydCB7IHBob3RvR3JvdXBzSWRBcnIgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBwcm9taXNlT25lQnlPbmUgfSBmcm9tICdAemhvdWppYWhhby91dGlscyc7XG5cbmltcG9ydCAnLi9zdHlsZXMvaW5kZXguc2Nzcyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmltcG9ydCB7c2F2ZVBvc3RzRGF0YVRvTG9jYWxTdG9yYWdlfSBmcm9tICcuL3V0aWxzL2xvY2FsX3N0b3JhZ2VfbWFuYWdlcic7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoe1xuICB1cmk6IFwiaHR0cHM6Ly9hcGkuempoLmltL2dyYXBocWxcIlxufSk7XG5cbmNvbnN0IEFwcFdyYXBwZXIgPSAoKSA9PiAoXG4gIDxBcG9sbG9Qcm92aWRlciBjbGllbnQ9e2NsaWVudH0+XG4gICAgPEFwcCAvPlxuICA8L0Fwb2xsb1Byb3ZpZGVyPlxuKTtcblxuXG5jb25zdCBCbG9nID0gICgkd3JhcHBlciwgdW5tb3VudCkgPT4ge1xuICBpZih1bm1vdW50KSB7XG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSgkd3JhcHBlcik7XG4gIH0gZWxzZSB7XG4gICAgUmVhY3RET00ucmVuZGVyKDxBcHBXcmFwcGVyIC8+LCAkd3JhcHBlcik7XG4gIH1cbn07XG5cbmNvbnN0IGxvYWRJbWFnZXMgPSAoY2JGbikgPT4ge1xuICBjb25zdCBwcm9taXNlUXVldWUgPSBwaG90b0dyb3Vwc0lkQXJyLm1hcChpZCA9PiAoKSA9PlxuICAgIGNsaWVudC5xdWVyeSh7XG4gICAgICBxdWVyeTogcXVlcnlQaG90b0dyb3VwLFxuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIGlkXG4gICAgICB9XG4gICAgfSlcbiAgKTtcblxuICByZXR1cm4gcHJvbWlzZU9uZUJ5T25lKFxuICAgIHByb21pc2VRdWV1ZSxcbiAgICBjYkZuXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNob3J0b3B0czogJ2UnLFxuICBhc3luYyBoYW5kbGVyKHBhcmFtc09iaiA9IHt9LCBwMiwgcDMsIHA0LCBwcmludCkge1xuICAgIGNvbnN0IHtlOmV4aXR9ID0gcGFyYW1zT2JqO1xuICAgIGNvbnN0ICRibG9nV3JhcHBlciA9ICQoJyNndWknKTtcbiAgICBjb25zdCAkYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICBpZihleGl0KSB7XG4gICAgICBCbG9nKCRibG9nV3JhcHBlciwgZXhpdCk7XG4gICAgICAkYmxvZ1dyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnYmxvZycpO1xuICAgICAgJGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnd2hpdGUtYmcnKTtcbiAgICAgIHJldHVybiBcIkdvb2RieWVcIjtcbiAgICB9IGVsc2UgaWYgKGlzRWxlbWVudEVtcHR5KCRibG9nV3JhcHBlcikpIHtcbiAgICAgICRib2R5LmNsYXNzTGlzdC5hZGQoJ3doaXRlLWJnJyk7XG5cbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeSh7cXVlcnk6IHF1ZXJ5Q292ZXJzfSk7XG4gICAgICBwcmludChcIuWKoOi9veWNmuWuoumFjee9riBbRE9ORV1cIiwgdHJ1ZSk7XG5cbiAgICAgIGNvbnN0IHBvc3REYXRhID0gYXdhaXQgY2xpZW50LnF1ZXJ5KHtxdWVyeTogcXVlcnlQb3N0TGlzdH0pO1xuICAgICAgc2F2ZVBvc3RzRGF0YVRvTG9jYWxTdG9yYWdlKHBvc3REYXRhKTtcbiAgICAgIHByaW50KFwi5Yqg6L295Y2a5paH55uu5b2VIFtET05FXVwiLCB0cnVlKTtcblxuICAgICAgYXdhaXQgY2xpZW50LnF1ZXJ5KHtxdWVyeTogcXVlcnlQaG90b0dyb3Vwc30pO1xuICAgICAgcHJpbnQoXCLliqDovb3nhafniYfnm67lvZUgW0RPTkVdXCIsIHRydWUpO1xuXG4gICAgICBhd2FpdCBsb2FkSW1hZ2VzKChpZHgpID0+IHtcbiAgICAgICAgcHJpbnQoYOWKoOi9veesrCAke2lkeCArIDF9IOe7hOeFp+eJh+S/oeaBryBbRE9ORV1gLCB0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICAkYmxvZ1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnYmxvZycpO1xuICAgICAgQmxvZygkYmxvZ1dyYXBwZXIpO1xuICAgICAgcmV0dXJuIFwiV2VsY29tZVwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnByb2dyZXNzLW51bWJlciB7XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlOyB9XFxuICAucHJvZ3Jlc3MtbnVtYmVyIC5jdXJyZW50IHtcXG4gICAgY29sb3I6ICMwMDA7XFxuICAgIGZvbnQtc2l6ZTogMTZweDsgfVxcbiAgLnByb2dyZXNzLW51bWJlciAudG90YWwge1xcbiAgICBjb2xvcjogI2NjYztcXG4gICAgZm9udC1zaXplOiAxMnB4OyB9XFxuXFxuLnRpY2staW5kaWNhdG9yIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IH1cXG4gIC50aWNrLWluZGljYXRvci5hYnNvbHV0ZS1yaWdodCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwOyB9XFxuICAudGljay1pbmRpY2F0b3IuZml4ZWQtdG9wIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDA7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OyB9XFxuICAgIC50aWNrLWluZGljYXRvci5maXhlZC10b3A6aG92ZXIge1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgICAgIC50aWNrLWluZGljYXRvci5maXhlZC10b3A6aG92ZXIgLnRpY2sge1xcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmODg4ODsgfVxcbiAgICAgICAgLnRpY2staW5kaWNhdG9yLmZpeGVkLXRvcDpob3ZlciAudGljay5hY3RpdmUge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwOyB9XFxuICAudGljay1pbmRpY2F0b3IudmVydGljYWwge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuICAgIC50aWNrLWluZGljYXRvci52ZXJ0aWNhbDpob3ZlciB7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgICAgLnRpY2staW5kaWNhdG9yLnZlcnRpY2FsOmhvdmVyIC50aWNrIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZjg4ODg7IH1cXG4gICAgICAgIC50aWNrLWluZGljYXRvci52ZXJ0aWNhbDpob3ZlciAudGljay5hY3RpdmU6OmJlZm9yZSB7XFxuICAgICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICAgIHRvcDogLTdweDsgfVxcbiAgICAudGljay1pbmRpY2F0b3IudmVydGljYWwgLnRpY2sge1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICB3aWR0aDogNnB4O1xcbiAgICAgIGhlaWdodDogMXB4O1xcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgICAgdHJhbnNpdGlvbjogYWxsIC4zczsgfVxcbiAgICAgIC50aWNrLWluZGljYXRvci52ZXJ0aWNhbCAudGljazpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDsgfVxcbiAgICAgIC50aWNrLWluZGljYXRvci52ZXJ0aWNhbCAudGljay5hY3RpdmU6OmJlZm9yZSB7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICAgICAgY29udGVudDogYXR0cihkYXRhLXRpdGxlKTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHdpZHRoOiAxMDBweDtcXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgICAgICAgcmlnaHQ6IDE3cHg7XFxuICAgICAgICB0b3A6IC02cHg7XFxuICAgICAgICBmb250LXNpemU6IDEwcHg7XFxuICAgICAgICB0cmFuc2l0aW9uOiAuMnM7IH1cXG4gICAgICAudGljay1pbmRpY2F0b3IudmVydGljYWwgLnRpY2suYWN0aXZlIHtcXG4gICAgICAgIHdpZHRoOiAxMnB4O1xcbiAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwOyB9XFxuICAudGljay1pbmRpY2F0b3IgLnRpY2sge1xcbiAgICB3aWR0aDogMXB4O1xcbiAgICBoZWlnaHQ6IDZweDtcXG4gICAgYmFja2dyb3VuZDogI2NjYztcXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7IH1cXG4gICAgLnRpY2staW5kaWNhdG9yIC50aWNrLmFjdGl2ZSB7XFxuICAgICAgd2lkdGg6IDFweDtcXG4gICAgICBoZWlnaHQ6IDEycHg7XFxuICAgICAgYmFja2dyb3VuZDogIzAwMDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0cmFuc2l0aW9uOiBhbGwgLjFzO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpbGwtY2hhbmdlOiBvcGFjaXR5LCB0cmFuc2Zvcm07XFxuICBtaXgtYmxlbmQtbW9kZTogZGlmZmVyZW5jZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG9wYWNpdHk6IDA7XFxuICBjb2xvcjogI2NjYzsgfVxcblxcbi50b29sdGlwLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAudG9vbHRpcC13cmFwcGVyOmhvdmVyIC50b29sdGlwIHtcXG4gICAgb3BhY2l0eTogMTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsInZhciBlc2NhcGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qc1wiKTtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2V0dGluZy1wYW5lbCB7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgfVxcbiAgLnNldHRpbmctcGFuZWwgLmJvdHRvbS1zZXR0aW5nLWxpc3Qge1xcbiAgICBjb2xvcjogI2NjYzsgfVxcbiAgLnNldHRpbmctcGFuZWwgLmV4aXQtYmxvZzpob3ZlcjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDZweDtcXG4gICAgaGVpZ2h0OiA2cHg7XFxuICAgIGJhY2tncm91bmQ6IHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi4vLi4vaWNvbnMvcG93ZXItb2ZmLnN2Z1wiKSkgKyBcIikgbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87IH1cXG5cXG4uc2V0dGluZy1idXR0b246aG92ZXI6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogNnB4O1xcbiAgaGVpZ2h0OiA2cHg7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4uLy4uL2ljb25zL2NvbmZpZy5zdmdcIikpICsgXCIpIG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtc2l6ZTogYXV0bzsgfVxcblxcbi5zZXR0aW5nLWJ1dHRvbi5jbG9zZWQ6aG92ZXI6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogNnB4O1xcbiAgaGVpZ2h0OiA2cHg7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4uLy4uL2ljb25zL2Nyb3NzLnN2Z1wiKSkgKyBcIikgbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1zaXplOiBhdXRvOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwidmFyIGVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7XFxuLmJhc2UtbGlzdCB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwOyB9XFxuICAuYmFzZS1saXN0IGxpLmJhc2UtbGlzdC1pdGVtIHtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4OyB9XFxuICAgIC5iYXNlLWxpc3QgbGkuYmFzZS1saXN0LWl0ZW0gYVt0YXJnZXQ9XFxcIl9ibGFua1xcXCJdOmhvdmVyOmFmdGVyIHtcXG4gICAgICBjb250ZW50OiAnJztcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHdpZHRoOiA2cHg7XFxuICAgICAgaGVpZ2h0OiA2cHg7XFxuICAgICAgYmFja2dyb3VuZDogdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9pY29ucy9saW5rLW91dC5zdmdcIikpICsgXCIpIG5vLXJlcGVhdDtcXG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87IH1cXG5cXG4uQXBwOm5vdCgubW9iaWxlKSAuYmFzZS1saXN0IGxpLmJhc2UtbGlzdC1pdGVtOmhvdmVyLCAuQXBwOm5vdCgubW9iaWxlKSAuYmFzZS1saXN0IGxpLmJhc2UtbGlzdC1pdGVtOmhvdmVyIGEge1xcbiAgY29sb3I6ICMwMDA7IH1cXG5cXG4uQXBwOm5vdCgubW9iaWxlKSAuYmFzZS1saXN0IGxpLmJhc2UtbGlzdC1pdGVtOmhvdmVyOmJlZm9yZSB7XFxuICBjb250ZW50OiAnXFxcXEI3JztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIG1hcmdpbi1sZWZ0OiAtMTBweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzcnIGhlaWdodD0nNycgdmlld0JveD0nMCAwIDcgNycgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSAlM0NwYXRoIGQ9J00xIDFMMi40MTU2IDIuNDE1Nkw2IDYnIHN0cm9rZT0nYmxhY2snLyUzRSAlM0NwYXRoIGQ9J00xIDZMNiAxJyBzdHJva2U9J2JsYWNrJy8lM0UgJTNDL3N2ZyUzRVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzYnIGhlaWdodD0nNicgdmlld0JveD0nMCAwIDYgNicgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSAlM0NwYXRoIGZpbGwtcnVsZT0nZXZlbm9kZCcgY2xpcC1ydWxlPSdldmVub2RkJyBkPSdNMC4yMTQ2NTcgNC40OTg3N0MwLjI2NjY2NCA0LjU4Mjk1IDAuMzIyMzc3IDQuNjYzODcgMC4zODE0OTMgNC43NDE0OEMwLjUzNTk5MyA0Ljk0NDMgMC44MzA4NCA0Ljk0MDgyIDEuMDEyMTcgNC43NjE1OVY0Ljc2MTU5QzEuMTU4ODMgNC42MTY2MyAxLjM4Mjk3IDQuNTg0NDkgMS41NjQ0NSA0LjY4MjRMMi4wNTc5NyA0Ljk0ODY2QzIuMjM5NDYgNS4wNDY1OCAyLjMyNTUxIDUuMjU5ODQgMi4yNjI4MSA1LjQ1NjI5VjUuNDU2MjlDMi4xODgxNiA1LjY5MDE5IDIuMzI0OTcgNS45NDE1MSAyLjU2ODU3IDUuOTcyMTVDMi44MjgxNiA2LjAwNDggMy4wOTI3OCA2LjAwNzk4IDMuMzU2MzUgNS45ODAxN0MzLjYwNTM1IDUuOTUzOSAzLjc0NzI1IDUuNjk4MTIgMy42NzExMiA1LjQ1OTU5VjUuNDU5NTlDMy42MDc4NCA1LjI2MTMyIDMuNjk0NjkgNS4wNDYwOSAzLjg3Nzg2IDQuOTQ3MjdMNC4zNTEyNyA0LjY5MTg2QzQuNTQyOTcgNC41ODg0MyA0Ljc3OTc1IDQuNjIyMzggNC45MzQ2NyA0Ljc3NTUxVjQuNzc1NTFDNS4xMjQzIDQuOTYyOTQgNS40MzIzIDQuOTY4OTUgNS41OTU0NCA0Ljc1ODA2QzUuNzIyNDEgNC41OTM5MyA1LjgzMDQ3IDQuNDE5MDQgNS45MTg3NSA0LjIzNjQ3QzYuMDIwNjggNC4wMjU2NSA1Ljg4MjIzIDMuNzg4ODYgNS42NTM2NiAzLjczODAxVjMuNzM4MDFDNS40NzAzMiAzLjY5NzIyIDUuMzM5OSAzLjUzNDU5IDUuMzM5OSAzLjM0Njc3VjIuODE1NDdDNS4zMzk5IDIuNjEyNjcgNS40ODA3MyAyLjQzNzA3IDUuNjc4NjkgMi4zOTMwMlYyLjM5MzAyQzUuOTE3NjMgMi4zMzk4NiA2LjA2NzYzIDIuMDk3MzcgNS45Njk5OSAxLjg3MjlDNS45MTQ4IDEuNzQ2MDUgNS44NDk2NyAxLjYyMTIyIDUuNzc0MzMgMS40OTkyN0M1LjcxNjg5IDEuNDA2MzEgNS42NTQ5NCAxLjMxNzMxIDUuNTg4ODcgMS4yMzIzN0M1LjQ0NjkyIDEuMDQ5ODggNS4xNzk3NyAxLjA1MjQgNS4wMTUzNCAxLjIxNDkyVjEuMjE0OTJDNC44ODI3MiAxLjM0NjAxIDQuNjgwMDMgMS4zNzUwNyA0LjUxNTkyIDEuMjg2NTNMMy45NzIyNCAwLjk5MzIxMkMzLjgwMjg5IDAuOTAxODQ0IDMuNzIyNTkgMC43MDI4NDMgMy43ODExIDAuNTE5NTI0VjAuNTE5NTI0QzMuODUwMTIgMC4zMDMyODIgMy43MjU1NSAwLjA3MDY2ODIgMy41MDEwNyAwLjAzNzAxNTRDMy4yMTQ5OCAtMC4wMDU4NzI5OCAyLjkyMTk2IC0wLjAxMjg1MzkgMi42MzAyNSAwLjAxODEzMjhDMi40MTcyNSAwLjA0MDc1NzUgMi4yOTM1NyAwLjI1ODYwOSAyLjM1ODcgMC40NjI2NlYwLjQ2MjY2QzIuNDEyMTYgMC42MzAxNTYgMi4zMzg3OSAwLjgxMTk4MSAyLjE4NDA1IDAuODk1NDYzTDEuNjM3MDkgMS4xOTA1NUMxLjQ1OTk2IDEuMjg2MTIgMS4yNDExNyAxLjI1NDc1IDEuMDk4MDMgMS4xMTMyNlYxLjExMzI2QzAuOTI3MjE3IDAuOTQ0NDI5IDAuNjUxNzA2IDAuOTM0MDkgMC40OTQ4NjUgMS4xMTU5N0MwLjMyMDk3NCAxLjMxNzYzIDAuMTc3MzQ0IDEuNTM4MDMgMC4wNjU4MDkzIDEuNzcwNzhDLTAuMDM4MDk5NiAxLjk4NzYxIDAuMTA0OTA1IDIuMjMwMDQgMC4zMzk2MSAyLjI4MjI2VjIuMjgyMjZDMC41Mjg3OTcgMi4zMjQzNiAwLjY2MzM4MiAyLjQ5MjE4IDAuNjYzMzgyIDIuNjg1OTlMMC42NjMzODIgMy4yMDU2MUMwLjY2MzM4MiAzLjQwOTI0IDAuNTIxOTc4IDMuNTg1NTYgMC4zMjMyMDYgMy42Mjk3OVYzLjYyOTc5QzAuMDgxNjc2OCAzLjY4MzUyIC0wLjA2ODg4ODkgMy45Mjk3MyAwLjAzMjQwMzYgNC4xNTU0OEMwLjA4NDY0MzMgNC4yNzE5MSAwLjE0NTMzIDQuMzg2NTcgMC4yMTQ2NTcgNC40OTg3N1pNMi4xNjA1NSAzLjQ0ODk0QzIuNDI2NDYgMy44NzkzMyAzLjAxNTQgNC4wMjY3OSAzLjQ3NTk4IDMuNzc4MzFDMy45MzY1NiAzLjUyOTgyIDQuMDk0MzYgMi45Nzk0OCAzLjgyODQ1IDIuNTQ5MDlDMy41NjI1MyAyLjExODcgMi45NzM1OSAxLjk3MTIzIDIuNTEzMDIgMi4yMTk3MkMyLjA1MjQ0IDIuNDY4MjEgMS44OTQ2MyAzLjAxODU1IDIuMTYwNTUgMy40NDg5NFonIGZpbGw9J2JsYWNrJy8lM0UgJTNDL3N2ZyUzRVwiIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbkRPTVwiKSk7XG5cbnZhciB2ZW5kb3JzID0gWycnLCAnd2Via2l0JywgJ21veicsICdvJywgJ21zJ107XG52YXIgY2FuY2VsID0gJ2NsZWFyVGltZW91dCc7XG52YXIgcmFmID0gZmFsbGJhY2s7XG52YXIgY29tcGF0UmFmO1xuXG52YXIgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KHZlbmRvciwgaykge1xuICByZXR1cm4gdmVuZG9yICsgKCF2ZW5kb3IgPyBrIDoga1swXS50b1VwcGVyQ2FzZSgpICsgay5zdWJzdHIoMSkpICsgJ0FuaW1hdGlvbkZyYW1lJztcbn07XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICB2ZW5kb3JzLnNvbWUoZnVuY3Rpb24gKHZlbmRvcikge1xuICAgIHZhciByYWZLZXkgPSBnZXRLZXkodmVuZG9yLCAncmVxdWVzdCcpO1xuXG4gICAgaWYgKHJhZktleSBpbiB3aW5kb3cpIHtcbiAgICAgIGNhbmNlbCA9IGdldEtleSh2ZW5kb3IsICdjYW5jZWwnKTtcbiAgICAgIHJldHVybiByYWYgPSBmdW5jdGlvbiByYWYoY2IpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1tyYWZLZXldKGNiKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbi8qIGh0dHBzOi8vZ2l0aHViLmNvbS9jb21wb25lbnQvcmFmICovXG5cblxudmFyIHByZXYgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gZmFsbGJhY2soZm4pIHtcbiAgdmFyIGN1cnIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIG1zID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyciAtIHByZXYpKSxcbiAgICAgIHJlcSA9IHNldFRpbWVvdXQoZm4sIG1zKTtcbiAgcHJldiA9IGN1cnI7XG4gIHJldHVybiByZXE7XG59XG5cbmNvbXBhdFJhZiA9IGZ1bmN0aW9uIGNvbXBhdFJhZihjYikge1xuICByZXR1cm4gcmFmKGNiKTtcbn07XG5cbmNvbXBhdFJhZi5jYW5jZWwgPSBmdW5jdGlvbiAoaWQpIHtcbiAgd2luZG93W2NhbmNlbF0gJiYgdHlwZW9mIHdpbmRvd1tjYW5jZWxdID09PSAnZnVuY3Rpb24nICYmIHdpbmRvd1tjYW5jZWxdKGlkKTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IGNvbXBhdFJhZjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGNoYXJzZXQgXFxcIlVURi04XFxcIjtcXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LWZhbWlseTogUGluZ0ZhbmcgU0MsIFxcXCJcXFxcNUZBRVxcXFw4RjZGXFxcXDk2QzVcXFxcOUVEMVxcXCIsIEFyaWFsO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOyB9XFxuXFxuI2d1aS5ibG9nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDE7XFxuICB0b3A6IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxcblxcbi5BcHAge1xcbiAgaGVpZ2h0OiAxMDAlOyB9XFxuICAuQXBwLm1vYmlsZSB7XFxuICAgIGZvbnQtc2l6ZTogMTRweDsgfVxcblxcbi5oaWRlIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcblxcbi5tb2JpbGUgKiB7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOyB9XFxuXFxuY29kZSB7XFxuICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkNvdXJpZXIgTmV3XFxcIiwgbW9ub3NwYWNlOyB9XFxuXFxuLmxlZnQtd3JhcHBlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxMDBweCk7IH1cXG4gIC5sZWZ0LXdyYXBwZXIgYS5saWNlbnNlIHtcXG4gICAgd2lkdGg6IDkwcHg7XFxuICAgIGZvbnQtc2l6ZTogMTBweDtcXG4gICAgY29sb3I6ICNjY2M7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxldHRlci1wYXBlci1saXN0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDM0cHgpO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgYm9yZGVyLWJvdHRvbTogc29saWQgMnB4ICNmZjg4ODg7XFxuICBib3JkZXItdG9wOiBzb2xpZCAycHggI2ZmODg4ODtcXG4gIHBhZGRpbmctYm90dG9tOiAyOXB4OyB9XFxuICAubGV0dGVyLXBhcGVyLWxpc3QgbGkuYmFzZS1saXN0LWl0ZW0ge1xcbiAgICBsaW5lLWhlaWdodDogMjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcbiAgICAubGV0dGVyLXBhcGVyLWxpc3QgbGkuYmFzZS1saXN0LWl0ZW06YWZ0ZXIge1xcbiAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIGJvcmRlci1ib3R0b206IGRhc2hlZCAxcHggI2ZmODg4ODsgfVxcbiAgLmxldHRlci1wYXBlci1saXN0ICsgLmFkZHJlc3Mge1xcbiAgICBoZWlnaHQ6IDIxcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGNvbG9yOiAjZmY4ODg4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZSh1cmwpIHtcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgIH1cbiAgICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAgICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG4gICAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAgIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gICAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpKSB7XG4gICAgICAgIHJldHVybiAnXCInICsgdXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykgKyAnXCInXG4gICAgfVxuXG4gICAgcmV0dXJuIHVybFxufVxuIiwidmFyIGVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5yYWRpby1idXR0b24ge1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAucmFkaW8tYnV0dG9uOmhvdmVyOmFmdGVyIHtcXG4gICAgY29udGVudDogJyc7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB3aWR0aDogNnB4O1xcbiAgICBoZWlnaHQ6IDZweDtcXG4gICAgYmFja2dyb3VuZDogdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuLi8uLi8uLi9pY29ucy9zd2l0Y2gtb2ZmLnN2Z1wiKSkgKyBcIikgbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87IH1cXG4gIC5yYWRpby1idXR0b24gLm9uLXRleHQge1xcbiAgICBjb2xvcjogI2RjZGNkYTtcXG4gICAgdHJhbnNpdGlvbjogYWxsIC4zczsgfVxcbiAgLnJhZGlvLWJ1dHRvbiAub2ZmLXRleHQge1xcbiAgICBjb2xvcjogIzAwMDtcXG4gICAgdHJhbnNpdGlvbjogYWxsIC4zczsgfVxcbiAgLnJhZGlvLWJ1dHRvbi5vbjpob3ZlcjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDZweDtcXG4gICAgaGVpZ2h0OiA2cHg7XFxuICAgIGJhY2tncm91bmQ6IHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi4vLi4vLi4vaWNvbnMvc3dpdGNoLW9uLnN2Z1wiKSkgKyBcIikgbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG87IH1cXG4gIC5yYWRpby1idXR0b24ub24gLm9uLXRleHQge1xcbiAgICBjb2xvcjogIzAwMDsgfVxcbiAgLnJhZGlvLWJ1dHRvbi5vbiAub2ZmLXRleHQge1xcbiAgICBjb2xvcjogI2RjZGNkYTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5hbmltYXRpb25FbmQgPSBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gZXhwb3J0cy5hbmltYXRpb25OYW1lID0gZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gZXhwb3J0cy50cmFuc2Zvcm0gPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIHRyYW5zZm9ybSA9ICd0cmFuc2Zvcm0nO1xuZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG52YXIgcHJlZml4LCB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQ7XG52YXIgdHJhbnNpdGlvblByb3BlcnR5LCB0cmFuc2l0aW9uRHVyYXRpb24sIHRyYW5zaXRpb25UaW1pbmcsIHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZztcbmV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHk7XG52YXIgYW5pbWF0aW9uTmFtZSwgYW5pbWF0aW9uRHVyYXRpb24sIGFuaW1hdGlvblRpbWluZywgYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZztcbmV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbjtcbmV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWU7XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0ID0gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKTtcblxuICBwcmVmaXggPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQucHJlZml4O1xuICBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQ7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LmFuaW1hdGlvbkVuZDtcbiAgZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0gPSBwcmVmaXggKyBcIi1cIiArIHRyYW5zZm9ybTtcbiAgZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXByb3BlcnR5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZyA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGFuaW1hdGlvbk5hbWUgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tbmFtZVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tZGVsYXlcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICBlbmQ6IHRyYW5zaXRpb25FbmQsXG4gIHByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRpbWluZzogdHJhbnNpdGlvblRpbWluZyxcbiAgZGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHZhciB2ZW5kb3JNYXAgPSB7XG4gICAgTzogZnVuY3Rpb24gTyhlKSB7XG4gICAgICByZXR1cm4gXCJvXCIgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuIFwid2Via2l0XCIgKyBlO1xuICAgIH0sXG4gICAgbXM6IGZ1bmN0aW9uIG1zKGUpIHtcbiAgICAgIHJldHVybiBcIk1TXCIgKyBlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHZlbmRvcnMgPSBPYmplY3Qua2V5cyh2ZW5kb3JNYXApO1xuICB2YXIgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZlbmRvciA9IHZlbmRvcnNbaV07XG5cbiAgICBpZiAodmVuZG9yICsgXCJUcmFuc2l0aW9uUHJvcGVydHlcIiBpbiBzdHlsZSkge1xuICAgICAgcHJlZml4ID0gXCItXCIgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuICBpZiAoIWFuaW1hdGlvbkVuZCAmJiAnYW5pbWF0aW9uTmFtZScgaW4gc3R5bGUpIGFuaW1hdGlvbkVuZCA9ICdhbmltYXRpb25lbmQnO1xuICBzdHlsZSA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgYW5pbWF0aW9uRW5kOiBhbmltYXRpb25FbmQsXG4gICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgICBwcmVmaXg6IHByZWZpeFxuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubmFtZVNoYXBlID0gdW5kZWZpbmVkO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVGltZW91dCh0cmFuc2l0aW9uVHlwZSkge1xuICB2YXIgdGltZW91dFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGUgKyAnVGltZW91dCc7XG4gIHZhciBlbmFibGVkUHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpO1xuXG4gICAgICAgIC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHNbdGltZW91dFByb3BOYW1lXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIG5hbWVTaGFwZSA9IGV4cG9ydHMubmFtZVNoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBsZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgbGVhdmVBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXJBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59KV0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghKDAsIF9oYXNDbGFzcy5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2FkZENsYXNzID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MnKTtcblxudmFyIF9hZGRDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRDbGFzcyk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcycpO1xuXG52YXIgX3JlbW92ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbW92ZUNsYXNzKTtcblxudmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZScpO1xuXG52YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpO1xuXG52YXIgX3Byb3BlcnRpZXMgPSByZXF1aXJlKCdkb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMnKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vdXRpbHMvUHJvcFR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGV2ZW50cyA9IFtdO1xuaWYgKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpIGV2ZW50cy5wdXNoKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpO1xuaWYgKF9wcm9wZXJ0aWVzLmFuaW1hdGlvbkVuZCkgZXZlbnRzLnB1c2goX3Byb3BlcnRpZXMuYW5pbWF0aW9uRW5kKTtcblxuZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIobm9kZSwgbGlzdGVuZXIpIHtcbiAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldFRpbWVvdXQobGlzdGVuZXIsIDApO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWV2ZW50cy5sZW5ndGgpIHJldHVybjtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBuYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIC8vIE9uY2Ugd2UgcmVxdWlyZSB0aW1lb3V0cyB0byBiZSBzcGVjaWZpZWQsIHdlIGNhbiByZW1vdmUgdGhlXG4gIC8vIGJvb2xlYW4gZmxhZ3MgKGFwcGVhciBldGMuKSBhbmQganVzdCBhY2NlcHQgYSBudW1iZXJcbiAgLy8gb3IgYSBib29sIGZvciB0aGUgdGltZW91dCBmbGFncyAoYXBwZWFyVGltZW91dCBldGMuKVxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgbGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgYXBwZWFyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGVudGVyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGxlYXZlVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5cbnZhciBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29tcG9uZW50V2lsbEFwcGVhciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXBwZWFyKSB7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb24oJ2FwcGVhcicsIGRvbmUsIF90aGlzLnByb3BzLmFwcGVhclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxFbnRlciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZW50ZXIpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lLCBfdGhpcy5wcm9wcy5lbnRlclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxMZWF2ZSA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGVhdmUpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignbGVhdmUnLCBkb25lLCBfdGhpcy5wcm9wcy5sZWF2ZVRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZSA9IFtdO1xuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzID0gW107XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzLmZvckVhY2goZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uKGFuaW1hdGlvblR5cGUsIGZpbmlzaENhbGxiYWNrLCB0aW1lb3V0KSB7XG4gICAgdmFyIG5vZGUgPSAoMCwgX3JlYWN0RG9tLmZpbmRET01Ob2RlKSh0aGlzKTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgaWYgKGZpbmlzaENhbGxiYWNrKSB7XG4gICAgICAgIGZpbmlzaENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMubmFtZVthbmltYXRpb25UeXBlXSB8fCB0aGlzLnByb3BzLm5hbWUgKyAnLScgKyBhbmltYXRpb25UeXBlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSB0aGlzLnByb3BzLm5hbWVbYW5pbWF0aW9uVHlwZSArICdBY3RpdmUnXSB8fCBjbGFzc05hbWUgKyAnLWFjdGl2ZSc7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZlTGlzdGVuZXJzID0gdm9pZCAwO1xuXG4gICAgKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgIC8vIE5lZWQgdG8gZG8gdGhpcyB0byBhY3R1YWxseSB0cmlnZ2VyIGEgdHJhbnNpdGlvbi5cbiAgICB0aGlzLnF1ZXVlQ2xhc3NBbmROb2RlKGFjdGl2ZUNsYXNzTmFtZSwgbm9kZSk7XG5cbiAgICAvLyBDbGVhbi11cCB0aGUgYW5pbWF0aW9uIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXlcbiAgICB2YXIgZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKGUpIHtcbiAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBub2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lcnMpIHJlbW92ZUxpc3RlbmVycygpO1xuXG4gICAgICAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShub2RlLCBjbGFzc05hbWUpO1xuICAgICAgKDAsIF9yZW1vdmVDbGFzczIuZGVmYXVsdCkobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKHJlbW92ZUxpc3RlbmVycykgcmVtb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICAgIC8vIFVzdWFsbHkgdGhpcyBvcHRpb25hbCBjYWxsYmFjayBpcyB1c2VkIGZvciBpbmZvcm1pbmcgYW4gb3duZXIgb2ZcbiAgICAgIC8vIGEgbGVhdmUgYW5pbWF0aW9uIGFuZCB0ZWxsaW5nIGl0IHRvIHJlbW92ZSB0aGUgY2hpbGQuXG4gICAgICBpZiAoZmluaXNoQ2FsbGJhY2spIHtcbiAgICAgICAgZmluaXNoQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmaW5pc2gsIHRpbWVvdXQpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dHMucHVzaCh0aW1lcik7XG4gICAgfSBlbHNlIGlmIChfcHJvcGVydGllcy50cmFuc2l0aW9uRW5kKSB7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMgPSBhZGRFbmRMaXN0ZW5lcihub2RlLCBmaW5pc2gpO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUucXVldWVDbGFzc0FuZE5vZGUgPSBmdW5jdGlvbiBxdWV1ZUNsYXNzQW5kTm9kZShjbGFzc05hbWUsIG5vZGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLnB1c2goe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBub2RlOiBub2RlXG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMucmFmSGFuZGxlKSB7XG4gICAgICB0aGlzLnJhZkhhbmRsZSA9ICgwLCBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lMi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUgPSBmdW5jdGlvbiBmbHVzaENsYXNzTmFtZUFuZE5vZGVRdWV1ZSgpIHtcbiAgICBpZiAoIXRoaXMudW5tb3VudGVkKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgICAgICAvLyB3aGljaCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gdHJhbnNpdGlvbiBzdHlsZXMgd2hlbiBhZGRpbmcgYSBjbGFzcyBuYW1lLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAgICAgb2JqLm5vZGUuc2Nyb2xsVG9wO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShvYmoubm9kZSwgb2JqLmNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc05hbWVBbmROb2RlUXVldWUubGVuZ3RoID0gMDtcbiAgICB0aGlzLnJhZkhhbmRsZSA9IG51bGw7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIHByb3BzLm5hbWU7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuY2hpbGRyZW47XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbiksIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5kaXNwbGF5TmFtZSA9ICdDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCc7XG5cblxuQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENTU1RyYW5zaXRpb25Hcm91cENoaWxkO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Il0sInNvdXJjZVJvb3QiOiIifQ==