(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{Rf5Z:function(t,n,e){"use strict";e.r(n);var r=e("8RZD");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i={clear:function(){return""},history:function(){return""},echo:function(t,n,e,r){return r.fromPipe||r.restParams},man:{handler:function(t,n,e,i){var s=i.restParams;if(!n)return!1;if(!s)return Object(r.c)(n.man.doc);if(s&&n[s.trim()]){var u=n[s.trim()];return"object"===o(u)&&Object(r.c)(u.doc)||"没有帮助信息"}},doc:"\n            NAME\n                man -- display command's manual info.\n                \n            SYNOPSIS\n                man [ command name ]"},help:function(t,n){if(!n)return!1;var e;return"Available commands: \n"+Object.keys(n).sort().map((e="- ",function(t){return e+t})).join("\n")}},s=(Symbol(),Symbol(),function(t,n){n||(n={});var e={bools:{},strings:{},unknownFn:null};"function"==typeof n.unknown&&(e.unknownFn=n.unknown),"boolean"==typeof n.boolean&&n.boolean?e.allBools=!0:[].concat(n.boolean).filter(Boolean).forEach(function(t){e.bools[t]=!0});var r={};Object.keys(n.alias||{}).forEach(function(t){r[t]=[].concat(n.alias[t]),r[t].forEach(function(n){r[n]=[t].concat(r[t].filter(function(t){return n!==t}))})}),[].concat(n.string).filter(Boolean).forEach(function(t){e.strings[t]=!0,r[t]&&(e.strings[r[t]]=!0)});var o=n.default||{},i={_:[]};Object.keys(e.bools).forEach(function(t){c(t,void 0!==o[t]&&o[t])});var s=[];function c(t,n,o){if(!o||!e.unknownFn||function(t,n){return e.allBools&&/^--[^=]+$/.test(n)||e.strings[t]||e.bools[t]||r[t]}(t,o)||!1!==e.unknownFn(o)){var s=!e.strings[t]&&u(n)?Number(n):n;a(i,t.split("."),s),(r[t]||[]).forEach(function(t){a(i,t.split("."),s)})}}function a(t,n,r){var o=t;n.slice(0,-1).forEach(function(t){void 0===o[t]&&(o[t]={}),o=o[t]});var i=n[n.length-1];void 0===o[i]||e.bools[i]||"boolean"==typeof o[i]?o[i]=r:Array.isArray(o[i])?o[i].push(r):o[i]=[o[i],r]}function f(t){return r[t].some(function(t){return e.bools[t]})}-1!==t.indexOf("--")&&(s=t.slice(t.indexOf("--")+1),t=t.slice(0,t.indexOf("--")));for(var l=0;l<t.length;l++){var p=t[l];if(/^--.+=/.test(p)){var h=p.match(/^--([^=]+)=([\s\S]*)$/),d=h[1],b=h[2];e.bools[d]&&(b="false"!==b),c(d,b,p)}else if(/^--no-.+/.test(p)){c(p.match(/^--no-(.+)/)[1],!1,p)}else if(/^--.+/.test(p)){var y=p.match(/^--(.+)/)[1],v=t[l+1];void 0===v||/^-/.test(v)||e.bools[y]||e.allBools||r[y]&&f(y)?/^(true|false)$/.test(v)?(c(y,"true"===v,p),l++):c(y,!e.strings[y]||"",p):(c(y,v,p),l++)}else if(/^-[^-]+/.test(p)){for(var m=p.slice(1,-1).split(""),w=!1,g=0;g<m.length;g++){var _=p.slice(g+2);if("-"!==_){if(/[A-Za-z]/.test(m[g])&&/=/.test(_)){c(m[g],_.split("=")[1],p),w=!0;break}if(/[A-Za-z]/.test(m[g])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){c(m[g],_,p),w=!0;break}if(m[g+1]&&m[g+1].match(/\W/)){c(m[g],p.slice(g+2),p),w=!0;break}c(m[g],!e.strings[m[g]]||"",p)}else c(m[g],_,p)}var x=p.slice(-1)[0];w||"-"===x||(!t[l+1]||/^(-|--)[^-]/.test(t[l+1])||e.bools[x]||r[x]&&f(x)?t[l+1]&&/true|false/.test(t[l+1])?(c(x,"true"===t[l+1],p),l++):c(x,!e.strings[x]||"",p):(c(x,t[l+1],p),l++))}else if(e.unknownFn&&!1===e.unknownFn(p)||i._.push(e.strings._||!u(p)?p:Number(p)),n.stopEarly){i._.push.apply(i._,t.slice(l+1));break}}return Object.keys(o).forEach(function(t){var n,e,s;n=i,e=t.split("."),s=n,e.slice(0,-1).forEach(function(t){s=s[t]||{}}),e[e.length-1]in s||(a(i,t.split("."),o[t]),(r[t]||[]).forEach(function(n){a(i,n.split("."),o[t])}))}),n["--"]?(i["--"]=new Array,s.forEach(function(t){i["--"].push(t)})):s.forEach(function(t){i._.push(t)}),i});function u(t){return"number"==typeof t||(!!/^0x[0-9a-f]+$/i.test(t)||/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(t))}var c=function(t){var n=function(n){if(!n.trim())return{userInput:n,errorInfo:"空命令"};var e=n.trim().split(/\s+/),r=e[0];if(!r)return{userInput:n,errorInfo:"空命令"};var o=Object.keys(t),i=n.replace(r,"").trim();if(!o.includes(r))return{restParams:i,userInput:n,errorInfo:"".concat(r," 不是合法命令")};var u=t[r],c=e.slice(1),a={};try{a=s(c)}catch(t){return{restParams:i,userInput:n,errorInfo:t}}return{restParams:i,userInput:n,errorInfo:null,command:u,paramsObj:a}};return function(t){if(t.includes("|")){var e=t.split("|");return e.length<2?n(e[0]):{isMultiResult:!0,userInput:t,parsedResults:e.map(function(t){return n(t.trim())})}}return n(t)}},a=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown"],f={a:"a",enter:"Enter"},l='"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',p="12px",h="\n        @keyframes blink {\n          from {\n             background: #000;\n             color: #fff;\n          }\n\n          to {\n             background: none;\n             color: #000;\n          }\n        }\n        \n        .highlight {\n            color: #fff;\n            background: #000;\n        }\n        \n        .blink:not(.disabled) {\n          animation-duration: 1s;\n          animation-name: blink;\n          animation-iteration-count: infinite\n        }\n    ",d=e("mrSG");function b(t){return"function"==typeof t}var y=!1,v={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;y=t},get useDeprecatedSynchronousErrorHandling(){return y}};function m(t){setTimeout(function(){throw t},0)}var w={closed:!0,next:function(t){},error:function(t){if(v.useDeprecatedSynchronousErrorHandling)throw t;m(t)},complete:function(){}},g=Array.isArray||function(t){return t&&"number"==typeof t.length};function _(t){return null!==t&&"object"==typeof t}function x(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,n){return n+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}x.prototype=Object.create(Error.prototype);var S=x,E=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this._parentOrParents,r=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof t)e.remove(this);else if(null!==e)for(var i=0;i<e.length;++i){e[i].remove(this)}if(b(r))try{r.call(this)}catch(t){n=t instanceof S?O(t.errors):[t]}if(g(o)){i=-1;for(var s=o.length;++i<s;){var u=o[i];if(_(u))try{u.unsubscribe()}catch(t){n=n||[],t instanceof S?n=n.concat(O(t.errors)):n.push(t)}}}if(n)throw new S(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=e._parentOrParents;if(null===o)e._parentOrParents=this;else if(o instanceof t){if(o===this)return e;e._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return e;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[e]:i.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function O(t){return t.reduce(function(t,n){return t.concat(n instanceof S?n.errors:n)},[])}var j="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),k=function(t){function n(e,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=w;break;case 1:if(!e){i.destination=w;break}if("object"==typeof e){e instanceof n?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new I(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new I(i,e,r,o)}return i}return d.__extends(n,t),n.prototype[j]=function(){return this},n.create=function(t,e,r){var o=new n(t,e,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(E),I=function(t){function n(n,e,r,o){var i,s=t.call(this)||this;s._parentSubscriber=n;var u=s;return b(e)?i=e:e&&(i=e.next,r=e.error,o=e.complete,e!==w&&(b((u=Object.create(e)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=i,s._error=r,s._complete=o,s}return d.__extends(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=v.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):m(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;m(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};v.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),v.useDeprecatedSynchronousErrorHandling)throw t;m(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(m(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(k);var P="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function A(t){return t?1===t.length?t[0]:function(n){return t.reduce(function(t,n){return n(t)},n)}:T}var R=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,o=function(t,n,e){if(t){if(t instanceof k)return t;if(t[j])return t[j]()}return t||n||e?new k(t,n,e):new k(w)}(t,n,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||v.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),v.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,e=n.closed,r=n.destination,o=n.isStopped;if(e||o)return!1;t=r&&r instanceof k?r:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=N(n))(function(n,r){var o;o=e.subscribe(function(n){try{t(n)}catch(t){r(t),o&&o.unsubscribe()}},r,n)})},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[P]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:A(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=N(t))(function(t,e){var r;n.subscribe(function(t){return r=t},function(t){return e(t)},function(){return t(r)})})},t.create=function(n){return new t(n)},t}();function N(t){if(t||(t=v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function $(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}$.prototype=Object.create(Error.prototype);var L=$,M=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return d.__extends(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(E),C=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return d.__extends(n,t),n}(k),D=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return d.__extends(n,t),n.prototype[j]=function(){return new C(this)},n.prototype.lift=function(t){var n=new H(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new L;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].next(t)},n.prototype.error=function(t){if(this.closed)throw new L;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),o=0;o<e;o++)r[o].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new L;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new L;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new L;return this.hasError?(t.error(this.thrownError),E.EMPTY):this.isStopped?(t.complete(),E.EMPTY):(this.observers.push(t),new M(this,t))},n.prototype.asObservable=function(){var t=new R;return t.source=this,t},n.create=function(t,n){return new H(t,n)},n}(R),H=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return d.__extends(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):E.EMPTY},n}(D);function Y(t){return t&&"function"==typeof t.schedule}var F=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}};function V(t,n){return new R(function(e){var r=new E,o=0;return r.add(n.schedule(function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()})),r})}function z(t,n){return n?V(t,n):new R(F(t))}var B=function(t){function n(n,e,r){var o=t.call(this)||this;return o.parent=n,o.outerValue=e,o.outerIndex=r,o.index=0,o}return d.__extends(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(k);function U(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var q=U(),J=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Z(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var K=function(t){if(t&&"function"==typeof t[P])return r=t,function(t){var n=r[P]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(J(t))return F(t);if(Z(t))return e=t,function(t){return e.then(function(n){t.closed||(t.next(n),t.complete())},function(n){return t.error(n)}).then(null,m),t};if(t&&"function"==typeof t[q])return n=t,function(t){for(var e=n[q]();;){var r=e.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add(function(){e.return&&e.return()}),t};var n,e,r,o=_(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function G(t,n,e,r,o){if(void 0===o&&(o=new B(t,e,r)),!o.closed)return n instanceof R?n.subscribe(o):K(n)(o)}var W=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return d.__extends(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(k);function Q(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new X(t,n))}}var X=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new tt(t,this.project,this.thisArg))},t}(),tt=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.project=e,o.count=0,o.thisArg=r||o,o}return d.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(k);function nt(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[P]}(t))return function(t,n){return new R(function(e){var r=new E;return r.add(n.schedule(function(){var o=t[P]();r.add(o.subscribe({next:function(t){r.add(n.schedule(function(){return e.next(t)}))},error:function(t){r.add(n.schedule(function(){return e.error(t)}))},complete:function(){r.add(n.schedule(function(){return e.complete()}))}}))})),r})}(t,n);if(Z(t))return function(t,n){return new R(function(e){var r=new E;return r.add(n.schedule(function(){return t.then(function(t){r.add(n.schedule(function(){e.next(t),r.add(n.schedule(function(){return e.complete()}))}))},function(t){r.add(n.schedule(function(){return e.error(t)}))})})),r})}(t,n);if(J(t))return V(t,n);if(function(t){return t&&"function"==typeof t[q]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new R(function(e){var r,o=new E;return o.add(function(){r&&"function"==typeof r.return&&r.return()}),o.add(n.schedule(function(){r=t[q](),o.add(n.schedule(function(){if(!e.closed){var t,n;try{var o=r.next();t=o.value,n=o.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}}))})),o})}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function et(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(et(function(e,r){return(o=t(e,r),i?nt(o,i):o instanceof R?o:new R(K(o))).pipe(Q(function(t,o){return n(e,t,r,o)}));var o,i},e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new rt(t,e))})}var rt=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new ot(t,this.project,this.concurrent))},t}(),ot=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return d.__extends(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n,t,e)},n.prototype._innerSub=function(t,n,e){var r=new B(this,void 0,void 0);this.destination.add(r),G(this,t,n,e,r)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t,n,e,r,o){this.destination.next(n)},n.prototype.notifyComplete=function(t){var n=this.buffer;this.remove(t),this.active--,n.length>0?this._next(n.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(W);function it(t){return t}function st(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return Y(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof o&&(e=t.pop()),null===r&&1===t.length&&t[0]instanceof R?t[0]:function(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),et(it,t)}(e)(z(t,r))}var ut=new D,ct=function(t){return function(n){ut.next({input:t,output:n})}},at={in:function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal;if(n)if(n.isMultiResult)!function(t){var n=t.parsedResult,e=t.cmdSet,o=t.$terminal,i=n.userInput;ut.next({input:i,loading:!0,output:""}),Object(r.s)(n.parsedResults.map(function(t){return function(n){if(t.errorInfo)throw t.errorInfo;var r=t.command.handler||t.command;return t.fromPipe=n,r(t.paramsObj,e,o,t)}})).then(function(t){ut.next({output:t,input:i})}).catch(ct(i))}({parsedResult:n,cmdSet:e,$terminal:o});else{var i=n.userInput;if(n.errorInfo)ut.next({input:i,output:n.errorInfo});else{var s=n.command.handler||n.command,u="";try{u=s(n.paramsObj,e,o,n)}catch(t){return void ct(i)(t)}"string"!=typeof u?(ut.next({input:i,loading:!0,output:""}),Promise.resolve(u).then(function(t){ut.next({output:t,input:i})}).catch(ct(i))):ut.next({input:i,output:u})}}else ut.next(null)},out$:ut};function ft(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new lt(t,n,e))}}var lt=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new pt(t,this.accumulator,this.seed,this.hasSeed))},t}(),pt=function(t){function n(n,e,r,o){var i=t.call(this,n)||this;return i.accumulator=e,i._seed=r,i.hasSeed=o,i.index=0,i}return d.__extends(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(k);function ht(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new dt(r,e))}}var dt=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new bt(t,this.observables,this.project))},t}(),bt=function(t){function n(n,e,r){var o=t.call(this,n)||this;o.observables=e,o.project=r,o.toRespond=[];var i=e.length;o.values=new Array(i);for(var s=0;s<i;s++)o.toRespond.push(s);for(s=0;s<i;s++){var u=e[s];o.add(G(o,u,u,s))}return o}return d.__extends(n,t),n.prototype.notifyNext=function(t,n,e,r,o){this.values[e]=n;var i=this.toRespond;if(i.length>0){var s=i.indexOf(e);-1!==s&&i.splice(s,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(W);function yt(t,n){return function(e){return e.lift(new vt(t,n))}}var vt=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new mt(t,this.predicate,this.thisArg))},t}(),mt=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.count=0,o}return d.__extends(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(k);Object.prototype.toString;function wt(t,n,e,r){return b(e)&&(r=e,e=void 0),r?wt(t,n,e).pipe(Q(function(t){return g(t)?r.apply(void 0,t):r(t)})):new R(function(r){!function t(n,e,r,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var u=n;n.addEventListener(e,r,i),s=function(){return u.removeEventListener(e,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(e,r),s=function(){return c.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var a=n;n.addListener(e,r),s=function(){return a.removeListener(e,r)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,l=n.length;f<l;f++)t(n[f],e,r,o,i)}o.add(s)}(t,n,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,e)})}var gt=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return d.__extends(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new L;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(D),_t={};var xt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new St(t,this.resultSelector))},t}(),St=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return d.__extends(n,t),n.prototype._next=function(t){this.values.push(_t),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(G(this,r,r,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e,r,o){var i=this.values,s=i[e],u=this.toRespond?s===_t?--this.toRespond:this.toRespond:0;i[e]=n,0===u&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(W);function Et(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Q(function(t,n){return function(e){for(var r=e,o=0;o<n;o++){var i=r[t[o]];if(void 0===i)return;r=i}return r}}(t,e))(n)}}var Ot=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new jt(t,this.compare,this.keySelector))},t}(),jt=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.keySelector=r,o.hasKey=!1,"function"==typeof e&&(o.compare=e),o}return d.__extends(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(k),kt=function(t,n){var e=t.getBoundingClientRect(),r=e.left,o=e.top;n.style.left="".concat(r,"px"),n.style.top="".concat(o,"px")},It=function(t,n){return kt(t,n),function(e){kt(t,n);var r=e.start!==e.end,o=""===e.inputStr,i=e.inputStr.split("").map(function(t){return" "===t?"&nbsp;":t});r&&!o||i.push("&nbsp;"),t.innerHTML=i.map(function(t,n){return function(t){for(var n=arguments.length,e=new Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return'<span class="'.concat(e.join(" "),'">').concat(t,"</span>")}(t,(i=n,o?"blink":r&&i>=e.start&&i<=e.end?"highlight":i===e.start?"blink":""));var i}).join("")}};function Pt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function Tt(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(e.push(s.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var At=function(t){if(!t)throw"Input wrapper element missing.";var n,e=((n=document.createElement("input")).style.height="20px",n.style.position="fixed",n.style.zIndex="-1",n.style.outline="none",n.style.border="none",n.style.top="0",n.style.left="0",n.style.opacity="0",screen.width<500&&(n.style.transform="scale(0)"),n.style.color="transparent",n.setAttribute("autocomplete","off"),n.onblur=function(){setTimeout(function(){n.focus()})},n);document.body.appendChild(e),e.focus(),function(t,n){Object(r.n)(h),t.style.fontFamily=l,t.style.fontSize=p,t.style.wordBreak="break-all",It(t,n)({inputStr:"",start:0,end:0})}(t,e);var o=wt(e,"input"),i=wt(e,"select"),s=wt(e,"keyup"),u=new gt("");o.pipe(Et("target","value")).subscribe(function(t){return u.next(t)});var c,d,b=s.pipe(yt(function(t){return a.includes(t.key)})),y=s.pipe(yt(function(t){return t.key===f.enter}),yt(function(t){return!t.target.disabled}),ht(u),Q(function(t){var n=Tt(t,2);n[0];return n[1]}),yt(function(t){return!!t})),v=st(o,b,i).pipe(Q(function(t){return{start:t.target.selectionStart,end:t.target.selectionEnd}})),m=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null,r=null;return Y(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&g(t[0])&&(t=t[0]),z(t,r).lift(new xt(e))}(u,v).pipe(Q(function(t){var n=Tt(t,2);return function(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.forEach(function(n){Pt(t,n,e[n])})}return t}({inputStr:n[0]},n[1])}),(c=function(t,n){return JSON.stringify(t)===JSON.stringify(n)},function(t){return t.lift(new Ot(c,d))})),w=It(t,e);return m.subscribe(w),{enter$:y,input$:o,get target(){return e},set value(n){e.value=n,u.next(n),""===n&&kt(t,e),Object(r.y)(e,a[0])},set disabled(t){var n=document.querySelector(".blink");t?(e.setAttribute("disabled",!0),n.classList.add("disabled")):(n.classList.remove("disabled"),e.removeAttribute("disabled"),e.focus())}}};function Rt(t){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Nt=Object(r.r)(),$t=function(t){var n,e,r=t.input,o=t.output;if("string"==typeof o)n=o;else if("object"===Rt(o))try{n=o.html||JSON.stringify(o),o.html&&(e=!0)}catch(t){e=!1,n="ERROR: 不支持的显示类型"}else n=void 0===o?"":"ERROR: 不支持的显示类型";if(o instanceof Error){var i=o.message,s=o.stack;n="".concat(i,"\n\n").concat(s)}var u=e?n:"<pre>".concat(n||"","</pre>");return'<div class="session">\n            <div class="input">\n                <span class="prompt">$</span>\n                <span class="cmd">\n                    '.concat(r||"",'\n                </span>\n            </div>\n            <div class="output">\n                ').concat(u,"\n            </div>\n        </div>")},Lt=function(t){var n=document.querySelector("#hist-sess"),e=document.querySelector("#curr-sess"),o=Object(r.k)(t),i=o&&o.loading;if(t.length<1)n.innerHTML="";else{n.innerHTML=t.map($t).join("");var s=n.querySelector(".session:last-child > .output");i?(Nt(!0,s),e.style.display="none"):(Nt(!1),e.style.display="block")}},Mt=function(t){Object(r.n)("\n    .session > .input {line-height: 1.2}\n    ::-webkit-scrollbar {\n        width: 2pt\n    }\n    \n    ::-webkit-scrollbar:horizontal {\n        height: 0\n    }\n\n    ::-webkit-scrollbar-button {\n        display: none\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: #d0d0d0\n    }\n"),t.innerHTML='\n        <div>\n            <div id="hist-sess"></div> \n            <div id="curr-sess">\n                <div class="session">\n                    <div class="input">\n                        <span class="prompt">$</span>\n                        <span class="cmd" id="input"></span>\n                    </div>\n                </div>\n            </div> \n        </div>';var n=t.firstElementChild,e=document.querySelector("#input"),o=At(e);return n.style.height="calc(100% - 10px)",n.style.overflow="auto",n.style.fontFamily=l,n.style.fontSize=p,n.addEventListener("click",function(t){var n=o.target.getBoundingClientRect().top;(t.clientY>n||Math.abs(t.clientY-n)<14)&&o.target.focus()},{capture:!1}),{$terminal:n,input:o}};function Ct(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Dt=[],Ht=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0;switch(n){case"clear":return Dt=[].concat(Ct(Dt),Ct(t),[{input:"clear",output:""}]),[];case"history":var o=[].concat(Ct(Dt),Ct(t)),i=o.map(function(t,n){return Object(r.e)(" ")(n+1,o.length+1)+". "+t.input}).join("\n");return t.push({input:e,output:i}),t;default:return t}};function Yt(t,n,e,r,o,i,s){try{var u=t[i](s),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,o)}function Ft(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,o=!1,i=void 0;try{for(var s,u=t[Symbol.iterator]();!(r=(s=u.next()).done)&&(e.push(s.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Vt(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.forEach(function(n){zt(t,n,e[n])})}return t}function zt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function Bt(t){if(!t)throw"wrapper element not found";var n=Mt(t),e=n.$terminal,o=n.input,s=new D,u=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Y(e)?(t.pop(),V(t,e)):z(t)}(i),a=st(s,u).pipe(ft(function(t,n){return Vt({},n,t)},{}),Q(function(t){return Vt({},t,i)})),l=o.enter$.pipe(ht(a),Q(function(t){var n=Ft(t,2),r=n[0],o=n[1];return{parsedResult:c(o)(r),cmdSet:o,$terminal:e}}),Q(at.in)).subscribe(function(){o.target.blur()}),p=at.out$.pipe(yt(function(t){return t}),ft(function(t,n){var e=n?n.input.trim().split(/\s+/)[0]:"";if(n&&function(t){var n=Object.keys(i).includes(t);if(!n)return!1;var e=i[t].handler||i[t];try{return n=""===e()}catch(t){return!1}}(e))return Ht(t&&t.slice(),e,n.input);var r=t.slice().pop();return r&&r.loading&&t.pop(),t.push(n),t},[])).subscribe(function(t){var n=Object(r.k)(t);Lt(t),Object(r.v)(e),o.disabled=n&&n.loading,o.value=""});o.input$.subscribe(function(){Object(r.v)(e)});var h=function(){var t,n=(t=regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return Object(r.v)(e),t.next=3,Object(r.m)(n,function(t){return o.value=t},50);case 3:return t.abrupt("return",new Promise(function(t,e){at.out$.pipe(yt(function(t){return t}),yt(function(t){return!0!==t.loading})).subscribe(function(e){e.input===n&&t()}),Object(r.y)(o.target,f.enter)}));case 4:case"end":return t.stop()}},t)}),function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function s(t){Yt(i,r,o,s,u,"next",t)}function u(t){Yt(i,r,o,s,u,"throw",t)}s(void 0)})});return function(t){return n.apply(this,arguments)}}();return{set disabled(t){o.disabled=t},set commands(t){s.next(t)},set currentInput(t){o.value=t},destroy:function(){p.unsubscribe(),l.unsubscribe(),e.remove(),o.target.remove()},addCommands:function(t){s.next(t)},input:function(t,n){if(n)return Object(r.m)(t,function(t){o.value=t});o.value=t},humanizerExec:h,humanizerExecCmdArr:function(t){var n=t.map(function(t){return function(){return h(t)}});return Object(r.s)(n)},exec:function(t){o.value=t,Object(r.y)(o.target,f.enter)}}}e.d(n,"default",function(){return Bt})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,